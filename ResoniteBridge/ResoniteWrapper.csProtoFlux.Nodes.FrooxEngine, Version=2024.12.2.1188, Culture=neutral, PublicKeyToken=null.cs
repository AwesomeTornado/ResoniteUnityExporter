using ResoniteBridge;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Elements.Assets;
using Elements.Core;
using FrooxEngine;
using FrooxEngine.CommonAvatar;
using FrooxEngine.ProtoFlux;
using FrooxEngine.Undo;
using Microsoft.CodeAnalysis;
using ProtoFlux.Core;
using ProtoFlux.Runtimes.Execution.Nodes.Actions;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Assets;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Avatar.BodyNodes;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Cloud;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Controllers;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Mouse;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tools;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Nodes;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Operators;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Playback;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Rendering;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Slots;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Time;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Utility;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Variables;
using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Worlds;
using ProtoFlux.Runtimes.Execution.Nodes.Math;
using ProtoFlux.Runtimes.Execution.Nodes.Math.Random;
using ProtoFlux.Runtimes.Execution.Nodes.Operators;
using ProtoFlux.Runtimes.Execution.Nodes.Strings;
using ProtoFlux.Runtimes.Execution.Nodes.Strings.Characters;
using SkyFrost.Base;
using TwitchLib.Client.Enums;
using TwitchLib.Client.Events;
using TwitchLib.Client.Models;
using TwitchLib.PubSub.Events;

namespace Microsoft.CodeAnalysis
{
}
namespace System.Runtime.CompilerServices
{
}
namespace ProtoFlux.Nodes.FrooxEngine
{
	public static class ProtoFluxMapper
	{
		public static SortedDictionary<string, ProtoFluxTypeMapping> genericMappings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ProtoFluxMapper", ResoniteBridge.ResoniteBridgeValueType.Type), "genericMappings"), typeof(SortedDictionary<string, ProtoFluxTypeMapping>)) is SortedDictionary<string, ProtoFluxTypeMapping> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SortedDictionary<string, ProtoFluxTypeMapping>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ProtoFluxMapper", ResoniteBridge.ResoniteBridgeValueType.Type), "genericMappings", value);
			}
		}

		public static void Initialize()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ProtoFluxMapper", ResoniteBridge.ResoniteBridgeValueType.Type), "Initialize");
		}

		public static ProtoFluxTypeMapping MapNode(System.String name, System.String @namespace)
		{
			return (ProtoFluxTypeMapping)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ProtoFluxMapper", ResoniteBridge.ResoniteBridgeValueType.Type), "MapNode", name, @namespace), typeof(ProtoFluxTypeMapping));
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes
{
	[NodeOverload("Engine.InputDisplay")]
	public class ValueDisplay<T> : ExternalValueDisplay<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public static System.Boolean IsValidGenericType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ValueDisplay", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ValueDisplay(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ValueDisplay()
		{
		}
	}
	[NodeOverload("Engine.InputDisplay")]
	public class GenericValueDisplay<T> : ExternalValueDisplay<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GenericValueDisplay(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GenericValueDisplay()
		{
		}
	}
	[NodeOverload("Engine.InputDisplay")]
	public class ObjectDisplay<T> : ExternalObjectDisplay<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ObjectDisplay(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ObjectDisplay()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math
{
	[NodeCategory("Math/Interpolation")]
	[ContinuouslyChanging]
	public abstract class SmoothLerpBase<T> : ValueFunctionUpdateBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Input
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Input"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Input", value);
			}
		}

		public ValueInput<float> Speed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Speed"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Speed", value);
			}
		}

		public ValueStore<bool> _initialized
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_initialized"), typeof(ValueStore<bool>)) is ValueStore<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_initialized", value);
			}
		}

		public ValueStore<T> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ValueStore<T>)) is ValueStore<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ValueStore<T> _intermediate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_intermediate"), typeof(ValueStore<T>)) is ValueStore<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_intermediate", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunUpdate", context);
		}

		public override void OnAddedToScope(FrooxEngineContext context, NodeContextPath path)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAddedToScope", context, path);
		}

		public abstract T Lerp(ref T current, ref T target, ref T intermediate, System.Single delta);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SmoothLerpBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SmoothLerpBase()
		{
		}
	}
	[NodeName("Smooth Lerp", false)]
	[NodeOverload("Engine.Math.SmoothLerp")]
	public class ValueSmoothLerp<T> : SmoothLerpBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public static System.Boolean IsValidGenericType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ValueSmoothLerp", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override T Lerp(ref T current, ref T target, ref T intermediate, System.Single delta)
		{
			T __finalResult = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Lerp", out ResoniteBridge.ResoniteBridgeValue[] __outVars, current, target, intermediate, delta), typeof(T));
			current = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[0], typeof(T));
			target = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[1], typeof(T));
			intermediate = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[2], typeof(T));
			return __finalResult;
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ValueSmoothLerp(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ValueSmoothLerp()
		{
		}
	}
	[NodeName("Smooth Slerp", false)]
	[NodeOverload("Engine.Math.SmoothSlerp")]
	public class SmoothSlerp_floatQ : SmoothLerpBase<floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override floatQ Lerp(ref floatQ current, ref floatQ target, ref floatQ intermediate, System.Single delta)
		{
			floatQ __finalResult = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Lerp", out ResoniteBridge.ResoniteBridgeValue[] __outVars, current, target, intermediate, delta), typeof(floatQ));
			current = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[0], typeof(floatQ));
			target = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[1], typeof(floatQ));
			intermediate = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[2], typeof(floatQ));
			return __finalResult;
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SmoothSlerp_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SmoothSlerp_floatQ()
		{
		}
	}
	[NodeName("Smooth Slerp", false)]
	[NodeOverload("Engine.Math.SmoothSlerp")]
	public class SmoothSlerp_doubleQ : SmoothLerpBase<doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override doubleQ Lerp(ref doubleQ current, ref doubleQ target, ref doubleQ intermediate, System.Single delta)
		{
			doubleQ __finalResult = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Lerp", out ResoniteBridge.ResoniteBridgeValue[] __outVars, current, target, intermediate, delta), typeof(doubleQ));
			current = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[0], typeof(doubleQ));
			target = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[1], typeof(doubleQ));
			intermediate = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[2], typeof(doubleQ));
			return __finalResult;
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SmoothSlerp_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SmoothSlerp_doubleQ()
		{
		}
	}
	[ContinuouslyChanging]
	public abstract class ConstantLerpBase<T> : ValueFunctionUpdateBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Input
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Input"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Input", value);
			}
		}

		public ValueInput<float> Speed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Speed"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Speed", value);
			}
		}

		public ValueStore<bool> _initialized
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_initialized"), typeof(ValueStore<bool>)) is ValueStore<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_initialized", value);
			}
		}

		public ValueStore<T> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ValueStore<T>)) is ValueStore<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunUpdate", context);
		}

		public abstract T Lerp(ref T current, ref T target, System.Single delta);

		public override void OnAddedToScope(FrooxEngineContext context, NodeContextPath path)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAddedToScope", context, path);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ConstantLerpBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ConstantLerpBase()
		{
		}
	}
	[NodeName("Constant Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Engine.Math.ConstantLerp")]
	public class ValueConstantLerp<T> : ConstantLerpBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public static System.Boolean IsValidGenericType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ValueConstantLerp", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override T Lerp(ref T current, ref T target, System.Single delta)
		{
			T __finalResult = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Lerp", out ResoniteBridge.ResoniteBridgeValue[] __outVars, current, target, delta), typeof(T));
			current = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[0], typeof(T));
			target = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[1], typeof(T));
			return __finalResult;
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ValueConstantLerp(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ValueConstantLerp()
		{
		}
	}
	[NodeName("Constant Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Engine.Math.ConstantSlerp")]
	public class ConstantSlerp_floatQ : ConstantLerpBase<floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override floatQ Lerp(ref floatQ current, ref floatQ target, System.Single delta)
		{
			floatQ __finalResult = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Lerp", out ResoniteBridge.ResoniteBridgeValue[] __outVars, current, target, delta), typeof(floatQ));
			current = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[0], typeof(floatQ));
			target = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[1], typeof(floatQ));
			return __finalResult;
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ConstantSlerp_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ConstantSlerp_floatQ()
		{
		}
	}
	[NodeName("Constant Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Engine.Math.ConstantSlerp")]
	public class ConstantSlerp_doubleQ : ConstantLerpBase<doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override doubleQ Lerp(ref doubleQ current, ref doubleQ target, System.Single delta)
		{
			doubleQ __finalResult = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Lerp", out ResoniteBridge.ResoniteBridgeValue[] __outVars, current, target, delta), typeof(doubleQ));
			current = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[0], typeof(doubleQ));
			target = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[1], typeof(doubleQ));
			return __finalResult;
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ConstantSlerp_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ConstantSlerp_doubleQ()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Bounds
{
	[NodeCategory("Transform/Bounds")]
	[ContinuouslyChanging]
	public class TransformBounds : ValueFunctionNode<FrooxEngineContext, BoundingBox>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<BoundingBox> Bounds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Bounds"), typeof(ValueArgument<BoundingBox>)) is ValueArgument<BoundingBox> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<BoundingBox>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Bounds", value);
			}
		}

		public ObjectArgument<Slot> SourceSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SourceSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SourceSpace", value);
			}
		}

		public ObjectArgument<Slot> TargetSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TargetSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TargetSpace", value);
			}
		}

		public override BoundingBox Compute(FrooxEngineContext context)
		{
			return (BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(BoundingBox));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TransformBounds(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TransformBounds()
		{
		}
	}
	[NodeCategory("Transform/Bounds")]
	[ContinuouslyChanging]
	public class ComputeBoundingBox : ValueFunctionNode<FrooxEngineContext, BoundingBox>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<bool> IncludeInactive
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IncludeInactive"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IncludeInactive", value);
			}
		}

		public ObjectArgument<Slot> CoordinateSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CoordinateSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CoordinateSpace", value);
			}
		}

		public ObjectArgument<string> OnlyWithTag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyWithTag"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyWithTag", value);
			}
		}

		public override BoundingBox Compute(FrooxEngineContext context)
		{
			return (BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(BoundingBox));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ComputeBoundingBox(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ComputeBoundingBox()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Worlds
{
	[NodeCategory("World")]
	public abstract class WorldURLActionNode : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<System.Uri> URL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "URL"), typeof(ObjectInput<System.Uri>)) is ObjectInput<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "URL", value);
			}
		}

		public ObjectInput<IWorldLink> WorldLink
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "WorldLink"), typeof(ObjectInput<IWorldLink>)) is ObjectInput<IWorldLink> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IWorldLink>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "WorldLink", value);
			}
		}

		public ObjectStore<System.Uri> previousURL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "previousURL"), typeof(ObjectStore<System.Uri>)) is ObjectStore<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "previousURL", value);
			}
		}

		public ObjectStore<IWorldLink> previousWorldLink
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "previousWorldLink"), typeof(ObjectStore<IWorldLink>)) is ObjectStore<IWorldLink> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<IWorldLink>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "previousWorldLink", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public abstract Task<IOperation> RunWorldAction(FrooxEngineContext context, System.Uri url, IWorldLink worldLink);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldURLActionNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldURLActionNode()
		{
		}
	}
	public class OpenWorld : WorldURLActionNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<Userspace.WorldRelation> Relation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Relation"), typeof(ValueInput<Userspace.WorldRelation>)) is ValueInput<Userspace.WorldRelation> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<Userspace.WorldRelation>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Relation", value);
			}
		}

		public ValueInput<bool> GetExisting
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetExisting"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetExisting", value);
			}
		}

		public ValueInput<bool> LoadingIndicator
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LoadingIndicator"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LoadingIndicator", value);
			}
		}

		public ValueInput<bool> AutoFocus
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AutoFocus"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AutoFocus", value);
			}
		}

		public ValueInput<bool> MakePrivate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MakePrivate"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MakePrivate", value);
			}
		}

		public ObjectOutput<string> SessionID
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SessionID"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SessionID", value);
			}
		}

		public ObjectOutput<System.Uri> SessionURL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SessionURL"), typeof(ObjectOutput<System.Uri>)) is ObjectOutput<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SessionURL", value);
			}
		}

		public AsyncCall OnOpenStart
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnOpenStart"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnOpenStart", value);
			}
		}

		public AsyncCall OnOpenDone
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnOpenDone"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnOpenDone", value);
			}
		}

		public Continuation OnWorldReady
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnWorldReady"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnWorldReady", value);
			}
		}

		public Continuation OnOpenFail
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnOpenFail"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnOpenFail", value);
			}
		}

		public static Userspace.WorldRelation RelationDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "OpenWorld", ResoniteBridge.ResoniteBridgeValueType.Type), "RelationDefault"), typeof(Userspace.WorldRelation)) is Userspace.WorldRelation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Userspace.WorldRelation");
				}
			}
		}

		public override Task<IOperation> RunWorldAction(FrooxEngineContext context, System.Uri url, IWorldLink worldLink)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunWorldAction", context, url, worldLink), typeof(Task<IOperation>));
		}

		public OpenWorld()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "OpenWorld", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OpenWorld(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class FocusWorld : WorldURLActionNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<bool> CloseCurrent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CloseCurrent"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CloseCurrent", value);
			}
		}

		public Continuation OnNotFound
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnNotFound"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnNotFound", value);
			}
		}

		public AsyncCall OnFocused
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFocused"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFocused", value);
			}
		}

		public override Task<IOperation> RunWorldAction(FrooxEngineContext context, System.Uri url, IWorldLink worldLink)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunWorldAction", context, url, worldLink), typeof(Task<IOperation>));
		}

		public static System.Boolean IsAllowedToFocus(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "FocusWorld", ResoniteBridge.ResoniteBridgeValueType.Type), "IsAllowedToFocus", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FocusWorld(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FocusWorld()
		{
		}
	}
	[NodeCategory("World")]
	public class WorldSaved : ProxyVoidNode<FrooxEngineContext, WorldSaved.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action OnSaved
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSaved"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSaved", value);
				}
			}

			public override void OnWorldSaved()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnWorldSaved");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call OnSaved
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSaved"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSaved", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, eventData);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldSaved(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldSaved()
		{
		}
	}
	[NodeCategory("World")]
	public class UserJoined : ProxyVoidNode<FrooxEngineContext, UserJoined.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action<global::FrooxEngine.User> Joined
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Joined"), typeof(Action<global::FrooxEngine.User>)) is Action<global::FrooxEngine.User> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action<global::FrooxEngine.User>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Joined", value);
				}
			}

			public List<global::FrooxEngine.User> QueuedEvents
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "QueuedEvents"), typeof(List<global::FrooxEngine.User>)) is List<global::FrooxEngine.User> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to List<global::FrooxEngine.User>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "QueuedEvents", value);
				}
			}

			public override void OnUserJoined(global::FrooxEngine.User user)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnUserJoined", user);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyHost"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyHost", value);
			}
		}

		public Call OnJoined
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnJoined"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnJoined", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.User> JoinedUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JoinedUser"), typeof(ObjectOutput<global::FrooxEngine.User>)) is ObjectOutput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JoinedUser", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object user)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, user);
		}

		public UserJoined()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "UserJoined", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserJoined(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("World")]
	public class UserLeft : ProxyVoidNode<FrooxEngineContext, UserLeft.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action<global::FrooxEngine.User> Left
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Left"), typeof(Action<global::FrooxEngine.User>)) is Action<global::FrooxEngine.User> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action<global::FrooxEngine.User>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Left", value);
				}
			}

			public override void OnUserLeft(global::FrooxEngine.User user)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnUserLeft", user);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyHost"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyHost", value);
			}
		}

		public Call OnLeft
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnLeft"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnLeft", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.User> LeftUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LeftUser"), typeof(ObjectOutput<global::FrooxEngine.User>)) is ObjectOutput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LeftUser", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object user)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, user);
		}

		public UserLeft()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "UserLeft", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserLeft(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("World")]
	public class UserSpawn : ProxyVoidNode<FrooxEngineContext, UserSpawn.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action<global::FrooxEngine.User> Spawn
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Spawn"), typeof(Action<global::FrooxEngine.User>)) is Action<global::FrooxEngine.User> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action<global::FrooxEngine.User>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Spawn", value);
				}
			}

			public List<global::FrooxEngine.User> QueuedEvents
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "QueuedEvents"), typeof(List<global::FrooxEngine.User>)) is List<global::FrooxEngine.User> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to List<global::FrooxEngine.User>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "QueuedEvents", value);
				}
			}

			public override void OnUserSpawn(global::FrooxEngine.User user)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnUserSpawn", user);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyHost"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyHost", value);
			}
		}

		public Call OnSpawn
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSpawn"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSpawn", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.User> SpawnedUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SpawnedUser"), typeof(ObjectOutput<global::FrooxEngine.User>)) is ObjectOutput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SpawnedUser", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object user)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, user);
		}

		public UserSpawn()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "UserSpawn", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserSpawn(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldName : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldName(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldName()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldDescription : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldDescription(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldDescription()
		{
		}
	}
	[NodeCategory("World/Info")]
	public class WorldSessionID : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldSessionID(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldSessionID()
		{
		}
	}
	[NodeCategory("World/Info")]
	public class WorldSessionURL : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldSessionURL(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldSessionURL()
		{
		}
	}
	[NodeCategory("World/Info")]
	public class WorldSessionWebURL : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldSessionWebURL(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldSessionWebURL()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldMobileFriendly : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldMobileFriendly(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldMobileFriendly()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldMaxUsers : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldMaxUsers(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldMaxUsers()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldUserCount : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldUserCount(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldUserCount()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldActiveUserCount : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldActiveUserCount(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldActiveUserCount()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldAccessLevel : ValueFunctionNode<FrooxEngineContext, SessionAccessLevel>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override SessionAccessLevel Compute(FrooxEngineContext context)
		{
			return (SessionAccessLevel)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(SessionAccessLevel));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldAccessLevel(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldAccessLevel()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldHideFromListing : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldHideFromListing(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldHideFromListing()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldAwayKickEnabled : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldAwayKickEnabled(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldAwayKickEnabled()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldAwayKickMinutes : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldAwayKickMinutes(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldAwayKickMinutes()
		{
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldAwayKickInterval : ValueFunctionNode<FrooxEngineContext, TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override TimeSpan Compute(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldAwayKickInterval(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldAwayKickInterval()
		{
		}
	}
	[NodeCategory("World/Info")]
	public class WorldWebURL : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldWebURL(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldWebURL()
		{
		}
	}
	[NodeCategory("World/Info")]
	public class WorldRecordURL : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldRecordURL(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldRecordURL()
		{
		}
	}
	[NodeCategory("World/Info")]
	public class WorldPath : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldPath(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldPath()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Transform
{
	[NodeCategory("Transform")]
	public class GlobalTransform : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueOutput<float3> GlobalPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlobalPosition"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlobalPosition", value);
			}
		}

		public ValueOutput<floatQ> GlobalRotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlobalRotation"), typeof(ValueOutput<floatQ>)) is ValueOutput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlobalRotation", value);
			}
		}

		public ValueOutput<float3> GlobalScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlobalScale"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlobalScale", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public GlobalTransform()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "GlobalTransform", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlobalTransform(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class LocalTransform : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueOutput<float3> LocalPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalPosition"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalPosition", value);
			}
		}

		public ValueOutput<floatQ> LocalRotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalRotation"), typeof(ValueOutput<floatQ>)) is ValueOutput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalRotation", value);
			}
		}

		public ValueOutput<float3> LocalScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalScale"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalScale", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public LocalTransform()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalTransform", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalTransform(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetForward : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetForward(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetForward()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetUp : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetUp(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetUp()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetRight : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetRight(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetRight()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetBackward : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetBackward(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetBackward()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetDown : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetDown(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetDown()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetLeft : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetLeft(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetLeft()
		{
		}
	}
	public abstract class TransformSetter : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public static floatQ RotationDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TransformSetter", ResoniteBridge.ResoniteBridgeValueType.Type), "RotationDefault"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
		}

		public static float3 ScaleDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TransformSetter", ResoniteBridge.ResoniteBridgeValueType.Type), "ScaleDefault"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public abstract void Set(Slot instance, FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TransformSetter(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TransformSetter()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalPositionRotation : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetGlobalPositionRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetGlobalPositionRotation()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalTransform : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public ValueInput<float3> Scale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scale"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scale", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetGlobalTransform(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetGlobalTransform()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalTransformMatrix : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float4x4> Matrix
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Matrix"), typeof(ValueInput<float4x4>)) is ValueInput<float4x4> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float4x4>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Matrix", value);
			}
		}

		public static float4x4 MatrixDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "SetGlobalTransformMatrix", ResoniteBridge.ResoniteBridgeValueType.Type), "MatrixDefault"), typeof(float4x4)) is float4x4 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float4x4");
				}
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetGlobalTransformMatrix(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetGlobalTransformMatrix()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalPosition : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetGlobalPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetGlobalPosition()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalRotation : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetGlobalRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetGlobalRotation()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalScale : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Scale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scale"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scale", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetGlobalScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetGlobalScale()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalPositionRotation : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetLocalPositionRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetLocalPositionRotation()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalTransform : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public ValueInput<float3> Scale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scale"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scale", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetLocalTransform(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetLocalTransform()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetTRS : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float4x4> TRS
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TRS"), typeof(ValueInput<float4x4>)) is ValueInput<float4x4> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float4x4>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TRS", value);
			}
		}

		public static float4x4 TRSDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "SetTRS", ResoniteBridge.ResoniteBridgeValueType.Type), "TRSDefault"), typeof(float4x4)) is float4x4 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float4x4");
				}
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetTRS(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetTRS()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalPosition : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetLocalPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetLocalPosition()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalRotation : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetLocalRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetLocalRotation()
		{
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalScale : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Scale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scale"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scale", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetLocalScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetLocalScale()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetForward : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Forward
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Forward"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Forward", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetForward(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetForward()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetUp : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Up
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Up"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Up", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetUp(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetUp()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetRight : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Right
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Right"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Right", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetRight(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetRight()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetBackward : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Backward
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Backward"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Backward", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetBackward(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetBackward()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetDown : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Down
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Down"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Down", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetDown(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetDown()
		{
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetLeft : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Left
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Left"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Left", value);
			}
		}

		public override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", instance, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetLeft(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetLeft()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalPointToLocal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> GlobalPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlobalPoint"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlobalPoint", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlobalPointToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlobalPointToLocal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalPointToGlobal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> LocalPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalPoint"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalPoint", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalPointToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalPointToGlobal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformPoint : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FromSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ToSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<float3> SourcePoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SourcePoint"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SourcePoint", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TransformPoint(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TransformPoint()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalDirectionToLocal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> GlobalDirection
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlobalDirection"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlobalDirection", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlobalDirectionToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlobalDirectionToLocal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalDirectionToGlobal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> LocalDirection
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalDirection"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalDirection", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalDirectionToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalDirectionToGlobal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformDirection : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FromSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ToSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<float3> SourceDirection
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SourceDirection"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SourceDirection", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TransformDirection(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TransformDirection()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalVectorToLocal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> GlobalVector
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlobalVector"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlobalVector", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlobalVectorToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlobalVectorToLocal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalVectorToGlobal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> LocalVector
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalVector"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalVector", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalVectorToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalVectorToGlobal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformVector : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FromSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ToSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<float3> SourceVector
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SourceVector"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SourceVector", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TransformVector(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TransformVector()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalRotationToLocal : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<floatQ> GlobalRotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlobalRotation"), typeof(ValueArgument<floatQ>)) is ValueArgument<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlobalRotation", value);
			}
		}

		public static floatQ GlobalRotationDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "GlobalRotationToLocal", ResoniteBridge.ResoniteBridgeValueType.Type), "GlobalRotationDefault"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
		}

		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlobalRotationToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlobalRotationToLocal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalRotationToGlobal : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<floatQ> LocalRotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalRotation"), typeof(ValueArgument<floatQ>)) is ValueArgument<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalRotation", value);
			}
		}

		public static floatQ LocalRotationDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalRotationToGlobal", ResoniteBridge.ResoniteBridgeValueType.Type), "LocalRotationDefault"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
		}

		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalRotationToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalRotationToGlobal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FromSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ToSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<floatQ> SourceRotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SourceRotation"), typeof(ValueArgument<floatQ>)) is ValueArgument<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SourceRotation", value);
			}
		}

		public static floatQ SourceRotationDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TransformRotation", ResoniteBridge.ResoniteBridgeValueType.Type), "SourceRotationDefault"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
		}

		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TransformRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TransformRotation()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalScaleToLocal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> GlobalScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlobalScale"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlobalScale", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlobalScaleToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlobalScaleToLocal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalScaleToGlobal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> LocalScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalScale"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalScale", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalScaleToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalScaleToGlobal()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformScale : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FromSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ToSpace"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<float3> SourceScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SourceScale"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SourceScale", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TransformScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TransformScale()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users
{
	[NodeCategory("Users")]
	public class SetUserScale : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectInput<UserRoot>)) is ObjectInput<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public ValueInput<float> Scale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scale"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scale", value);
			}
		}

		public ValueInput<float> AnimationTime
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AnimationTime"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AnimationTime", value);
			}
		}

		public AsyncCall OnScaleChangeStart
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnScaleChangeStart"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnScaleChangeStart", value);
			}
		}

		public Continuation OnAnimationFinished
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnAnimationFinished"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnAnimationFinished", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetUserScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetUserScale()
		{
		}
	}
	[NodeCategory("Users")]
	public class LocalUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalUser()
		{
		}
	}
	[NodeCategory("Users")]
	public class HostUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HostUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HostUser()
		{
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class LocalUserRoot : ObjectFunctionNode<FrooxEngineContext, UserRoot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override UserRoot Compute(FrooxEngineContext context)
		{
			return (UserRoot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(UserRoot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalUserRoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalUserRoot()
		{
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class LocalUserSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalUserSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalUserSlot()
		{
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class LocalUserSpace : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalUserSpace(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalUserSpace()
		{
		}
	}
	[NodeCategory("Users")]
	public class UserUserID : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserUserID(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserUserID()
		{
		}
	}
	[NodeCategory("Users")]
	public class UserMachineID : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserMachineID(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserMachineID()
		{
		}
	}
	[NodeCategory("Users/Status")]
	public class IsUserHost : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserHost(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserHost()
		{
		}
	}
	[NodeCategory("Users/Status")]
	public class IsLocalUser : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsLocalUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsLocalUser()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserPresent : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserPresent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserPresent()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserPresentInHeadset : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserPresentInHeadset(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserPresentInHeadset()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserPresentInWorld : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserPresentInWorld(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserPresentInWorld()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsAppDashOpened : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsAppDashOpened(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsAppDashOpened()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsPlatformDashOpened : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsPlatformDashOpened(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsPlatformDashOpened()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class AreAppFacetsOpened : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AreAppFacetsOpened(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AreAppFacetsOpened()
		{
		}
	}
	[NodeName("User VR Active", false)]
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserVR_Active : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserVR_Active(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserVR_Active()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserPrimaryHand : ValueFunctionNode<FrooxEngineContext, Chirality>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override Chirality Compute(FrooxEngineContext context)
		{
			return (Chirality)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Chirality));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserPrimaryHand(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserPrimaryHand()
		{
		}
	}
	[NodeCategory("Users/Status")]
	public class IsUserPatron : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserPatron(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserPatron()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserVoiceMode : ValueFunctionNode<FrooxEngineContext, VoiceMode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override VoiceMode Compute(FrooxEngineContext context)
		{
			return (VoiceMode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(VoiceMode));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserVoiceMode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserVoiceMode()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserRecordingVoiceMessage : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserRecordingVoiceMessage(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserRecordingVoiceMessage()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserActiveViewTargettingController : ObjectFunctionNode<FrooxEngineContext, IViewTargettingController>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override IViewTargettingController Compute(FrooxEngineContext context)
		{
			return (IViewTargettingController)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(IViewTargettingController));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserActiveViewTargettingController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserActiveViewTargettingController()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserViewReferenceActive : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserViewReferenceActive(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserViewReferenceActive()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserViewVoiceActive : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserViewVoiceActive(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserViewVoiceActive()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserSilenced : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserSilenced(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserSilenced()
		{
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserUsername : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserUsername(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserUsername()
		{
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserUserRoot : ObjectFunctionNode<FrooxEngineContext, UserRoot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override UserRoot Compute(FrooxEngineContext context)
		{
			return (UserRoot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(UserRoot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserUserRoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserUserRoot()
		{
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserRootSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserRootSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserRootSlot()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserInEditMode : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserInEditMode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserInEditMode()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserLive : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserLive(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserLive()
		{
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserInKioskMode : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserInKioskMode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserInKioskMode()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserFPS : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserFPS(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserFPS()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserPing : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserPing(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserPing()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserQueuedMessages : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserQueuedMessages(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserQueuedMessages()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserPacketLoss : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserPacketLoss(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserPacketLoss()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserDeltaMessages : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserDeltaMessages(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserDeltaMessages()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	[NodeOverload("User.UserNetworkStatistic")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users.UserNetworkStatistic", null)]
	public class UserNumericNetworkStatistic<T> : ObjectFunctionNode<FrooxEngineContext, T?>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ObjectArgument<string> Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Name"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Name", value);
			}
		}

		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override T? Compute(FrooxEngineContext context)
		{
			return (T?)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserNumericNetworkStatistic(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserNumericNetworkStatistic()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	[NodeOverload("User.UserNetworkStatistic")]
	public class UserObjectNetworkStatistic<T> : ObjectFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Name"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Name", value);
			}
		}

		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserObjectNetworkStatistic(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserObjectNetworkStatistic()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserStreamMessages : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserStreamMessages(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserStreamMessages()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserControlMessages : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserControlMessages(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserControlMessages()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserDownloadedBytes : ValueFunctionNode<FrooxEngineContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.UInt64 Compute(FrooxEngineContext context)
		{
			return (System.UInt64)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.UInt64));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserDownloadedBytes(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserDownloadedBytes()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserUploadedBytes : ValueFunctionNode<FrooxEngineContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.UInt64 Compute(FrooxEngineContext context)
		{
			return (System.UInt64)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.UInt64));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserUploadedBytes(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserUploadedBytes()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserDownloadSpeed : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserDownloadSpeed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserDownloadSpeed()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserDownloadSpeedMax : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserDownloadSpeedMax(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserDownloadSpeedMax()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserUploadSpeed : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserUploadSpeed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserUploadSpeed()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserUploadSpeedMax : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserUploadSpeedMax(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserUploadSpeedMax()
		{
		}
	}
	[NodeCategory("Users/Info")]
	public class UserPlatform : ValueFunctionNode<FrooxEngineContext, Platform>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override Platform Compute(FrooxEngineContext context)
		{
			return (Platform)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Platform));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserPlatform(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserPlatform()
		{
		}
	}
	[NodeCategory("Users/Info")]
	public class UserHeadOutputDevice : ValueFunctionNode<FrooxEngineContext, HeadOutputDevice>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override HeadOutputDevice Compute(FrooxEngineContext context)
		{
			return (HeadOutputDevice)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(HeadOutputDevice));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserHeadOutputDevice(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserHeadOutputDevice()
		{
		}
	}
	[NodeCategory("Components")]
	[NodeCategory("Users")]
	public class GetUserFromComponent : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.IComponent> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<global::FrooxEngine.IComponent>)) is ObjectArgument<global::FrooxEngine.IComponent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.IComponent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetUserFromComponent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetUserFromComponent()
		{
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserFromID : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> UserId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserId"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserId", value);
			}
		}

		public ObjectArgument<string> MachineId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MachineId"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MachineId", value);
			}
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserFromID(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserFromID()
		{
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserFromUsername : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Username
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Username"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Username", value);
			}
		}

		public ValueArgument<bool> IgnoreCase
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IgnoreCase"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IgnoreCase", value);
			}
		}

		public ValueArgument<bool> AllowPartialMatch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AllowPartialMatch"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AllowPartialMatch", value);
			}
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserFromUsername(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserFromUsername()
		{
		}
	}
	[NodeCategory("Users/Info")]
	public class LocalTimeOffset : ValueFunctionNode<FrooxEngineContext, TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override TimeSpan Compute(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalTimeOffset(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalTimeOffset()
		{
		}
	}
	[NodeCategory("Users/Info")]
	public class UserTimeOffset : ValueFunctionNode<FrooxEngineContext, TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override TimeSpan Compute(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserTimeOffset(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserTimeOffset()
		{
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserTime : ValueFunctionNode<FrooxEngineContext, DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override DateTime Compute(FrooxEngineContext context)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(DateTime));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserTime()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users.Roots
{
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class ActiveUserRootUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ActiveUserRootUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ActiveUserRootUser()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HeadSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HeadSlot()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class ControllerSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public ValueArgument<Chirality> Side
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Side"), typeof(ValueArgument<Chirality>)) is ValueArgument<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Side", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ControllerSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ControllerSlot()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HandSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public ValueArgument<Chirality> Side
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Side"), typeof(ValueArgument<Chirality>)) is ValueArgument<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Side", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HandSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HandSlot()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HeadPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HeadPosition()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HeadRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HeadRotation()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadFacingDirection : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HeadFacingDirection(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HeadFacingDirection()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadFacingRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HeadFacingRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HeadFacingRotation()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class LeftHandPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LeftHandPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LeftHandPosition()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class LeftHandRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LeftHandRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LeftHandRotation()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class RightHandPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RightHandPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RightHandPosition()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class RightHandRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RightHandRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RightHandRotation()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HipsPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HipsPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HipsPosition()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HipsRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HipsRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HipsRotation()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class FeetPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FeetPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FeetPosition()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class FeetRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FeetRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FeetRotation()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class UserRootGlobalScale : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserRootGlobalScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserRootGlobalScale()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	public abstract class UserRootSetter : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<UserRoot> UserRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserRoot"), typeof(ObjectInput<UserRoot>)) is ObjectInput<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserRoot", value);
			}
		}

		public static floatQ RotationDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "UserRootSetter", ResoniteBridge.ResoniteBridgeValueType.Type), "RotationDefault"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public abstract void Set(UserRoot root, FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserRootSetter(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserRootSetter()
		{
		}
	}
	public class SetHeadFacingDirection : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Direction
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Direction"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Direction", value);
			}
		}

		public override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", root, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetHeadFacingDirection(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetHeadFacingDirection()
		{
		}
	}
	public class SetHeadFacingRotation : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", root, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetHeadFacingRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetHeadFacingRotation()
		{
		}
	}
	public class SetHeadPosition : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", root, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetHeadPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetHeadPosition()
		{
		}
	}
	public class SetHeadRotation : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", root, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetHeadRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetHeadRotation()
		{
		}
	}
	public class SetHipsPosition : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", root, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetHipsPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetHipsPosition()
		{
		}
	}
	public class SetHipsRotation : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", root, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetHipsRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetHipsRotation()
		{
		}
	}
	public class SetFeetPosition : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", root, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetFeetPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetFeetPosition()
		{
		}
	}
	public class SetFeetRotation : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", root, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetFeetRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetFeetRotation()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users.LocalScreen
{
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalScreenPointToDirection : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> NormalizedScreenPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NormalizedScreenPoint"), typeof(ValueArgument<float2>)) is ValueArgument<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NormalizedScreenPoint", value);
			}
		}

		public static float2 NormalizedScreenPointDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalScreenPointToDirection", ResoniteBridge.ResoniteBridgeValueType.Type), "NormalizedScreenPointDefault"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalScreenPointToDirection(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalScreenPointToDirection()
		{
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalScreenPointToWorld : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> NormalizedScreenPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NormalizedScreenPoint"), typeof(ValueArgument<float2>)) is ValueArgument<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NormalizedScreenPoint", value);
			}
		}

		public ValueArgument<float> Distance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Distance"), typeof(ValueArgument<float>)) is ValueArgument<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Distance", value);
			}
		}

		public static float2 NormalizedScreenPointDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalScreenPointToWorld", ResoniteBridge.ResoniteBridgeValueType.Type), "NormalizedScreenPointDefault"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalScreenPointToWorld(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalScreenPointToWorld()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users.LocalOutput
{
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class ViewOverriden : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ViewOverriden(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ViewOverriden()
		{
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class ViewPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ViewPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ViewPosition()
		{
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class ViewRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ViewRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ViewRotation()
		{
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class ViewScale : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ViewScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ViewScale()
		{
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class EarsOverriden : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public EarsOverriden(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public EarsOverriden()
		{
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class EarsPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public EarsPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public EarsPosition()
		{
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class EarsRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(floatQ));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public EarsRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public EarsRotation()
		{
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class EarsScale : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public EarsScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public EarsScale()
		{
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class DesktopFOV : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DesktopFOV(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DesktopFOV()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Security
{
	[NodeCategory("Security")]
	public class AllowJoin : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<JoinRequestHandle> Handle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Handle"), typeof(ObjectInput<JoinRequestHandle>)) is ObjectInput<JoinRequestHandle> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<JoinRequestHandle>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Handle", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AllowJoin(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AllowJoin()
		{
		}
	}
	[NodeCategory("Security")]
	public class AssignRole : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<JoinRequestHandle> Handle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Handle"), typeof(ObjectInput<JoinRequestHandle>)) is ObjectInput<JoinRequestHandle> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<JoinRequestHandle>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Handle", value);
			}
		}

		public ObjectInput<string> RoleName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RoleName"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RoleName", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AssignRole(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AssignRole()
		{
		}
	}
	[NodeCategory("Security")]
	public class DenyJoin : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<JoinRequestHandle> Handle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Handle"), typeof(ObjectInput<JoinRequestHandle>)) is ObjectInput<JoinRequestHandle> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<JoinRequestHandle>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Handle", value);
			}
		}

		public ObjectInput<string> DenyReason
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DenyReason"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DenyReason", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DenyJoin(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DenyJoin()
		{
		}
	}
	[DataModelType]
	public class JoinRequestHandle : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public SessionConnection data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(SessionConnection)) is SessionConnection __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SessionConnection");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
			}
		}

		public JoinGrant? grant
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "grant"), typeof(JoinGrant)) is JoinGrant __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to JoinGrant");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "grant", value);
			}
		}

		public JoinRequestHandle(SessionConnection data)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "JoinRequestHandle", ResoniteBridge.ResoniteBridgeValueType.Type), data);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public JoinRequestHandle(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public JoinRequestHandle()
		{
		}
	}
	[NodeCategory("Security")]
	public class VerifyJoinRequest : ProxyVoidNode<FrooxEngineContext, VerifyJoinRequest.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IWorldUserJoinVerifier, IUserJoinVerifier, IWorldElement, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Func<SessionConnection, Task<JoinGrant?>> Handler
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Handler"), typeof(Func<SessionConnection, Task<JoinGrant?>>)) is Func<SessionConnection, Task<JoinGrant?>> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Func<SessionConnection, Task<JoinGrant?>>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Handler", value);
				}
			}

			public Task<JoinGrant?> VerifyJoinRequest(SessionConnection request)
			{
				return (Task<JoinGrant?>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "VerifyJoinRequest", request), typeof(Task<JoinGrant?>));
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public AsyncCall Verify
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Verify"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Verify", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserId"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> UserSessionId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserSessionId"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserSessionId", value);
			}
		}

		public ObjectOutput<string> MachineId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MachineId"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MachineId", value);
			}
		}

		public ObjectOutput<string> Username
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Username"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Username", value);
			}
		}

		public ValueOutput<HeadOutputDevice> HeadOutputDevice
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HeadOutputDevice"), typeof(ValueOutput<HeadOutputDevice>)) is ValueOutput<HeadOutputDevice> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<HeadOutputDevice>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HeadOutputDevice", value);
			}
		}

		public ValueOutput<Platform> Platform
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Platform"), typeof(ValueOutput<Platform>)) is ValueOutput<Platform> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<Platform>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Platform", value);
			}
		}

		public ValueOutput<bool> IsInvited
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsInvited"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsInvited", value);
			}
		}

		public ValueOutput<bool> IsContact
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsContact"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsContact", value);
			}
		}

		public ValueOutput<bool> IsInKioskMode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsInKioskMode"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsInKioskMode", value);
			}
		}

		public ValueOutput<bool> IsSpectatorBanned
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsSpectatorBanned"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsSpectatorBanned", value);
			}
		}

		public ValueOutput<bool> IsMuteBanned
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsMuteBanned"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsMuteBanned", value);
			}
		}

		public ObjectOutput<JoinRequestHandle> Handle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Handle"), typeof(ObjectOutput<JoinRequestHandle>)) is ObjectOutput<JoinRequestHandle> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<JoinRequestHandle>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Handle", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public Task Execute(SessionConnection connection, JoinRequestHandle handle, FrooxEngineContext context)
		{
			return (Task)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Execute", connection, handle, context), typeof(Task));
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public VerifyJoinRequest()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "VerifyJoinRequest", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public VerifyJoinRequest(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Undo
{
	[NodeCategory("Undo")]
	public class CreateUndoBatch : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Description
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Description"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Description", value);
			}
		}

		public Call Create
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Create"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Create", value);
			}
		}

		public Continuation OnCreated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnCreated"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnCreated", value);
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CreateUndoBatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CreateUndoBatch()
		{
		}
	}
	[NodeCategory("Undo")]
	public class BeginUndoBatch : ActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Description
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Description"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Description", value);
			}
		}

		public override void Do(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BeginUndoBatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BeginUndoBatch()
		{
		}
	}
	[NodeCategory("Undo")]
	public class EndUndoBatch : ActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Do(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public EndUndoBatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public EndUndoBatch()
		{
		}
	}
	[NodeCategory("Undo")]
	public class CreateTransformUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public ValueInput<bool> SaveParent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SaveParent"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SaveParent", value);
			}
		}

		public ValueInput<bool> SavePosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SavePosition"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SavePosition", value);
			}
		}

		public ValueInput<bool> SaveRotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SaveRotation"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SaveRotation", value);
			}
		}

		public ValueInput<bool> SaveScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SaveScale"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SaveScale", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CreateTransformUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CreateTransformUndoStep()
		{
		}
	}
	[NodeCategory("Undo")]
	public class CreateSpawnUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public ObjectInput<string> Description
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Description"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Description", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CreateSpawnUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CreateSpawnUndoStep()
		{
		}
	}
	[NodeCategory("Undo")]
	public class UndoableDestroy : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public ValueInput<bool> PreserveAssets
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PreserveAssets"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PreserveAssets", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UndoableDestroy(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UndoableDestroy()
		{
		}
	}
	[NodeCategory("Undo")]
	public class CreateFieldUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IField> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<IField>)) is ObjectInput<IField> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IField>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public ValueInput<bool> ForceNew
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ForceNew"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ForceNew", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CreateFieldUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CreateFieldUndoStep()
		{
		}
	}
	[NodeCategory("Undo")]
	public class CreateReferenceUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ISyncRef> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<ISyncRef>)) is ObjectInput<ISyncRef> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<ISyncRef>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public ValueInput<bool> ForceNew
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ForceNew"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ForceNew", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CreateReferenceUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CreateReferenceUndoStep()
		{
		}
	}
	[NodeCategory("Undo")]
	public class CreateTypeFieldUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<SyncType> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<SyncType>)) is ObjectInput<SyncType> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<SyncType>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public ValueInput<bool> ForceNew
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ForceNew"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ForceNew", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CreateTypeFieldUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CreateTypeFieldUndoStep()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interactions
{
	[NodeCategory("Utility")]
	public class NotifyModified : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.IComponent> ModifiedComponent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ModifiedComponent"), typeof(ObjectInput<global::FrooxEngine.IComponent>)) is ObjectInput<global::FrooxEngine.IComponent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.IComponent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ModifiedComponent", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public NotifyModified(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public NotifyModified()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Utility
{
	public struct TimepointValue<T> : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public T value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "value"), typeof(T)) is T __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to T");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "value", value);
			}
		}

		public System.Double timestamp
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "timestamp"), typeof(System.Double)) is System.Double __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "timestamp", value);
			}
		}

		public TimepointValue(T value, System.Double timestamp)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TimepointValue", ResoniteBridge.ResoniteBridgeValueType.Type), value, timestamp);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TimepointValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TimepointValue()
		{
		}
	}
	[NodeCategory("Utility")]
	[NodeName("Delay", false)]
	[NodeOverload("Engine.DelayValue")]
	public abstract class DelayBase<T> : UpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> DelaySeconds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DelaySeconds"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DelaySeconds", value);
			}
		}

		public ObjectStore<Queue<TimepointValue<T>>> _buffer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_buffer"), typeof(ObjectStore<Queue<TimepointValue<T>>>)) is ObjectStore<Queue<TimepointValue<T>>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Queue<TimepointValue<T>>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_buffer", value);
			}
		}

		public override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunUpdate", context);
		}

		public T GetCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCurrent", context), typeof(T));
		}

		public abstract T EvaluateCurrent(FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayBase()
		{
		}
	}
	public class DelayValue<T> : DelayBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ValueOutput<T> DelayedValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DelayedValue"), typeof(ValueOutput<T>)) is ValueOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DelayedValue", value);
			}
		}

		public override T EvaluateCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EvaluateCurrent", context), typeof(T));
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public DelayValue()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DelayValue", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class DelayObject<T> : DelayBase<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ObjectOutput<T> DelayedValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DelayedValue"), typeof(ObjectOutput<T>)) is ObjectOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DelayedValue", value);
			}
		}

		public override T EvaluateCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EvaluateCurrent", context), typeof(T));
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public DelayObject()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DelayObject", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Utility")]
	public class TypeColor : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Type> Type
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Type"), typeof(ObjectArgument<Type>)) is ObjectArgument<Type> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Type>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Type", value);
			}
		}

		public override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(colorX));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TypeColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TypeColor()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Rendering
{
	[NodeCategory("Rendering")]
	public class RenderToTextureAsset : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 MAX_RESOLUTION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAX_RESOLUTION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAX_RESOLUTION", value);
			}
		}

		public ObjectInput<Camera> Camera
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Camera"), typeof(ObjectInput<Camera>)) is ObjectInput<Camera> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Camera>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Camera", value);
			}
		}

		public ValueInput<int2> Resolution
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Resolution"), typeof(ValueInput<int2>)) is ValueInput<int2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Resolution", value);
			}
		}

		public ObjectInput<string> Format
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Format"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Format", value);
			}
		}

		public ValueInput<int> Quality
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Quality"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Quality", value);
			}
		}

		public AsyncCall OnRenderStarted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnRenderStarted"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnRenderStarted", value);
			}
		}

		public Continuation OnRendered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnRendered"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnRendered", value);
			}
		}

		public Continuation OnFailed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFailed"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFailed", value);
			}
		}

		public ObjectOutput<System.Uri> RenderedAssetURL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RenderedAssetURL"), typeof(ObjectOutput<System.Uri>)) is ObjectOutput<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RenderedAssetURL", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public RenderToTextureAsset()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RenderToTextureAsset", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RenderToTextureAsset(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Rendering")]
	public class FlashHighlightHierarchy : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> HierarchyRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HierarchyRoot"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HierarchyRoot", value);
			}
		}

		public ValueInput<bool> ExcludeColliders
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ExcludeColliders"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ExcludeColliders", value);
			}
		}

		public ValueInput<bool> ExcludeMeshes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ExcludeMeshes"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ExcludeMeshes", value);
			}
		}

		public ValueInput<bool> ExcludeDisabled
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ExcludeDisabled"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ExcludeDisabled", value);
			}
		}

		public ValueInput<bool> TrackPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TrackPosition"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TrackPosition", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public ObjectOutput<Slot> FlashRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FlashRoot"), typeof(ObjectOutput<Slot>)) is ObjectOutput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FlashRoot", value);
			}
		}

		public static color ColorDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "FlashHighlightHierarchy", ResoniteBridge.ResoniteBridgeValueType.Type), "ColorDefault"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public FlashHighlightHierarchy()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "FlashHighlightHierarchy", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FlashHighlightHierarchy(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Rendering")]
	public class BakeReflectionProbe : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ReflectionProbe> Probe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Probe"), typeof(ObjectInput<ReflectionProbe>)) is ObjectInput<ReflectionProbe> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<ReflectionProbe>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Probe", value);
			}
		}

		public AsyncCall OnBakeStart
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnBakeStart"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnBakeStart", value);
			}
		}

		public Continuation OnBakeFail
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnBakeFail"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnBakeFail", value);
			}
		}

		public Continuation OnBakeComplete
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnBakeComplete"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnBakeComplete", value);
			}
		}

		public ObjectOutput<System.Uri> BakedCubemapURL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BakedCubemapURL"), typeof(ObjectOutput<System.Uri>)) is ObjectOutput<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BakedCubemapURL", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public BakeReflectionProbe()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "BakeReflectionProbe", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BakeReflectionProbe(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Rendering")]
	public class BakeReflectionProbes : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Root
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Root"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Root", value);
			}
		}

		public ValueInput<bool> BakeInactive
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BakeInactive"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BakeInactive", value);
			}
		}

		public ObjectInput<string> FilterWithTag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FilterWithTag"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FilterWithTag", value);
			}
		}

		public ValueInput<float> DelayBeforeBake
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DelayBeforeBake"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DelayBeforeBake", value);
			}
		}

		public ObjectOutput<ReflectionProbe> Probe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Probe"), typeof(ObjectOutput<ReflectionProbe>)) is ObjectOutput<ReflectionProbe> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<ReflectionProbe>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Probe", value);
			}
		}

		public ValueOutput<int> ProbeIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ProbeIndex"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ProbeIndex", value);
			}
		}

		public ValueOutput<int> ProbeCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ProbeCount"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ProbeCount", value);
			}
		}

		public AsyncCall OnBakeBatchStart
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnBakeBatchStart"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnBakeBatchStart", value);
			}
		}

		public AsyncCall OnBeforeProbeBake
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnBeforeProbeBake"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnBeforeProbeBake", value);
			}
		}

		public AsyncCall OnProbeBaked
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnProbeBaked"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnProbeBaked", value);
			}
		}

		public Continuation OnBakeBatchFinished
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnBakeBatchFinished"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnBakeBatchFinished", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public BakeReflectionProbes()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "BakeReflectionProbes", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BakeReflectionProbes(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Rendering")]
	public class SampleColorX : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point", value);
			}
		}

		public ValueInput<float3> Direction
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Direction"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Direction", value);
			}
		}

		public ObjectInput<Slot> Reference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reference"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reference", value);
			}
		}

		public ValueInput<float> NearClip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NearClip"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NearClip", value);
			}
		}

		public ValueInput<float> FarClip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FarClip"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FarClip", value);
			}
		}

		public AsyncCall OnSampleStart
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSampleStart"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSampleStart", value);
			}
		}

		public Continuation OnSampled
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSampled"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSampled", value);
			}
		}

		public ValueOutput<colorX> SampledColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SampledColor"), typeof(ValueOutput<colorX>)) is ValueOutput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SampledColor", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public SampleColorX()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "SampleColorX", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SampleColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Nodes
{
	[NodeCategory("Nodes")]
	public class PackProtoFluxNodes : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Root
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Root"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Root", value);
			}
		}

		public ObjectInput<Slot> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PackProtoFluxNodes(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PackProtoFluxNodes()
		{
		}
	}
	[NodeCategory("Nodes")]
	public class PackProtoFluxFromNode : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ProtoFluxNode> StartNode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "StartNode"), typeof(ObjectInput<ProtoFluxNode>)) is ObjectInput<ProtoFluxNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<ProtoFluxNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "StartNode", value);
			}
		}

		public ObjectInput<Slot> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PackProtoFluxFromNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PackProtoFluxFromNode()
		{
		}
	}
	[NodeCategory("Nodes")]
	public class PackProtoFluxInPlace : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ProtoFluxNode> StartNode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "StartNode"), typeof(ObjectInput<ProtoFluxNode>)) is ObjectInput<ProtoFluxNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<ProtoFluxNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "StartNode", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PackProtoFluxInPlace(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PackProtoFluxInPlace()
		{
		}
	}
	[NodeCategory("Nodes")]
	public class UnpackProtoFlux : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Root
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Root"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Root", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UnpackProtoFlux(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UnpackProtoFlux()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Physics
{
	[NodeCategory("Physics")]
	public class IsCharacterController : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ICollider> Collider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Collider"), typeof(ObjectArgument<ICollider>)) is ObjectArgument<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Collider", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsCharacterController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsCharacterController()
		{
		}
	}
	[NodeCategory("Physics")]
	public class AsCharacterController : ObjectFunctionNode<FrooxEngineContext, CharacterController>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ICollider> Collider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Collider"), typeof(ObjectArgument<ICollider>)) is ObjectArgument<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Collider", value);
			}
		}

		public override CharacterController Compute(FrooxEngineContext context)
		{
			return (CharacterController)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(CharacterController));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AsCharacterController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AsCharacterController()
		{
		}
	}
	[NodeCategory("Physics")]
	public class CharacterControllerUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(ObjectArgument<CharacterController>)) is ObjectArgument<CharacterController> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<CharacterController>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CharacterControllerUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CharacterControllerUser()
		{
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class FindCharacterControllerFromSlot : ObjectFunctionNode<FrooxEngineContext, CharacterController>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public override CharacterController Compute(FrooxEngineContext context)
		{
			return (CharacterController)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(CharacterController));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FindCharacterControllerFromSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FindCharacterControllerFromSlot()
		{
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class FindCharacterControllerFromUser : ObjectFunctionNode<FrooxEngineContext, CharacterController>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public override CharacterController Compute(FrooxEngineContext context)
		{
			return (CharacterController)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(CharacterController));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FindCharacterControllerFromUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FindCharacterControllerFromUser()
		{
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class CharacterLinearVelocity : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(ObjectArgument<CharacterController>)) is ObjectArgument<CharacterController> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<CharacterController>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(float3));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CharacterLinearVelocity(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CharacterLinearVelocity()
		{
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class IsCharacterOnGround : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(ObjectArgument<CharacterController>)) is ObjectArgument<CharacterController> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<CharacterController>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsCharacterOnGround(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsCharacterOnGround()
		{
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class CharacterGravity : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(ObjectArgument<CharacterController>)) is ObjectArgument<CharacterController> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<CharacterController>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public ValueOutput<float3> Gravity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Gravity"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Gravity", value);
			}
		}

		public ValueOutput<float3> ActualGravity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ActualGravity"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ActualGravity", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public CharacterGravity()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "CharacterGravity", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CharacterGravity(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class CharacterGroundCollider : ObjectFunctionNode<FrooxEngineContext, ICollider>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(ObjectArgument<CharacterController>)) is ObjectArgument<CharacterController> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<CharacterController>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public override ICollider Compute(FrooxEngineContext context)
		{
			return (ICollider)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(ICollider));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CharacterGroundCollider(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CharacterGroundCollider()
		{
		}
	}
	[NodeCategory("Physics")]
	public class ApplyCharacterImpulse : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Impulse
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Impulse"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Impulse", value);
			}
		}

		public ObjectInput<CharacterController> Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(ObjectInput<CharacterController>)) is ObjectInput<CharacterController> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<CharacterController>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public ValueInput<bool> IgnoreMass
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IgnoreMass"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IgnoreMass", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ApplyCharacterImpulse(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ApplyCharacterImpulse()
		{
		}
	}
	[NodeCategory("Physics")]
	public class ApplyCharacterForce : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Force
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Force"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Force", value);
			}
		}

		public ObjectInput<CharacterController> Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(ObjectInput<CharacterController>)) is ObjectInput<CharacterController> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<CharacterController>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public ValueInput<bool> IgnoreMass
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IgnoreMass"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IgnoreMass", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ApplyCharacterForce(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ApplyCharacterForce()
		{
		}
	}
	[NodeCategory("Physics")]
	public class SetCharacterVelocity : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Velocity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Velocity"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Velocity", value);
			}
		}

		public ObjectInput<CharacterController> Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(ObjectInput<CharacterController>)) is ObjectInput<CharacterController> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<CharacterController>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetCharacterVelocity(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetCharacterVelocity()
		{
		}
	}
	[NodeCategory("Physics")]
	public class SetCharacterGravity : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Gravity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Gravity"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Gravity", value);
			}
		}

		public ObjectInput<CharacterController> Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(ObjectInput<CharacterController>)) is ObjectInput<CharacterController> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<CharacterController>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetCharacterGravity(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetCharacterGravity()
		{
		}
	}
	[NodeCategory("Physics/Events")]
	public abstract class LocomotionEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<PhysicalLocomotion> Locomotion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Locomotion"), typeof(GlobalRef<PhysicalLocomotion>)) is GlobalRef<PhysicalLocomotion> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<PhysicalLocomotion>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Locomotion", value);
			}
		}

		public ObjectStore<PhysicalLocomotion> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<PhysicalLocomotion>)) is ObjectStore<PhysicalLocomotion> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<PhysicalLocomotion>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnLocomotionChanged(PhysicalLocomotion locomotion, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnLocomotionChanged", locomotion, context);
		}

		public abstract void Register(PhysicalLocomotion locomotion, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context);

		public abstract void Unregister(PhysicalLocomotion locomotion, FrooxEngineContext context);

		public abstract void Clear(FrooxEngineContext context);

		public LocomotionEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocomotionEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocomotionEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public abstract class LocomotionGripEvent : LocomotionEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnEvent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnEvent"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnEvent", value);
			}
		}

		public ObjectOutput<Slot> GrippedSlot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GrippedSlot"), typeof(ObjectOutput<Slot>)) is ObjectOutput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GrippedSlot", value);
			}
		}

		public ValueOutput<float3> GrippedPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GrippedPoint"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GrippedPoint", value);
			}
		}

		public ValueOutput<Chirality> GrippingHand
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GrippingHand"), typeof(ValueOutput<Chirality>)) is ValueOutput<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GrippingHand", value);
			}
		}

		public ObjectStore<PhysicalLocomotion.HandGripHandler> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<PhysicalLocomotion.HandGripHandler>)) is ObjectStore<PhysicalLocomotion.HandGripHandler> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<PhysicalLocomotion.HandGripHandler>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public override void Register(PhysicalLocomotion locomotion, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", locomotion, path, dispatcher, context);
		}

		public override void Unregister(PhysicalLocomotion locomotion, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", locomotion, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public void Handle(Slot slot, in float3 point, Chirality hand, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Handle", slot, point, hand, context);
		}

		public abstract void Register(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler);

		public abstract void Unregister(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler);

		public LocomotionGripEvent()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocomotionGripEvent", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocomotionGripEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class OnLocomotionGripBegin : LocomotionGripEvent, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Register(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", locomotion, handler);
		}

		public override void Unregister(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", locomotion, handler);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnLocomotionGripBegin(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnLocomotionGripBegin()
		{
		}
	}
	public class OnLocomotionGripEnd : LocomotionGripEvent, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Register(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", locomotion, handler);
		}

		public override void Unregister(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", locomotion, handler);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnLocomotionGripEnd(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnLocomotionGripEnd()
		{
		}
	}
	[NodeCategory("Physics/Events")]
	public abstract class ContactEventNode : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<ICollider> Collider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Collider"), typeof(GlobalRef<ICollider>)) is GlobalRef<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Collider", value);
			}
		}

		public Call OnEvent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnEvent"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnEvent", value);
			}
		}

		public ObjectOutput<ICollider> Other
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Other"), typeof(ObjectOutput<ICollider>)) is ObjectOutput<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Other", value);
			}
		}

		public ObjectStore<ICollider> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<ICollider>)) is ObjectStore<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ObjectStore<ContactEvent> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<ContactEvent>)) is ObjectStore<ContactEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<ContactEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _cachedEventHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_cachedEventHandler"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_cachedEventHandler", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnColliderChanged(ICollider collider, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnColliderChanged", collider, context);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object other)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, other);
		}

		public abstract void Register(ICollider collider, ContactEvent handler);

		public abstract void Unregister(ICollider collider, ContactEvent handler);

		public ContactEventNode()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ContactEventNode", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ContactEventNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class OnContactStart : ContactEventNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Register(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", collider, handler);
		}

		public override void Unregister(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", collider, handler);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnContactStart(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnContactStart()
		{
		}
	}
	public class OnContactStay : ContactEventNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Register(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", collider, handler);
		}

		public override void Unregister(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", collider, handler);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnContactStay(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnContactStay()
		{
		}
	}
	public class OnContactEnd : ContactEventNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Register(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", collider, handler);
		}

		public override void Unregister(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", collider, handler);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnContactEnd(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnContactEnd()
		{
		}
	}
	[NodeCategory("Physics/Events")]
	public abstract class GripEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<LocomotionGrip> Grip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grip"), typeof(GlobalRef<LocomotionGrip>)) is GlobalRef<LocomotionGrip> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<LocomotionGrip>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grip", value);
			}
		}

		public Call OnEvent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnEvent"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnEvent", value);
			}
		}

		public ObjectOutput<ILocomotionModule> Module
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Module"), typeof(ObjectOutput<ILocomotionModule>)) is ObjectOutput<ILocomotionModule> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<ILocomotionModule>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Module", value);
			}
		}

		public ValueOutput<BodyNode> GrippingBodyNode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GrippingBodyNode"), typeof(ValueOutput<BodyNode>)) is ValueOutput<BodyNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<BodyNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GrippingBodyNode", value);
			}
		}

		public ObjectStore<LocomotionGrip> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<LocomotionGrip>)) is ObjectStore<LocomotionGrip> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<LocomotionGrip>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ObjectStore<GripEvent> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<GripEvent>)) is ObjectStore<GripEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<GripEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnGripChanged(LocomotionGrip grip, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnGripChanged", grip, context);
		}

		public abstract void Register(LocomotionGrip grip, GripEvent handler);

		public abstract void Unregister(LocomotionGrip grip, GripEvent handler);

		public void Handle(ILocomotionModule module, BodyNode node, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Handle", module, node, context);
		}

		public GripEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "GripEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GripEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class OnGripStart : GripEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Register(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", grip, handler);
		}

		public override void Unregister(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", grip, handler);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnGripStart(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnGripStart()
		{
		}
	}
	public class OnGripStay : GripEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Register(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", grip, handler);
		}

		public override void Unregister(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", grip, handler);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnGripStay(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnGripStay()
		{
		}
	}
	public class OnGripEnd : GripEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Register(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", grip, handler);
		}

		public override void Unregister(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", grip, handler);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnGripEnd(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnGripEnd()
		{
		}
	}
	[NodeCategory("Physics")]
	public class HitUVCoordinate : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ICollider> HitCollider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitCollider"), typeof(ObjectArgument<ICollider>)) is ObjectArgument<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitCollider", value);
			}
		}

		public ValueArgument<int> HitTriangleIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitTriangleIndex"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitTriangleIndex", value);
			}
		}

		public ValueArgument<float3> HitPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitPoint"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitPoint", value);
			}
		}

		public ValueOutput<float2> UV
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UV"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UV", value);
			}
		}

		public ValueOutput<bool> IsValidUV
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsValidUV"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsValidUV", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public HitUVCoordinate()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "HitUVCoordinate", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HitUVCoordinate(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class RaycastOne : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Origin
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Origin"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Origin", value);
			}
		}

		public ValueInput<float3> Direction
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Direction"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Direction", value);
			}
		}

		public ValueInput<float> MaxDistance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MaxDistance"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MaxDistance", value);
			}
		}

		public ValueInput<bool> HitTriggers
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitTriggers"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitTriggers", value);
			}
		}

		public ValueInput<bool> UsersOnly
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UsersOnly"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UsersOnly", value);
			}
		}

		public ValueInput<float> DebugDuration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DebugDuration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DebugDuration", value);
			}
		}

		public ObjectInput<Slot> Root
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Root"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Root", value);
			}
		}

		public Continuation OnHit
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnHit"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnHit", value);
			}
		}

		public Continuation OnMiss
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnMiss"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnMiss", value);
			}
		}

		public ObjectOutput<ICollider> HitCollider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitCollider"), typeof(ObjectOutput<ICollider>)) is ObjectOutput<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitCollider", value);
			}
		}

		public ValueOutput<float> HitDistance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitDistance"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitDistance", value);
			}
		}

		public ValueOutput<float3> HitPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitPoint"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitPoint", value);
			}
		}

		public ValueOutput<float3> HitNormal
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitNormal"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitNormal", value);
			}
		}

		public ValueOutput<int> HitTriangleIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitTriangleIndex"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitTriangleIndex", value);
			}
		}

		public static Predicate<ICollider> _userFilter
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RaycastOne", ResoniteBridge.ResoniteBridgeValueType.Type), "_userFilter"), typeof(Predicate<ICollider>)) is Predicate<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Predicate<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RaycastOne", ResoniteBridge.ResoniteBridgeValueType.Type), "_userFilter", value);
			}
		}

		public static System.Boolean UserFilter(ICollider c)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RaycastOne", ResoniteBridge.ResoniteBridgeValueType.Type), "UserFilter", c), typeof(System.Boolean));
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public RaycastOne()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RaycastOne", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RaycastOne(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class Raycaster : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Origin
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Origin"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Origin", value);
			}
		}

		public ValueArgument<float3> Direction
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Direction"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Direction", value);
			}
		}

		public ValueArgument<float> MaxDistance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MaxDistance"), typeof(ValueArgument<float>)) is ValueArgument<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MaxDistance", value);
			}
		}

		public ValueArgument<bool> HitTriggers
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitTriggers"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitTriggers", value);
			}
		}

		public ValueArgument<bool> UsersOnly
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UsersOnly"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UsersOnly", value);
			}
		}

		public ObjectArgument<Slot> Root
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Root"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Root", value);
			}
		}

		public ValueOutput<bool> HasHit
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HasHit"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HasHit", value);
			}
		}

		public ObjectOutput<ICollider> HitCollider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitCollider"), typeof(ObjectOutput<ICollider>)) is ObjectOutput<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitCollider", value);
			}
		}

		public ValueOutput<float> HitDistance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitDistance"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitDistance", value);
			}
		}

		public ValueOutput<float3> HitPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitPoint"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitPoint", value);
			}
		}

		public ValueOutput<float3> HitNormal
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitNormal"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitNormal", value);
			}
		}

		public ValueOutput<int> HitTriangleIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitTriangleIndex"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitTriangleIndex", value);
			}
		}

		public static Predicate<ICollider> _userFilter
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Raycaster", ResoniteBridge.ResoniteBridgeValueType.Type), "_userFilter"), typeof(Predicate<ICollider>)) is Predicate<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Predicate<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Raycaster", ResoniteBridge.ResoniteBridgeValueType.Type), "_userFilter", value);
			}
		}

		public static System.Boolean UserFilter(ICollider c)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Raycaster", ResoniteBridge.ResoniteBridgeValueType.Type), "UserFilter", c), typeof(System.Boolean));
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public Raycaster()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Raycaster", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Raycaster(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Operators
{
	[NodeCategory("Math")]
	[ContinuouslyChanging]
	[NodeOverload("Engine.Operators.Delta")]
	public abstract class DeltaBase<T> : ValueFunctionUpdateBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ValueStore<bool> _initialized
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_initialized"), typeof(ValueStore<bool>)) is ValueStore<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_initialized", value);
			}
		}

		public ValueStore<T> _delta
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_delta"), typeof(ValueStore<T>)) is ValueStore<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_delta", value);
			}
		}

		public ValueStore<T> _previous
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_previous"), typeof(ValueStore<T>)) is ValueStore<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_previous", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunUpdate", context);
		}

		public abstract T Delta(ref T current, ref T previous);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DeltaBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DeltaBase()
		{
		}
	}
	public class ValueDelta<T> : DeltaBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public static System.Boolean IsValidGenericType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ValueDelta", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override T Delta(ref T current, ref T previous)
		{
			T __finalResult = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Delta", out ResoniteBridge.ResoniteBridgeValue[] __outVars, current, previous), typeof(T));
			current = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[0], typeof(T));
			previous = (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[1], typeof(T));
			return __finalResult;
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ValueDelta(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ValueDelta()
		{
		}
	}
	[NodeName("Delta", false)]
	public class Delta_floatQ : DeltaBase<floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override floatQ Delta(ref floatQ current, ref floatQ previous)
		{
			floatQ __finalResult = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Delta", out ResoniteBridge.ResoniteBridgeValue[] __outVars, current, previous), typeof(floatQ));
			current = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[0], typeof(floatQ));
			previous = (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[1], typeof(floatQ));
			return __finalResult;
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Delta_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Delta_floatQ()
		{
		}
	}
	[NodeName("Delta", false)]
	public class Delta_doubleQ : DeltaBase<doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override doubleQ Delta(ref doubleQ current, ref doubleQ previous)
		{
			doubleQ __finalResult = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Delta", out ResoniteBridge.ResoniteBridgeValue[] __outVars, current, previous), typeof(doubleQ));
			current = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[0], typeof(doubleQ));
			previous = (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(__outVars[1], typeof(doubleQ));
			return __finalResult;
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Delta_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Delta_doubleQ()
		{
		}
	}
	[ContinuouslyChanging]
	[NodeCategory("Time")]
	[NodeOverload("Engine.Operators.Mul_dT")]
	[NodeName("*dT", false)]
	public class MulDeltaTime<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "A"), typeof(ValueArgument<T>)) is ValueArgument<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "A", value);
			}
		}

		public static System.Boolean IsValidGenericType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "MulDeltaTime", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MulDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MulDeltaTime()
		{
		}
	}
	[ContinuouslyChanging]
	[NodeCategory("Time")]
	[NodeName("÷dT", false)]
	[NodeOverload("Engine.Operators.Div_dT")]
	public class DivDeltaTime<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "A"), typeof(ValueArgument<T>)) is ValueArgument<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "A", value);
			}
		}

		public static System.Boolean IsValidGenericType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DivDeltaTime", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DivDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DivDeltaTime()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Network
{
	[NodeCategory("Network")]
	[NodeName("Is Host Access Allowed", false)]
	[NodeOverload("FrooxEngine.Network.IsHostAccessAllowed")]
	public class IsHostAccessAllowed : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Host
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Host"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Host", value);
			}
		}

		public ValueArgument<int> Port
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Port"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Port", value);
			}
		}

		public ValueArgument<HostAccessScope> Scope
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scope"), typeof(ValueArgument<HostAccessScope>)) is ValueArgument<HostAccessScope> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<HostAccessScope>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scope", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsHostAccessAllowed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsHostAccessAllowed()
		{
		}
	}
	[NodeCategory("Network")]
	[NodeName("Is Host Access Allowed", false)]
	[NodeOverload("FrooxEngine.Network.IsHostAccessAllowed")]
	public class IsHostAccessAllowedUrl : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<System.Uri> Host
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Host"), typeof(ObjectArgument<System.Uri>)) is ObjectArgument<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Host", value);
			}
		}

		public ValueArgument<HostAccessScope> Scope
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scope"), typeof(ValueArgument<HostAccessScope>)) is ValueArgument<HostAccessScope> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<HostAccessScope>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scope", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsHostAccessAllowedUrl(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsHostAccessAllowedUrl()
		{
		}
	}
	[NodeName("Request Host Access", false)]
	[NodeCategory("Network")]
	[NodeOverload("FrooxEngine.Network.RequestHostAccess")]
	public abstract class RequestHostAccessBase : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnGranted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnGranted"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnGranted", value);
			}
		}

		public Continuation OnDenied
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnDenied"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnDenied", value);
			}
		}

		public Continuation OnIgnored
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnIgnored"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnIgnored", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public abstract Task<HostAccessPermission?> Request(FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RequestHostAccessBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RequestHostAccessBase()
		{
		}
	}
	public class RequestHostAccess : RequestHostAccessBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Host
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Host"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Host", value);
			}
		}

		public ValueInput<int> Port
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Port"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Port", value);
			}
		}

		public ValueInput<HostAccessScope> Scope
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scope"), typeof(ValueInput<HostAccessScope>)) is ValueInput<HostAccessScope> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<HostAccessScope>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scope", value);
			}
		}

		public ObjectInput<string> Reason
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reason"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reason", value);
			}
		}

		public override Task<HostAccessPermission?> Request(FrooxEngineContext context)
		{
			return (Task<HostAccessPermission?>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Request", context), typeof(Task<HostAccessPermission?>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RequestHostAccess(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RequestHostAccess()
		{
		}
	}
	public class RequestHostAccessUrl : RequestHostAccessBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<System.Uri> Host
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Host"), typeof(ObjectInput<System.Uri>)) is ObjectInput<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Host", value);
			}
		}

		public ObjectInput<string> Reason
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reason"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reason", value);
			}
		}

		public ValueInput<HostAccessScope> Scope
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scope"), typeof(ValueInput<HostAccessScope>)) is ValueInput<HostAccessScope> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<HostAccessScope>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scope", value);
			}
		}

		public override Task<HostAccessPermission?> Request(FrooxEngineContext context)
		{
			return (Task<HostAccessPermission?>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Request", context), typeof(Task<HostAccessPermission?>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RequestHostAccessUrl(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RequestHostAccessUrl()
		{
		}
	}
	[NodeCategory("Network")]
	public abstract class WebRequestBase : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<System.Uri> URL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "URL"), typeof(ObjectInput<System.Uri>)) is ObjectInput<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "URL", value);
			}
		}

		public ValueOutput<HttpStatusCode> StatusCode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "StatusCode"), typeof(ValueOutput<HttpStatusCode>)) is ValueOutput<HttpStatusCode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<HttpStatusCode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "StatusCode", value);
			}
		}

		public AsyncCall OnSent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSent"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSent", value);
			}
		}

		public Continuation OnResponse
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnResponse"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnResponse", value);
			}
		}

		public Continuation OnError
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnError"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnError", value);
			}
		}

		public Continuation OnDenied
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnDenied"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnDenied", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public abstract HttpRequestMessage CreateRequest(FrooxEngineContext context, System.Uri url);

		public abstract ResoniteBridge.ResoniteBridgeValue ProcessResponse(FrooxEngineContext context, HttpResponseMessage response);

		public abstract ResoniteBridge.ResoniteBridgeValue ProcessError(FrooxEngineContext context, HttpRequestException exception);

		public WebRequestBase()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "WebRequestBase", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WebRequestBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public abstract class StringResponseWebRequest : WebRequestBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectOutput<string> Content
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Content"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Content", value);
			}
		}

		public override ResoniteBridge.ResoniteBridgeValue ProcessResponse(FrooxEngineContext context, HttpResponseMessage response)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProcessResponse", context, response), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public override ResoniteBridge.ResoniteBridgeValue ProcessError(FrooxEngineContext context, HttpRequestException exception)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProcessError", context, exception), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public StringResponseWebRequest()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "StringResponseWebRequest", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringResponseWebRequest(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeName("GET String", false)]
	public class GET_String : StringResponseWebRequest, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override HttpRequestMessage CreateRequest(FrooxEngineContext context, System.Uri url)
		{
			return (HttpRequestMessage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CreateRequest", context, url), typeof(HttpRequestMessage));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GET_String(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GET_String()
		{
		}
	}
	[NodeName("POST String", false)]
	public class POST_String : StringResponseWebRequest, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> String
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "String"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "String", value);
			}
		}

		public ObjectInput<string> MediaType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MediaType"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MediaType", value);
			}
		}

		public override HttpRequestMessage CreateRequest(FrooxEngineContext context, System.Uri url)
		{
			return (HttpRequestMessage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CreateRequest", context, url), typeof(HttpRequestMessage));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public POST_String(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public POST_String()
		{
		}
	}
	[NodeCategory("Network/Websockets")]
	public class WebsocketConnect : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<WebsocketClient> Client
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Client"), typeof(ObjectInput<WebsocketClient>)) is ObjectInput<WebsocketClient> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<WebsocketClient>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Client", value);
			}
		}

		public ObjectInput<System.Uri> URL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "URL"), typeof(ObjectInput<System.Uri>)) is ObjectInput<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "URL", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> HandlingUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HandlingUser"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HandlingUser", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WebsocketConnect(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WebsocketConnect()
		{
		}
	}
	[NodeCategory("Network/Websockets")]
	public class WebsocketTextMessageSender : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<WebsocketClient> Client
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Client"), typeof(ObjectInput<WebsocketClient>)) is ObjectInput<WebsocketClient> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<WebsocketClient>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Client", value);
			}
		}

		public ObjectInput<string> Data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Data"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Data", value);
			}
		}

		public AsyncCall OnSendStart
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSendStart"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSendStart", value);
			}
		}

		public Continuation OnSent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSent"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSent", value);
			}
		}

		public Continuation OnSendError
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSendError"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSendError", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WebsocketTextMessageSender(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WebsocketTextMessageSender()
		{
		}
	}
	[NodeCategory("Network/Websockets")]
	public abstract class WebsocketEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<WebsocketClient> Client
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Client"), typeof(GlobalRef<WebsocketClient>)) is GlobalRef<WebsocketClient> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<WebsocketClient>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Client", value);
			}
		}

		public ObjectStore<WebsocketClient> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<WebsocketClient>)) is ObjectStore<WebsocketClient> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<WebsocketClient>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public void OnClientChanged(WebsocketClient client, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnClientChanged", client, context);
		}

		public abstract void Register(WebsocketClient client, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context);

		public abstract void Unregister(WebsocketClient client, FrooxEngineContext context);

		public abstract void Clear(FrooxEngineContext context);

		public WebsocketEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "WebsocketEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WebsocketEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class WebsocketConnectionEvents : WebsocketEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnConnected
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnConnected"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnConnected", value);
			}
		}

		public Call OnDisconnected
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnDisconnected"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnDisconnected", value);
			}
		}

		public ObjectStore<Action<WebsocketClient>> _connected
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_connected"), typeof(ObjectStore<Action<WebsocketClient>>)) is ObjectStore<Action<WebsocketClient>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<WebsocketClient>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_connected", value);
			}
		}

		public ObjectStore<Action<WebsocketClient>> _disconnected
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_disconnected"), typeof(ObjectStore<Action<WebsocketClient>>)) is ObjectStore<Action<WebsocketClient>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<WebsocketClient>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_disconnected", value);
			}
		}

		public override void Register(WebsocketClient client, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", client, path, dispatcher, context);
		}

		public override void Unregister(WebsocketClient client, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", client, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public void Connected(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Connected", context);
		}

		public void Disconnected(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Disconnected", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WebsocketConnectionEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WebsocketConnectionEvents()
		{
		}
	}
	public class WebsocketTextMessageReceiver : WebsocketEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnReceived
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnReceived"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnReceived", value);
			}
		}

		public ObjectOutput<string> Data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Data"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Data", value);
			}
		}

		public ObjectStore<Action<WebsocketClient, string>> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<Action<WebsocketClient, string>>)) is ObjectStore<Action<WebsocketClient, string>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<WebsocketClient, string>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _callback
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_callback"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_callback", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override void Register(WebsocketClient client, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", client, path, dispatcher, context);
		}

		public override void Unregister(WebsocketClient client, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", client, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public void Receive(FrooxEngineContext context, System.Object data)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Receive", context, data);
		}

		public WebsocketTextMessageReceiver()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "WebsocketTextMessageReceiver", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WebsocketTextMessageReceiver(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction
{
	[NodeCategory("Interaction")]
	public class ButtonEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<IButton> Button
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Button"), typeof(GlobalRef<IButton>)) is GlobalRef<IButton> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<IButton>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Button", value);
			}
		}

		public Call Pressed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Pressed"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Pressed", value);
			}
		}

		public Call Pressing
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Pressing"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Pressing", value);
			}
		}

		public Call Released
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Released"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Released", value);
			}
		}

		public Call HoverEnter
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HoverEnter"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HoverEnter", value);
			}
		}

		public Call HoverStay
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HoverStay"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HoverStay", value);
			}
		}

		public Call HoverLeave
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HoverLeave"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HoverLeave", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.Component> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(ObjectOutput<global::FrooxEngine.Component>)) is ObjectOutput<global::FrooxEngine.Component> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<global::FrooxEngine.Component>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public ValueOutput<float3> GlobalPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlobalPoint"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlobalPoint", value);
			}
		}

		public ValueOutput<float2> LocalPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalPoint"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalPoint", value);
			}
		}

		public ValueOutput<float2> NormalizedPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NormalizedPoint"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NormalizedPoint", value);
			}
		}

		public ObjectStore<IButton> _currentButton
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_currentButton"), typeof(ObjectStore<IButton>)) is ObjectStore<IButton> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<IButton>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_currentButton", value);
			}
		}

		public ObjectStore<ButtonEventHandler> _pressed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_pressed"), typeof(ObjectStore<ButtonEventHandler>)) is ObjectStore<ButtonEventHandler> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<ButtonEventHandler>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_pressed", value);
			}
		}

		public ObjectStore<ButtonEventHandler> _pressing
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_pressing"), typeof(ObjectStore<ButtonEventHandler>)) is ObjectStore<ButtonEventHandler> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<ButtonEventHandler>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_pressing", value);
			}
		}

		public ObjectStore<ButtonEventHandler> _released
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_released"), typeof(ObjectStore<ButtonEventHandler>)) is ObjectStore<ButtonEventHandler> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<ButtonEventHandler>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_released", value);
			}
		}

		public ObjectStore<ButtonEventHandler> _hoverEnter
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_hoverEnter"), typeof(ObjectStore<ButtonEventHandler>)) is ObjectStore<ButtonEventHandler> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<ButtonEventHandler>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_hoverEnter", value);
			}
		}

		public ObjectStore<ButtonEventHandler> _hoverStay
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_hoverStay"), typeof(ObjectStore<ButtonEventHandler>)) is ObjectStore<ButtonEventHandler> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<ButtonEventHandler>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_hoverStay", value);
			}
		}

		public ObjectStore<ButtonEventHandler> _hoverLeave
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_hoverLeave"), typeof(ObjectStore<ButtonEventHandler>)) is ObjectStore<ButtonEventHandler> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<ButtonEventHandler>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_hoverLeave", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnButtonChanged(IButton button, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnButtonChanged", button, context);
		}

		public void WriteEventData(in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteEventData", eventData, context);
		}

		public void OnPressed(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnPressed", button, eventData, context);
		}

		public void OnPressing(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnPressing", button, eventData, context);
		}

		public void OnRelased(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnRelased", button, eventData, context);
		}

		public void OnHoverEnter(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnHoverEnter", button, eventData, context);
		}

		public void OnHoverStay(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnHoverStay", button, eventData, context);
		}

		public void OnHoverLeave(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnHoverLeave", button, eventData, context);
		}

		public ButtonEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ButtonEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ButtonEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Interaction")]
	public class CloseContextMenu : ActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IWorldElement> Summoner
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Summoner"), typeof(ObjectInput<IWorldElement>)) is ObjectInput<IWorldElement> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IWorldElement>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Summoner", value);
			}
		}

		public override void Do(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CloseContextMenu(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CloseContextMenu()
		{
		}
	}
	[NodeCategory("Interaction")]
	[ContinuouslyChanging]
	public class IsContextMenuOpen : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsContextMenuOpen(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsContextMenuOpen()
		{
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public class ReleaseAllGrabbed : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<BodyNode> Node
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Node"), typeof(ValueInput<BodyNode>)) is ValueInput<BodyNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<BodyNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Node", value);
			}
		}

		public ValueInput<bool> SupressEvents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SupressEvents"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SupressEvents", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReleaseAllGrabbed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ReleaseAllGrabbed()
		{
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public abstract class GrabbableEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<IGrabbable> Grabbable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grabbable"), typeof(GlobalRef<IGrabbable>)) is GlobalRef<IGrabbable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<IGrabbable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grabbable", value);
			}
		}

		public ObjectStore<IGrabbable> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<IGrabbable>)) is ObjectStore<IGrabbable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<IGrabbable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ObjectStore<Action<IGrabbable>> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<Action<IGrabbable>>)) is ObjectStore<Action<IGrabbable>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<IGrabbable>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public void OnGrabbableChanged(IGrabbable grabbable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnGrabbableChanged", grabbable, context);
		}

		public abstract void Register(IGrabbable grabbable, Action<IGrabbable> handler);

		public abstract void Unregister(IGrabbable grabbable, Action<IGrabbable> handler);

		public abstract void Handle(IGrabbable grabbable, FrooxEngineContext context);

		public GrabbableEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "GrabbableEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GrabbableEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class OnGrabbableGrabbed : GrabbableEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnGrabbed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnGrabbed"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnGrabbed", value);
			}
		}

		public override void Register(IGrabbable grabbable, Action<IGrabbable> handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", grabbable, handler);
		}

		public override void Unregister(IGrabbable grabbable, Action<IGrabbable> handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", grabbable, handler);
		}

		public override void Handle(IGrabbable grabbable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Handle", grabbable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnGrabbableGrabbed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnGrabbableGrabbed()
		{
		}
	}
	public class OnGrabbableReleased : GrabbableEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnReleased
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnReleased"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnReleased", value);
			}
		}

		public override void Register(IGrabbable grabbable, Action<IGrabbable> handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", grabbable, handler);
		}

		public override void Unregister(IGrabbable grabbable, Action<IGrabbable> handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", grabbable, handler);
		}

		public override void Handle(IGrabbable grabbable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Handle", grabbable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnGrabbableReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnGrabbableReleased()
		{
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	[ContinuouslyChanging]
	public class CanBeGrabbed : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Slot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Slot"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Slot", value);
			}
		}

		public ObjectArgument<Grabber> Grabber
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grabber"), typeof(ObjectArgument<Grabber>)) is ObjectArgument<Grabber> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Grabber>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grabber", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CanBeGrabbed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CanBeGrabbed()
		{
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	[ContinuouslyChanging]
	public abstract class GrabbableValuePropertyNode<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ObjectArgument<IGrabbable> Grabbable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grabbable"), typeof(ObjectArgument<IGrabbable>)) is ObjectArgument<IGrabbable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IGrabbable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grabbable", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public abstract T Get(IGrabbable grabbable);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GrabbableValuePropertyNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GrabbableValuePropertyNode()
		{
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	[ContinuouslyChanging]
	public abstract class GrabbableObjectPropertyNode<T> : ObjectFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IGrabbable> Grabbable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grabbable"), typeof(ObjectArgument<IGrabbable>)) is ObjectArgument<IGrabbable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IGrabbable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grabbable", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public abstract T Get(IGrabbable grabbable);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GrabbableObjectPropertyNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GrabbableObjectPropertyNode()
		{
		}
	}
	public class IsGrabbableGrabbed : GrabbableValuePropertyNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Get(IGrabbable grabbable)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Get", grabbable), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsGrabbableGrabbed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsGrabbableGrabbed()
		{
		}
	}
	public class IsGrabbableScalable : GrabbableValuePropertyNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Get(IGrabbable grabbable)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Get", grabbable), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsGrabbableScalable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsGrabbableScalable()
		{
		}
	}
	public class IsGrabbableReceivable : GrabbableValuePropertyNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Get(IGrabbable grabbable)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Get", grabbable), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsGrabbableReceivable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsGrabbableReceivable()
		{
		}
	}
	public class GrabbablePriority : GrabbableValuePropertyNode<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Int32 Get(IGrabbable grabbable)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Get", grabbable), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GrabbablePriority(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GrabbablePriority()
		{
		}
	}
	public class GrabbableGrabber : GrabbableObjectPropertyNode<Grabber>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override Grabber Get(IGrabbable grabbable)
		{
			return (Grabber)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Get", grabbable), typeof(Grabber));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GrabbableGrabber(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GrabbableGrabber()
		{
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public class OnGrabbableReceiverSurfaceReceived : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<GrabbableReceiverSurface> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(GlobalRef<GrabbableReceiverSurface>)) is GlobalRef<GrabbableReceiverSurface> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<GrabbableReceiverSurface>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public Call OnReceived
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnReceived"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnReceived", value);
			}
		}

		public ObjectOutput<IGrabbable> ReceivedGrabbable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ReceivedGrabbable"), typeof(ObjectOutput<IGrabbable>)) is ObjectOutput<IGrabbable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<IGrabbable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ReceivedGrabbable", value);
			}
		}

		public ObjectOutput<Grabber> FromGrabber
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FromGrabber"), typeof(ObjectOutput<Grabber>)) is ObjectOutput<Grabber> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Grabber>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FromGrabber", value);
			}
		}

		public ObjectStore<GrabbableReceiverSurface> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<GrabbableReceiverSurface>)) is ObjectStore<GrabbableReceiverSurface> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<GrabbableReceiverSurface>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ObjectStore<Action<IGrabbable, Grabber>> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<Action<IGrabbable, Grabber>>)) is ObjectStore<Action<IGrabbable, Grabber>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<IGrabbable, Grabber>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnSourceChanged(GrabbableReceiverSurface surface, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnSourceChanged", surface, context);
		}

		public void Received(IGrabbable grabbable, Grabber grabber, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Received", grabbable, grabber, context);
		}

		public OnGrabbableReceiverSurfaceReceived()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "OnGrabbableReceiverSurfaceReceived", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnGrabbableReceiverSurfaceReceived(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public class GetUserGrabber : ObjectFunctionNode<FrooxEngineContext, Grabber>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ValueArgument<BodyNode> Node
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Node"), typeof(ValueArgument<BodyNode>)) is ValueArgument<BodyNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<BodyNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Node", value);
			}
		}

		public override Grabber Compute(FrooxEngineContext context)
		{
			return (Grabber)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Grabber));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetUserGrabber(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetUserGrabber()
		{
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public class GrabberBodyNode : ValueFunctionNode<FrooxEngineContext, BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Grabber> Grabber
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grabber"), typeof(ObjectArgument<Grabber>)) is ObjectArgument<Grabber> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Grabber>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grabber", value);
			}
		}

		public override BodyNode Compute(FrooxEngineContext context)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(BodyNode));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GrabberBodyNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GrabberBodyNode()
		{
		}
	}
	[NodeCategory("Interaction/UI")]
	public class TextEditorEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<TextEditor> Editor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Editor"), typeof(GlobalRef<TextEditor>)) is GlobalRef<TextEditor> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<TextEditor>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Editor", value);
			}
		}

		public Call EditingStarted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "EditingStarted"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "EditingStarted", value);
			}
		}

		public Call EditingChanged
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "EditingChanged"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "EditingChanged", value);
			}
		}

		public Call EditingFinished
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "EditingFinished"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "EditingFinished", value);
			}
		}

		public Call SubmitPressed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SubmitPressed"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SubmitPressed", value);
			}
		}

		public ObjectStore<TextEditor> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<TextEditor>)) is ObjectStore<TextEditor> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<TextEditor>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ObjectStore<Action<TextEditor>> _started
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_started"), typeof(ObjectStore<Action<TextEditor>>)) is ObjectStore<Action<TextEditor>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<TextEditor>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_started", value);
			}
		}

		public ObjectStore<Action<TextEditor>> _changed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_changed"), typeof(ObjectStore<Action<TextEditor>>)) is ObjectStore<Action<TextEditor>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<TextEditor>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_changed", value);
			}
		}

		public ObjectStore<Action<TextEditor>> _finished
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_finished"), typeof(ObjectStore<Action<TextEditor>>)) is ObjectStore<Action<TextEditor>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<TextEditor>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_finished", value);
			}
		}

		public ObjectStore<Action<TextEditor>> _submit
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_submit"), typeof(ObjectStore<Action<TextEditor>>)) is ObjectStore<Action<TextEditor>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<TextEditor>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_submit", value);
			}
		}

		public void OnEditorChanged(TextEditor editor, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnEditorChanged", editor, context);
		}

		public void OnStarted(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnStarted", context);
		}

		public void OnChanged(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnChanged", context);
		}

		public void OnFinished(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnFinished", context);
		}

		public void OnSubmit(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnSubmit", context);
		}

		public TextEditorEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TextEditorEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TextEditorEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Interaction")]
	public class TouchableEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<TouchEventRelay> EventSource
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "EventSource"), typeof(GlobalRef<TouchEventRelay>)) is GlobalRef<TouchEventRelay> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<TouchEventRelay>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "EventSource", value);
			}
		}

		public Call OnEvent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnEvent"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnEvent", value);
			}
		}

		public ValueOutput<EventState> Hover
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Hover"), typeof(ValueOutput<EventState>)) is ValueOutput<EventState> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<EventState>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Hover", value);
			}
		}

		public ValueOutput<EventState> Touch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Touch"), typeof(ValueOutput<EventState>)) is ValueOutput<EventState> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<EventState>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Touch", value);
			}
		}

		public ValueOutput<float3> Point
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point", value);
			}
		}

		public ValueOutput<float3> Tip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tip"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tip", value);
			}
		}

		public ValueOutput<TouchType> Type
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Type"), typeof(ValueOutput<TouchType>)) is ValueOutput<TouchType> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<TouchType>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Type", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.Component> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(ObjectOutput<global::FrooxEngine.Component>)) is ObjectOutput<global::FrooxEngine.Component> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<global::FrooxEngine.Component>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public ObjectStore<TouchEventRelay> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<TouchEventRelay>)) is ObjectStore<TouchEventRelay> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<TouchEventRelay>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ObjectStore<TouchEvent> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<TouchEvent>)) is ObjectStore<TouchEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<TouchEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnEventSourceChanged(TouchEventRelay source, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnEventSourceChanged", source, context);
		}

		public void OnTouched(ITouchable touchable, in TouchEventInfo eventInfo, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnTouched", touchable, eventInfo, context);
		}

		public TouchableEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TouchableEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TouchableEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tools
{
	[NodeCategory("Tools")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.EquipTooltip", null)]
	public class EquipTool : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ITool> Tool
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tool"), typeof(ObjectInput<ITool>)) is ObjectInput<ITool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<ITool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tool", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ValueInput<Chirality> Side
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Side"), typeof(ValueInput<Chirality>)) is ValueInput<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Side", value);
			}
		}

		public ValueInput<bool> DequipExisting
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DequipExisting"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DequipExisting", value);
			}
		}

		public Continuation OnEquipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnEquipped"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnEquipped", value);
			}
		}

		public Continuation OnEquipFail
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnEquipFail"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnEquipFail", value);
			}
		}

		public static Chirality SideDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "EquipTool", ResoniteBridge.ResoniteBridgeValueType.Type), "SideDefault"), typeof(Chirality)) is Chirality __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Chirality");
				}
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public EquipTool(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public EquipTool()
		{
		}
	}
	[NodeCategory("Tools")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.DequipTooltip", null)]
	public class DequipTool : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ValueInput<Chirality> Side
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Side"), typeof(ValueInput<Chirality>)) is ValueInput<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Side", value);
			}
		}

		public ValueInput<bool> PopOff
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PopOff"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PopOff", value);
			}
		}

		public Continuation OnDequipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnDequipped"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnDequipped", value);
			}
		}

		public Continuation OnDequipFail
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnDequipFail"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnDequipFail", value);
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DequipTool(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DequipTool()
		{
		}
	}
	[NodeCategory("Tools")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.TooltipEvents", null)]
	public class ToolEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<ITool> Tool
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tool"), typeof(GlobalRef<ITool>)) is GlobalRef<ITool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<ITool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tool", value);
			}
		}

		public Call Equipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Equipped"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Equipped", value);
			}
		}

		public Call Dequipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Dequipped"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Dequipped", value);
			}
		}

		public ObjectStore<ITool> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<ITool>)) is ObjectStore<ITool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<ITool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ObjectStore<Action> _equipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_equipped"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_equipped", value);
			}
		}

		public ObjectStore<Action> _dequipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_dequipped"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_dequipped", value);
			}
		}

		public void OnToolChanged(ITool tool, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnToolChanged", tool, context);
		}

		public void HandleEquipped(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEquipped", context, args);
		}

		public void HandleDequipped(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleDequipped", context, args);
		}

		public ToolEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ToolEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ToolEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Tools")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.RawDataTooltipEvents", null)]
	public class RawDataToolEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<RawDataTool> Tool
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tool"), typeof(GlobalRef<RawDataTool>)) is GlobalRef<RawDataTool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<RawDataTool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tool", value);
			}
		}

		public Call Equipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Equipped"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Equipped", value);
			}
		}

		public Call Dequipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Dequipped"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Dequipped", value);
			}
		}

		public Call ToolUpdate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ToolUpdate"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ToolUpdate", value);
			}
		}

		public Call PrimaryPressed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PrimaryPressed"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PrimaryPressed", value);
			}
		}

		public Call PrimaryHeld
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PrimaryHeld"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PrimaryHeld", value);
			}
		}

		public Call PrimaryReleased
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PrimaryReleased"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PrimaryReleased", value);
			}
		}

		public Call SecondaryPressed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SecondaryPressed"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SecondaryPressed", value);
			}
		}

		public Call SecondaryHeld
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SecondaryHeld"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SecondaryHeld", value);
			}
		}

		public Call SecondaryReleased
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SecondaryReleased"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SecondaryReleased", value);
			}
		}

		public ObjectStore<RawDataTool> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<RawDataTool>)) is ObjectStore<RawDataTool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<RawDataTool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ObjectStore<Action> _update
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_update"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_update", value);
			}
		}

		public ObjectStore<Action> _equipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_equipped"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_equipped", value);
			}
		}

		public ObjectStore<Action> _dequipped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_dequipped"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_dequipped", value);
			}
		}

		public ObjectStore<Action> _primaryPressed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_primaryPressed"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_primaryPressed", value);
			}
		}

		public ObjectStore<Action> _primaryHeld
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_primaryHeld"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_primaryHeld", value);
			}
		}

		public ObjectStore<Action> _primaryReleased
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_primaryReleased"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_primaryReleased", value);
			}
		}

		public ObjectStore<Action> _secondaryPressed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_secondaryPressed"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_secondaryPressed", value);
			}
		}

		public ObjectStore<Action> _secondaryHeld
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_secondaryHeld"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_secondaryHeld", value);
			}
		}

		public ObjectStore<Action> _secondaryReleased
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_secondaryReleased"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_secondaryReleased", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _handleUpdate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handleUpdate"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handleUpdate", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _handlePrimaryPressed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handlePrimaryPressed"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handlePrimaryPressed", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _handlePrimaryHeld
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handlePrimaryHeld"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handlePrimaryHeld", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _handlePrimaryReleased
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handlePrimaryReleased"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handlePrimaryReleased", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _handleSecondaryPressed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handleSecondaryPressed"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handleSecondaryPressed", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _handleSecondaryHeld
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handleSecondaryHeld"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handleSecondaryHeld", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _handleSecondaryReleased
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handleSecondaryReleased"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handleSecondaryReleased", value);
			}
		}

		public void OnToolChanged(RawDataTool tool, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnToolChanged", tool, context);
		}

		public void HandleEquipped(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEquipped", context, args);
		}

		public void HandleDequipped(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleDequipped", context, args);
		}

		public void HandleUpdate(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleUpdate", context, args);
		}

		public void HandlePrimaryPressed(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandlePrimaryPressed", context, args);
		}

		public void HandlePrimaryHeld(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandlePrimaryHeld", context, args);
		}

		public void HandlePrimaryReleased(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandlePrimaryReleased", context, args);
		}

		public void HandleSecondaryPressed(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleSecondaryPressed", context, args);
		}

		public void HandleSecondaryHeld(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleSecondaryHeld", context, args);
		}

		public void HandleSecondaryReleased(FrooxEngineContext context, System.Object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleSecondaryReleased", context, args);
		}

		public RawDataToolEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RawDataToolEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RawDataToolEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.GetTooltip", null)]
	public class GetTool : ObjectFunctionNode<FrooxEngineContext, ITool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ValueArgument<Chirality> Side
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Side"), typeof(ValueArgument<Chirality>)) is ValueArgument<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Side", value);
			}
		}

		public static Chirality SideDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "GetTool", ResoniteBridge.ResoniteBridgeValueType.Type), "SideDefault"), typeof(Chirality)) is Chirality __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Chirality");
				}
			}
		}

		public override ITool Compute(FrooxEngineContext context)
		{
			return (ITool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(ITool));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetTool(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetTool()
		{
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.HasTooltip", null)]
	public class HasTool : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ValueArgument<Chirality> Side
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Side"), typeof(ValueArgument<Chirality>)) is ValueArgument<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Side", value);
			}
		}

		public static Chirality SideDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "HasTool", ResoniteBridge.ResoniteBridgeValueType.Type), "SideDefault"), typeof(Chirality)) is Chirality __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Chirality");
				}
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HasTool(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HasTool()
		{
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.IsTooltipEquipped", null)]
	public class IsToolEquipped : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ITool> Tool
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tool"), typeof(ObjectArgument<ITool>)) is ObjectArgument<ITool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<ITool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tool", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsToolEquipped(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsToolEquipped()
		{
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.IsTooltipInUse", null)]
	public class IsToolInUse : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ITool> Tool
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tool"), typeof(ObjectArgument<ITool>)) is ObjectArgument<ITool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<ITool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tool", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsToolInUse(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsToolInUse()
		{
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.TooltipEquippingSlot", null)]
	public class ToolEquippingSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ITool> Tool
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tool"), typeof(ObjectArgument<ITool>)) is ObjectArgument<ITool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<ITool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tool", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ToolEquippingSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ToolEquippingSlot()
		{
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.TooltipEquippingSide", null)]
	public class ToolEquippingSide : ValueFunctionNode<FrooxEngineContext, Chirality>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ITool> Tool
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tool"), typeof(ObjectArgument<ITool>)) is ObjectArgument<ITool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<ITool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tool", value);
			}
		}

		public override Chirality Compute(FrooxEngineContext context)
		{
			return (Chirality)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Chirality));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ToolEquippingSide(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ToolEquippingSide()
		{
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.GetRawDataTooltipHit", null)]
	public class GetRawDataToolHit : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<RawDataTool> Tool
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tool"), typeof(ObjectArgument<RawDataTool>)) is ObjectArgument<RawDataTool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<RawDataTool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tool", value);
			}
		}

		public ObjectOutput<ICollider> HitCollider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitCollider"), typeof(ObjectOutput<ICollider>)) is ObjectOutput<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitCollider", value);
			}
		}

		public ValueOutput<float3> HitPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitPoint"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitPoint", value);
			}
		}

		public ValueOutput<float3> HitNormal
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitNormal"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitNormal", value);
			}
		}

		public ValueOutput<float> HitDistance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitDistance"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitDistance", value);
			}
		}

		public ValueOutput<int> HitTriangleIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitTriangleIndex"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitTriangleIndex", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public GetRawDataToolHit()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "GetRawDataToolHit", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetRawDataToolHit(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Focusing
{
	[NodeCategory("Interaction/UI")]
	public class FocusFocusable : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IFocusable> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<IFocusable>)) is ObjectInput<IFocusable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IFocusable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FocusFocusable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FocusFocusable()
		{
		}
	}
	[NodeCategory("Interaction/UI")]
	public class DefocusFocusable : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IFocusable> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<IFocusable>)) is ObjectInput<IFocusable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IFocusable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DefocusFocusable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DefocusFocusable()
		{
		}
	}
	[NodeCategory("Interaction/UI")]
	public class ClearFocus : ActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Do(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ClearFocus(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ClearFocus()
		{
		}
	}
	[NodeCategory("Interaction/UI")]
	[ContinuouslyChanging]
	public class HasLocalFocus : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IFocusable> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectArgument<IFocusable>)) is ObjectArgument<IFocusable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IFocusable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HasLocalFocus(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HasLocalFocus()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Mouse
{
	[NodeCategory("Devices/Mouse")]
	[ContinuouslyChanging]
	public abstract class MouseNode<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public abstract T GetState(InputInterface input);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MouseNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MouseNode()
		{
		}
	}
	public class LeftMousePressed : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetState(InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LeftMousePressed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LeftMousePressed()
		{
		}
	}
	public class LeftMouseHeld : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetState(InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LeftMouseHeld(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LeftMouseHeld()
		{
		}
	}
	public class LeftMouseReleased : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetState(InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LeftMouseReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LeftMouseReleased()
		{
		}
	}
	public class RightMousePressed : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetState(InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RightMousePressed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RightMousePressed()
		{
		}
	}
	public class RightMouseHeld : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetState(InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RightMouseHeld(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RightMouseHeld()
		{
		}
	}
	public class RightMouseReleased : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetState(InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RightMouseReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RightMouseReleased()
		{
		}
	}
	public class MiddleMousePressed : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetState(InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MiddleMousePressed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MiddleMousePressed()
		{
		}
	}
	public class MiddleMouseHeld : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetState(InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MiddleMouseHeld(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MiddleMouseHeld()
		{
		}
	}
	public class MiddleMouseReleased : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetState(InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MiddleMouseReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MiddleMouseReleased()
		{
		}
	}
	public class MouseScrollDelta : MouseNode<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single GetState(InputInterface input)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MouseScrollDelta(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MouseScrollDelta()
		{
		}
	}
	public class MouseScrollDelta2D : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(float2));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MouseScrollDelta2D(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MouseScrollDelta2D()
		{
		}
	}
	public class MousePosition : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(float2));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MousePosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MousePosition()
		{
		}
	}
	public class NormalizedMousePosition : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(float2));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public NormalizedMousePosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public NormalizedMousePosition()
		{
		}
	}
	public class DesktopMousePosition : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(float2));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DesktopMousePosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DesktopMousePosition()
		{
		}
	}
	public class MouseMovementDelta : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetState", input), typeof(float2));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MouseMovementDelta(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MouseMovementDelta()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Keyboard
{
	public static class KeyboardNodeHelper
	{
		public static System.Boolean CanReadKeyboard(this FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "KeyboardNodeHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "CanReadKeyboard", context), typeof(System.Boolean));
		}
	}
	[NodeCategory("Devices/Keyboard")]
	[ContinuouslyChanging]
	public class TypeDelta : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TypeDelta(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TypeDelta()
		{
		}
	}
	[NodeCategory("Devices/Keyboard")]
	[ContinuouslyChanging]
	public abstract class KeyNode : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Key> Key
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Key"), typeof(ValueArgument<Key>)) is ValueArgument<Key> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<Key>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Key", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public abstract System.Boolean GetStatus(Key key, InputInterface input);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public KeyNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public KeyNode()
		{
		}
	}
	public class KeyPressed : KeyNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetStatus(Key key, InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetStatus", key, input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public KeyPressed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public KeyPressed()
		{
		}
	}
	public class KeyHeld : KeyNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetStatus(Key key, InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetStatus", key, input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public KeyHeld(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public KeyHeld()
		{
		}
	}
	public class KeyReleased : KeyNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetStatus(Key key, InputInterface input)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetStatus", key, input), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public KeyReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public KeyReleased()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Headsets
{
	[NodeCategory("Devices")]
	public class GeneralHeadset : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ValueOutput<bool> IsActive
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsActive"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsActive", value);
			}
		}

		public ValueOutput<float> BatteryLevel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BatteryLevel"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BatteryLevel", value);
			}
		}

		public ValueOutput<bool> IsBatteryCharging
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsBatteryCharging"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsBatteryCharging", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public GeneralHeadset()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "GeneralHeadset", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GeneralHeadset(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Haptics
{
	[NodeCategory("Devices/Haptics")]
	public class TriggerHapticsInHierarchy : ActionBreakableFlowNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> TargetHierarchy
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TargetHierarchy"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TargetHierarchy", value);
			}
		}

		public ValueInput<float> RelativeIntensity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RelativeIntensity"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RelativeIntensity", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TriggerHapticsInHierarchy(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TriggerHapticsInHierarchy()
		{
		}
	}
	[NodeCategory("Devices/Haptics")]
	public class TriggerHapticsOnController : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<Chirality> Side
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Side"), typeof(ValueInput<Chirality>)) is ValueInput<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Side", value);
			}
		}

		public ValueInput<float> RelativeIntensity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RelativeIntensity"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RelativeIntensity", value);
			}
		}

		public static Chirality SideDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TriggerHapticsOnController", ResoniteBridge.ResoniteBridgeValueType.Type), "SideDefault"), typeof(Chirality)) is Chirality __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Chirality");
				}
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TriggerHapticsOnController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TriggerHapticsOnController()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Display
{
	[NodeCategory("Devices/Display")]
	public class LocalPrimaryResolution : ValueFunctionNode<FrooxEngineContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override int2 Compute(FrooxEngineContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(int2));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalPrimaryResolution(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalPrimaryResolution()
		{
		}
	}
	[NodeCategory("Devices/Display")]
	[ContinuouslyChanging]
	public class LocalWindowResolution : ValueFunctionNode<FrooxEngineContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override int2 Compute(FrooxEngineContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(int2));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalWindowResolution(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalWindowResolution()
		{
		}
	}
	[NodeCategory("Devices/Display")]
	[ContinuouslyChanging]
	public class LocalWindowAspectRatio : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalWindowAspectRatio(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalWindowAspectRatio()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Controllers
{
	[NodeCategory("Devices/Controllers")]
	public abstract class ControllerNode<C, P> : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where C : class, IStandardController where P : ControllerProxy<C>, new()
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ValueArgument<Chirality> Node
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Node"), typeof(ValueArgument<Chirality>)) is ValueArgument<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Node", value);
			}
		}

		public ValueOutput<bool> IsActive
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsActive"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsActive", value);
			}
		}

		public ObjectOutput<Type> Type
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Type"), typeof(ObjectOutput<Type>)) is ObjectOutput<Type> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Type>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Type", value);
			}
		}

		public ValueOutput<float> BatteryLevel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BatteryLevel"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BatteryLevel", value);
			}
		}

		public ValueOutput<bool> IsBatteryCharging
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsBatteryCharging"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsBatteryCharging", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public abstract void Update(P proxy, FrooxEngineContext context);

		public ControllerNode()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ControllerNode", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ControllerNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class StandardController : ControllerNode<IStandardController, StandardControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> Primary
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Primary"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Primary", value);
			}
		}

		public ValueOutput<bool> Secondary
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Secondary"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Secondary", value);
			}
		}

		public ValueOutput<bool> Grab
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grab"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grab", value);
			}
		}

		public ValueOutput<bool> Menu
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Menu"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Menu", value);
			}
		}

		public ValueOutput<float> Strength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Strength"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Strength", value);
			}
		}

		public ValueOutput<float2> Axis
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Axis"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Axis", value);
			}
		}

		public override void Update(StandardControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update", proxy, context);
		}

		public StandardController()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "StandardController", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StandardController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class IndexController : ControllerNode<global::FrooxEngine.IndexController, IndexControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> ButtonA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonA"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonA", value);
			}
		}

		public ValueOutput<bool> ButtonB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonB"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonB", value);
			}
		}

		public ValueOutput<bool> ButtonA_Touch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonA_Touch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonA_Touch", value);
			}
		}

		public ValueOutput<bool> ButtonB_Touch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonB_Touch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonB_Touch", value);
			}
		}

		public ValueOutput<float> Grip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grip"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> GripTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GripTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GripTouch", value);
			}
		}

		public ValueOutput<bool> GripClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GripClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GripClick", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Joystick"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JoystickTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JoystickTouch", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JoystickClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerTouch", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerClick", value);
			}
		}

		public ValueOutput<float2> Touchpad
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Touchpad"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Touchpad", value);
			}
		}

		public ValueOutput<bool> TouchpadTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TouchpadTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TouchpadTouch", value);
			}
		}

		public ValueOutput<bool> TouchpadPress
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TouchpadPress"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TouchpadPress", value);
			}
		}

		public ValueOutput<float> TouchpadForce
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TouchpadForce"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TouchpadForce", value);
			}
		}

		public override void Update(IndexControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update", proxy, context);
		}

		public IndexController()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "IndexController", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IndexController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class TouchController : ControllerNode<global::FrooxEngine.TouchController, TouchControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<global::FrooxEngine.TouchController.Model> Model
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Model"), typeof(ValueOutput<global::FrooxEngine.TouchController.Model>)) is ValueOutput<global::FrooxEngine.TouchController.Model> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<global::FrooxEngine.TouchController.Model>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Model", value);
			}
		}

		public ValueOutput<bool> Start
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Start"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Start", value);
			}
		}

		public ValueOutput<bool> ButtonYB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonYB"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonYB", value);
			}
		}

		public ValueOutput<bool> ButtonXA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonXA"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonXA", value);
			}
		}

		public ValueOutput<bool> ButtonYB_Touch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonYB_Touch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonYB_Touch", value);
			}
		}

		public ValueOutput<bool> ButtonXA_Touch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonXA_Touch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonXA_Touch", value);
			}
		}

		public ValueOutput<bool> ThumbRestTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ThumbRestTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ThumbRestTouch", value);
			}
		}

		public ValueOutput<float> Grip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grip"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> GripClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GripClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GripClick", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Joystick"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JoystickTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JoystickTouch", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JoystickClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerTouch", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerClick", value);
			}
		}

		public override void Update(TouchControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update", proxy, context);
		}

		public TouchController()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TouchController", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TouchController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class ViveController : ControllerNode<global::FrooxEngine.ViveController, ViveControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> Grip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grip"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> App
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "App"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "App", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerHair
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerHair"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerHair", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerClick", value);
			}
		}

		public ValueOutput<float2> Touchpad
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Touchpad"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Touchpad", value);
			}
		}

		public ValueOutput<bool> TouchpadTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TouchpadTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TouchpadTouch", value);
			}
		}

		public ValueOutput<bool> TouchpadClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TouchpadClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TouchpadClick", value);
			}
		}

		public override void Update(ViveControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update", proxy, context);
		}

		public ViveController()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ViveController", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ViveController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class WindowsMRController : ControllerNode<global::FrooxEngine.WindowsMRController, WindowsMRControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> Grip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grip"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> App
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "App"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "App", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Joystick"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JoystickClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerHair
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerHair"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerHair", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerClick", value);
			}
		}

		public ValueOutput<float2> Touchpad
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Touchpad"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Touchpad", value);
			}
		}

		public ValueOutput<bool> TouchpadTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TouchpadTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TouchpadTouch", value);
			}
		}

		public ValueOutput<bool> TouchpadClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TouchpadClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TouchpadClick", value);
			}
		}

		public override void Update(WindowsMRControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update", proxy, context);
		}

		public WindowsMRController()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "WindowsMRController", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WindowsMRController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class HPReverbController : ControllerNode<global::FrooxEngine.HPReverbController, HPReverbControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> AppMenu
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AppMenu"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AppMenu", value);
			}
		}

		public ValueOutput<bool> ButtonYB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonYB"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonYB", value);
			}
		}

		public ValueOutput<bool> ButtonXA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonXA"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonXA", value);
			}
		}

		public ValueOutput<float> Grip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Grip"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> GripTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GripTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GripTouch", value);
			}
		}

		public ValueOutput<bool> GripClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GripClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GripClick", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Joystick"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JoystickClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerClick", value);
			}
		}

		public override void Update(HPReverbControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update", proxy, context);
		}

		public HPReverbController()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "HPReverbController", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HPReverbController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class CosmosController : ControllerNode<global::FrooxEngine.CosmosController, CosmosControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> Menu
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Menu"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Menu", value);
			}
		}

		public ValueOutput<bool> ButtonBY
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonBY"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonBY", value);
			}
		}

		public ValueOutput<bool> ButtonAX
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ButtonAX"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ButtonAX", value);
			}
		}

		public ValueOutput<bool> GripClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GripClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GripClick", value);
			}
		}

		public ValueOutput<bool> Bumper
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Bumper"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Bumper", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Joystick"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JoystickTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JoystickTouch", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JoystickClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerTouch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerTouch"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerTouch", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggerClick"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggerClick", value);
			}
		}

		public override void Update(CosmosControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update", proxy, context);
		}

		public CosmosController()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "CosmosController", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CosmosController(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Experimental
{
	[NodeCategory("Experimental")]
	public class WriteTextToFile : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> String
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "String"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "String", value);
			}
		}

		public ObjectInput<string> FilePath
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FilePath"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FilePath", value);
			}
		}

		public ValueInput<bool> Append
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Append"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Append", value);
			}
		}

		public ValueInput<bool> NewLine
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NewLine"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NewLine", value);
			}
		}

		public AsyncCall OnWriteStarted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnWriteStarted"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnWriteStarted", value);
			}
		}

		public Continuation OnWriteFinished
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnWriteFinished"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnWriteFinished", value);
			}
		}

		public Continuation OnWriteFail
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnWriteFail"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnWriteFail", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteTextToFile(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteTextToFile()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Debugging
{
	[NodeCategory("Debug")]
	[ContinuouslyChanging]
	public class EstimatedMasterClockError : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public EstimatedMasterClockError(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public EstimatedMasterClockError()
		{
		}
	}
	[NodeCategory("Debug")]
	public abstract class DebugNode : ActionFlowNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public static colorX ColorDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugNode", ResoniteBridge.ResoniteBridgeValueType.Type), "ColorDefault"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
		}

		public override void Do(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context);
		}

		public abstract void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DebugNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DebugNode()
		{
		}
	}
	public class DebugText : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ObjectInput<string> Text
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Text"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Text", value);
			}
		}

		public ValueInput<float> Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public static System.Single SizeDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugText", ResoniteBridge.ResoniteBridgeValueType.Type), "SizeDefault"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunDebug", debug, container, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DebugText(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DebugText()
		{
		}
	}
	public class DebugVector : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueInput<float3> Vector
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Vector"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Vector", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public ValueInput<float> RadiusRatio
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RadiusRatio"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RadiusRatio", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public static System.Single RadiusRatioDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugVector", ResoniteBridge.ResoniteBridgeValueType.Type), "RadiusRatioDefault"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunDebug", debug, container, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DebugVector(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DebugVector()
		{
		}
	}
	public class DebugLine : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point0"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point0", value);
			}
		}

		public ValueInput<float3> Point1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point1"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point1", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public ValueInput<float> Radius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Radius"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Radius", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public static System.Single RadiusDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugLine", ResoniteBridge.ResoniteBridgeValueType.Type), "RadiusDefault"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunDebug", debug, container, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DebugLine(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DebugLine()
		{
		}
	}
	public class DebugTriangle : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point0"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point0", value);
			}
		}

		public ValueInput<float3> Point1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point1"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point1", value);
			}
		}

		public ValueInput<float3> Point2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point2"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point2", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunDebug", debug, container, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DebugTriangle(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DebugTriangle()
		{
		}
	}
	public class DebugSphere : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point", value);
			}
		}

		public ValueInput<float> Radius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Radius"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Radius", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunDebug", debug, container, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DebugSphere(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DebugSphere()
		{
		}
	}
	public class DebugBox : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point", value);
			}
		}

		public ValueInput<float3> Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public ValueInput<floatQ> Orientation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Orientation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Orientation", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public static floatQ OrientationDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugBox", ResoniteBridge.ResoniteBridgeValueType.Type), "OrientationDefault"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
		}

		public override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunDebug", debug, container, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DebugBox(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DebugBox()
		{
		}
	}
	public class DebugAxes : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueInput<floatQ>)) is ValueInput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public ValueInput<float> Length
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Length"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Length", value);
			}
		}

		public ValueInput<colorX> RightColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RightColor"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RightColor", value);
			}
		}

		public ValueInput<colorX> UpColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UpColor"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UpColor", value);
			}
		}

		public ValueInput<colorX> ForwardColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ForwardColor"), typeof(ValueInput<colorX>)) is ValueInput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ForwardColor", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public static floatQ RotationDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugAxes", ResoniteBridge.ResoniteBridgeValueType.Type), "RotationDefault"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
		}

		public static System.Single LengthDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugAxes", ResoniteBridge.ResoniteBridgeValueType.Type), "LengthDefault"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public static colorX RightColorDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugAxes", ResoniteBridge.ResoniteBridgeValueType.Type), "RightColorDefault"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
		}

		public static colorX UpColorDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugAxes", ResoniteBridge.ResoniteBridgeValueType.Type), "UpColorDefault"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
		}

		public static colorX ForwardColorDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DebugAxes", ResoniteBridge.ResoniteBridgeValueType.Type), "ForwardColorDefault"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
		}

		public override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunDebug", debug, container, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DebugAxes(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DebugAxes()
		{
		}
	}
	[NodeCategory("Experimental")]
	[FeatureUpgradeReplacement("DebuggingTest", 1, typeof(TestFeatureUpgrade))]
	public class TestFeatureUpgrade : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TestFeatureUpgrade(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TestFeatureUpgrade()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Elements
{
	[NodeCategory("References/Elements")]
	public class ElementExists : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Element"), typeof(ObjectArgument<IWorldElement>)) is ObjectArgument<IWorldElement> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IWorldElement>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Element", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ElementExists(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ElementExists()
		{
		}
	}
	[NodeCategory("References/Elements")]
	public class IsRemoved : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Element"), typeof(ObjectArgument<IWorldElement>)) is ObjectArgument<IWorldElement> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IWorldElement>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Element", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsRemoved(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsRemoved()
		{
		}
	}
	[NodeCategory("References/Elements")]
	public class IsDisposed : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Worker> Element
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Element"), typeof(ObjectArgument<Worker>)) is ObjectArgument<Worker> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Worker>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Element", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsDisposed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsDisposed()
		{
		}
	}
	[NodeCategory("References/Elements")]
	public class IsDestroyed : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IDestroyable> Element
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Element"), typeof(ObjectArgument<IDestroyable>)) is ObjectArgument<IDestroyable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IDestroyable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Element", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsDestroyed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsDestroyed()
		{
		}
	}
	[NodeCategory("References/Elements")]
	public class IsLocalElement : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Element"), typeof(ObjectArgument<IWorldElement>)) is ObjectArgument<IWorldElement> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IWorldElement>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Element", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsLocalElement(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsLocalElement()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Slots
{
	[NodeCategory("Slots/Info")]
	public class SetSlotName : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectInput<string> Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Name"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Name", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetSlotName(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetSlotName()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class SetSlotActiveSelf : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueInput<bool> Active
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Active"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Active", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetSlotActiveSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetSlotActiveSelf()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class SetSlotPersistentSelf : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueInput<bool> Persistent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Persistent"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Persistent", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetSlotPersistentSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetSlotPersistentSelf()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class SetTag : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectInput<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetTag()
		{
		}
	}
	[NodeCategory("Slots")]
	public class SetChildIndex : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueInput<int> Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Index"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Index", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetChildIndex(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetChildIndex()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class SetSlotOrderOffset : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueInput<long> OrderOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OrderOffset"), typeof(ValueInput<long>)) is ValueInput<long> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<long>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OrderOffset", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetSlotOrderOffset(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetSlotOrderOffset()
		{
		}
	}
	[NodeCategory("Slots")]
	public class DuplicateSlot : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Template
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Template"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Template", value);
			}
		}

		public ObjectOutput<Slot> Duplicate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duplicate"), typeof(ObjectOutput<Slot>)) is ObjectOutput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duplicate", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public DuplicateSlot()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DuplicateSlot", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DuplicateSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class SetParent : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectInput<Slot> NewParent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NewParent"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NewParent", value);
			}
		}

		public ValueInput<bool> PreserveGlobalPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PreserveGlobalPosition"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PreserveGlobalPosition", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetParent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetParent()
		{
		}
	}
	[NodeCategory("Slots")]
	public class DestroySlot : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueInput<bool> PreserveAssets
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PreserveAssets"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PreserveAssets", value);
			}
		}

		public ValueInput<bool> SendDestroyingEvent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SendDestroyingEvent"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SendDestroyingEvent", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DestroySlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DestroySlot()
		{
		}
	}
	[NodeCategory("Slots")]
	public class DestroySlotChildren : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueInput<bool> PreserveAssets
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PreserveAssets"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PreserveAssets", value);
			}
		}

		public ValueInput<bool> SendDestroyingEvent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SendDestroyingEvent"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SendDestroyingEvent", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DestroySlotChildren(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DestroySlotChildren()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnStart : ProxyVoidNode<FrooxEngineContext, OnStart.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Start
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Start"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Start", value);
				}
			}

			public System.Boolean StartScheduled
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "StartScheduled"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "StartScheduled", value);
				}
			}

			public override void OnStart()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnStart");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyHost"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyHost", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, eventData);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnStart(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnStart()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnDuplicate : ProxyVoidNode<FrooxEngineContext, OnDuplicate.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Duplicate
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duplicate"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duplicate", value);
				}
			}

			public System.Boolean DuplicateScheduled
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DuplicateScheduled"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DuplicateScheduled", value);
				}
			}

			public override void OnDuplicate()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnDuplicate");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, eventData);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnDuplicate(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnDuplicate()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnPaste : ProxyVoidNode<FrooxEngineContext, OnPaste.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Paste
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Paste"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Paste", value);
				}
			}

			public System.Boolean PasteScheduled
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PasteScheduled"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PasteScheduled", value);
				}
			}

			public override void OnPaste()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnPaste");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, eventData);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnPaste(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnPaste()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnActivated : ProxyVoidNode<FrooxEngineContext, OnActivated.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Activated
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Activated"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Activated", value);
				}
			}

			public System.Boolean ActivatedScheduled
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ActivatedScheduled"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ActivatedScheduled", value);
				}
			}

			public override void OnActivated()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnActivated");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyHost"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyHost", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, eventData);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnActivated(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnActivated()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnDeactivated : ProxyVoidNode<FrooxEngineContext, OnDeactivated.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Deactivated
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Deactivated"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Deactivated", value);
				}
			}

			public System.Boolean DeactivatedScheduled
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DeactivatedScheduled"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DeactivatedScheduled", value);
				}
			}

			public override void OnDeactivated()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnDeactivated");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyHost"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyHost", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, eventData);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnDeactivated(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnDeactivated()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnDestroy : ProxyVoidNode<FrooxEngineContext, OnDestroy.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public new Action Destroy
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Destroy"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Destroy", value);
				}
			}

			public override void OnDestroy()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnDestroy");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyHost"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyHost", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnDestroy(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnDestroy()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnDestroying : ProxyVoidNode<FrooxEngineContext, OnDestroying.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Destroying
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Destroying"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Destroying", value);
				}
			}

			public override void OnDestroying()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnDestroying");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnDestroying(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnDestroying()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnSaving : ProxyVoidNode<FrooxEngineContext, OnSaving.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Saving
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Saving"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Saving", value);
				}
			}

			public override void OnSaving(SaveControl control)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnSaving", control);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnSaving(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnSaving()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnLoaded : ProxyVoidNode<FrooxEngineContext, OnLoaded.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Loaded
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Loaded"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Loaded", value);
				}
			}

			public System.Boolean LoadedScheduled
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LoadedScheduled"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LoadedScheduled", value);
				}
			}

			public override void OnLoading(DataTreeNode node, LoadControl control)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnLoading", node, control);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, eventData);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnLoaded(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnLoaded()
		{
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnPackageImported : ProxyVoidNode<FrooxEngineContext, OnPackageImported.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IPackageImportEventReceiver, IWorker, IWorldElement, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Imported
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Imported"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Imported", value);
				}
			}

			public System.Boolean ImportedScheduled
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ImportedScheduled"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ImportedScheduled", value);
				}
			}

			public void OnPackageImported()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnPackageImported");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Call Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleEvent(FrooxEngineContext context, System.Object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", context, eventData);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnPackageImported(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnPackageImported()
		{
		}
	}
	[NodeCategory("Slots")]
	public class SlotChildrenEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(GlobalRef<Slot>)) is GlobalRef<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> OnUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnUser"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnUser", value);
			}
		}

		public Call OnChildAdded
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnChildAdded"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnChildAdded", value);
			}
		}

		public Call OnChildRemoved
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnChildRemoved"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnChildRemoved", value);
			}
		}

		public ObjectOutput<Slot> Child
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Child"), typeof(ObjectOutput<Slot>)) is ObjectOutput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Child", value);
			}
		}

		public ObjectStore<Slot> _currentSlot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_currentSlot"), typeof(ObjectStore<Slot>)) is ObjectStore<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_currentSlot", value);
			}
		}

		public ObjectStore<SlotChildEvent> _currentOnAdded
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_currentOnAdded"), typeof(ObjectStore<SlotChildEvent>)) is ObjectStore<SlotChildEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<SlotChildEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_currentOnAdded", value);
			}
		}

		public ObjectStore<SlotChildEvent> _currentOnRemoved
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_currentOnRemoved"), typeof(ObjectStore<SlotChildEvent>)) is ObjectStore<SlotChildEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<SlotChildEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_currentOnRemoved", value);
			}
		}

		public ResoniteBridge.ResoniteBridgeValue _currentlyFiring
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_currentlyFiring"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to HashSet<NodeContextPath>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_currentlyFiring", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnInstanceChanged(Slot target, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnInstanceChanged", target, context);
		}

		public void ChildAdded(Slot child, FrooxEngineContext context, System.Boolean canMakeSynchronousChanges)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ChildAdded", child, context, canMakeSynchronousChanges);
		}

		public void ChildRemoved(Slot child, FrooxEngineContext context, System.Boolean canMakeSynchronousChanges)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ChildRemoved", child, context, canMakeSynchronousChanges);
		}

		public System.Boolean ShouldUserHandleEvent(FrooxEngineContext context, System.Boolean canMakeSynchronousChanges)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldUserHandleEvent", context, canMakeSynchronousChanges), typeof(System.Boolean));
		}

		public SlotChildrenEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "SlotChildrenEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SlotChildrenEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class RootSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RootSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RootSlot()
		{
		}
	}
	[NodeCategory("Slots")]
	public class GetSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.IComponent> Component
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Component"), typeof(ObjectArgument<global::FrooxEngine.IComponent>)) is ObjectArgument<global::FrooxEngine.IComponent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.IComponent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Component", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetSlot()
		{
		}
	}
	[ContinuouslyChanging]
	[NodeCategory("Slots")]
	public class GetObjectRoot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<bool> OnlyExplicit
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyExplicit"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyExplicit", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetObjectRoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetObjectRoot()
		{
		}
	}
	[ContinuouslyChanging]
	[NodeCategory("Slots")]
	public class GetParentSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetParentSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetParentSlot()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotName : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetSlotName(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetSlotName()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotActive : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetSlotActive(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetSlotActive()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotActiveSelf : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetSlotActiveSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetSlotActiveSelf()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotPersistent : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetSlotPersistent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetSlotPersistent()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotPersistentSelf : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetSlotPersistentSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetSlotPersistentSelf()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetTag : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetTag()
		{
		}
	}
	[NodeCategory("Slots/Info")]
	public class HasTag : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public HasTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public HasTag()
		{
		}
	}
	[NodeCategory("Slots")]
	[ContinuouslyChanging]
	public class ChildrenCount : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ChildrenCount(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ChildrenCount()
		{
		}
	}
	[NodeCategory("Slots")]
	[ContinuouslyChanging]
	public class GetChild : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ValueArgument<int> ChildIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ChildIndex"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ChildIndex", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetChild(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetChild()
		{
		}
	}
	[NodeCategory("Slots")]
	[ContinuouslyChanging]
	public class IndexOfChild : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IndexOfChild(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IndexOfChild()
		{
		}
	}
	[NodeCategory("Users/User Root")]
	[NodeCategory("Slots")]
	public class GetActiveUserRoot : ObjectFunctionNode<FrooxEngineContext, UserRoot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override UserRoot Compute(FrooxEngineContext context)
		{
			return (UserRoot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(UserRoot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetActiveUserRoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetActiveUserRoot()
		{
		}
	}
	[NodeCategory("Users")]
	[NodeCategory("Slots")]
	public class GetActiveUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetActiveUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetActiveUser()
		{
		}
	}
	[NodeCategory("Slots")]
	public class GetSlotOrderOffset : ValueFunctionNode<FrooxEngineContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public override System.Int64 Compute(FrooxEngineContext context)
		{
			return (System.Int64)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int64));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetSlotOrderOffset(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetSlotOrderOffset()
		{
		}
	}
	[NodeCategory("Users")]
	[NodeCategory("Slots")]
	[ChangeSource]
	public class GetActiveUserSelf : ProxyObjectFunctionNode<FrooxEngineContext, GetActiveUserSelf.Proxy, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public new Action<Slot> Changed
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Changed"), typeof(Action<Slot>)) is Action<Slot> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action<Slot>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Changed", value);
				}
			}

			public override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAwake");
			}

			public override void OnDispose()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnDispose");
			}

			public void OnChanged(Slot slot)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnChanged", slot);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetActiveUserSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetActiveUserSelf()
		{
		}
	}
	[NodeCategory("Slots")]
	public class IsChildOf : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectArgument<Slot> Other
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Other"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Other", value);
			}
		}

		public ValueArgument<bool> IncludeSelf
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IncludeSelf"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IncludeSelf", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsChildOf(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsChildOf()
		{
		}
	}
	[NodeCategory("Slots/Searching")]
	public class FindChildByName : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Name"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Name", value);
			}
		}

		public ValueArgument<bool> MatchSubstring
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MatchSubstring"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MatchSubstring", value);
			}
		}

		public ValueArgument<bool> IgnoreCase
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IgnoreCase"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IgnoreCase", value);
			}
		}

		public ValueArgument<int> SearchDepth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SearchDepth"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SearchDepth", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FindChildByName(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FindChildByName()
		{
		}
	}
	[NodeCategory("Slots/Searching")]
	public class FindChildByTag : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public ValueArgument<int> SearchDepth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SearchDepth"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SearchDepth", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FindChildByTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FindChildByTag()
		{
		}
	}
	[NodeCategory("Slots/Searching")]
	public class FindParentByName : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Name"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Name", value);
			}
		}

		public ValueArgument<bool> MatchSubstring
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MatchSubstring"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MatchSubstring", value);
			}
		}

		public ValueArgument<bool> IgnoreCase
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IgnoreCase"), typeof(ValueArgument<bool>)) is ValueArgument<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IgnoreCase", value);
			}
		}

		public ValueArgument<int> SearchDepth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SearchDepth"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SearchDepth", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FindParentByName(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FindParentByName()
		{
		}
	}
	[NodeCategory("Slots/Searching")]
	public class FindParentByTag : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Instance"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public ValueArgument<int> SearchDepth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SearchDepth"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SearchDepth", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FindParentByTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FindParentByTag()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.References
{
	[NodeCategory("References")]
	public class ReferenceTarget<T> : ObjectFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IWorldElement
	{
		public ObjectArgument<SyncRef<T>> Reference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reference"), typeof(ObjectArgument<SyncRef<T>>)) is ObjectArgument<SyncRef<T>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<SyncRef<T>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reference", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReferenceTarget(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ReferenceTarget()
		{
		}
	}
	[NodeCategory("References")]
	public class ReferenceID : ValueFunctionNode<FrooxEngineContext, RefID>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Element"), typeof(ObjectArgument<IWorldElement>)) is ObjectArgument<IWorldElement> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IWorldElement>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Element", value);
			}
		}

		public override RefID Compute(FrooxEngineContext context)
		{
			return (RefID)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(RefID));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReferenceID(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ReferenceID()
		{
		}
	}
	[NodeCategory("References")]
	public class AllocatingUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Element"), typeof(ObjectArgument<IWorldElement>)) is ObjectArgument<IWorldElement> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IWorldElement>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Element", value);
			}
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AllocatingUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AllocatingUser()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Playback
{
	[NodeCategory("Media")]
	public abstract class PlaybackAction : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IPlayable> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<IPlayable>)) is ObjectInput<IPlayable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IPlayable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public abstract void Perform(IPlayable playable, FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PlaybackAction(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PlaybackAction()
		{
		}
	}
	public class Play : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Play(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Play()
		{
		}
	}
	public class Pause : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Pause(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Pause()
		{
		}
	}
	public class Stop : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Stop(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Stop()
		{
		}
	}
	public class Resume : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Resume(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Resume()
		{
		}
	}
	public class Toggle : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Toggle(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Toggle()
		{
		}
	}
	[NodeCategory("Media")]
	public class Wait : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IPlayable> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<IPlayable>)) is ObjectInput<IPlayable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IPlayable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public AsyncCall OnWaitBegin
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnWaitBegin"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnWaitBegin", value);
			}
		}

		public Continuation OnPlaybackFinished
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnPlaybackFinished"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnPlaybackFinished", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Wait(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Wait()
		{
		}
	}
	[NodeCategory("Media")]
	public class PlayAndWait : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IPlayable> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<IPlayable>)) is ObjectInput<IPlayable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IPlayable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public AsyncCall OnStarted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnStarted"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnStarted", value);
			}
		}

		public Continuation OnPlaybackFinished
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnPlaybackFinished"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnPlaybackFinished", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PlayAndWait(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PlayAndWait()
		{
		}
	}
	[NodeCategory("Media")]
	public class PlaybackState : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IPlayable> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(ObjectArgument<IPlayable>)) is ObjectArgument<IPlayable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IPlayable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public ValueOutput<bool> IsPlaying
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsPlaying"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsPlaying", value);
			}
		}

		public ValueOutput<bool> Loop
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Loop"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Loop", value);
			}
		}

		public ValueOutput<float> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueOutput<float> NormalizedPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NormalizedPosition"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NormalizedPosition", value);
			}
		}

		public ValueOutput<float> ClipLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ClipLength"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ClipLength", value);
			}
		}

		public ValueOutput<float> Speed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Speed"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Speed", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public PlaybackState()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "PlaybackState", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PlaybackState(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Media")]
	[ContinuouslyChanging]
	public abstract class PlaybackProperty<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ObjectArgument<IPlayable> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(ObjectArgument<IPlayable>)) is ObjectArgument<IPlayable> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IPlayable>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public abstract T GetProperty(IPlayable playable);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PlaybackProperty(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PlaybackProperty()
		{
		}
	}
	public class IsPlaying : PlaybackProperty<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetProperty(IPlayable playable)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetProperty", playable), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsPlaying(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsPlaying()
		{
		}
	}
	public class IsLooped : PlaybackProperty<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean GetProperty(IPlayable playable)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetProperty", playable), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsLooped(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsLooped()
		{
		}
	}
	public class Position : PlaybackProperty<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single GetProperty(IPlayable playable)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetProperty", playable), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Position(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Position()
		{
		}
	}
	public class NormalizedPosition : PlaybackProperty<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single GetProperty(IPlayable playable)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetProperty", playable), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public NormalizedPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public NormalizedPosition()
		{
		}
	}
	public class Speed : PlaybackProperty<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single GetProperty(IPlayable playable)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetProperty", playable), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Speed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Speed()
		{
		}
	}
	[NodeOverload("Engine.Playback.ClipLength")]
	public class ClipLengthFloat : PlaybackProperty<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single GetProperty(IPlayable playable)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetProperty", playable), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ClipLengthFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ClipLengthFloat()
		{
		}
	}
	[NodeOverload("Engine.Playback.ClipLength")]
	public class ClipLengthDouble : PlaybackProperty<double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Double GetProperty(IPlayable playable)
		{
			return (System.Double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetProperty", playable), typeof(System.Double));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ClipLengthDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ClipLengthDouble()
		{
		}
	}
	public class SetLoop : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<bool> Loop
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Loop"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Loop", value);
			}
		}

		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetLoop(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetLoop()
		{
		}
	}
	public class SetPosition : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetPosition()
		{
		}
	}
	public class ShiftPosition : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Delta
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Delta"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Delta", value);
			}
		}

		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ShiftPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ShiftPosition()
		{
		}
	}
	public class SetNormalizedPosition : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> NormalizedPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NormalizedPosition"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NormalizedPosition", value);
			}
		}

		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetNormalizedPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetNormalizedPosition()
		{
		}
	}
	public class SetSpeed : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Speed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Speed"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Speed", value);
			}
		}

		public override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Perform", playable, context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetSpeed(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetSpeed()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Time
{
	[ContinuouslyChanging]
	[NodeCategory("Time")]
	[NodeName("Elapsed Time", false)]
	[NodeOverload("Engine.ElapsedTime")]
	public abstract class ElapsedTime<T> : ProxyValueFunctionNode<FrooxEngineContext, ElapsedTime<T>.Proxy, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public SyncTime StartTime
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "StartTime"), typeof(SyncTime)) is SyncTime __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to SyncTime");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "StartTime", value);
				}
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public Operation Reset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reset"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reset", value);
			}
		}

		public Continuation OnReset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnReset"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnReset", value);
			}
		}

		public IOperation DoReset(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoReset", context), typeof(IOperation));
		}

		public ElapsedTime()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ElapsedTime", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ElapsedTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class ElapsedTimeFloat : ElapsedTime<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ElapsedTimeFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ElapsedTimeFloat()
		{
		}
	}
	public class ElapsedTimeDouble : ElapsedTime<double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Double Compute(FrooxEngineContext context)
		{
			return (System.Double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Double));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ElapsedTimeDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ElapsedTimeDouble()
		{
		}
	}
	public class ElapsedTimeTimeSpan : ElapsedTime<TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override TimeSpan Compute(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ElapsedTimeTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ElapsedTimeTimeSpan()
		{
		}
	}
	[NodeCategory("Time")]
	public class Stopwatch : ProxyVoidNode<FrooxEngineContext, Stopwatch.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public SyncPlayback Stopwatch
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Stopwatch"), typeof(SyncPlayback)) is SyncPlayback __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to SyncPlayback");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Stopwatch", value);
				}
			}

			public override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAwake");
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public ValueOutput<float> Time
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Time"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Time", value);
			}
		}

		public ValueOutput<bool> IsRunning
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsRunning"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsRunning", value);
			}
		}

		public Operation Start
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Start"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Start", value);
			}
		}

		public Operation Stop
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Stop"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Stop", value);
			}
		}

		public Operation Reset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reset"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reset", value);
			}
		}

		public Continuation OnStart
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnStart"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnStart", value);
			}
		}

		public Continuation OnStop
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnStop"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnStop", value);
			}
		}

		public Continuation OnReset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnReset"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnReset", value);
			}
		}

		public IOperation DoStart(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoStart", context), typeof(IOperation));
		}

		public IOperation DoStop(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoStop", context), typeof(IOperation));
		}

		public IOperation DoReset(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoReset", context), typeof(IOperation));
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public Stopwatch()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Stopwatch", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Stopwatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Time")]
	[NodeName("T", false)]
	[ContinuouslyChanging]
	public class WorldTimeFloat : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldTimeFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldTimeFloat()
		{
		}
	}
	[NodeCategory("Time")]
	[NodeName("T*2", false)]
	[ContinuouslyChanging]
	public class WorldTime2Float : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldTime2Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldTime2Float()
		{
		}
	}
	[NodeCategory("Time")]
	[NodeName("T*10", false)]
	[ContinuouslyChanging]
	public class WorldTime10Float : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldTime10Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldTime10Float()
		{
		}
	}
	[NodeName("T/2", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class WorldTimeHalfFloat : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldTimeHalfFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldTimeHalfFloat()
		{
		}
	}
	[NodeName("T/10", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class WorldTimeTenthFloat : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldTimeTenthFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldTimeTenthFloat()
		{
		}
	}
	[NodeName("T <size=25%>(double)", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class WorldTimeDouble : ValueFunctionNode<FrooxEngineContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Double Compute(FrooxEngineContext context)
		{
			return (System.Double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Double));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WorldTimeDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WorldTimeDouble()
		{
		}
	}
	[NodeCategory("Time")]
	[NodeName("dT", false)]
	[ContinuouslyChanging]
	public class DeltaTime : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DeltaTime()
		{
		}
	}
	[NodeName("1/dT", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class InvertedDeltaTime : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public InvertedDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public InvertedDeltaTime()
		{
		}
	}
	[NodeName("Smooth dT", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class SmoothDeltaTime : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SmoothDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SmoothDeltaTime()
		{
		}
	}
	[NodeName("Smooth 1/dT", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class InvertedSmoothDeltaTime : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public InvertedSmoothDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public InvertedSmoothDeltaTime()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Variables
{
	[NodeCategory("Flow")]
	[NodeName("Boolean Latch", false)]
	[NodeOverload("Engine.DataModelBooleanToggle")]
	[ChangeSource]
	public class DataModelBooleanToggle : DataModelValueFieldStore<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Operation Set
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Set"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Set", value);
			}
		}

		public Operation Reset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reset"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reset", value);
			}
		}

		public Operation Toggle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Toggle"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Toggle", value);
			}
		}

		public Continuation OnSet
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSet"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSet", value);
			}
		}

		public Continuation OnReset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnReset"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnReset", value);
			}
		}

		public IOperation DoSet(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoSet", context), typeof(IOperation));
		}

		public IOperation DoReset(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoReset", context), typeof(IOperation));
		}

		public IOperation DoToggle(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoToggle", context), typeof(IOperation));
		}

		public DataModelBooleanToggle()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DataModelBooleanToggle", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DataModelBooleanToggle(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelValueFieldStore<T> : ProxyValueFunctionNode<FrooxEngineContext, DataModelValueFieldStore<T>.Store, T>, IVariable<FrooxEngineContext, T>, INode, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Sync<T> Value
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(Sync<T>)) is Sync<T> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Sync<T>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
				}
			}

			public Action ValueChanged
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ValueChanged"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ValueChanged", value);
				}
			}

			public override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAwake");
			}

			public void Value_Changed(IChangeable obj)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Value_Changed", obj);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Store()
			{
			}
		}

		public static System.Boolean IsValidGenericType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DataModelValueFieldStore", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Store proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public T Read(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", context), typeof(T));
		}

		public System.Boolean Write(T value, FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", value, context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DataModelValueFieldStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DataModelValueFieldStore()
		{
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelObjectFieldStore<T> : ProxyObjectFunctionNode<FrooxEngineContext, DataModelObjectFieldStore<T>.Store, T>, IVariable<FrooxEngineContext, T>, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Sync<T> Value
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(Sync<T>)) is Sync<T> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Sync<T>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
				}
			}

			public Action ValueChanged
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ValueChanged"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ValueChanged", value);
				}
			}

			public override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAwake");
			}

			public void Value_Changed(IChangeable obj)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Value_Changed", obj);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Store()
			{
			}
		}

		public static System.Boolean IsValidGenericType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DataModelObjectFieldStore", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Store proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public T Read(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", context), typeof(T));
		}

		public System.Boolean Write(T value, FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", value, context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DataModelObjectFieldStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DataModelObjectFieldStore()
		{
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelTypeStore : ProxyObjectFunctionNode<FrooxEngineContext, DataModelTypeStore.Store, Type>, IVariable<FrooxEngineContext, Type>, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public SyncType Value
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(SyncType)) is SyncType __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to SyncType");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
				}
			}

			public Action ValueChanged
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ValueChanged"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ValueChanged", value);
				}
			}

			public override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAwake");
			}

			public void Value_Changed(IChangeable obj)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Value_Changed", obj);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Store()
			{
			}
		}

		public override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Store proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public override Type Compute(FrooxEngineContext context)
		{
			return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Type));
		}

		public Type Read(FrooxEngineContext context)
		{
			return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", context), typeof(Type));
		}

		public System.Boolean Write(Type value, FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", value, context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DataModelTypeStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DataModelTypeStore()
		{
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelObjectRefStore<T> : ProxyObjectFunctionNode<FrooxEngineContext, DataModelObjectRefStore<T>.Store, T>, IVariable<FrooxEngineContext, T>, INode, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IWorldElement
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public SyncRef<T> Target
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(SyncRef<T>)) is SyncRef<T> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to SyncRef<T>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
				}
			}

			public Action ValueChanged
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ValueChanged"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ValueChanged", value);
				}
			}

			public override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAwake");
			}

			public void Target_OnTargetChange(SyncRef<T> reference)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Target_OnTargetChange", reference);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Store()
			{
			}
		}

		public override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Store proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public T Read(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", context), typeof(T));
		}

		public System.Boolean Write(T value, FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", value, context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DataModelObjectRefStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DataModelObjectRefStore()
		{
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelUserRefStore : ProxyObjectFunctionNode<FrooxEngineContext, DataModelUserRefStore.Store, global::FrooxEngine.User>, IVariable<FrooxEngineContext, global::FrooxEngine.User>, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public UserRef User
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(UserRef)) is UserRef __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to UserRef");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
				}
			}

			public Action ValueChanged
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ValueChanged"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ValueChanged", value);
				}
			}

			public override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAwake");
			}

			public void User_OnTargetChange(SyncRef<global::FrooxEngine.User> reference)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "User_OnTargetChange", reference);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Store()
			{
			}
		}

		public override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Store proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public global::FrooxEngine.User Read(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", context), typeof(global::FrooxEngine.User));
		}

		public System.Boolean Write(global::FrooxEngine.User value, FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", value, context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DataModelUserRefStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DataModelUserRefStore()
		{
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelObjectAssetRefStore<T> : ProxyObjectFunctionNode<FrooxEngineContext, DataModelObjectAssetRefStore<T>.Store, IAssetProvider<T>>, IVariable<FrooxEngineContext, IAssetProvider<T>>, INode, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IAsset
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public AssetRef<T> Target
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(AssetRef<T>)) is AssetRef<T> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to AssetRef<T>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
				}
			}

			public Action ValueChanged
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ValueChanged"), typeof(Action)) is Action __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Action");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ValueChanged", value);
				}
			}

			public override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAwake");
			}

			public void Value_Changed(IChangeable obj)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Value_Changed", obj);
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Store()
			{
			}
		}

		public override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Store proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public override IAssetProvider<T> Compute(FrooxEngineContext context)
		{
			return (IAssetProvider<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(IAssetProvider<T>));
		}

		public IAssetProvider<T> Read(FrooxEngineContext context)
		{
			return (IAssetProvider<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", context), typeof(IAssetProvider<T>));
		}

		public System.Boolean Write(IAssetProvider<T> value, FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", value, context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DataModelObjectAssetRefStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DataModelObjectAssetRefStore()
		{
		}
	}
	[NodeCategory("Variables/Dynamic")]
	public abstract class DynamicVariableAction : ActionNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public ObjectInput<string> Path
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Path"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Path", value);
			}
		}

		public Continuation OnNotFound
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnNotFound"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnNotFound", value);
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public abstract IOperation DoAction(DynamicVariableSpace space, System.String variableName, Slot target, FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicVariableAction(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DynamicVariableAction()
		{
		}
	}
	[NodeName("Write DynVar", false)]
	[NodeOverload("Engine.DynamicVariables.Write")]
	public abstract class WriteDynamicVariable<T> : DynamicVariableAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnSuccess
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSuccess"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSuccess", value);
			}
		}

		public Continuation OnFailed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFailed"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFailed", value);
			}
		}

		public override IOperation DoAction(DynamicVariableSpace space, System.String variableName, Slot target, FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoAction", space, variableName, target, context), typeof(IOperation));
		}

		public abstract T GetValueToWrite(FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteDynamicVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteDynamicVariable()
		{
		}
	}
	public class WriteDynamicValueVariable<T> : WriteDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override T GetValueToWrite(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetValueToWrite", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteDynamicValueVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteDynamicValueVariable()
		{
		}
	}
	public class WriteDynamicObjectVariable<T> : WriteDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override T GetValueToWrite(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetValueToWrite", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteDynamicObjectVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteDynamicObjectVariable()
		{
		}
	}
	[NodeName("Create DynVar", false)]
	[NodeOverload("Engine.DynamicVariables.Create")]
	public abstract class CreateDynamicVariable<T> : DynamicVariableAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnCreated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnCreated"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnCreated", value);
			}
		}

		public Continuation OnAlreadyExists
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnAlreadyExists"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnAlreadyExists", value);
			}
		}

		public Continuation OnFailed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFailed"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFailed", value);
			}
		}

		public ValueInput<bool> CreateDirectlyOnTarget
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CreateDirectlyOnTarget"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CreateDirectlyOnTarget", value);
			}
		}

		public ValueInput<bool> CreateNonPersistent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CreateNonPersistent"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CreateNonPersistent", value);
			}
		}

		public override IOperation DoAction(DynamicVariableSpace space, System.String variableName, Slot target, FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoAction", space, variableName, target, context), typeof(IOperation));
		}

		public abstract T GetInitialValue(FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CreateDynamicVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CreateDynamicVariable()
		{
		}
	}
	public class CreateDynamicValueVariable<T> : CreateDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> InitialValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "InitialValue"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "InitialValue", value);
			}
		}

		public override T GetInitialValue(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetInitialValue", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CreateDynamicValueVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CreateDynamicValueVariable()
		{
		}
	}
	public class CreateDynamicObjectVariable<T> : CreateDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> InitialValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "InitialValue"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "InitialValue", value);
			}
		}

		public override T GetInitialValue(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetInitialValue", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CreateDynamicObjectVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CreateDynamicObjectVariable()
		{
		}
	}
	[NodeName("Write or Create DynVar", false)]
	[NodeOverload("Engine.DynamicVariables.WriteOrCreate")]
	public abstract class WriteOrCreateDynamicVariable<T> : DynamicVariableAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnCreated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnCreated"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnCreated", value);
			}
		}

		public Continuation OnWritten
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnWritten"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnWritten", value);
			}
		}

		public Continuation OnFailed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFailed"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFailed", value);
			}
		}

		public ValueInput<bool> CreateDirectlyOnTarget
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CreateDirectlyOnTarget"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CreateDirectlyOnTarget", value);
			}
		}

		public ValueInput<bool> CreateNonPersistent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CreateNonPersistent"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CreateNonPersistent", value);
			}
		}

		public override IOperation DoAction(DynamicVariableSpace space, System.String variableName, Slot target, FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoAction", space, variableName, target, context), typeof(IOperation));
		}

		public abstract T GetValue(FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteOrCreateDynamicVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteOrCreateDynamicVariable()
		{
		}
	}
	public class WriteOrCreateDynamicValueVariable<T> : WriteOrCreateDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override T GetValue(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetValue", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteOrCreateDynamicValueVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteOrCreateDynamicValueVariable()
		{
		}
	}
	public class WriteOrCreateDynamicObjectVariable<T> : WriteOrCreateDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override T GetValue(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetValue", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteOrCreateDynamicObjectVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteOrCreateDynamicObjectVariable()
		{
		}
	}
	public class DeleteDynamicVariable<T> : DynamicVariableAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnDeleted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnDeleted"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnDeleted", value);
			}
		}

		public override IOperation DoAction(DynamicVariableSpace space, System.String variableName, Slot target, FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoAction", space, variableName, target, context), typeof(IOperation));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DeleteDynamicVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DeleteDynamicVariable()
		{
		}
	}
	[NodeCategory("Variables/Dynamic")]
	public abstract class ClearDynamicVariablesBase : ActionNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public ObjectInput<string> SpaceName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SpaceName"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SpaceName", value);
			}
		}

		public Continuation OnNotFound
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnNotFound"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnNotFound", value);
			}
		}

		public Continuation OnCleared
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnCleared"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnCleared", value);
			}
		}

		public ValueOutput<int> ClearedCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ClearedCount"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ClearedCount", value);
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public abstract System.Int32 Clear(DynamicVariableSpace space, FrooxEngineContext context);

		public ClearDynamicVariablesBase()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ClearDynamicVariablesBase", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ClearDynamicVariablesBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class ClearDynamicVariables : ClearDynamicVariablesBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Int32 Clear(DynamicVariableSpace space, FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", space, context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ClearDynamicVariables(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ClearDynamicVariables()
		{
		}
	}
	public class ClearDynamicVariablesOfType<T> : ClearDynamicVariablesBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Int32 Clear(DynamicVariableSpace space, FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", space, context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ClearDynamicVariablesOfType(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ClearDynamicVariablesOfType()
		{
		}
	}
	public class DynamicVariableInputProxy<T> : ProtoFluxEngineProxy, IDynamicVariable<T>, IDynamicVariable, IWorldElement, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Action OnChanged
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnChanged"), typeof(Action)) is Action __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Action");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnChanged", value);
			}
		}

		public Action OnSpaceLinked
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSpaceLinked"), typeof(Action)) is Action __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Action");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSpaceLinked", value);
			}
		}

		public Action OnSpaceUnlinked
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSpaceUnlinked"), typeof(Action)) is Action __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Action");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSpaceUnlinked", value);
			}
		}

		public DynamicVariableHandler<T> handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "handler"), typeof(DynamicVariableHandler<T>)) is DynamicVariableHandler<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to DynamicVariableHandler<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "handler", value);
			}
		}

		public System.String _variableName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_variableName"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_variableName", value);
			}
		}

		public System.Boolean AlwaysOverrideOnLink
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AlwaysOverrideOnLink"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Boolean IsWriteOnly
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsWriteOnly"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public T DynamicValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "DynamicValue"), typeof(T)) is T __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to T");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "DynamicValue", value);
			}
		}

		public System.Boolean HasValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasValue"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.String VariableName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariableName"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VariableName", value);
			}
		}

		public void MarkSpaceDirty()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MarkSpaceDirty");
		}

		public System.Boolean UpdateLinking()
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateLinking"), typeof(System.Boolean));
		}

		public void MarkDirty()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MarkDirty");
		}

		public override void OnAwake()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAwake");
		}

		public override void OnDispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnDispose");
		}

		public override void InitializeSyncMembers()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
		}

		public override ISyncMember GetSyncMember(System.Int32 index)
		{
			return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
		}

		public static DynamicVariableInputProxy<T> __New()
		{
			return (DynamicVariableInputProxy<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicVariableInputProxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(DynamicVariableInputProxy<T>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicVariableInputProxy(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DynamicVariableInputProxy()
		{
		}
	}
	[NodeCategory("Variables/Dynamic")]
	public abstract class DynamicVariableInput<T> : ProxyVoidNode<FrooxEngineContext, DynamicVariableInputProxy<T>>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<string> VariableName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "VariableName"), typeof(GlobalRef<string>)) is GlobalRef<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "VariableName", value);
			}
		}

		public abstract IOutput ValueOutput { get; }

		public abstract IOutput HasValueOutput { get; }

		public void OnVariableNameChanged(System.String name, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnVariableNameChanged", name, context);
		}

		public override void ProxyAdded(DynamicVariableInputProxy<T> proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(DynamicVariableInputProxy<T> proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public abstract void UpdateValue(T value, System.Boolean hasValue, FrooxEngineContext context);

		public DynamicVariableInput()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicVariableInput", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicVariableInput(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public abstract class DynamicVariableInputWithEvents<T> : DynamicVariableInput<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> DetectingUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DetectingUser"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DetectingUser", value);
			}
		}

		public Call OnSpaceLinked
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSpaceLinked"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSpaceLinked", value);
			}
		}

		public Call OnSpaceUnlinked
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSpaceUnlinked"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSpaceUnlinked", value);
			}
		}

		public override void ProxyAdded(DynamicVariableInputProxy<T> proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(DynamicVariableInputProxy<T> proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void HandleLinked(FrooxEngineContext context, System.Object arg)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleLinked", context, arg);
		}

		public void HandleUnlinked(FrooxEngineContext context, System.Object arg)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleUnlinked", context, arg);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicVariableInputWithEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DynamicVariableInputWithEvents()
		{
		}
	}
	[NodeName("DynVar Input", false)]
	[NodeOverload("Engine.DynamicVariables.Input")]
	public class DynamicVariableValueInput<T> : DynamicVariableInput<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueOutput<T>)) is ValueOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> HasValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HasValue"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HasValue", value);
			}
		}

		public override IOutput ValueOutput
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueOutput"), typeof(IOutput)) is IOutput __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IOutput");
				}
			}
		}

		public override IOutput HasValueOutput
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasValueOutput"), typeof(IOutput)) is IOutput __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IOutput");
				}
			}
		}

		public override void UpdateValue(T value, System.Boolean hasValue, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateValue", value, hasValue, context);
		}

		public DynamicVariableValueInput()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicVariableValueInput", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicVariableValueInput(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeName("DynVar Input", false)]
	[NodeOverload("Engine.DynamicVariables.Input")]
	public class DynamicVariableObjectInput<T> : DynamicVariableInput<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectOutput<T>)) is ObjectOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> HasValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HasValue"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HasValue", value);
			}
		}

		public override IOutput ValueOutput
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueOutput"), typeof(IOutput)) is IOutput __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IOutput");
				}
			}
		}

		public override IOutput HasValueOutput
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasValueOutput"), typeof(IOutput)) is IOutput __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IOutput");
				}
			}
		}

		public override void UpdateValue(T value, System.Boolean hasValue, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateValue", value, hasValue, context);
		}

		public DynamicVariableObjectInput()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicVariableObjectInput", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicVariableObjectInput(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeName("DynVar Input with Events", false)]
	[NodeOverload("Engine.DynamicVariables.InputWithEvents")]
	public class DynamicVariableValueInputWithEvents<T> : DynamicVariableInputWithEvents<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueOutput<T>)) is ValueOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> HasValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HasValue"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HasValue", value);
			}
		}

		public override IOutput ValueOutput
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueOutput"), typeof(IOutput)) is IOutput __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IOutput");
				}
			}
		}

		public override IOutput HasValueOutput
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasValueOutput"), typeof(IOutput)) is IOutput __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IOutput");
				}
			}
		}

		public override void UpdateValue(T value, System.Boolean hasValue, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateValue", value, hasValue, context);
		}

		public DynamicVariableValueInputWithEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicVariableValueInputWithEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicVariableValueInputWithEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeName("DynVar Input with Events", false)]
	[NodeOverload("Engine.DynamicVariables.InputWithEvents")]
	public class DynamicVariableObjectInputWithEvents<T> : DynamicVariableInputWithEvents<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectOutput<T>)) is ObjectOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> HasValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HasValue"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HasValue", value);
			}
		}

		public override IOutput ValueOutput
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueOutput"), typeof(IOutput)) is IOutput __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IOutput");
				}
			}
		}

		public override IOutput HasValueOutput
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasValueOutput"), typeof(IOutput)) is IOutput __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IOutput");
				}
			}
		}

		public override void UpdateValue(T value, System.Boolean hasValue, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateValue", value, hasValue, context);
		}

		public DynamicVariableObjectInputWithEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicVariableObjectInputWithEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicVariableObjectInputWithEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Variables/Dynamic")]
	[NodeName("Read DynVar", false)]
	[NodeOverload("Engine.DynamicVariables.Read")]
	public abstract class ReadDynamicVariable<T> : VoidNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public ObjectArgument<string> Path
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Path"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Path", value);
			}
		}

		public ValueOutput<bool> FoundValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FoundValue"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FoundValue", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public void SetNotFound(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetNotFound", context);
		}

		public abstract void SetValue(T value, FrooxEngineContext context);

		public ReadDynamicVariable()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ReadDynamicVariable", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReadDynamicVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class ReadDynamicValueVariable<T> : ReadDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueOutput<T>)) is ValueOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override void SetValue(T value, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetValue", value, context);
		}

		public ReadDynamicValueVariable()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ReadDynamicValueVariable", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReadDynamicValueVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class ReadDynamicObjectVariable<T> : ReadDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectOutput<T>)) is ObjectOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override void SetValue(T value, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetValue", value, context);
		}

		public ReadDynamicObjectVariable()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ReadDynamicObjectVariable", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReadDynamicObjectVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Components
{
	[NodeCategory("Components")]
	public class GetComponentEnabled : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.IComponent> Component
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Component"), typeof(ObjectArgument<global::FrooxEngine.IComponent>)) is ObjectArgument<global::FrooxEngine.IComponent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.IComponent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Component", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetComponentEnabled(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetComponentEnabled()
		{
		}
	}
	[NodeCategory("Components")]
	public class SetComponentEnabled : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.IComponent> Component
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Component"), typeof(ObjectInput<global::FrooxEngine.IComponent>)) is ObjectInput<global::FrooxEngine.IComponent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.IComponent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Component", value);
			}
		}

		public ValueInput<bool> State
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "State"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "State", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SetComponentEnabled(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SetComponentEnabled()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Cloud
{
	[NodeCategory("Variables/Cloud")]
	public abstract class CloudVariableRequest<T> : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Path
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Path"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Path", value);
			}
		}

		public ObjectInput<string> VariableOwnerId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "VariableOwnerId"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "VariableOwnerId", value);
			}
		}

		public AsyncCall OnRequest
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnRequest"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnRequest", value);
			}
		}

		public Continuation OnDone
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnDone"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnDone", value);
			}
		}

		public Continuation OnFail
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFail"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFail", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public abstract System.Boolean Process(CloudVariableProxy proxy, FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CloudVariableRequest(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CloudVariableRequest()
		{
		}
	}
	[NodeName("Read Cloud Variable", false)]
	[NodeOverload("Engine.Cloud.ReadCloudVariable")]
	public abstract class ReadCloudVariable<T> : CloudVariableRequest<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Process(CloudVariableProxy proxy, FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Process", proxy, context), typeof(System.Boolean));
		}

		public abstract void SetValue(T value, FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReadCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ReadCloudVariable()
		{
		}
	}
	public class ReadValueCloudVariable<T> : ReadCloudVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueOutput<T>)) is ValueOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override void SetValue(T value, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetValue", value, context);
		}

		public ReadValueCloudVariable()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ReadValueCloudVariable", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReadValueCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class ReadObjectCloudVariable<T> : ReadCloudVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectOutput<T>)) is ObjectOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override void SetValue(T value, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetValue", value, context);
		}

		public ReadObjectCloudVariable()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ReadObjectCloudVariable", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReadObjectCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeName("Write Cloud Variable", false)]
	[NodeOverload("Engine.Cloud.WriteCloudVariable")]
	public abstract class WriteCloudVariable<T> : CloudVariableRequest<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Process(CloudVariableProxy proxy, FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Process", proxy, context), typeof(System.Boolean));
		}

		public abstract T GetValueToWrite(FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteCloudVariable()
		{
		}
	}
	public class WriteValueCloudVariable<T> : WriteCloudVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override T GetValueToWrite(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetValueToWrite", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteValueCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteValueCloudVariable()
		{
		}
	}
	public class WriteObjectCloudVariable<T> : WriteCloudVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override T GetValueToWrite(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetValueToWrite", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WriteObjectCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WriteObjectCloudVariable()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Cloud.Twitch
{
	[NodeCategory("Network/Twitch")]
	public abstract class TwitchEventsNode : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<TwitchInterface> Interface
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Interface"), typeof(GlobalRef<TwitchInterface>)) is GlobalRef<TwitchInterface> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<TwitchInterface>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Interface", value);
			}
		}

		public ObjectStore<TwitchInterface> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<TwitchInterface>)) is ObjectStore<TwitchInterface> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<TwitchInterface>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnInterfaceChanged(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnInterfaceChanged", twitch, context);
		}

		public abstract void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context);

		public abstract void Unregister(TwitchInterface twitch, FrooxEngineContext context);

		public abstract void Clear(FrooxEngineContext context);

		public TwitchEventsNode()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TwitchEventsNode", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TwitchEventsNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class TwitchChatMessageEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnMessage
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnMessage"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnMessage", value);
			}
		}

		public ObjectOutput<string> Message
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Message"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Message", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserId"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DisplayName"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DisplayName", value);
			}
		}

		public ValueOutput<colorX> Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(ValueOutput<colorX>)) is ValueOutput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public ValueOutput<bool> IsHighlighted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsHighlighted"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsHighlighted", value);
			}
		}

		public ValueOutput<bool> IsSubscriber
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsSubscriber"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsSubscriber", value);
			}
		}

		public ValueOutput<bool> IsModerator
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsModerator"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsModerator", value);
			}
		}

		public ValueOutput<bool> IsBroadcaster
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsBroadcaster"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsBroadcaster", value);
			}
		}

		public ValueOutput<bool> IsTurbo
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsTurbo"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsTurbo", value);
			}
		}

		public ValueOutput<bool> IsVIP
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsVIP"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsVIP", value);
			}
		}

		public ValueOutput<BadgeColor> CheerBadge
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CheerBadge"), typeof(ValueOutput<BadgeColor>)) is ValueOutput<BadgeColor> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<BadgeColor>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CheerBadge", value);
			}
		}

		public ValueOutput<int> CheerAmount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CheerAmount"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CheerAmount", value);
			}
		}

		public ValueOutput<int> Bits
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Bits"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Bits", value);
			}
		}

		public ValueOutput<double> BitsDollars
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BitsDollars"), typeof(ValueOutput<double>)) is ValueOutput<double> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<double>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BitsDollars", value);
			}
		}

		public ValueOutput<int> SubscribedMonthCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SubscribedMonthCount"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SubscribedMonthCount", value);
			}
		}

		public ObjectOutput<string> CustomRewardId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CustomRewardId"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CustomRewardId", value);
			}
		}

		public ObjectStore<Action<OnMessageReceivedArgs>> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<Action<OnMessageReceivedArgs>>)) is ObjectStore<Action<OnMessageReceivedArgs>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<OnMessageReceivedArgs>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", twitch, path, dispatcher, context);
		}

		public override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", twitch, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public void HandleEvent(OnMessageReceivedArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleEvent", args, context);
		}

		public TwitchChatMessageEvent()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TwitchChatMessageEvent", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TwitchChatMessageEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class TwitchSubscriptionEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnSubscription
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSubscription"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSubscription", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserId"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DisplayName"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DisplayName", value);
			}
		}

		public ObjectOutput<string> Message
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Message"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Message", value);
			}
		}

		public ValueOutput<int> Months
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Months"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Months", value);
			}
		}

		public ValueOutput<SubscriptionPlan> Plan
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Plan"), typeof(ValueOutput<SubscriptionPlan>)) is ValueOutput<SubscriptionPlan> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<SubscriptionPlan>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Plan", value);
			}
		}

		public ValueOutput<bool> IsResub
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsResub"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsResub", value);
			}
		}

		public ValueOutput<bool> IsGifted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsGifted"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsGifted", value);
			}
		}

		public ObjectOutput<string> GiftedBy
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GiftedBy"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GiftedBy", value);
			}
		}

		public ValueOutput<bool> IsAnonymous
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsAnonymous"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsAnonymous", value);
			}
		}

		public ObjectStore<Action<OnNewSubscriberArgs>> _newSub
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_newSub"), typeof(ObjectStore<Action<OnNewSubscriberArgs>>)) is ObjectStore<Action<OnNewSubscriberArgs>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<OnNewSubscriberArgs>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_newSub", value);
			}
		}

		public ObjectStore<Action<OnReSubscriberArgs>> _reSub
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_reSub"), typeof(ObjectStore<Action<OnReSubscriberArgs>>)) is ObjectStore<Action<OnReSubscriberArgs>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<OnReSubscriberArgs>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_reSub", value);
			}
		}

		public ObjectStore<Action<OnGiftedSubscriptionArgs>> _gifted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_gifted"), typeof(ObjectStore<Action<OnGiftedSubscriptionArgs>>)) is ObjectStore<Action<OnGiftedSubscriptionArgs>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<OnGiftedSubscriptionArgs>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_gifted", value);
			}
		}

		public override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", twitch, path, dispatcher, context);
		}

		public override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", twitch, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public void OnNew(OnNewSubscriberArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnNew", args, context);
		}

		public void OnResub(OnReSubscriberArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnResub", args, context);
		}

		public void OnGifted(OnGiftedSubscriptionArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnGifted", args, context);
		}

		public void SendEvent(SubscriberBase args, System.Int32 months, System.Boolean isResub, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SendEvent", args, months, isResub, context);
		}

		public TwitchSubscriptionEvent()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TwitchSubscriptionEvent", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TwitchSubscriptionEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class TwitchFollowEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnFollow
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFollow"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFollow", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserId"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DisplayName"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DisplayName", value);
			}
		}

		public ObjectStore<Action<OnFollowArgs>> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<Action<OnFollowArgs>>)) is ObjectStore<Action<OnFollowArgs>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<OnFollowArgs>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", twitch, path, dispatcher, context);
		}

		public override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", twitch, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public void Follow(OnFollowArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Follow", args, context);
		}

		public TwitchFollowEvent()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TwitchFollowEvent", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TwitchFollowEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class TwitchRewardRedeemEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnRedeem
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnRedeem"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnRedeem", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DisplayName"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DisplayName", value);
			}
		}

		public ObjectOutput<string> Message
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Message"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Message", value);
			}
		}

		public ValueOutput<DateTime> TimeStamp
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TimeStamp"), typeof(ValueOutput<DateTime>)) is ValueOutput<DateTime> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<DateTime>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TimeStamp", value);
			}
		}

		public ObjectOutput<string> RewardId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RewardId"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RewardId", value);
			}
		}

		public ObjectOutput<string> RewardTitle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RewardTitle"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RewardTitle", value);
			}
		}

		public ObjectOutput<string> RewardPrompt
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RewardPrompt"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RewardPrompt", value);
			}
		}

		public ObjectOutput<string> Status
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Status"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Status", value);
			}
		}

		public ValueOutput<int> RewardCost
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RewardCost"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RewardCost", value);
			}
		}

		public ObjectStore<Action<OnRewardRedeemedArgs>> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<Action<OnRewardRedeemedArgs>>)) is ObjectStore<Action<OnRewardRedeemedArgs>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<OnRewardRedeemedArgs>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", twitch, path, dispatcher, context);
		}

		public override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", twitch, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public void Redeem(OnRewardRedeemedArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Redeem", args, context);
		}

		public TwitchRewardRedeemEvent()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TwitchRewardRedeemEvent", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TwitchRewardRedeemEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class TwitchRaidEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnRaid
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnRaid"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnRaid", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UserId"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DisplayName"), typeof(ObjectOutput<string>)) is ObjectOutput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DisplayName", value);
			}
		}

		public ValueOutput<colorX> Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(ValueOutput<colorX>)) is ValueOutput<colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public ValueOutput<int> ViewerCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ViewerCount"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ViewerCount", value);
			}
		}

		public ValueOutput<bool> IsSubscriber
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IsSubscriber"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IsSubscriber", value);
			}
		}

		public ObjectStore<Action<OnRaidNotificationArgs>> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(ObjectStore<Action<OnRaidNotificationArgs>>)) is ObjectStore<Action<OnRaidNotificationArgs>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<OnRaidNotificationArgs>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", twitch, path, dispatcher, context);
		}

		public override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", twitch, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public void Raid(OnRaidNotificationArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Raid", args, context);
		}

		public TwitchRaidEvent()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TwitchRaidEvent", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TwitchRaidEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Locomotion
{
	[NodeCategory("Locomotion")]
	[ContinuouslyChanging]
	public class GetActiveLocomotionModule : ObjectFunctionNode<FrooxEngineContext, ILocomotionModule>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override ILocomotionModule Compute(FrooxEngineContext context)
		{
			return (ILocomotionModule)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(ILocomotionModule));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetActiveLocomotionModule(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetActiveLocomotionModule()
		{
		}
	}
	[NodeCategory("Locomotion")]
	public class InstallLocomotionModules : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> ModulesRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ModulesRoot"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ModulesRoot", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> TargetUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TargetUser"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TargetUser", value);
			}
		}

		public ValueInput<bool> ClearExisting
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ClearExisting"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ClearExisting", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public InstallLocomotionModules(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public InstallLocomotionModules()
		{
		}
	}
	[NodeCategory("Locomotion")]
	public class SwitchLocomotionModule : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> TargetUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TargetUser"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TargetUser", value);
			}
		}

		public ObjectInput<string> ModuleName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ModuleName"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ModuleName", value);
			}
		}

		public ValueInput<bool> ExactMatch
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ExactMatch"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ExactMatch", value);
			}
		}

		public Continuation OnSwitched
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnSwitched"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnSwitched", value);
			}
		}

		public Continuation OnNotFound
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnNotFound"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnNotFound", value);
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SwitchLocomotionModule(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SwitchLocomotionModule()
		{
		}
	}
	[NodeCategory("Locomotion")]
	public class GetLocomotionArchetype : ObjectFunctionNode<FrooxEngineContext, LocomotionArchetype?>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ILocomotionModule> Module
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Module"), typeof(ObjectArgument<ILocomotionModule>)) is ObjectArgument<ILocomotionModule> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<ILocomotionModule>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Module", value);
			}
		}

		public override LocomotionArchetype? Compute(FrooxEngineContext context)
		{
			return (LocomotionArchetype?)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(LocomotionArchetype));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetLocomotionArchetype(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetLocomotionArchetype()
		{
		}
	}
	[NodeCategory("Locomotion")]
	public class FootstepEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<IFootstepEventRelay> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(GlobalRef<IFootstepEventRelay>)) is GlobalRef<IFootstepEventRelay> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<IFootstepEventRelay>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public Call Footstep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Footstep"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Footstep", value);
			}
		}

		public ValueOutput<Chirality> Side
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Side"), typeof(ValueOutput<Chirality>)) is ValueOutput<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Side", value);
			}
		}

		public ValueOutput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueOutput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueOutput<floatQ>)) is ValueOutput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public ValueOutput<float3> ImpactVelocity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ImpactVelocity"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ImpactVelocity", value);
			}
		}

		public ValueOutput<bool> HasLanded
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HasLanded"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HasLanded", value);
			}
		}

		public ObjectOutput<ICollider> HitCollider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitCollider"), typeof(ObjectOutput<ICollider>)) is ObjectOutput<ICollider> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<ICollider>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitCollider", value);
			}
		}

		public ValueOutput<int> HitTriangleIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HitTriangleIndex"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HitTriangleIndex", value);
			}
		}

		public ObjectStore<IFootstepEventRelay> _currentRelay
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_currentRelay"), typeof(ObjectStore<IFootstepEventRelay>)) is ObjectStore<IFootstepEventRelay> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<IFootstepEventRelay>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_currentRelay", value);
			}
		}

		public ObjectStore<FootstepEventHandler> _eventHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_eventHandler"), typeof(ObjectStore<FootstepEventHandler>)) is ObjectStore<FootstepEventHandler> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<FootstepEventHandler>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_eventHandler", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnSourceChanged(IFootstepEventRelay relay, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnSourceChanged", relay, context);
		}

		public void OnFootstep(Chirality side, float3 position, floatQ rotation, float3 impactVelocity, System.Boolean hasLanded, RaycastHit hit, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnFootstep", side, position, rotation, impactVelocity, hasLanded, hit, context);
		}

		public FootstepEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "FootstepEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FootstepEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Avatar
{
	[NodeCategory("Avatars")]
	public class EquipAvatar : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ObjectInput<Slot> AvatarRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AvatarRoot"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AvatarRoot", value);
			}
		}

		public ValueInput<bool> DestroyOld
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DestroyOld"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DestroyOld", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public EquipAvatar(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public EquipAvatar()
		{
		}
	}
	[NodeCategory("Avatars/Body Nodes")]
	public class BodyNodeSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public ValueArgument<BodyNode> Node
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Node"), typeof(ValueArgument<BodyNode>)) is ValueArgument<BodyNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<BodyNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Node", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BodyNodeSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BodyNodeSlot()
		{
		}
	}
	[NodeCategory("Avatars/Body Nodes")]
	public class BodyNodeSlotInChildren : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Source
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Source"), typeof(ObjectArgument<Slot>)) is ObjectArgument<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Source", value);
			}
		}

		public ValueArgument<BodyNode> Node
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Node"), typeof(ValueArgument<BodyNode>)) is ValueArgument<BodyNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<BodyNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Node", value);
			}
		}

		public override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(Slot));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BodyNodeSlotInChildren(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BodyNodeSlotInChildren()
		{
		}
	}
	[NodeCategory("Avatars")]
	[ContinuouslyChanging]
	public class UserFingerPoseSource : ObjectFunctionNode<FrooxEngineContext, IFingerPoseSourceComponent>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override IFingerPoseSourceComponent Compute(FrooxEngineContext context)
		{
			return (IFingerPoseSourceComponent)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(IFingerPoseSourceComponent));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserFingerPoseSource(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UserFingerPoseSource()
		{
		}
	}
	[NodeCategory("Avatars")]
	[ContinuouslyChanging]
	public class FingerPose : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IFingerPoseSourceComponent> PoseSource
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PoseSource"), typeof(ObjectArgument<IFingerPoseSourceComponent>)) is ObjectArgument<IFingerPoseSourceComponent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IFingerPoseSourceComponent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PoseSource", value);
			}
		}

		public ValueArgument<BodyNode> FingerNode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FingerNode"), typeof(ValueArgument<BodyNode>)) is ValueArgument<BodyNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<BodyNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FingerNode", value);
			}
		}

		public ValueOutput<float3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueOutput<float3>)) is ValueOutput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueOutput<floatQ> Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(ValueOutput<floatQ>)) is ValueOutput<floatQ> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<floatQ>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public FingerPose()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "FingerPose", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FingerPose(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[DataModelType]
	public interface INearestData : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.Single Distance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Distance"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Distance", value);
			}
		}

		global::FrooxEngine.User User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "User"), typeof(global::FrooxEngine.User)) is global::FrooxEngine.User __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to global::FrooxEngine.User");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "User", value);
			}
		}

		Slot Slot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Slot"), typeof(Slot)) is Slot __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Slot");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Slot", value);
			}
		}
	}
	[NodeCategory("Avatars")]
	public abstract class NearestUserNode<D> : VoidNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder where D : struct, INearestData
	{
		public ObjectInput<Slot> Reference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reference"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reference", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> IgnoreUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IgnoreUser"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IgnoreUser", value);
			}
		}

		public ValueInput<bool> IgnoreAFK
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IgnoreAFK"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IgnoreAFK", value);
			}
		}

		public ObjectOutput<Slot> Slot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Slot"), typeof(ObjectOutput<Slot>)) is ObjectOutput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Slot", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectOutput<global::FrooxEngine.User>)) is ObjectOutput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ValueOutput<float> Distance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Distance"), typeof(ValueOutput<float>)) is ValueOutput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Distance", value);
			}
		}

		public ValueStore<int> _cachedFrame
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_cachedFrame"), typeof(ValueStore<int>)) is ValueStore<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_cachedFrame", value);
			}
		}

		public ObjectStore<Slot> _slot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_slot"), typeof(ObjectStore<Slot>)) is ObjectStore<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_slot", value);
			}
		}

		public ObjectStore<global::FrooxEngine.User> _user
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_user"), typeof(ObjectStore<global::FrooxEngine.User>)) is ObjectStore<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_user", value);
			}
		}

		public ValueStore<float> _distance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_distance"), typeof(ValueStore<float>)) is ValueStore<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_distance", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public void ComputeData(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeData", context);
		}

		public abstract void Initialize(ref D nearest, FrooxEngineContext context);

		public abstract void UpdateNearest(global::FrooxEngine.User user, in float3 referencePos, ref D nearest, FrooxEngineContext context);

		public abstract void StoreNearest(ref D nearest, FrooxEngineContext context);

		public abstract void WriteOutputs(FrooxEngineContext context);

		public NearestUserNode()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "NearestUserNode", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public NearestUserNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class NearestUserHead : NearestUserNode<NearestUserHead.Data>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public struct Data : INearestData, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public System.Single Distance
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Distance"), typeof(System.Single)) is System.Single __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to float");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Distance", value);
				}
			}

			public global::FrooxEngine.User User
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "User"), typeof(global::FrooxEngine.User)) is global::FrooxEngine.User __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to global::FrooxEngine.User");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "User", value);
				}
			}

			public Slot Slot
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Slot"), typeof(Slot)) is Slot __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Slot");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Slot", value);
				}
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Data(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Data()
			{
			}
		}

		public override void Initialize(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Initialize", out ResoniteBridge.ResoniteBridgeValue[] __outVars, nearest, context);
		}

		public override void UpdateNearest(global::FrooxEngine.User user, in float3 referencePos, ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "UpdateNearest", out ResoniteBridge.ResoniteBridgeValue[] __outVars, user, referencePos, nearest, context);
		}

		public override void StoreNearest(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "StoreNearest", out ResoniteBridge.ResoniteBridgeValue[] __outVars, nearest, context);
		}

		public override void WriteOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteOutputs", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public NearestUserHead(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public NearestUserHead()
		{
		}
	}
	public class NearestUserHand : NearestUserNode<NearestUserHand.Data>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public struct Data : INearestData, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Chirality Chirality
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Chirality"), typeof(Chirality)) is Chirality __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Chirality");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Chirality", value);
				}
			}

			public System.Boolean GetLeft
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetLeft"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetLeft", value);
				}
			}

			public System.Boolean GetRight
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetRight"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetRight", value);
				}
			}

			public System.Single Distance
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Distance"), typeof(System.Single)) is System.Single __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to float");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Distance", value);
				}
			}

			public global::FrooxEngine.User User
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "User"), typeof(global::FrooxEngine.User)) is global::FrooxEngine.User __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to global::FrooxEngine.User");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "User", value);
				}
			}

			public Slot Slot
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Slot"), typeof(Slot)) is Slot __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Slot");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Slot", value);
				}
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Data(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Data()
			{
			}
		}

		public ValueInput<bool> GetLeft
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetLeft"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetLeft", value);
			}
		}

		public ValueInput<bool> GetRight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetRight"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetRight", value);
			}
		}

		public ValueOutput<Chirality> Chirality
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Chirality"), typeof(ValueOutput<Chirality>)) is ValueOutput<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Chirality", value);
			}
		}

		public ValueStore<Chirality> _chirality
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_chirality"), typeof(ValueStore<Chirality>)) is ValueStore<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_chirality", value);
			}
		}

		public override void Initialize(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Initialize", out ResoniteBridge.ResoniteBridgeValue[] __outVars, nearest, context);
		}

		public override void UpdateNearest(global::FrooxEngine.User user, in float3 referencePos, ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "UpdateNearest", out ResoniteBridge.ResoniteBridgeValue[] __outVars, user, referencePos, nearest, context);
		}

		public override void StoreNearest(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "StoreNearest", out ResoniteBridge.ResoniteBridgeValue[] __outVars, nearest, context);
		}

		public override void WriteOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteOutputs", context);
		}

		public NearestUserHand()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "NearestUserHand", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public NearestUserHand(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class NearestUserFoot : NearestUserNode<NearestUserFoot.Data>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public struct Data : INearestData, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Chirality Chirality
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Chirality"), typeof(Chirality)) is Chirality __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Chirality");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Chirality", value);
				}
			}

			public System.Boolean GetLeft
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetLeft"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetLeft", value);
				}
			}

			public System.Boolean GetRight
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetRight"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetRight", value);
				}
			}

			public System.Single Distance
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Distance"), typeof(System.Single)) is System.Single __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to float");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Distance", value);
				}
			}

			public global::FrooxEngine.User User
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "User"), typeof(global::FrooxEngine.User)) is global::FrooxEngine.User __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to global::FrooxEngine.User");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "User", value);
				}
			}

			public Slot Slot
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Slot"), typeof(Slot)) is Slot __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Slot");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Slot", value);
				}
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Data(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Data()
			{
			}
		}

		public ValueInput<bool> GetLeft
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetLeft"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetLeft", value);
			}
		}

		public ValueInput<bool> GetRight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetRight"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetRight", value);
			}
		}

		public ValueOutput<Chirality> Chirality
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Chirality"), typeof(ValueOutput<Chirality>)) is ValueOutput<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Chirality", value);
			}
		}

		public ValueStore<Chirality> _chirality
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_chirality"), typeof(ValueStore<Chirality>)) is ValueStore<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_chirality", value);
			}
		}

		public override void Initialize(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "Initialize", out ResoniteBridge.ResoniteBridgeValue[] __outVars, nearest, context);
		}

		public override void UpdateNearest(global::FrooxEngine.User user, in float3 referencePos, ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "UpdateNearest", out ResoniteBridge.ResoniteBridgeValue[] __outVars, user, referencePos, nearest, context);
		}

		public override void StoreNearest(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethodWithRefsAndOuts(__Backing, "StoreNearest", out ResoniteBridge.ResoniteBridgeValue[] __outVars, nearest, context);
		}

		public override void WriteOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteOutputs", context);
		}

		public NearestUserFoot()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "NearestUserFoot", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public NearestUserFoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Avatars")]
	[NodeOverload("Engine.Avatars.DefaultUserScale")]
	public class DefaultUserScale : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DefaultUserScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DefaultUserScale()
		{
		}
	}
	[NodeCategory("Avatars")]
	[NodeOverload("Engine.Avatars.DefaultUserScale")]
	public class DefaultUserRootScale : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<UserRoot>)) is ObjectArgument<UserRoot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UserRoot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Single Compute(FrooxEngineContext context)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Single));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DefaultUserRootScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DefaultUserRootScale()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Avatar.BodyNodes
{
	[NodeCategory("Avatars/Body Nodes")]
	public abstract class BodyNodeConverter<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<BodyNode> Node
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Node"), typeof(ValueArgument<BodyNode>)) is ValueArgument<BodyNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<BodyNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Node", value);
			}
		}

		public override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public virtual T Convert(BodyNode node)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node), typeof(T));
		}

		public virtual T Convert(BodyNode node, ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node, context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BodyNodeConverter(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BodyNodeConverter()
		{
		}
	}
	public class BodyNodeChirality : BodyNodeConverter<Chirality>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override Chirality Convert(BodyNode node)
		{
			return (Chirality)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node), typeof(Chirality));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BodyNodeChirality(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BodyNodeChirality()
		{
		}
	}
	public class RelativeBodyNode : BodyNodeConverter<BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override BodyNode Convert(BodyNode node)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node), typeof(BodyNode));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RelativeBodyNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RelativeBodyNode()
		{
		}
	}
	public class FingerNodeIndex : BodyNodeConverter<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Int32 Convert(BodyNode node)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FingerNodeIndex(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FingerNodeIndex()
		{
		}
	}
	public class IsEye : BodyNodeConverter<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean Convert(BodyNode node)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsEye(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsEye()
		{
		}
	}
	public class OtherSide : BodyNodeConverter<BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override BodyNode Convert(BodyNode node)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node), typeof(BodyNode));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OtherSide(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OtherSide()
		{
		}
	}
	public class GetSide : BodyNodeConverter<BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Chirality> Side
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Side"), typeof(ValueArgument<Chirality>)) is ValueArgument<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Side", value);
			}
		}

		public override BodyNode Convert(BodyNode node, ExecutionContext context)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node, context), typeof(BodyNode));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetSide(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetSide()
		{
		}
	}
	public class GetFingerType : BodyNodeConverter<FingerType>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override FingerType Convert(BodyNode node)
		{
			return (FingerType)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node), typeof(FingerType));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetFingerType(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetFingerType()
		{
		}
	}
	public class GetFingerSegmentType : BodyNodeConverter<FingerSegmentType>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override FingerSegmentType Convert(BodyNode node)
		{
			return (FingerSegmentType)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Convert", node), typeof(FingerSegmentType));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetFingerSegmentType(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetFingerSegmentType()
		{
		}
	}
	[NodeCategory("Avatars/Body Nodes")]
	public class ComposeFinger : ValueFunctionNode<FrooxEngineContext, BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<FingerType> Finger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Finger"), typeof(ValueArgument<FingerType>)) is ValueArgument<FingerType> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<FingerType>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Finger", value);
			}
		}

		public ValueArgument<FingerSegmentType> Segment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Segment"), typeof(ValueArgument<FingerSegmentType>)) is ValueArgument<FingerSegmentType> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<FingerSegmentType>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Segment", value);
			}
		}

		public ValueArgument<Chirality> Chirality
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Chirality"), typeof(ValueArgument<Chirality>)) is ValueArgument<Chirality> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<Chirality>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Chirality", value);
			}
		}

		public override BodyNode Compute(FrooxEngineContext context)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(BodyNode));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ComposeFinger(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ComposeFinger()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Avatar.Anchors
{
	[NodeCategory("Avatars/Anchors")]
	public abstract class AnchorEventsBase : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<AvatarAnchor> Anchor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Anchor"), typeof(GlobalRef<AvatarAnchor>)) is GlobalRef<AvatarAnchor> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<AvatarAnchor>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Anchor", value);
			}
		}

		public ObjectStore<AvatarAnchor> _current
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_current"), typeof(ObjectStore<AvatarAnchor>)) is ObjectStore<AvatarAnchor> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<AvatarAnchor>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_current", value);
			}
		}

		public ObjectStore<AvatarAnchorUserEvent> _anchored
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_anchored"), typeof(ObjectStore<AvatarAnchorUserEvent>)) is ObjectStore<AvatarAnchorUserEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<AvatarAnchorUserEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_anchored", value);
			}
		}

		public ObjectStore<AvatarAnchorUserEvent> _released
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_released"), typeof(ObjectStore<AvatarAnchorUserEvent>)) is ObjectStore<AvatarAnchorUserEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<AvatarAnchorUserEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_released", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnAnchorChanged(AvatarAnchor anchor, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAnchorChanged", anchor, context);
		}

		public abstract void Register(AvatarAnchor anchor, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context);

		public abstract void Unregister(AvatarAnchor anchor, FrooxEngineContext context);

		public abstract void Clear(FrooxEngineContext context);

		public abstract void HandleAnchored(global::FrooxEngine.User user, FrooxEngineContext context);

		public abstract void HandleReleased(global::FrooxEngine.User user, FrooxEngineContext context);

		public AnchorEventsBase()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "AnchorEventsBase", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AnchorEventsBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class AnchorEvents : AnchorEventsBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnAnchored
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnAnchored"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnAnchored", value);
			}
		}

		public Call OnReleased
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnReleased"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnReleased", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectOutput<global::FrooxEngine.User>)) is ObjectOutput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override void Register(AvatarAnchor anchor, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", anchor, path, dispatcher, context);
		}

		public override void Unregister(AvatarAnchor anchor, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", anchor, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public override void HandleAnchored(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleAnchored", user, context);
		}

		public override void HandleReleased(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleReleased", user, context);
		}

		public AnchorEvents()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "AnchorEvents", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AnchorEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class AnchorLocomotionData : AnchorEventsBase, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnLocomotionUpdate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnLocomotionUpdate"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnLocomotionUpdate", value);
			}
		}

		public ValueOutput<bool> HasPrimary
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HasPrimary"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HasPrimary", value);
			}
		}

		public ValueOutput<bool> HasSecondary
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HasSecondary"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HasSecondary", value);
			}
		}

		public ValueOutput<float2> PrimaryAxis
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PrimaryAxis"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PrimaryAxis", value);
			}
		}

		public ValueOutput<float2> SecondaryAxis
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SecondaryAxis"), typeof(ValueOutput<float2>)) is ValueOutput<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SecondaryAxis", value);
			}
		}

		public ValueOutput<bool> PrimaryAction
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PrimaryAction"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PrimaryAction", value);
			}
		}

		public ValueOutput<bool> SecondaryAction
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SecondaryAction"), typeof(ValueOutput<bool>)) is ValueOutput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SecondaryAction", value);
			}
		}

		public ObjectStore<AvatarAnchorUserEvent> _userStay
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_userStay"), typeof(ObjectStore<AvatarAnchorUserEvent>)) is ObjectStore<AvatarAnchorUserEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<AvatarAnchorUserEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_userStay", value);
			}
		}

		public ObjectStore<AnchorLocomotionInputs> _locomotionInputs
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_locomotionInputs"), typeof(ObjectStore<AnchorLocomotionInputs>)) is ObjectStore<AnchorLocomotionInputs> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<AnchorLocomotionInputs>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_locomotionInputs", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public override void Register(AvatarAnchor anchor, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Register", anchor, path, dispatcher, context);
		}

		public override void Unregister(AvatarAnchor anchor, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Unregister", anchor, context);
		}

		public override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", context);
		}

		public override void HandleAnchored(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleAnchored", user, context);
		}

		public override void HandleReleased(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleReleased", user, context);
		}

		public void UnregisterInputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UnregisterInputs", context);
		}

		public void HandleStay(FrooxEngineContext context, System.Object userObj)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleStay", context, userObj);
		}

		public AnchorLocomotionData()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "AnchorLocomotionData", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AnchorLocomotionData(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Avatars/Anchors")]
	[ContinuouslyChanging]
	public class AnchoredUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IAvatarAnchor> Anchor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Anchor"), typeof(ObjectArgument<IAvatarAnchor>)) is ObjectArgument<IAvatarAnchor> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IAvatarAnchor>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Anchor", value);
			}
		}

		public override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AnchoredUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AnchoredUser()
		{
		}
	}
	[NodeCategory("Avatars/Anchors")]
	[ContinuouslyChanging]
	public class GetUserAnchor : ObjectFunctionNode<FrooxEngineContext, IAvatarAnchor>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override IAvatarAnchor Compute(FrooxEngineContext context)
		{
			return (IAvatarAnchor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(IAvatarAnchor));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetUserAnchor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetUserAnchor()
		{
		}
	}
	[NodeCategory("Avatars/Anchors")]
	[ContinuouslyChanging]
	public class IsUserAnchored : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsUserAnchored(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsUserAnchored()
		{
		}
	}
	[NodeCategory("Avatars/Anchors")]
	[ContinuouslyChanging]
	public class IsAnchorOccupied : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IAvatarAnchor> Anchor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Anchor"), typeof(ObjectArgument<IAvatarAnchor>)) is ObjectArgument<IAvatarAnchor> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IAvatarAnchor>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Anchor", value);
			}
		}

		public override System.Boolean Compute(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IsAnchorOccupied(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IsAnchorOccupied()
		{
		}
	}
	[NodeCategory("Avatars/Anchors")]
	public class AnchorUser : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IAvatarAnchor> Anchor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Anchor"), typeof(ObjectInput<IAvatarAnchor>)) is ObjectInput<IAvatarAnchor> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IAvatarAnchor>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Anchor", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public Continuation OnAnchored
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnAnchored"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnAnchored", value);
			}
		}

		public Continuation OnFailure
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFailure"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFailure", value);
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AnchorUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AnchorUser()
		{
		}
	}
	[NodeCategory("Avatars/Anchors")]
	public class ReleaseUser : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IAvatarAnchor> Anchor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Anchor"), typeof(ObjectInput<IAvatarAnchor>)) is ObjectInput<IAvatarAnchor> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IAvatarAnchor>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Anchor", value);
			}
		}

		public Continuation OnReleased
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnReleased"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnReleased", value);
			}
		}

		public Continuation OnFailure
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFailure"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFailure", value);
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ReleaseUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ReleaseUser()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Audio
{
	[NodeCategory("Audio")]
	public class PlayOneShot : ActionNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IAssetProvider<AudioClip>> Clip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Clip"), typeof(ObjectInput<IAssetProvider<AudioClip>>)) is ObjectInput<IAssetProvider<AudioClip>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IAssetProvider<AudioClip>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Clip", value);
			}
		}

		public ValueInput<float> Volume
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Volume"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Volume", value);
			}
		}

		public ValueInput<float> Speed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Speed"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Speed", value);
			}
		}

		public ValueInput<bool> Spatialize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Spatialize"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Spatialize", value);
			}
		}

		public ValueInput<float> SpatialBlend
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SpatialBlend"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SpatialBlend", value);
			}
		}

		public ValueInput<float3> Point
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point", value);
			}
		}

		public ObjectInput<Slot> Root
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Root"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Root", value);
			}
		}

		public ValueInput<bool> ParentUnderRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ParentUnderRoot"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ParentUnderRoot", value);
			}
		}

		public ValueInput<int> Priority
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Priority"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Priority", value);
			}
		}

		public ValueInput<float> Doppler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Doppler"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Doppler", value);
			}
		}

		public ValueInput<float> MinDistance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MinDistance"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MinDistance", value);
			}
		}

		public ValueInput<float> MaxDistance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MaxDistance"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MaxDistance", value);
			}
		}

		public ValueInput<AudioRolloffMode> Rolloff
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rolloff"), typeof(ValueInput<AudioRolloffMode>)) is ValueInput<AudioRolloffMode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<AudioRolloffMode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rolloff", value);
			}
		}

		public ValueInput<AudioDistanceSpace> DistanceSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DistanceSpace"), typeof(ValueInput<AudioDistanceSpace>)) is ValueInput<AudioDistanceSpace> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<AudioDistanceSpace>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DistanceSpace", value);
			}
		}

		public ValueInput<float> MinScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MinScale"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MinScale", value);
			}
		}

		public ValueInput<float> MaxScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MaxScale"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MaxScale", value);
			}
		}

		public ValueInput<AudioTypeGroup> Group
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Group"), typeof(ValueInput<AudioTypeGroup>)) is ValueInput<AudioTypeGroup> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<AudioTypeGroup>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Group", value);
			}
		}

		public ValueInput<bool> LocalOnly
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalOnly"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalOnly", value);
			}
		}

		public ObjectOutput<AudioOutput> Audio
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Audio"), typeof(ObjectOutput<AudioOutput>)) is ObjectOutput<AudioOutput> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<AudioOutput>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Audio", value);
			}
		}

		public Continuation OnStartedPlaying
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnStartedPlaying"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnStartedPlaying", value);
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public PlayOneShot()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "PlayOneShot", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PlayOneShot(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Audio")]
	public class PlayOneShotAndWait : AsyncActionNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IAssetProvider<AudioClip>> Clip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Clip"), typeof(ObjectInput<IAssetProvider<AudioClip>>)) is ObjectInput<IAssetProvider<AudioClip>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IAssetProvider<AudioClip>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Clip", value);
			}
		}

		public ValueInput<float> Volume
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Volume"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Volume", value);
			}
		}

		public ValueInput<float> Speed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Speed"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Speed", value);
			}
		}

		public ValueInput<bool> Spatialize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Spatialize"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Spatialize", value);
			}
		}

		public ValueInput<float> SpatialBlend
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SpatialBlend"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SpatialBlend", value);
			}
		}

		public ValueInput<float3> Point
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Point"), typeof(ValueInput<float3>)) is ValueInput<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Point", value);
			}
		}

		public ObjectInput<Slot> Root
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Root"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Root", value);
			}
		}

		public ValueInput<bool> ParentUnderRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ParentUnderRoot"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ParentUnderRoot", value);
			}
		}

		public ValueInput<int> Priority
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Priority"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Priority", value);
			}
		}

		public ValueInput<float> Doppler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Doppler"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Doppler", value);
			}
		}

		public ValueInput<float> MinDistance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MinDistance"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MinDistance", value);
			}
		}

		public ValueInput<float> MaxDistance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MaxDistance"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MaxDistance", value);
			}
		}

		public ValueInput<AudioRolloffMode> Rolloff
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rolloff"), typeof(ValueInput<AudioRolloffMode>)) is ValueInput<AudioRolloffMode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<AudioRolloffMode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rolloff", value);
			}
		}

		public ValueInput<AudioDistanceSpace> DistanceSpace
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DistanceSpace"), typeof(ValueInput<AudioDistanceSpace>)) is ValueInput<AudioDistanceSpace> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<AudioDistanceSpace>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DistanceSpace", value);
			}
		}

		public ValueInput<float> MinScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MinScale"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MinScale", value);
			}
		}

		public ValueInput<float> MaxScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MaxScale"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MaxScale", value);
			}
		}

		public ValueInput<AudioTypeGroup> Group
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Group"), typeof(ValueInput<AudioTypeGroup>)) is ValueInput<AudioTypeGroup> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<AudioTypeGroup>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Group", value);
			}
		}

		public ValueInput<bool> LocalOnly
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LocalOnly"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LocalOnly", value);
			}
		}

		public ObjectOutput<AudioOutput> Audio
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Audio"), typeof(ObjectOutput<AudioOutput>)) is ObjectOutput<AudioOutput> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<AudioOutput>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Audio", value);
			}
		}

		public AsyncCall OnStartedPlaying
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnStartedPlaying"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnStartedPlaying", value);
			}
		}

		public Continuation OnFinishedPlaying
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFinishedPlaying"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFinishedPlaying", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public PlayOneShotAndWait()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "PlayOneShotAndWait", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PlayOneShotAndWait(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async
{
	[NodeName("Updates Delay", false)]
	[NodeCategory("Flow/Async")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async.UpdatesDelay", null)]
	public class DelayUpdates : AsyncActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public AsyncCall OnTriggered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnTriggered"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnTriggered", value);
			}
		}

		public ValueInput<int> Updates
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Updates"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Updates", value);
			}
		}

		public virtual void BeforeUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BeforeUpdate", context);
		}

		public override Task Do(FrooxEngineContext context)
		{
			return (Task)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(Task));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdates(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdates()
		{
		}
	}
	[NodeName("Updates Delay with Data", false)]
	[NodeOverload("Engine.UpdatesDelayWithData")]
	[NodeCategory("Flow/Async")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async.UpdatesDelayWithValue", null)]
	public class DelayUpdatesWithValue<T> : DelayUpdates, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ValueOutput<T> DelayedValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DelayedValue"), typeof(ValueOutput<T>)) is ValueOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DelayedValue", value);
			}
		}

		public override void BeforeUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BeforeUpdate", context);
		}

		public DelayUpdatesWithValue()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DelayUpdatesWithValue", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeName("Updates Delay with Data", false)]
	[NodeOverload("Engine.UpdatesDelayWithData")]
	[NodeCategory("Flow/Async")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async.UpdatesDelayWithObject", null)]
	public class DelayUpdatesWithObject<T> : DelayUpdates, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ObjectOutput<T> DelayedValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DelayedValue"), typeof(ObjectOutput<T>)) is ObjectOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DelayedValue", value);
			}
		}

		public override void BeforeUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BeforeUpdate", context);
		}

		public DelayUpdatesWithObject()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DelayUpdatesWithObject", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Flow/Async")]
	[NodeName("Updates or Time Delay", false)]
	[NodeOverload("Engine.UpdatesOrTimeDelay")]
	public abstract class DelayUpdatesOrTime : AsyncActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public AsyncCall OnTriggered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnTriggered"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnTriggered", value);
			}
		}

		public ValueInput<int> Updates
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Updates"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Updates", value);
			}
		}

		public virtual void BeforeDelay(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BeforeDelay", context);
		}

		public abstract TimeSpan GetDuration(FrooxEngineContext context);

		public override Task Do(FrooxEngineContext context)
		{
			return (Task)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(Task));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTime()
		{
		}
	}
	public class DelayUpdatesOrSecondsInt : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<int> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrSecondsInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrSecondsInt()
		{
		}
	}
	public class DelayUpdatesOrSecondsFloat : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrSecondsFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrSecondsFloat()
		{
		}
	}
	public class DelayUpdatesOrSecondsDouble : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<double> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<double>)) is ValueInput<double> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<double>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrSecondsDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrSecondsDouble()
		{
		}
	}
	public class DelayUpdatesOrTimeSpan : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<TimeSpan> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<TimeSpan>)) is ValueInput<TimeSpan> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<TimeSpan>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTimeSpan()
		{
		}
	}
	[NodeName("Updates or Time Delay with Data", false)]
	[NodeOverload("Engine.UpdatesOrTimeDelayWithData")]
	public abstract class DelayUpdatesOrTimeWithValue<T> : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ValueOutput<T> DelayedValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DelayedValue"), typeof(ValueOutput<T>)) is ValueOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DelayedValue", value);
			}
		}

		public override void BeforeDelay(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BeforeDelay", context);
		}

		public DelayUpdatesOrTimeWithValue()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DelayUpdatesOrTimeWithValue", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class DelayUpdatesOrTimeWithValueTimeSpan<T> : DelayUpdatesOrTimeWithValue<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<TimeSpan> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<TimeSpan>)) is ValueInput<TimeSpan> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<TimeSpan>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithValueTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTimeWithValueTimeSpan()
		{
		}
	}
	public class DelayUpdatesOrTimeWithValueSecondsInt<T> : DelayUpdatesOrTimeWithValue<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<int> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithValueSecondsInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTimeWithValueSecondsInt()
		{
		}
	}
	public class DelayUpdatesOrTimeWithValueSecondsFloat<T> : DelayUpdatesOrTimeWithValue<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithValueSecondsFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTimeWithValueSecondsFloat()
		{
		}
	}
	public class DelayUpdatesOrTimeWithValueSecondsDouble<T> : DelayUpdatesOrTimeWithValue<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<double> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<double>)) is ValueInput<double> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<double>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithValueSecondsDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTimeWithValueSecondsDouble()
		{
		}
	}
	[NodeName("Updates or Time Delay with Data", false)]
	[NodeOverload("Engine.UpdatesOrTimeDelayWithData")]
	public abstract class DelayUpdatesOrTimeWithObject<T> : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public ObjectOutput<T> DelayedValue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DelayedValue"), typeof(ObjectOutput<T>)) is ObjectOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DelayedValue", value);
			}
		}

		public override void BeforeDelay(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BeforeDelay", context);
		}

		public DelayUpdatesOrTimeWithObject()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DelayUpdatesOrTimeWithObject", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class DelayUpdatesOrTimeWithObjectTimeSpan<T> : DelayUpdatesOrTimeWithObject<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<TimeSpan> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<TimeSpan>)) is ValueInput<TimeSpan> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<TimeSpan>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithObjectTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTimeWithObjectTimeSpan()
		{
		}
	}
	public class DelayUpdatesOrTimeWithObjectSecondsInt<T> : DelayUpdatesOrTimeWithObject<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<int> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithObjectSecondsInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTimeWithObjectSecondsInt()
		{
		}
	}
	public class DelayUpdatesOrTimeWithObjectSecondsFloat<T> : DelayUpdatesOrTimeWithObject<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithObjectSecondsFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTimeWithObjectSecondsFloat()
		{
		}
	}
	public class DelayUpdatesOrTimeWithObjectSecondsDouble<T> : DelayUpdatesOrTimeWithObject<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<double> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<double>)) is ValueInput<double> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<double>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithObjectSecondsDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DelayUpdatesOrTimeWithObjectSecondsDouble()
		{
		}
	}
	[NodeCategory("Flow/Async")]
	public class StartAsyncTask : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public AsyncResumption TaskStart
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TaskStart"), typeof(AsyncResumption)) is AsyncResumption __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncResumption");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TaskStart", value);
			}
		}

		public Continuation OnStarted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnStarted"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnStarted", value);
			}
		}

		public Continuation OnFailed
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnFailed"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnFailed", value);
			}
		}

		public override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Run", context), typeof(IOperation));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StartAsyncTask(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StartAsyncTask()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Assets
{
	[NodeCategory("Assets")]
	public class SampleValueAnimationTrack<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ObjectArgument<global::FrooxEngine.Animation> Animation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Animation"), typeof(ObjectArgument<global::FrooxEngine.Animation>)) is ObjectArgument<global::FrooxEngine.Animation> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.Animation>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Animation", value);
			}
		}

		public ValueArgument<int> TrackIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TrackIndex"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TrackIndex", value);
			}
		}

		public ValueArgument<float> Time
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Time"), typeof(ValueArgument<float>)) is ValueArgument<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Time", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SampleValueAnimationTrack(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SampleValueAnimationTrack()
		{
		}
	}
	[NodeCategory("Assets")]
	public class SampleObjectAnimationTrack<T> : ObjectFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.Animation> Animation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Animation"), typeof(ObjectArgument<global::FrooxEngine.Animation>)) is ObjectArgument<global::FrooxEngine.Animation> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.Animation>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Animation", value);
			}
		}

		public ValueArgument<int> TrackIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TrackIndex"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TrackIndex", value);
			}
		}

		public ValueArgument<float> Time
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Time"), typeof(ValueArgument<float>)) is ValueArgument<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Time", value);
			}
		}

		public override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SampleObjectAnimationTrack(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SampleObjectAnimationTrack()
		{
		}
	}
	[NodeCategory("Assets")]
	public class FindAnimationTrackIndex : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.Animation> Animation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Animation"), typeof(ObjectArgument<global::FrooxEngine.Animation>)) is ObjectArgument<global::FrooxEngine.Animation> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.Animation>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Animation", value);
			}
		}

		public ObjectArgument<string> Node
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Node"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Node", value);
			}
		}

		public ObjectArgument<string> Property
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Property"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Property", value);
			}
		}

		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FindAnimationTrackIndex(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FindAnimationTrackIndex()
		{
		}
	}
	[NodeCategory("Assets")]
	[GenericTypes(GenericTypesAttribute.Group.Assets)]
	[NodeOverload("Engine.AssetLoadProgress")]
	public class AssetLoadProgress<A> : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where A : class, IAsset
	{
		public ObjectArgument<UsersAssetLoadProgress<A>> Tracker
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tracker"), typeof(ObjectArgument<UsersAssetLoadProgress<A>>)) is ObjectArgument<UsersAssetLoadProgress<A>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<UsersAssetLoadProgress<A>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tracker", value);
			}
		}

		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>)) is ObjectArgument<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "User", value);
			}
		}

		public ObjectOutput<float?> DownloadProgress
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DownloadProgress"), typeof(ObjectOutput<float?>)) is ObjectOutput<float?> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<float?>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DownloadProgress", value);
			}
		}

		public ValueOutput<AssetLoadState> LoadState
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LoadState"), typeof(ValueOutput<AssetLoadState>)) is ValueOutput<AssetLoadState> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<AssetLoadState>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LoadState", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public AssetLoadProgress()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "AssetLoadProgress", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AssetLoadProgress(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Assets")]
	public class GetAsset<A> : ObjectFunctionNode<FrooxEngineContext, A>, ResoniteBridge.ResoniteBridgeValueHolder where A : class, IAsset
	{
		public ObjectArgument<IAssetProvider<A>> Provider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Provider"), typeof(ObjectArgument<IAssetProvider<A>>)) is ObjectArgument<IAssetProvider<A>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<IAssetProvider<A>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Provider", value);
			}
		}

		public override A Compute(FrooxEngineContext context)
		{
			return (A)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(A));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetAsset(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetAsset()
		{
		}
	}
	[NodeCategory("Assets")]
	public abstract class AttachAsset<A> : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where A : class, IAssetProvider
	{
		public ObjectInput<System.Uri> URL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "URL"), typeof(ObjectInput<System.Uri>)) is ObjectInput<System.Uri> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Uri>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "URL", value);
			}
		}

		public ObjectInput<Slot> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public ValueInput<bool> GetExisting
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GetExisting"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GetExisting", value);
			}
		}

		public ObjectOutput<A> AttachedProvider
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AttachedProvider"), typeof(ObjectOutput<A>)) is ObjectOutput<A> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<A>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AttachedProvider", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public abstract A Attach(Slot root, System.Uri url, System.Boolean getExisting);

		public AttachAsset()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "AttachAsset", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AttachAsset(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class AttachTexture2D : AttachAsset<StaticTexture2D>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override StaticTexture2D Attach(Slot root, System.Uri url, System.Boolean getExisting)
		{
			return (StaticTexture2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Attach", root, url, getExisting), typeof(StaticTexture2D));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AttachTexture2D(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AttachTexture2D()
		{
		}
	}
	public class AttachSprite : AttachAsset<SpriteProvider>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override SpriteProvider Attach(Slot root, System.Uri url, System.Boolean getExisting)
		{
			return (SpriteProvider)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Attach", root, url, getExisting), typeof(SpriteProvider));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AttachSprite(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AttachSprite()
		{
		}
	}
	public class AttachMesh : AttachAsset<StaticMesh>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override StaticMesh Attach(Slot root, System.Uri url, System.Boolean getExisting)
		{
			return (StaticMesh)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Attach", root, url, getExisting), typeof(StaticMesh));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AttachMesh(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AttachMesh()
		{
		}
	}
	public class AttachAudioClip : AttachAsset<StaticAudioClip>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override StaticAudioClip Attach(Slot root, System.Uri url, System.Boolean getExisting)
		{
			return (StaticAudioClip)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Attach", root, url, getExisting), typeof(StaticAudioClip));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AttachAudioClip(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AttachAudioClip()
		{
		}
	}
	[NodeCategory("Strings/Localization")]
	public class FormatLocaleString : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.LocaleResource> Locale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Locale"), typeof(ObjectArgument<global::FrooxEngine.LocaleResource>)) is ObjectArgument<global::FrooxEngine.LocaleResource> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.LocaleResource>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Locale", value);
			}
		}

		public ObjectArgument<string> Key
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Key"), typeof(ObjectArgument<string>)) is ObjectArgument<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Key", value);
			}
		}

		public override System.String Compute(FrooxEngineContext context)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.String));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FormatLocaleString(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FormatLocaleString()
		{
		}
	}
	[NodeCategory("Strings/Localization")]
	public class LocaleMessageCount : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.LocaleResource> Locale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Locale"), typeof(ObjectArgument<global::FrooxEngine.LocaleResource>)) is ObjectArgument<global::FrooxEngine.LocaleResource> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<global::FrooxEngine.LocaleResource>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Locale", value);
			}
		}

		public override System.Int32 Compute(FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocaleMessageCount(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocaleMessageCount()
		{
		}
	}
	[NodeCategory("Assets")]
	public class BakeMeshes : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Root
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Root"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Root", value);
			}
		}

		public ValueInput<bool> SkinnedMeshMode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SkinnedMeshMode"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SkinnedMeshMode", value);
			}
		}

		public ValueInput<bool> IncludeInactive
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "IncludeInactive"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "IncludeInactive", value);
			}
		}

		public ValueInput<bool> DestroyOriginal
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DestroyOriginal"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DestroyOriginal", value);
			}
		}

		public ObjectInput<Slot> AssetsSlot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AssetsSlot"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AssetsSlot", value);
			}
		}

		public ValueInput<ComponentHandling> GrabbableHandling
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GrabbableHandling"), typeof(ValueInput<ComponentHandling>)) is ValueInput<ComponentHandling> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<ComponentHandling>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GrabbableHandling", value);
			}
		}

		public ValueInput<ComponentHandling> ColliderHandling
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ColliderHandling"), typeof(ValueInput<ComponentHandling>)) is ValueInput<ComponentHandling> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<ComponentHandling>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ColliderHandling", value);
			}
		}

		public ValueInput<bool> Undoable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Undoable"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Undoable", value);
			}
		}

		public ObjectOutput<Slot> BakedRoot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BakedRoot"), typeof(ObjectOutput<Slot>)) is ObjectOutput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BakedRoot", value);
			}
		}

		public AsyncCall OnBakeStarted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnBakeStarted"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnBakeStarted", value);
			}
		}

		public Continuation OnBaked
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnBaked"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnBaked", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public BakeMeshes()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "BakeMeshes", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BakeMeshes(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Sample Texture 2D UV", false)]
	public class SampleTexture2D_UV : ValueFunctionNode<FrooxEngineContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture2D> Texture
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Texture"), typeof(ObjectArgument<Texture2D>)) is ObjectArgument<Texture2D> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Texture2D>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Texture", value);
			}
		}

		public ValueArgument<float2> UV
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UV"), typeof(ValueArgument<float2>)) is ValueArgument<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UV", value);
			}
		}

		public ValueArgument<WrapMode> WrapMode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "WrapMode"), typeof(ValueArgument<WrapMode>)) is ValueArgument<WrapMode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<WrapMode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "WrapMode", value);
			}
		}

		public static WrapMode WrapModeDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "SampleTexture2D_UV", ResoniteBridge.ResoniteBridgeValueType.Type), "WrapModeDefault"), typeof(WrapMode)) is WrapMode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to WrapMode");
				}
			}
		}

		public override colorX Compute(FrooxEngineContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(colorX));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SampleTexture2D_UV(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SampleTexture2D_UV()
		{
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Get Texture 2D Pixel", false)]
	public class GetTexture2D_Pixel : ValueFunctionNode<FrooxEngineContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture2D> Texture
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Texture"), typeof(ObjectArgument<Texture2D>)) is ObjectArgument<Texture2D> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Texture2D>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Texture", value);
			}
		}

		public ValueArgument<int2> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueArgument<int2>)) is ValueArgument<int2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueArgument<int> MipLevel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MipLevel"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MipLevel", value);
			}
		}

		public static int2 PositionDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "GetTexture2D_Pixel", ResoniteBridge.ResoniteBridgeValueType.Type), "PositionDefault"), typeof(int2)) is int2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int2");
				}
			}
		}

		public override colorX Compute(FrooxEngineContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(colorX));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetTexture2D_Pixel(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetTexture2D_Pixel()
		{
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Texture 2D Format", false)]
	public class Texture2D_Format : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture2D> Texture
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Texture"), typeof(ObjectArgument<Texture2D>)) is ObjectArgument<Texture2D> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Texture2D>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Texture", value);
			}
		}

		public ValueOutput<int2> Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(ValueOutput<int2>)) is ValueOutput<int2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public ValueOutput<TextureFormat> Format
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Format"), typeof(ValueOutput<TextureFormat>)) is ValueOutput<TextureFormat> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<TextureFormat>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Format", value);
			}
		}

		public ValueOutput<int> MipMapCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MipMapCount"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MipMapCount", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public Texture2D_Format()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Texture2D_Format", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Texture2D_Format(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Sample Texture 2D UVW", false)]
	public class SampleTexture3D_UVW : ValueFunctionNode<FrooxEngineContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture3D> Texture
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Texture"), typeof(ObjectArgument<Texture3D>)) is ObjectArgument<Texture3D> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Texture3D>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Texture", value);
			}
		}

		public ValueArgument<float3> UVW
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVW"), typeof(ValueArgument<float3>)) is ValueArgument<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVW", value);
			}
		}

		public override colorX Compute(FrooxEngineContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(colorX));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SampleTexture3D_UVW(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SampleTexture3D_UVW()
		{
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Get Texture 3D Pixel", false)]
	public class GetTexture3D_Pixel : ValueFunctionNode<FrooxEngineContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture3D> Texture
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Texture"), typeof(ObjectArgument<Texture3D>)) is ObjectArgument<Texture3D> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Texture3D>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Texture", value);
			}
		}

		public ValueArgument<int3> Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(ValueArgument<int3>)) is ValueArgument<int3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public ValueArgument<int> MipLevel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MipLevel"), typeof(ValueArgument<int>)) is ValueArgument<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueArgument<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MipLevel", value);
			}
		}

		public static int3 PositionDefault
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "GetTexture3D_Pixel", ResoniteBridge.ResoniteBridgeValueType.Type), "PositionDefault"), typeof(int3)) is int3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int3");
				}
			}
		}

		public override colorX Compute(FrooxEngineContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Compute", context), typeof(colorX));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GetTexture3D_Pixel(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GetTexture3D_Pixel()
		{
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Texture 3D Format", false)]
	public class Texture3D_Format : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture3D> Texture
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Texture"), typeof(ObjectArgument<Texture3D>)) is ObjectArgument<Texture3D> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectArgument<Texture3D>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Texture", value);
			}
		}

		public ValueOutput<int3> Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(ValueOutput<int3>)) is ValueOutput<int3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public ValueOutput<TextureFormat> Format
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Format"), typeof(ValueOutput<TextureFormat>)) is ValueOutput<TextureFormat> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<TextureFormat>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Format", value);
			}
		}

		public ValueOutput<int> MipMapCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MipMapCount"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MipMapCount", value);
			}
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public Texture3D_Format()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Texture3D_Format", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Texture3D_Format(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Animation
{
	[NodeCategory("Actions")]
	[NodeName("Tween", false)]
	public class TweenValue<T> : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> To
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "To"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "To", value);
			}
		}

		public ValueInput<T> From
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "From"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "From", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Duration"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Duration", value);
			}
		}

		public ValueInput<CurvePreset> Curve
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Curve"), typeof(ValueInput<CurvePreset>)) is ValueInput<CurvePreset> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<CurvePreset>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Curve", value);
			}
		}

		public ValueInput<bool> ProportionalDuration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ProportionalDuration"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ProportionalDuration", value);
			}
		}

		public ObjectInput<IField<T>> Target
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Target"), typeof(ObjectInput<IField<T>>)) is ObjectInput<IField<T>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<IField<T>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Target", value);
			}
		}

		public AsyncCall OnStarted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnStarted"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnStarted", value);
			}
		}

		public Continuation OnDone
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnDone"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnDone", value);
			}
		}

		public override Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TweenValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TweenValue()
		{
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Actions
{
	[NodeOverload("Core.Action.FireOnLocalChange")]
	public class FireOnLocalValueChange<T> : FireOnLocalValueChange<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnLocalValueChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnLocalValueChange()
		{
		}
	}
	[NodeOverload("Core.Action.FireOnLocalChange")]
	public class FireOnLocalObjectChange<T> : FireOnLocalObjectChange<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnLocalObjectChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnLocalObjectChange()
		{
		}
	}
	[NodeOverload("Core.Action.FireOnLocalTrue")]
	public class FireOnLocalTrue : FireOnLocalTrue<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnLocalTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnLocalTrue()
		{
		}
	}
	[NodeOverload("Core.Action.FireOnLocalFalse")]
	public class FireOnLocalFalse : FireOnLocalFalse<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnLocalFalse(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnLocalFalse()
		{
		}
	}
	public interface IAsyncDynamicImpulseTarget : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.String Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tag"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}
	}
	public delegate Task AsyncDynamicImpulseHandler(FrooxEngineContext sourceContext);
	public delegate Task AsyncDynamicImpulseHandler<T>(T value, FrooxEngineContext sourceContext);
	[NodeCategory("Flow/Async")]
	public class AsyncDynamicImpulseReceiver : ProxyVoidNode<FrooxEngineContext, AsyncDynamicImpulseReceiver.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public AsyncDynamicImpulseHandler Trigger
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(AsyncDynamicImpulseHandler)) is AsyncDynamicImpulseHandler __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to AsyncDynamicImpulseHandler");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
				}
			}

			public System.String Tag
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tag"), typeof(System.String)) is System.String __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to string");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tag", value);
				}
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(GlobalRef<string>)) is GlobalRef<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public AsyncCall OnTriggered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnTriggered"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnTriggered", value);
			}
		}

		public void OnTagChanged(System.String newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnTagChanged", newTag, context);
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public AsyncDynamicImpulseReceiver()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "AsyncDynamicImpulseReceiver", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AsyncDynamicImpulseReceiver(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Flow/Async")]
	[NodeName("Async Dynamic Impulse Receiver With Data", false)]
	[NodeOverload("Engine.AsyncDynamicImpulseReceiver")]
	public class AsyncDynamicImpulseReceiverWithValue<T> : ProxyVoidNode<FrooxEngineContext, AsyncDynamicImpulseReceiverWithValue<T>.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public AsyncDynamicImpulseHandler<T> Trigger
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(AsyncDynamicImpulseHandler<T>)) is AsyncDynamicImpulseHandler<T> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to AsyncDynamicImpulseHandler<T>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
				}
			}

			public System.String Tag
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tag"), typeof(System.String)) is System.String __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to string");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tag", value);
				}
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(GlobalRef<string>)) is GlobalRef<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public AsyncCall OnTriggered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnTriggered"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnTriggered", value);
			}
		}

		public ValueOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueOutput<T>)) is ValueOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnTagChanged(System.String newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnTagChanged", newTag, context);
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public AsyncDynamicImpulseReceiverWithValue()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "AsyncDynamicImpulseReceiverWithValue", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AsyncDynamicImpulseReceiverWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Flow/Async")]
	[NodeName("Async Dynamic Impulse Receiver With Data", false)]
	[NodeOverload("Engine.AsyncDynamicImpulseReceiver")]
	public class AsyncDynamicImpulseReceiverWithObject<T> : ProxyVoidNode<FrooxEngineContext, AsyncDynamicImpulseReceiverWithObject<T>.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public AsyncDynamicImpulseHandler<T> Trigger
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(AsyncDynamicImpulseHandler<T>)) is AsyncDynamicImpulseHandler<T> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to AsyncDynamicImpulseHandler<T>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
				}
			}

			public System.String Tag
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tag"), typeof(System.String)) is System.String __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to string");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tag", value);
				}
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(GlobalRef<string>)) is GlobalRef<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public AsyncCall OnTriggered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnTriggered"), typeof(AsyncCall)) is AsyncCall __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AsyncCall");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnTriggered", value);
			}
		}

		public ObjectOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectOutput<T>)) is ObjectOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnTagChanged(System.String newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnTagChanged", newTag, context);
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public AsyncDynamicImpulseReceiverWithObject()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "AsyncDynamicImpulseReceiverWithObject", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AsyncDynamicImpulseReceiverWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Flow/Async")]
	public abstract class AsyncDynamicImpulseTriggerBase : AsyncActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public ObjectInput<Slot> TargetHierarchy
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TargetHierarchy"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TargetHierarchy", value);
			}
		}

		public ValueInput<bool> ExcludeDisabled
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ExcludeDisabled"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ExcludeDisabled", value);
			}
		}

		public ValueOutput<int> TriggeredCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggeredCount"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggeredCount", value);
			}
		}

		public override Task<bool> Do(FrooxEngineContext context)
		{
			return (Task<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(Task<bool>));
		}

		public abstract Task<int> Trigger(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext context);

		public AsyncDynamicImpulseTriggerBase()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "AsyncDynamicImpulseTriggerBase", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AsyncDynamicImpulseTriggerBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeName("Asyncs Dynamic Impulse Trigger", false)]
	public class AsyncDynamicImpulseTrigger : AsyncDynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override Task<int> Trigger(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext context)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(Task<int>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AsyncDynamicImpulseTrigger(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AsyncDynamicImpulseTrigger()
		{
		}
	}
	[NodeName("Async Dynamic Impulse Trigger With Data", false)]
	[NodeOverload("Engine.AsyncDynamicImpulseTrigger")]
	public class AsyncDynamicImpulseTriggerWithValue<T> : AsyncDynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override Task<int> Trigger(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext context)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(Task<int>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AsyncDynamicImpulseTriggerWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AsyncDynamicImpulseTriggerWithValue()
		{
		}
	}
	[NodeName("Async Dynamic Impulse Trigger With Data", false)]
	[NodeOverload("Engine.AsyncDynamicImpulseTrigger")]
	public class AsyncDynamicImpulseTriggerWithObject<T> : AsyncDynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override Task<int> Trigger(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext context)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(Task<int>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AsyncDynamicImpulseTriggerWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AsyncDynamicImpulseTriggerWithObject()
		{
		}
	}
	public class DynamicImpulseHelper : IDynamicImpulseHandler, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public static DynamicImpulseHelper Singleton
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "Singleton"), typeof(DynamicImpulseHelper)) is DynamicImpulseHelper __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to DynamicImpulseHelper");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "Singleton", value);
			}
		}

		static DynamicImpulseHelper()
		{
		}

		public System.Int32 TriggerDynamicImpulse(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext sourceContext = null)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TriggerDynamicImpulse", hierarchy, tag, excludeDisabled, sourceContext), typeof(System.Int32));
		}

		public System.Int32 TriggerDynamicImpulseWithArgument<T>(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, T value, FrooxEngineContext sourceContext = null)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TriggerDynamicImpulseWithArgument", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(System.Int32));
		}

		public Task<int> TriggerAsyncDynamicImpulse(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext sourceContext = null)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TriggerAsyncDynamicImpulse", hierarchy, tag, excludeDisabled, sourceContext), typeof(Task<int>));
		}

		public Task<int> TriggerAsyncDynamicImpulseWithArgument<T>(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, T value, FrooxEngineContext sourceContext = null)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TriggerAsyncDynamicImpulseWithArgument", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(Task<int>));
		}

		public static System.Int32 TriggerDynamicImpulseWithValue<T>(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, T value, FrooxEngineContext sourceContext = null) where T : struct
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerDynamicImpulseWithValue", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(System.Int32));
		}

		public static System.Int32 TriggerDynamicImpulseWithObject<T>(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, T value, FrooxEngineContext sourceContext = null)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerDynamicImpulseWithObject", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(System.Int32));
		}

		public static System.Int32 TriggerDynamicImpulse<P>(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, Action<P> trigger) where P : class, IDynamicImpulseTarget
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerDynamicImpulse", hierarchy, tag, excludeDisabled, trigger), typeof(System.Int32));
		}

		public static Task<int> TriggerAsyncDynamicImpulseWithValue<T>(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, T value, FrooxEngineContext sourceContext = null) where T : struct
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerAsyncDynamicImpulseWithValue", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(Task<int>));
		}

		public static Task<int> TriggerAsyncDynamicImpulseWithObject<T>(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, T value, FrooxEngineContext sourceContext = null)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerAsyncDynamicImpulseWithObject", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(Task<int>));
		}

		public static Task<int> TriggerAsyncDynamicImpulse<P>(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, Func<P, Task> trigger) where P : class, IDynamicImpulseTarget
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerAsyncDynamicImpulse", hierarchy, tag, excludeDisabled, trigger), typeof(Task<int>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicImpulseHelper(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DynamicImpulseHelper()
		{
		}
	}
	public interface IDynamicImpulseTarget : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.String Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tag"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}
	}
	public delegate void DynamicImpulseHandler(FrooxEngineContext sourceContext);
	public delegate void DynamicImpulseHandler<T>(T value, FrooxEngineContext sourceContext);
	[NodeCategory("Flow")]
	public class DynamicImpulseReceiver : ProxyVoidNode<FrooxEngineContext, DynamicImpulseReceiver.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public DynamicImpulseHandler Trigger
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(DynamicImpulseHandler)) is DynamicImpulseHandler __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to DynamicImpulseHandler");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
				}
			}

			public System.String Tag
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tag"), typeof(System.String)) is System.String __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to string");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tag", value);
				}
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(GlobalRef<string>)) is GlobalRef<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public Call OnTriggered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnTriggered"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnTriggered", value);
			}
		}

		public void OnTagChanged(System.String newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnTagChanged", newTag, context);
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public DynamicImpulseReceiver()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseReceiver", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicImpulseReceiver(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Dynamic Impulse Receiver With Data", false)]
	[NodeOverload("Engine.DynamicImpulseReceiverWithData")]
	public class DynamicImpulseReceiverWithValue<T> : ProxyVoidNode<FrooxEngineContext, DynamicImpulseReceiverWithValue<T>.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public DynamicImpulseHandler<T> Trigger
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(DynamicImpulseHandler<T>)) is DynamicImpulseHandler<T> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to DynamicImpulseHandler<T>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
				}
			}

			public System.String Tag
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tag"), typeof(System.String)) is System.String __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to string");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tag", value);
				}
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(GlobalRef<string>)) is GlobalRef<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public Call OnTriggered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnTriggered"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnTriggered", value);
			}
		}

		public ValueOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueOutput<T>)) is ValueOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnTagChanged(System.String newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnTagChanged", newTag, context);
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public DynamicImpulseReceiverWithValue()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseReceiverWithValue", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicImpulseReceiverWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Dynamic Impulse Receiver With Data", false)]
	[NodeOverload("Engine.DynamicImpulseReceiverWithData")]
	public class DynamicImpulseReceiverWithObject<T> : ProxyVoidNode<FrooxEngineContext, DynamicImpulseReceiverWithObject<T>.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public DynamicImpulseHandler<T> Trigger
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(DynamicImpulseHandler<T>)) is DynamicImpulseHandler<T> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to DynamicImpulseHandler<T>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
				}
			}

			public System.String Tag
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tag"), typeof(System.String)) is System.String __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to string");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tag", value);
				}
			}

			public override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(System.Int32 index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			public ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Proxy()
			{
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(GlobalRef<string>)) is GlobalRef<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public Call OnTriggered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnTriggered"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnTriggered", value);
			}
		}

		public ObjectOutput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectOutput<T>)) is ObjectOutput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectOutput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void OnTagChanged(System.String newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnTagChanged", newTag, context);
		}

		public override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public DynamicImpulseReceiverWithObject()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseReceiverWithObject", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicImpulseReceiverWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public abstract class DynamicImpulseTriggerBase : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Tag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tag"), typeof(ObjectInput<string>)) is ObjectInput<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tag", value);
			}
		}

		public ObjectInput<Slot> TargetHierarchy
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TargetHierarchy"), typeof(ObjectInput<Slot>)) is ObjectInput<Slot> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Slot>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TargetHierarchy", value);
			}
		}

		public ValueInput<bool> ExcludeDisabled
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ExcludeDisabled"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ExcludeDisabled", value);
			}
		}

		public ValueOutput<int> TriggeredCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriggeredCount"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriggeredCount", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public abstract System.Int32 Trigger(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext context);

		public DynamicImpulseTriggerBase()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseTriggerBase", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicImpulseTriggerBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Flow")]
	public class DynamicImpulseTrigger : DynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Int32 Trigger(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicImpulseTrigger(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DynamicImpulseTrigger()
		{
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Dynamic Impulse Trigger With Data", false)]
	[NodeOverload("Engine.DynamicImpulseTriggerWithData")]
	public class DynamicImpulseTriggerWithValue<T> : DynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override System.Int32 Trigger(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicImpulseTriggerWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DynamicImpulseTriggerWithValue()
		{
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Dynamic Impulse Trigger With Data", false)]
	[NodeOverload("Engine.DynamicImpulseTriggerWithData")]
	public class DynamicImpulseTriggerWithObject<T> : DynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public override System.Int32 Trigger(Slot hierarchy, System.String tag, System.Boolean excludeDisabled, FrooxEngineContext context)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(System.Int32));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicImpulseTriggerWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DynamicImpulseTriggerWithObject()
		{
		}
	}
	public interface ILastValueProxy<T> : global::FrooxEngine.IComponent, IComponentBase, IDestroyable, IWorker, IWorldElement, IUpdatable, IChangeable, IAudioUpdatable, IInitializable, ILinkable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		T Last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Last"), typeof(T)) is T __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to T");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Last", value);
			}
		}
	}
	public class ValueProxy<T> : ProtoFluxEngineProxy, ILastValueProxy<T>, global::FrooxEngine.IComponent, IComponentBase, IDestroyable, IWorker, IWorldElement, IUpdatable, IChangeable, IAudioUpdatable, IInitializable, ILinkable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Sync<T> Last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Last"), typeof(Sync<T>)) is Sync<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Sync<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Last", value);
			}
		}

		T ILastValueProxy<T>.Last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Last"), typeof(T)) is T __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to T");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Last", value);
			}
		}

		public override void InitializeSyncMembers()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
		}

		public override ISyncMember GetSyncMember(System.Int32 index)
		{
			return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
		}

		public static ValueProxy<T> __New()
		{
			return (ValueProxy<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ValueProxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(ValueProxy<T>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ValueProxy(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ValueProxy()
		{
		}
	}
	public class RefProxy<T> : ProtoFluxEngineProxy, ILastValueProxy<T>, global::FrooxEngine.IComponent, IComponentBase, IDestroyable, IWorker, IWorldElement, IUpdatable, IChangeable, IAudioUpdatable, IInitializable, ILinkable, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IWorldElement
	{
		public SyncRef<T> Last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Last"), typeof(SyncRef<T>)) is SyncRef<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SyncRef<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Last", value);
			}
		}

		T ILastValueProxy<T>.Last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Last"), typeof(T)) is T __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to T");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Last", value);
			}
		}

		public override void InitializeSyncMembers()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
		}

		public override ISyncMember GetSyncMember(System.Int32 index)
		{
			return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
		}

		public static RefProxy<T> __New()
		{
			return (RefProxy<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RefProxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(RefProxy<T>));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RefProxy(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RefProxy()
		{
		}
	}
	public class TypeProxy : ProtoFluxEngineProxy, ILastValueProxy<Type>, global::FrooxEngine.IComponent, IComponentBase, IDestroyable, IWorker, IWorldElement, IUpdatable, IChangeable, IAudioUpdatable, IInitializable, ILinkable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public SyncType Last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Last"), typeof(SyncType)) is SyncType __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SyncType");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Last", value);
			}
		}

		Type ILastValueProxy<Type>.Last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Last"), typeof(Type)) is Type __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Type");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Last", value);
			}
		}

		public override void InitializeSyncMembers()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitializeSyncMembers");
		}

		public override ISyncMember GetSyncMember(System.Int32 index)
		{
			return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSyncMember", index), typeof(ISyncMember));
		}

		public static TypeProxy __New()
		{
			return (TypeProxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TypeProxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(TypeProxy));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TypeProxy(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TypeProxy()
		{
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Fire On Change", false)]
	public abstract class FireOnChange<T, P> : ProxyVoidNode<FrooxEngineContext, P>, IMappableNode, INode, IExecutionChangeListener<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where P : ProtoFluxEngineProxy, ILastValueProxy<T>, new()
	{
		public ObjectInput<global::FrooxEngine.User> OnlyForUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnlyForUser"), typeof(ObjectInput<global::FrooxEngine.User>)) is ObjectInput<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnlyForUser", value);
			}
		}

		public Call OnChanged
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnChanged"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnChanged", value);
			}
		}

		public ObjectStore<Action<IChangeable>> _enabledChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_enabledChangedHandler"), typeof(ObjectStore<Action<IChangeable>>)) is ObjectStore<Action<IChangeable>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<IChangeable>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_enabledChangedHandler", value);
			}
		}

		public ObjectStore<SlotEvent> _activeChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_activeChangedHandler"), typeof(ObjectStore<SlotEvent>)) is ObjectStore<SlotEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<SlotEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_activeChangedHandler", value);
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Boolean InputListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "InputListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "InputListensToChanges", value);
			}
		}

		public System.Boolean ShouldListen(P proxy)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldListen", proxy), typeof(System.Boolean));
		}

		public override void ProxyAdded(P proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyAdded", proxy, context);
		}

		public override void ProxyRemoved(P proxy, FrooxEngineContext context, System.Boolean inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public void UpdateListenerState(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateListenerState", context);
		}

		public void Changed(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Changed", context);
		}

		public System.Boolean DetectChanges(P proxy, FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DetectChanges", proxy, context), typeof(System.Boolean));
		}

		public abstract T GetCurrent(FrooxEngineContext context);

		public virtual System.Boolean ShouldFire(T value)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldFire", value), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnChange()
		{
		}
	}
	[NodeOverload("Engine.FireOnChange")]
	public class FireOnValueChange<T> : FireOnChange<T, ValueProxy<T>>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public System.Boolean ValueListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override T GetCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCurrent", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnValueChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnValueChange()
		{
		}
	}
	[NodeOverload("Engine.FireOnChange")]
	public class FireOnObjectValueChange<T> : FireOnChange<T, ValueProxy<T>>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public static System.Boolean IsValidGenericType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "FireOnObjectValueChange", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Boolean ValueListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override T GetCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCurrent", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnObjectValueChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnObjectValueChange()
		{
		}
	}
	[NodeOverload("Engine.FireOnChange")]
	public class FireOnRefChange<T> : FireOnChange<T, RefProxy<T>>, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IWorldElement
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public System.Boolean ValueListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override T GetCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCurrent", context), typeof(T));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnRefChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnRefChange()
		{
		}
	}
	[NodeOverload("Engine.FireOnChange")]
	public class FireOnTypeChange : FireOnChange<Type, TypeProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Type> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<Type>)) is ObjectInput<Type> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<Type>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public System.Boolean ValueListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override Type GetCurrent(FrooxEngineContext context)
		{
			return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCurrent", context), typeof(Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnTypeChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnTypeChange()
		{
		}
	}
	[NodeName("Fire On True", false)]
	public class FireOnTrue : FireOnChange<bool, ValueProxy<bool>>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<bool> Condition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Condition"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Condition", value);
			}
		}

		public System.Boolean ConditionListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ConditionListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override System.Boolean GetCurrent(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCurrent", context), typeof(System.Boolean));
		}

		public override System.Boolean ShouldFire(System.Boolean value)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldFire", value), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnTrue()
		{
		}
	}
	[NodeName("Fire On False", false)]
	public class FireOnFalse : FireOnChange<bool, ValueProxy<bool>>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<bool> Condition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Condition"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Condition", value);
			}
		}

		public System.Boolean ConditionListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ConditionListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override System.Boolean GetCurrent(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCurrent", context), typeof(System.Boolean));
		}

		public override System.Boolean ShouldFire(System.Boolean value)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldFire", value), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnFalse(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnFalse()
		{
		}
	}
	[NodeCategory("Flow")]
	public abstract class FireOnLocalBool<C> : VoidNode<FrooxEngineContext>, IExecutionChangeListener<C>, IScopeEventListener<C>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext
	{
		public ValueInput<bool> Condition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Condition"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Condition", value);
			}
		}

		public Call OnChange
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnChange"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnChange", value);
			}
		}

		public ValueStore<bool> _last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_last"), typeof(ValueStore<bool>)) is ValueStore<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_last", value);
			}
		}

		public ObjectStore<global::FrooxEngine.Component> _container
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_container"), typeof(ObjectStore<global::FrooxEngine.Component>)) is ObjectStore<global::FrooxEngine.Component> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<global::FrooxEngine.Component>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_container", value);
			}
		}

		public ObjectStore<Action<IChangeable>> _enabledChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_enabledChangedHandler"), typeof(ObjectStore<Action<IChangeable>>)) is ObjectStore<Action<IChangeable>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<IChangeable>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_enabledChangedHandler", value);
			}
		}

		public ObjectStore<SlotEvent> _activeChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_activeChangedHandler"), typeof(ObjectStore<SlotEvent>)) is ObjectStore<SlotEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<SlotEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_activeChangedHandler", value);
			}
		}

		public System.Boolean ConditionListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ConditionListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ConditionListensToChanges", value);
			}
		}

		public void AddedToScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddedToScope", context);
		}

		public void Changed(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Changed", context);
		}

		public void RemovedFromScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovedFromScope", context);
		}

		public abstract System.Boolean ShouldFire(System.Boolean state);

		public System.Boolean ShouldListen(global::FrooxEngine.Component component)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldListen", component), typeof(System.Boolean));
		}

		public void UpdateListenerState(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateListenerState", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnLocalBool(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnLocalBool()
		{
		}
	}
	[NodeOverload("Core.Action.FireOnLocalTrue")]
	public class FireOnLocalTrue<C> : FireOnLocalBool<C>, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext
	{
		public override System.Boolean ShouldFire(System.Boolean state)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldFire", state), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnLocalTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnLocalTrue()
		{
		}
	}
	[NodeOverload("Core.Action.FireOnLocalFalse")]
	public class FireOnLocalFalse<C> : FireOnLocalBool<C>, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext
	{
		public override System.Boolean ShouldFire(System.Boolean state)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldFire", state), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnLocalFalse(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnLocalFalse()
		{
		}
	}
	[NodeCategory("Flow")]
	[NodeOverload("Core.Action.FireOnLocalChange")]
	public class FireOnLocalValueChange<C, T> : VoidNode<FrooxEngineContext>, IExecutionChangeListener<C>, IScopeEventListener<C>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ValueInput<T>)) is ValueInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public Call OnChange
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnChange"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnChange", value);
			}
		}

		public ValueStore<T> _last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_last"), typeof(ValueStore<T>)) is ValueStore<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_last", value);
			}
		}

		public ObjectStore<global::FrooxEngine.Component> _container
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_container"), typeof(ObjectStore<global::FrooxEngine.Component>)) is ObjectStore<global::FrooxEngine.Component> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<global::FrooxEngine.Component>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_container", value);
			}
		}

		public ObjectStore<Action<IChangeable>> _enabledChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_enabledChangedHandler"), typeof(ObjectStore<Action<IChangeable>>)) is ObjectStore<Action<IChangeable>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<IChangeable>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_enabledChangedHandler", value);
			}
		}

		public ObjectStore<SlotEvent> _activeChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_activeChangedHandler"), typeof(ObjectStore<SlotEvent>)) is ObjectStore<SlotEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<SlotEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_activeChangedHandler", value);
			}
		}

		public System.Boolean ValueListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ValueListensToChanges", value);
			}
		}

		public void AddedToScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddedToScope", context);
		}

		public void RemovedFromScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovedFromScope", context);
		}

		public void Changed(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Changed", context);
		}

		public System.Boolean ShouldListen(global::FrooxEngine.Component component)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldListen", component), typeof(System.Boolean));
		}

		public void UpdateListenerState(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateListenerState", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnLocalValueChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnLocalValueChange()
		{
		}
	}
	[NodeCategory("Flow")]
	[NodeOverload("Core.Action.FireOnLocalChange")]
	public class FireOnLocalObjectChange<C, T> : VoidNode<FrooxEngineContext>, IExecutionChangeListener<C>, IScopeEventListener<C>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext
	{
		public ObjectInput<T> Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Value"), typeof(ObjectInput<T>)) is ObjectInput<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectInput<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Value", value);
			}
		}

		public Call OnChange
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnChange"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnChange", value);
			}
		}

		public ObjectStore<T> _last
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_last"), typeof(ObjectStore<T>)) is ObjectStore<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_last", value);
			}
		}

		public ObjectStore<global::FrooxEngine.Component> _container
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_container"), typeof(ObjectStore<global::FrooxEngine.Component>)) is ObjectStore<global::FrooxEngine.Component> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<global::FrooxEngine.Component>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_container", value);
			}
		}

		public ObjectStore<Action<IChangeable>> _enabledChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_enabledChangedHandler"), typeof(ObjectStore<Action<IChangeable>>)) is ObjectStore<Action<IChangeable>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<IChangeable>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_enabledChangedHandler", value);
			}
		}

		public ObjectStore<SlotEvent> _activeChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_activeChangedHandler"), typeof(ObjectStore<SlotEvent>)) is ObjectStore<SlotEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<SlotEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_activeChangedHandler", value);
			}
		}

		public System.Boolean ValueListensToChanges
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueListensToChanges"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ValueListensToChanges", value);
			}
		}

		public void AddedToScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddedToScope", context);
		}

		public void RemovedFromScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovedFromScope", context);
		}

		public void Changed(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Changed", context);
		}

		public System.Boolean ShouldListen(global::FrooxEngine.Component component)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldListen", component), typeof(System.Boolean));
		}

		public void UpdateListenerState(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateListenerState", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireOnLocalObjectChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireOnLocalObjectChange()
		{
		}
	}
	[NodeCategory("Flow")]
	public class FireWhileTrue : UserUpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnUpdate"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnUpdate", value);
			}
		}

		public ValueInput<bool> Condition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Condition"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Condition", value);
			}
		}

		public override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunUpdate", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FireWhileTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FireWhileTrue()
		{
		}
	}
	[NodeCategory("Flow")]
	public class LocalFireWhileTrue : VoidNode<FrooxEngineContext>, IExecutionUpdateReceiver<FrooxEngineContext>, INode, IScopeEventListener<FrooxEngineContext>, IMappableNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnUpdate"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnUpdate", value);
			}
		}

		public ValueInput<bool> Condition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Condition"), typeof(ValueInput<bool>)) is ValueInput<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Condition", value);
			}
		}

		public void AddedToScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddedToScope", context);
		}

		public void RemovedFromScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovedFromScope", context);
		}

		public void Update(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalFireWhileTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalFireWhileTrue()
		{
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Local Impulse Timeout", false)]
	[NodeOverload("Core.Actions.LocalImpulseTimeout")]
	public abstract class LocalImpulseTimeout : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Operation Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public Operation Reset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reset"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reset", value);
			}
		}

		public Continuation Next
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Next"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Next", value);
			}
		}

		public ValueStore<double> _blockUntil
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_blockUntil"), typeof(ValueStore<double>)) is ValueStore<double> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<double>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_blockUntil", value);
			}
		}

		public IOperation DoTrigger(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoTrigger", context), typeof(IOperation));
		}

		public void DoReset(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoReset", context);
		}

		public abstract System.Double EvaluateTimeout(FrooxEngineContext context);

		public LocalImpulseTimeout()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalImpulseTimeout", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalImpulseTimeout(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class LocalImpulseTimeoutSeconds : LocalImpulseTimeout, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Timeout
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Timeout"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Timeout", value);
			}
		}

		public override System.Double EvaluateTimeout(FrooxEngineContext context)
		{
			return (System.Double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EvaluateTimeout", context), typeof(System.Double));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalImpulseTimeoutSeconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalImpulseTimeoutSeconds()
		{
		}
	}
	public class LocalImpulseTimeoutTimeSpan : LocalImpulseTimeout, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<TimeSpan> Timeout
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Timeout"), typeof(ValueInput<TimeSpan>)) is ValueInput<TimeSpan> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<TimeSpan>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Timeout", value);
			}
		}

		public override System.Double EvaluateTimeout(FrooxEngineContext context)
		{
			return (System.Double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EvaluateTimeout", context), typeof(System.Double));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalImpulseTimeoutTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalImpulseTimeoutTimeSpan()
		{
		}
	}
	[NodeCategory("Flow")]
	public class LocalLeakyImpulseBucket : VoidNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call Pulse
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Pulse"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Pulse", value);
			}
		}

		public Continuation Overflow
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Overflow"), typeof(Continuation)) is Continuation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Continuation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Overflow", value);
			}
		}

		public ValueInput<float> Interval
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Interval"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Interval", value);
			}
		}

		public ValueInput<int> MaximumCapacity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MaximumCapacity"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MaximumCapacity", value);
			}
		}

		public ValueOutput<int> CurrentCapacity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CurrentCapacity"), typeof(ValueOutput<int>)) is ValueOutput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueOutput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CurrentCapacity", value);
			}
		}

		public Operation Trigger
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Trigger"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Trigger", value);
			}
		}

		public Operation Reset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Reset"), typeof(Operation)) is Operation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Operation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Reset", value);
			}
		}

		public ValueStore<int> _capacity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_capacity"), typeof(ValueStore<int>)) is ValueStore<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_capacity", value);
			}
		}

		public ValueStore<double> _lastPulse
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lastPulse"), typeof(ValueStore<double>)) is ValueStore<double> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<double>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lastPulse", value);
			}
		}

		public ValueStore<bool> _delayRunning
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_delayRunning"), typeof(ValueStore<bool>)) is ValueStore<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_delayRunning", value);
			}
		}

		public ObjectStore<CancellationTokenSource> _cancellation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_cancellation"), typeof(ObjectStore<CancellationTokenSource>)) is ObjectStore<CancellationTokenSource> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<CancellationTokenSource>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_cancellation", value);
			}
		}

		public ObjectStore<Action> _scheduler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_scheduler"), typeof(ObjectStore<Action>)) is ObjectStore<Action> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_scheduler", value);
			}
		}

		public ObjectStore<NodeContextPath> _path
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_path"), typeof(ObjectStore<NodeContextPath>)) is ObjectStore<NodeContextPath> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<NodeContextPath>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_path", value);
			}
		}

		public NodeEventHandler<FrooxEngineContext> _handler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_handler"), typeof(NodeEventHandler<FrooxEngineContext>)) is NodeEventHandler<FrooxEngineContext> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to NodeEventHandler<FrooxEngineContext>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_handler", value);
			}
		}

		public void CapacityChanged(FrooxEngineContext context, NodeContextPath path)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CapacityChanged", context, path);
		}

		public override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeOutputs", context);
		}

		public NodeContextPath GetPath(FrooxEngineContext context)
		{
			return (NodeContextPath)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPath", context), typeof(NodeContextPath));
		}

		public IOperation DoTrigger(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoTrigger", context), typeof(IOperation));
		}

		public void HandleDelay(FrooxEngineContext context, System.Object data)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HandleDelay", context, data);
		}

		public void DoReset(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DoReset", context);
		}

		public LocalLeakyImpulseBucket()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalLeakyImpulseBucket", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalLeakyImpulseBucket(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[NodeCategory("Flow")]
	public class LocalUpdate : VoidNode<FrooxEngineContext>, IExecutionUpdateReceiver<FrooxEngineContext>, INode, IScopeEventListener<FrooxEngineContext>, IMappableNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnUpdate"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnUpdate", value);
			}
		}

		public void AddedToScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddedToScope", context);
		}

		public void RemovedFromScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovedFromScope", context);
		}

		public void Update(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocalUpdate(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocalUpdate()
		{
		}
	}
	[NodeName("Once Per Frame", false)]
	[NodeCategory("Flow")]
	public class OnePerFrame : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueStore<double> _lastTime
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lastTime"), typeof(ValueStore<double>)) is ValueStore<double> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<double>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lastTime", value);
			}
		}

		public override System.Boolean Do(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Do", context), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public OnePerFrame(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public OnePerFrame()
		{
		}
	}
	[NodeCategory("Flow")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Actions.Timer", null)]
	public class SecondsTimer : UserUpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnUpdate"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnUpdate", value);
			}
		}

		public ValueInput<float> Interval
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Interval"), typeof(ValueInput<float>)) is ValueInput<float> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<float>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Interval", value);
			}
		}

		public ValueStore<double> _lastPulse
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lastPulse"), typeof(ValueStore<double>)) is ValueStore<double> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<double>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lastPulse", value);
			}
		}

		public override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunUpdate", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SecondsTimer(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SecondsTimer()
		{
		}
	}
	[NodeCategory("Flow")]
	public class UpdatesTimer : UserUpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnUpdate"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnUpdate", value);
			}
		}

		public ValueInput<int> Interval
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Interval"), typeof(ValueInput<int>)) is ValueInput<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueInput<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Interval", value);
			}
		}

		public ValueStore<int> _lastPulse
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lastPulse"), typeof(ValueStore<int>)) is ValueStore<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lastPulse", value);
			}
		}

		public override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunUpdate", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UpdatesTimer(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UpdatesTimer()
		{
		}
	}
	[NodeCategory("Flow")]
	public class Update : UserUpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OnUpdate"), typeof(Call)) is Call __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Call");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OnUpdate", value);
			}
		}

		public override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RunUpdate", context);
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Update(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Update()
		{
		}
	}
	public abstract class UpdateBase : VoidNode<FrooxEngineContext>, IExecutionUpdateReceiver<FrooxEngineContext>, INode, IScopeEventListener<FrooxEngineContext>, IMappableNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueStore<bool> _registered
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_registered"), typeof(ValueStore<bool>)) is ValueStore<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ValueStore<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_registered", value);
			}
		}

		public ObjectStore<global::FrooxEngine.Component> _container
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_container"), typeof(ObjectStore<global::FrooxEngine.Component>)) is ObjectStore<global::FrooxEngine.Component> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<global::FrooxEngine.Component>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_container", value);
			}
		}

		public ObjectStore<Action<IChangeable>> _enabledChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_enabledChangedHandler"), typeof(ObjectStore<Action<IChangeable>>)) is ObjectStore<Action<IChangeable>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<Action<IChangeable>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_enabledChangedHandler", value);
			}
		}

		public ObjectStore<SlotEvent> _activeChangedHandler
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_activeChangedHandler"), typeof(ObjectStore<SlotEvent>)) is ObjectStore<SlotEvent> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ObjectStore<SlotEvent>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_activeChangedHandler", value);
			}
		}

		public virtual System.Int32 Bucket
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Bucket"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public virtual System.Boolean ShouldRegister(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldRegister", context), typeof(System.Boolean));
		}

		public void UpdateRegistration(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateRegistration", context);
		}

		void IExecutionUpdateReceiver<FrooxEngineContext>.Update(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IExecutionUpdateReceiver<FrooxEngineContext>.Update", context);
		}

		public void AddedToScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddedToScope", context);
		}

		public void RemovedFromScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovedFromScope", context);
		}

		public virtual void OnAddedToScope(FrooxEngineContext context, NodeContextPath path)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnAddedToScope", context, path);
		}

		public virtual void OnRemoveFromScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnRemoveFromScope", context);
		}

		public abstract void RunUpdate(FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UpdateBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UpdateBase()
		{
		}
	}
	public abstract class ValueFunctionUpdateBase<T> : UpdateBase, IValueOutput<T>, IOutput<T>, IOutput, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public Node OwnerNode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OwnerNode"), typeof(Node)) is Node __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Node");
				}
			}
		}

		public override System.Int32 OutputCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public Type OutputType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputType"), typeof(Type)) is Type __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Type");
				}
			}
		}

		public DataClass OutputDataClass
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputDataClass"), typeof(DataClass)) is DataClass __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to DataClass");
				}
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override IOutput GetOutput(System.Int32 index)
		{
			return (IOutput)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetOutput", index), typeof(IOutput));
		}

		public override Type GetOutputType(System.Int32 index)
		{
			return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetOutputType", index), typeof(Type));
		}

		public override DataClass GetOutputTypeClass(System.Int32 index)
		{
			return (DataClass)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetOutputTypeClass", index), typeof(DataClass));
		}

		public sealed override void Evaluate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Evaluate", context);
		}

		public abstract T Compute(FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ValueFunctionUpdateBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ValueFunctionUpdateBase()
		{
		}
	}
	public abstract class ObjectFunctionUpdateBase<T> : UpdateBase, IObjectOutput<T>, IOutput<T>, IOutput, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Node OwnerNode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OwnerNode"), typeof(Node)) is Node __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Node");
				}
			}
		}

		public override System.Int32 OutputCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public Type OutputType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputType"), typeof(Type)) is Type __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Type");
				}
			}
		}

		public DataClass OutputDataClass
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputDataClass"), typeof(DataClass)) is DataClass __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to DataClass");
				}
			}
		}

		public override System.Boolean CanBeEvaluated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CanBeEvaluated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override IOutput GetOutput(System.Int32 index)
		{
			return (IOutput)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetOutput", index), typeof(IOutput));
		}

		public override Type GetOutputType(System.Int32 index)
		{
			return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetOutputType", index), typeof(Type));
		}

		public override DataClass GetOutputTypeClass(System.Int32 index)
		{
			return (DataClass)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetOutputTypeClass", index), typeof(DataClass));
		}

		public sealed override void Evaluate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Evaluate", context);
		}

		public abstract T Compute(FrooxEngineContext context);

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ObjectFunctionUpdateBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ObjectFunctionUpdateBase()
		{
		}
	}
	public abstract class UserUpdateBase : UpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<global::FrooxEngine.User> UpdatingUser
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UpdatingUser"), typeof(GlobalRef<global::FrooxEngine.User>)) is GlobalRef<global::FrooxEngine.User> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<global::FrooxEngine.User>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UpdatingUser", value);
			}
		}

		public GlobalRef<bool> SkipIfNull
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SkipIfNull"), typeof(GlobalRef<bool>)) is GlobalRef<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlobalRef<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SkipIfNull", value);
			}
		}

		public void OnUpdatingUserChanged(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnUpdatingUserChanged", user, context);
		}

		public void OnSkipIfNullChanged(System.Boolean skipIfNull, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OnSkipIfNullChanged", skipIfNull, context);
		}

		public override System.Boolean ShouldRegister(FrooxEngineContext context)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShouldRegister", context), typeof(System.Boolean));
		}

		public UserUpdateBase()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "UserUpdateBase", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UserUpdateBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
}
public class ProtoFluxNodesFrooxEngine_ProcessedByFody : ResoniteBridge.ResoniteBridgeValueHolder
{
	public System.String FodyVersion
	{
		get
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FodyVersion"), typeof(System.String)) is System.String __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to string");
			}
		}
		set
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FodyVersion", value);
		}
	}

	public System.String NodeWeaver
	{
		get
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NodeWeaver"), typeof(System.String)) is System.String __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to string");
			}
		}
		set
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NodeWeaver", value);
		}
	}

	public ResoniteBridge.ResoniteBridgeValue __backing;

	public ResoniteBridge.ResoniteBridgeValue __Backing
	{
		get
		{
			return __backing;
		}
		set
		{
			__backing = value;
		}
	}

	public ProtoFluxNodesFrooxEngine_ProcessedByFody(ResoniteBridge.ResoniteBridgeValue value)
	{
		__backing = value;
	}

	public ProtoFluxNodesFrooxEngine_ProcessedByFody()
	{
	}
}
