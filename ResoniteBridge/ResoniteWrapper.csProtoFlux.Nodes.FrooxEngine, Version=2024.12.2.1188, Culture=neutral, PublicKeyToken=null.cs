using System;

using System.Collections.Generic;

using System.ComponentModel;

using System.Diagnostics;

using System.IO;

using System.Linq;

using System.Net;

using System.Net.Http;

using System.Reflection;

using System.Runtime.CompilerServices;

using System.Runtime.InteropServices;

using System.Runtime.Versioning;

using System.Text;

using System.Threading;

using System.Threading.Tasks;

using Elements.Assets;

using Elements.Core;

using FrooxEngine;

using FrooxEngine.CommonAvatar;

using FrooxEngine.ProtoFlux;

using FrooxEngine.Undo;

using Microsoft.CodeAnalysis;

using ProtoFlux.Core;

using ProtoFlux.Runtimes.Execution.Nodes.Actions;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Assets;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Avatar.BodyNodes;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Cloud;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Controllers;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Mouse;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tools;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Nodes;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Operators;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Playback;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Rendering;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Slots;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Time;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Utility;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Variables;

using ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Worlds;

using ProtoFlux.Runtimes.Execution.Nodes.Math;

using ProtoFlux.Runtimes.Execution.Nodes.Math.Random;

using ProtoFlux.Runtimes.Execution.Nodes.Operators;

using ProtoFlux.Runtimes.Execution.Nodes.Strings;

using ProtoFlux.Runtimes.Execution.Nodes.Strings.Characters;

using SkyFrost.Base;

using TwitchLib.Client.Enums;

using TwitchLib.Client.Events;

using TwitchLib.Client.Models;

using TwitchLib.PubSub.Events;


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
namespace Microsoft.CodeAnalysis
{
}
namespace System.Runtime.CompilerServices
{
}
namespace ProtoFlux.Nodes.FrooxEngine
{
	public static class ProtoFluxMapper
	{
		private static SortedDictionary<string, ProtoFluxTypeMapping> genericMappings
		{
			get
			{
				return (SortedDictionary<string, ProtoFluxTypeMapping>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ProtoFluxMapper", ResoniteBridge.ResoniteBridgeValueType.Type), "genericMappings"), typeof(SortedDictionary<string, ProtoFluxTypeMapping>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ProtoFluxMapper", ResoniteBridge.ResoniteBridgeValueType.Type), "genericMappings", value);
			}
		}

		public static void Initialize()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ProtoFluxMapper", ResoniteBridge.ResoniteBridgeValueType.Type), "Initialize");
		}

		public static ProtoFluxTypeMapping MapNode(string name, string @namespace)
		{
			return (ProtoFluxTypeMapping)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ProtoFluxMapper", ResoniteBridge.ResoniteBridgeValueType.Type), "MapNode", name, @namespace), typeof(ProtoFluxTypeMapping));
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes
{
	[NodeOverload("Engine.InputDisplay")]
	public class ValueDisplay<T> : ExternalValueDisplay<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public static bool IsValidGenericType => Coder<T>.IsSupported;

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueDisplay(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Engine.InputDisplay")]
	public class GenericValueDisplay<T> : ExternalValueDisplay<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GenericValueDisplay(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Engine.InputDisplay")]
	public class ObjectDisplay<T> : ExternalObjectDisplay<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ObjectDisplay(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math
{
	[NodeCategory("Math/Interpolation")]
	[ContinuouslyChanging]
	public abstract class SmoothLerpBase<T> : ValueFunctionUpdateBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Input;

		public ValueInput<float> Speed;

		private ValueStore<bool> _initialized;

		private ValueStore<T> _current;

		private ValueStore<T> _intermediate;

		protected override T Compute(FrooxEngineContext context)
		{
			return _current.Read(context);
		}

		protected override void RunUpdate(FrooxEngineContext context)
		{
			T target = Input.Evaluate(context);
			if (_initialized.Read(context))
			{
				float num = Speed.Evaluate(context, 0f);
				ref T reference = ref _current.Access(context);
				ref T reference2 = ref _intermediate.Access(context);
				if (float.IsNaN(num))
				{
					num = 0f;
				}
				reference = Coder<T>.FilterInvalid(reference, Coder<T>.Default);
				reference2 = Coder<T>.FilterInvalid(reference2, reference);
				reference = Lerp(ref reference, ref target, ref reference2, context.World.Time.Delta * num);
			}
			else
			{
				_initialized.Write(value: true, context);
				_current.Write(target, context);
				_intermediate.Write(target, context);
			}
		}

		protected override void OnAddedToScope(FrooxEngineContext context, NodeContextPath path)
		{
			if (!_initialized.Read(context))
			{
				context.GetEventDispatcher(out ExecutionEventDispatcher<FrooxEngineContext> eventDispatcher);
				eventDispatcher.ScheduleEvent(path, RunUpdate);
			}
		}

		protected abstract T Lerp(ref T current, ref T target, ref T intermediate, float delta);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Smooth Lerp", false)]
	[NodeOverload("Engine.Math.SmoothLerp")]
	public class ValueSmoothLerp<T> : SmoothLerpBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public static bool IsValidGenericType => Coder<T>.SupportsSmoothLerp;

		protected override T Lerp(ref T current, ref T target, ref T intermediate, float delta)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Lerp", current, target, intermediate, delta), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueSmoothLerp(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Smooth Slerp", false)]
	[NodeOverload("Engine.Math.SmoothSlerp")]
	public class SmoothSlerp_floatQ : SmoothLerpBase<floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override floatQ Lerp(ref floatQ current, ref floatQ target, ref floatQ intermediate, float delta)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Lerp", current, target, intermediate, delta), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SmoothSlerp_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Smooth Slerp", false)]
	[NodeOverload("Engine.Math.SmoothSlerp")]
	public class SmoothSlerp_doubleQ : SmoothLerpBase<doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override doubleQ Lerp(ref doubleQ current, ref doubleQ target, ref doubleQ intermediate, float delta)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Lerp", current, target, intermediate, delta), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SmoothSlerp_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ContinuouslyChanging]
	public abstract class ConstantLerpBase<T> : ValueFunctionUpdateBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Input;

		public ValueInput<float> Speed;

		private ValueStore<bool> _initialized;

		private ValueStore<T> _current;

		protected override T Compute(FrooxEngineContext context)
		{
			return _current.Read(context);
		}

		protected override void RunUpdate(FrooxEngineContext context)
		{
			T target = Input.Evaluate(context);
			if (_initialized.Read(context))
			{
				float num = Speed.Evaluate(context, 0f);
				ref T reference = ref _current.Access(context);
				if (float.IsNaN(num))
				{
					num = 0f;
				}
				reference = Coder<T>.FilterInvalid(reference, Coder<T>.Default);
				reference = Lerp(ref reference, ref target, context.World.Time.Delta * num);
			}
			else
			{
				_initialized.Write(value: true, context);
				_current.Write(target, context);
			}
		}

		protected abstract T Lerp(ref T current, ref T target, float delta);

		protected override void OnAddedToScope(FrooxEngineContext context, NodeContextPath path)
		{
			if (!_initialized.Read(context))
			{
				context.GetEventDispatcher(out ExecutionEventDispatcher<FrooxEngineContext> eventDispatcher);
				eventDispatcher.ScheduleEvent(path, RunUpdate);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Constant Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Engine.Math.ConstantLerp")]
	public class ValueConstantLerp<T> : ConstantLerpBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public static bool IsValidGenericType => Coder<T>.SupportsConstantLerp;

		protected override T Lerp(ref T current, ref T target, float delta)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Lerp", current, target, delta), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueConstantLerp(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Constant Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Engine.Math.ConstantSlerp")]
	public class ConstantSlerp_floatQ : ConstantLerpBase<floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override floatQ Lerp(ref floatQ current, ref floatQ target, float delta)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Lerp", current, target, delta), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ConstantSlerp_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Constant Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Engine.Math.ConstantSlerp")]
	public class ConstantSlerp_doubleQ : ConstantLerpBase<doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override doubleQ Lerp(ref doubleQ current, ref doubleQ target, float delta)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Lerp", current, target, delta), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ConstantSlerp_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Bounds
{
	[NodeCategory("Transform/Bounds")]
	[ContinuouslyChanging]
	public class TransformBounds : ValueFunctionNode<FrooxEngineContext, BoundingBox>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<BoundingBox> Bounds
		{
			get
			{
				return (ValueArgument<BoundingBox>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bounds"), typeof(ValueArgument<BoundingBox>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bounds", value);
			}
		}

		public ObjectArgument<Slot> SourceSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SourceSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SourceSpace", value);
			}
		}

		public ObjectArgument<Slot> TargetSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TargetSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TargetSpace", value);
			}
		}

		protected override BoundingBox Compute(FrooxEngineContext context)
		{
			return (BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(BoundingBox));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TransformBounds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Bounds")]
	[ContinuouslyChanging]
	public class ComputeBoundingBox : ValueFunctionNode<FrooxEngineContext, BoundingBox>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<bool> IncludeInactive
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IncludeInactive"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IncludeInactive", value);
			}
		}

		public ObjectArgument<Slot> CoordinateSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CoordinateSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CoordinateSpace", value);
			}
		}

		public ObjectArgument<string> OnlyWithTag
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnlyWithTag"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnlyWithTag", value);
			}
		}

		protected override BoundingBox Compute(FrooxEngineContext context)
		{
			return (BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(BoundingBox));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComputeBoundingBox(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Worlds
{
	[NodeCategory("World")]
	public abstract class WorldURLActionNode : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Uri> URL;

		public ObjectInput<IWorldLink> WorldLink;

		private ObjectStore<Uri> previousURL;

		private ObjectStore<IWorldLink> previousWorldLink;

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			Uri uri = URL.Evaluate(context);
			IWorldLink worldLink = WorldLink.Evaluate(context);
			if (uri == null && worldLink == null)
			{
				return null;
			}
			uri = uri.MigrateLegacyURL(context.Cloud.Platform);
			if (previousURL.Read(context) == uri && previousWorldLink.Read(context) == worldLink)
			{
				return null;
			}
			previousURL.Write(uri, context);
			previousWorldLink.Write(worldLink, context);
			IOperation result = await RunWorldAction(context, uri, worldLink);
			previousURL.Write(null, context);
			previousWorldLink.Write(null, context);
			return result;
		}

		protected abstract Task<IOperation> RunWorldAction(FrooxEngineContext context, Uri url, IWorldLink worldLink);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class OpenWorld : WorldURLActionNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<Userspace.WorldRelation> Relation
		{
			get
			{
				return (ValueInput<Userspace.WorldRelation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Relation"), typeof(ValueInput<Userspace.WorldRelation>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Relation", value);
			}
		}

		public ValueInput<bool> GetExisting
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GetExisting"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GetExisting", value);
			}
		}

		public ValueInput<bool> LoadingIndicator
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LoadingIndicator"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LoadingIndicator", value);
			}
		}

		public ValueInput<bool> AutoFocus
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "AutoFocus"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "AutoFocus", value);
			}
		}

		public ValueInput<bool> MakePrivate
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MakePrivate"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MakePrivate", value);
			}
		}

		public ObjectOutput<string> SessionID
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SessionID"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SessionID", value);
			}
		}

		public ObjectOutput<Uri> SessionURL
		{
			get
			{
				return (ObjectOutput<Uri>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SessionURL"), typeof(ObjectOutput<Uri>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SessionURL", value);
			}
		}

		public AsyncCall OnOpenStart
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnOpenStart"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnOpenStart", value);
			}
		}

		public AsyncCall OnOpenDone
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnOpenDone"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnOpenDone", value);
			}
		}

		public Continuation OnWorldReady
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnWorldReady"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnWorldReady", value);
			}
		}

		public Continuation OnOpenFail
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnOpenFail"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnOpenFail", value);
			}
		}

		public static Userspace.WorldRelation RelationDefault => Userspace.WorldRelation.Nest;

		protected override async Task<IOperation> RunWorldAction(FrooxEngineContext context, Uri url, IWorldLink worldLink)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunWorldAction", context, url, worldLink), typeof(Task<IOperation>));
		}

		public OpenWorld()
		{
			SessionID = new ObjectOutput<string>(this);
			SessionURL = new ObjectOutput<Uri>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OpenWorld(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class FocusWorld : WorldURLActionNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<bool> CloseCurrent
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CloseCurrent"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CloseCurrent", value);
			}
		}

		public Continuation OnNotFound
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnNotFound"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnNotFound", value);
			}
		}

		public AsyncCall OnFocused
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFocused"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFocused", value);
			}
		}

		protected override async Task<IOperation> RunWorldAction(FrooxEngineContext context, Uri url, IWorldLink worldLink)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunWorldAction", context, url, worldLink), typeof(Task<IOperation>));
		}

		private static bool IsAllowedToFocus(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "FocusWorld", ResoniteBridge.ResoniteBridgeValueType.Type), "IsAllowedToFocus", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FocusWorld(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World")]
	public class WorldSaved : ProxyVoidNode<FrooxEngineContext, WorldSaved.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action OnSaved
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "OnSaved"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "OnSaved", value);
				}
			}

			public override void OnWorldSaved()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnWorldSaved");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call OnSaved
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSaved"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSaved", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, eventData);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldSaved(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World")]
	public class UserJoined : ProxyVoidNode<FrooxEngineContext, UserJoined.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action<global::FrooxEngine.User> Joined
			{
				get
				{
					return (Action<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Joined"), typeof(Action<global::FrooxEngine.User>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Joined", value);
				}
			}

			internal List<global::FrooxEngine.User> QueuedEvents
			{
				get
				{
					return (List<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "QueuedEvents"), typeof(List<global::FrooxEngine.User>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "QueuedEvents", value);
				}
			}

			public override void OnUserJoined(global::FrooxEngine.User user)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnUserJoined", user);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnlyHost"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnlyHost", value);
			}
		}

		public Call OnJoined
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnJoined"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnJoined", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.User> JoinedUser
		{
			get
			{
				return (ObjectOutput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "JoinedUser"), typeof(ObjectOutput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "JoinedUser", value);
			}
		}

		public override bool CanBeEvaluated => false;

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object user)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, user);
		}

		public UserJoined()
		{
			JoinedUser = new ObjectOutput<global::FrooxEngine.User>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserJoined(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World")]
	public class UserLeft : ProxyVoidNode<FrooxEngineContext, UserLeft.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action<global::FrooxEngine.User> Left
			{
				get
				{
					return (Action<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Left"), typeof(Action<global::FrooxEngine.User>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Left", value);
				}
			}

			public override void OnUserLeft(global::FrooxEngine.User user)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnUserLeft", user);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnlyHost"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnlyHost", value);
			}
		}

		public Call OnLeft
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnLeft"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnLeft", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.User> LeftUser
		{
			get
			{
				return (ObjectOutput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LeftUser"), typeof(ObjectOutput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LeftUser", value);
			}
		}

		public override bool CanBeEvaluated => false;

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object user)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, user);
		}

		public UserLeft()
		{
			LeftUser = new ObjectOutput<global::FrooxEngine.User>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserLeft(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World")]
	public class UserSpawn : ProxyVoidNode<FrooxEngineContext, UserSpawn.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			internal Action<global::FrooxEngine.User> Spawn
			{
				get
				{
					return (Action<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Spawn"), typeof(Action<global::FrooxEngine.User>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Spawn", value);
				}
			}

			internal List<global::FrooxEngine.User> QueuedEvents
			{
				get
				{
					return (List<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "QueuedEvents"), typeof(List<global::FrooxEngine.User>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "QueuedEvents", value);
				}
			}

			public override void OnUserSpawn(global::FrooxEngine.User user)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnUserSpawn", user);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnlyHost"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnlyHost", value);
			}
		}

		public Call OnSpawn
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSpawn"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSpawn", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.User> SpawnedUser
		{
			get
			{
				return (ObjectOutput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SpawnedUser"), typeof(ObjectOutput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SpawnedUser", value);
			}
		}

		public override bool CanBeEvaluated => false;

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object user)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, user);
		}

		public UserSpawn()
		{
			SpawnedUser = new ObjectOutput<global::FrooxEngine.User>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserSpawn(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldName : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldName(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldDescription : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldDescription(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	public class WorldSessionID : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldSessionID(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	public class WorldSessionURL : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldSessionURL(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	public class WorldSessionWebURL : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldSessionWebURL(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldMobileFriendly : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldMobileFriendly(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldMaxUsers : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldMaxUsers(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldUserCount : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldUserCount(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldActiveUserCount : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldActiveUserCount(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldAccessLevel : ValueFunctionNode<FrooxEngineContext, SessionAccessLevel>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override SessionAccessLevel Compute(FrooxEngineContext context)
		{
			return (SessionAccessLevel)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(SessionAccessLevel));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldAccessLevel(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldHideFromListing : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldHideFromListing(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldAwayKickEnabled : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldAwayKickEnabled(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldAwayKickMinutes : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldAwayKickMinutes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	[ContinuouslyChanging]
	public class WorldAwayKickInterval : ValueFunctionNode<FrooxEngineContext, TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override TimeSpan Compute(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldAwayKickInterval(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	public class WorldWebURL : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldWebURL(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	public class WorldRecordURL : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldRecordURL(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("World/Info")]
	public class WorldPath : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldPath(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Transform
{
	[NodeCategory("Transform")]
	public class GlobalTransform : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueOutput<float3> GlobalPosition
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GlobalPosition"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GlobalPosition", value);
			}
		}

		public ValueOutput<floatQ> GlobalRotation
		{
			get
			{
				return (ValueOutput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GlobalRotation"), typeof(ValueOutput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GlobalRotation", value);
			}
		}

		public ValueOutput<float3> GlobalScale
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GlobalScale"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GlobalScale", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public GlobalTransform()
		{
			GlobalPosition = new ValueOutput<float3>(this);
			GlobalRotation = new ValueOutput<floatQ>(this);
			GlobalScale = new ValueOutput<float3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GlobalTransform(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class LocalTransform : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueOutput<float3> LocalPosition
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalPosition"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalPosition", value);
			}
		}

		public ValueOutput<floatQ> LocalRotation
		{
			get
			{
				return (ValueOutput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalRotation"), typeof(ValueOutput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalRotation", value);
			}
		}

		public ValueOutput<float3> LocalScale
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalScale"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalScale", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public LocalTransform()
		{
			LocalPosition = new ValueOutput<float3>(this);
			LocalRotation = new ValueOutput<floatQ>(this);
			LocalScale = new ValueOutput<float3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalTransform(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetForward : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetForward(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetUp : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetUp(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetRight : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetRight(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetBackward : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetBackward(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetDown : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetDown(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	[ContinuouslyChanging]
	public class GetLeft : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetLeft(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public abstract class TransformSetter : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance;

		public static floatQ RotationDefault => floatQ.Identity;

		public static float3 ScaleDefault => float3.One;

		protected override bool Do(FrooxEngineContext context)
		{
			Slot slot = Instance.Evaluate(context);
			if (slot == null || slot.IsRemoved)
			{
				return false;
			}
			Set(slot, context);
			return true;
		}

		protected abstract void Set(Slot instance, FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalPositionRotation : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetGlobalPositionRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalTransform : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public ValueInput<float3> Scale
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetGlobalTransform(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalTransformMatrix : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float4x4> Matrix
		{
			get
			{
				return (ValueInput<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueInput<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public static float4x4 MatrixDefault => float4x4.Identity;

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetGlobalTransformMatrix(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalPosition : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetGlobalPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalRotation : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetGlobalRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetGlobalScale : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Scale
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetGlobalScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalPositionRotation : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetLocalPositionRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalTransform : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public ValueInput<float3> Scale
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetLocalTransform(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetTRS : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float4x4> TRS
		{
			get
			{
				return (ValueInput<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TRS"), typeof(ValueInput<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TRS", value);
			}
		}

		public static float4x4 TRSDefault => float4x4.Identity;

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetTRS(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalPosition : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetLocalPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalRotation : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetLocalRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform")]
	public class SetLocalScale : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Scale
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetLocalScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetForward : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Forward
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Forward"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Forward", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetForward(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetUp : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Up
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Up"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Up", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetUp(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetRight : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Right
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Right"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Right", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetRight(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetBackward : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Backward
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Backward"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Backward", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetBackward(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetDown : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Down
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Down"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Down", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetDown(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Direction")]
	public class SetLeft : TransformSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Left
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Left"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Left", value);
			}
		}

		protected override void Set(Slot instance, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", instance, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetLeft(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalPointToLocal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> GlobalPoint
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GlobalPoint"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GlobalPoint", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GlobalPointToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalPointToGlobal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> LocalPoint
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalPoint"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalPoint", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalPointToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformPoint : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FromSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ToSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<float3> SourcePoint
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SourcePoint"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SourcePoint", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TransformPoint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalDirectionToLocal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> GlobalDirection
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GlobalDirection"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GlobalDirection", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GlobalDirectionToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalDirectionToGlobal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> LocalDirection
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalDirection"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalDirection", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalDirectionToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformDirection : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FromSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ToSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<float3> SourceDirection
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SourceDirection"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SourceDirection", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TransformDirection(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalVectorToLocal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> GlobalVector
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GlobalVector"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GlobalVector", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GlobalVectorToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalVectorToGlobal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> LocalVector
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalVector"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalVector", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalVectorToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformVector : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FromSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ToSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<float3> SourceVector
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SourceVector"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SourceVector", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TransformVector(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalRotationToLocal : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<floatQ> GlobalRotation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GlobalRotation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GlobalRotation", value);
			}
		}

		public static floatQ GlobalRotationDefault => floatQ.Identity;

		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GlobalRotationToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalRotationToGlobal : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<floatQ> LocalRotation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalRotation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalRotation", value);
			}
		}

		public static floatQ LocalRotationDefault => floatQ.Identity;

		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalRotationToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FromSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ToSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<floatQ> SourceRotation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SourceRotation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SourceRotation", value);
			}
		}

		public static floatQ SourceRotationDefault => floatQ.Identity;

		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TransformRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class GlobalScaleToLocal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> GlobalScale
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GlobalScale"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GlobalScale", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GlobalScaleToLocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalScaleToGlobal : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<float3> LocalScale
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalScale"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalScale", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalScaleToGlobal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class TransformScale : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> FromSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FromSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FromSpace", value);
			}
		}

		public ObjectArgument<Slot> ToSpace
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ToSpace"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ToSpace", value);
			}
		}

		public ValueArgument<float3> SourceScale
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SourceScale"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SourceScale", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TransformScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users
{
	[NodeCategory("Users")]
	public class SetUserScale : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<UserRoot> UserRoot
		{
			get
			{
				return (ObjectInput<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectInput<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		public ValueInput<float> Scale
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public ValueInput<float> AnimationTime
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "AnimationTime"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "AnimationTime", value);
			}
		}

		public AsyncCall OnScaleChangeStart
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnScaleChangeStart"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnScaleChangeStart", value);
			}
		}

		public Continuation OnAnimationFinished
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnAnimationFinished"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnAnimationFinished", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetUserScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	public class LocalUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	public class HostUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HostUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class LocalUserRoot : ObjectFunctionNode<FrooxEngineContext, UserRoot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override UserRoot Compute(FrooxEngineContext context)
		{
			return (UserRoot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(UserRoot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalUserRoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class LocalUserSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalUserSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class LocalUserSpace : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalUserSpace(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	public class UserUserID : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserUserID(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	public class UserMachineID : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserMachineID(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	public class IsUserHost : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserHost(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	public class IsLocalUser : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsLocalUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserPresent : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserPresent(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserPresentInHeadset : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserPresentInHeadset(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserPresentInWorld : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserPresentInWorld(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsAppDashOpened : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsAppDashOpened(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsPlatformDashOpened : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsPlatformDashOpened(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class AreAppFacetsOpened : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AreAppFacetsOpened(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("User VR Active", false)]
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserVR_Active : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserVR_Active(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserPrimaryHand : ValueFunctionNode<FrooxEngineContext, Chirality>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override Chirality Compute(FrooxEngineContext context)
		{
			return (Chirality)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Chirality));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserPrimaryHand(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	public class IsUserPatron : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserPatron(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserVoiceMode : ValueFunctionNode<FrooxEngineContext, VoiceMode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override VoiceMode Compute(FrooxEngineContext context)
		{
			return (VoiceMode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(VoiceMode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserVoiceMode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserRecordingVoiceMessage : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserRecordingVoiceMessage(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserActiveViewTargettingController : ObjectFunctionNode<FrooxEngineContext, IViewTargettingController>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override IViewTargettingController Compute(FrooxEngineContext context)
		{
			return (IViewTargettingController)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(IViewTargettingController));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserActiveViewTargettingController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserViewReferenceActive : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserViewReferenceActive(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserViewVoiceActive : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserViewVoiceActive(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserSilenced : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserSilenced(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserUsername : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserUsername(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserUserRoot : ObjectFunctionNode<FrooxEngineContext, UserRoot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override UserRoot Compute(FrooxEngineContext context)
		{
			return (UserRoot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(UserRoot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserUserRoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserRootSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserRootSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserInEditMode : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserInEditMode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserLive : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserLive(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Status")]
	[ContinuouslyChanging]
	public class IsUserInKioskMode : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserInKioskMode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserFPS : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserFPS(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserPing : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserPing(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserQueuedMessages : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserQueuedMessages(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserPacketLoss : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserPacketLoss(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserDeltaMessages : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserDeltaMessages(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	[NodeOverload("User.UserNetworkStatistic")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users.UserNetworkStatistic", null)]
	public class UserNumericNetworkStatistic<T> : ObjectFunctionNode<FrooxEngineContext, T?>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ObjectArgument<string> Name
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Name"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Name", value);
			}
		}

		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override T? Compute(FrooxEngineContext context)
		{
			return (T?)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T?));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserNumericNetworkStatistic(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	[NodeOverload("User.UserNetworkStatistic")]
	public class UserObjectNetworkStatistic<T> : ObjectFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Name
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Name"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Name", value);
			}
		}

		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserObjectNetworkStatistic(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserStreamMessages : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserStreamMessages(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserControlMessages : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserControlMessages(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserDownloadedBytes : ValueFunctionNode<FrooxEngineContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override ulong Compute(FrooxEngineContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserDownloadedBytes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserUploadedBytes : ValueFunctionNode<FrooxEngineContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override ulong Compute(FrooxEngineContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserUploadedBytes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserDownloadSpeed : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserDownloadSpeed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserDownloadSpeedMax : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserDownloadSpeedMax(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserUploadSpeed : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserUploadSpeed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserUploadSpeedMax : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserUploadSpeedMax(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	public class UserPlatform : ValueFunctionNode<FrooxEngineContext, Platform>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override Platform Compute(FrooxEngineContext context)
		{
			return (Platform)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Platform));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserPlatform(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	public class UserHeadOutputDevice : ValueFunctionNode<FrooxEngineContext, HeadOutputDevice>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override HeadOutputDevice Compute(FrooxEngineContext context)
		{
			return (HeadOutputDevice)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(HeadOutputDevice));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserHeadOutputDevice(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Components")]
	[NodeCategory("Users")]
	public class GetUserFromComponent : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.IComponent> Instance
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.IComponent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<global::FrooxEngine.IComponent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetUserFromComponent(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserFromID : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> UserId
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserId"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserId", value);
			}
		}

		public ObjectArgument<string> MachineId
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MachineId"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MachineId", value);
			}
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserFromID(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[ContinuouslyChanging]
	public class UserFromUsername : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Username
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Username"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Username", value);
			}
		}

		public ValueArgument<bool> IgnoreCase
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IgnoreCase"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IgnoreCase", value);
			}
		}

		public ValueArgument<bool> AllowPartialMatch
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "AllowPartialMatch"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "AllowPartialMatch", value);
			}
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserFromUsername(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	public class LocalTimeOffset : ValueFunctionNode<FrooxEngineContext, TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override TimeSpan Compute(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalTimeOffset(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	public class UserTimeOffset : ValueFunctionNode<FrooxEngineContext, TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override TimeSpan Compute(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserTimeOffset(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Info")]
	[ContinuouslyChanging]
	public class UserTime : ValueFunctionNode<FrooxEngineContext, DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override DateTime Compute(FrooxEngineContext context)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users.Roots
{
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class ActiveUserRootUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ActiveUserRootUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HeadSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class ControllerSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		public ValueArgument<Chirality> Side
		{
			get
			{
				return (ValueArgument<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Side"), typeof(ValueArgument<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Side", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ControllerSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HandSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		public ValueArgument<Chirality> Side
		{
			get
			{
				return (ValueArgument<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Side"), typeof(ValueArgument<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Side", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HandSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HeadPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HeadRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadFacingDirection : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HeadFacingDirection(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HeadFacingRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HeadFacingRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class LeftHandPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LeftHandPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class LeftHandRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LeftHandRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class RightHandPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RightHandPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class RightHandRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RightHandRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HipsPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HipsPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class HipsRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HipsRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class FeetPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FeetPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class FeetRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FeetRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[ContinuouslyChanging]
	public class UserRootGlobalScale : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> UserRoot
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserRoot"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserRoot", value);
			}
		}

		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserRootGlobalScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	public abstract class UserRootSetter : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<UserRoot> UserRoot;

		public static floatQ RotationDefault => floatQ.Identity;

		protected override bool Do(FrooxEngineContext context)
		{
			UserRoot userRoot = UserRoot.Evaluate(context);
			if (userRoot == null)
			{
				return false;
			}
			Set(userRoot, context);
			return true;
		}

		protected abstract void Set(UserRoot root, FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class SetHeadFacingDirection : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Direction
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		protected override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", root, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetHeadFacingDirection(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetHeadFacingRotation : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		protected override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", root, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetHeadFacingRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetHeadPosition : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", root, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetHeadPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetHeadRotation : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		protected override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", root, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetHeadRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetHipsPosition : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", root, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetHipsPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetHipsRotation : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		protected override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", root, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetHipsRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetFeetPosition : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", root, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetFeetPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetFeetRotation : UserRootSetter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		protected override void Set(UserRoot root, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Set", root, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetFeetRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users.LocalScreen
{
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalScreenPointToDirection : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> NormalizedScreenPoint
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NormalizedScreenPoint"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NormalizedScreenPoint", value);
			}
		}

		public static float2 NormalizedScreenPointDefault
		{
			get
			{
				return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalScreenPointToDirection", ResoniteBridge.ResoniteBridgeValueType.Type), "NormalizedScreenPointDefault"), typeof(float2));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalScreenPointToDirection", ResoniteBridge.ResoniteBridgeValueType.Type), "NormalizedScreenPointDefault", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalScreenPointToDirection(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Conversion")]
	[ContinuouslyChanging]
	public class LocalScreenPointToWorld : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> NormalizedScreenPoint
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NormalizedScreenPoint"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NormalizedScreenPoint", value);
			}
		}

		public ValueArgument<float> Distance
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Distance"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Distance", value);
			}
		}

		public static float2 NormalizedScreenPointDefault
		{
			get
			{
				return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalScreenPointToWorld", ResoniteBridge.ResoniteBridgeValueType.Type), "NormalizedScreenPointDefault"), typeof(float2));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "LocalScreenPointToWorld", ResoniteBridge.ResoniteBridgeValueType.Type), "NormalizedScreenPointDefault", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalScreenPointToWorld(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Users.LocalOutput
{
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class ViewOverriden : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ViewOverriden(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class ViewPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ViewPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class ViewRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ViewRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class ViewScale : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ViewScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class EarsOverriden : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EarsOverriden(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class EarsPosition : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EarsPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class EarsRotation : ValueFunctionNode<FrooxEngineContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override floatQ Compute(FrooxEngineContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EarsRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class EarsScale : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EarsScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/Local Output")]
	[ContinuouslyChanging]
	public class DesktopFOV : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DesktopFOV(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Security
{
	[NodeCategory("Security")]
	public class AllowJoin : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<JoinRequestHandle> Handle
		{
			get
			{
				return (ObjectInput<JoinRequestHandle>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Handle"), typeof(ObjectInput<JoinRequestHandle>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Handle", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AllowJoin(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Security")]
	public class AssignRole : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<JoinRequestHandle> Handle
		{
			get
			{
				return (ObjectInput<JoinRequestHandle>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Handle"), typeof(ObjectInput<JoinRequestHandle>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Handle", value);
			}
		}

		public ObjectInput<string> RoleName
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RoleName"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RoleName", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AssignRole(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Security")]
	public class DenyJoin : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<JoinRequestHandle> Handle
		{
			get
			{
				return (ObjectInput<JoinRequestHandle>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Handle"), typeof(ObjectInput<JoinRequestHandle>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Handle", value);
			}
		}

		public ObjectInput<string> DenyReason
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DenyReason"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DenyReason", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DenyJoin(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public class JoinRequestHandle : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public SessionConnection data
		{
			get
			{
				return (SessionConnection)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "data"), typeof(SessionConnection));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "data", value);
			}
		}

		public JoinGrant? grant
		{
			get
			{
				return (JoinGrant?)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "grant"), typeof(JoinGrant?));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "grant", value);
			}
		}

		public JoinRequestHandle(SessionConnection data)
		{
			this.data = data;
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public JoinRequestHandle(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Security")]
	public class VerifyJoinRequest : ProxyVoidNode<FrooxEngineContext, VerifyJoinRequest.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IWorldUserJoinVerifier, IUserJoinVerifier, IWorldElement, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Func<SessionConnection, Task<JoinGrant?>> Handler
			{
				get
				{
					return (Func<SessionConnection, Task<JoinGrant?>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Handler"), typeof(Func<SessionConnection, Task<JoinGrant?>>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Handler", value);
				}
			}

			public async Task<JoinGrant?> VerifyJoinRequest(SessionConnection request)
			{
				return (Task<JoinGrant?>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "VerifyJoinRequest", request), typeof(Task<JoinGrant?>));
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public AsyncCall Verify
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Verify"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Verify", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserId"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> UserSessionId
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserSessionId"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserSessionId", value);
			}
		}

		public ObjectOutput<string> MachineId
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MachineId"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MachineId", value);
			}
		}

		public ObjectOutput<string> Username
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Username"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Username", value);
			}
		}

		public ValueOutput<HeadOutputDevice> HeadOutputDevice
		{
			get
			{
				return (ValueOutput<HeadOutputDevice>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HeadOutputDevice"), typeof(ValueOutput<HeadOutputDevice>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HeadOutputDevice", value);
			}
		}

		public ValueOutput<Platform> Platform
		{
			get
			{
				return (ValueOutput<Platform>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Platform"), typeof(ValueOutput<Platform>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Platform", value);
			}
		}

		public ValueOutput<bool> IsInvited
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsInvited"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsInvited", value);
			}
		}

		public ValueOutput<bool> IsContact
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsContact"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsContact", value);
			}
		}

		public ValueOutput<bool> IsInKioskMode
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsInKioskMode"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsInKioskMode", value);
			}
		}

		public ValueOutput<bool> IsSpectatorBanned
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsSpectatorBanned"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsSpectatorBanned", value);
			}
		}

		public ValueOutput<bool> IsMuteBanned
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsMuteBanned"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsMuteBanned", value);
			}
		}

		public ObjectOutput<JoinRequestHandle> Handle
		{
			get
			{
				return (ObjectOutput<JoinRequestHandle>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Handle"), typeof(ObjectOutput<JoinRequestHandle>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Handle", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private Task Execute(SessionConnection connection, JoinRequestHandle handle, FrooxEngineContext context)
		{
			return (Task)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Execute", connection, handle, context), typeof(Task));
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public VerifyJoinRequest()
		{
			UserId = new ObjectOutput<string>(this);
			UserSessionId = new ObjectOutput<string>(this);
			MachineId = new ObjectOutput<string>(this);
			Username = new ObjectOutput<string>(this);
			HeadOutputDevice = new ValueOutput<HeadOutputDevice>(this);
			Platform = new ValueOutput<Platform>(this);
			IsInvited = new ValueOutput<bool>(this);
			IsContact = new ValueOutput<bool>(this);
			IsInKioskMode = new ValueOutput<bool>(this);
			IsSpectatorBanned = new ValueOutput<bool>(this);
			IsMuteBanned = new ValueOutput<bool>(this);
			Handle = new ObjectOutput<JoinRequestHandle>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public VerifyJoinRequest(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Undo
{
	[NodeCategory("Undo")]
	public class CreateUndoBatch : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Description
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Description"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Description", value);
			}
		}

		public Call Create
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Create"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Create", value);
			}
		}

		public Continuation OnCreated
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnCreated"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnCreated", value);
			}
		}

		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CreateUndoBatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Undo")]
	public class BeginUndoBatch : ActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Description
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Description"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Description", value);
			}
		}

		protected override void Do(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BeginUndoBatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Undo")]
	public class EndUndoBatch : ActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Do(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EndUndoBatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Undo")]
	public class CreateTransformUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		public ValueInput<bool> SaveParent
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SaveParent"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SaveParent", value);
			}
		}

		public ValueInput<bool> SavePosition
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SavePosition"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SavePosition", value);
			}
		}

		public ValueInput<bool> SaveRotation
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SaveRotation"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SaveRotation", value);
			}
		}

		public ValueInput<bool> SaveScale
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SaveScale"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SaveScale", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CreateTransformUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Undo")]
	public class CreateSpawnUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		public ObjectInput<string> Description
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Description"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Description", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CreateSpawnUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Undo")]
	public class UndoableDestroy : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		public ValueInput<bool> PreserveAssets
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PreserveAssets"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PreserveAssets", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UndoableDestroy(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Undo")]
	public class CreateFieldUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IField> Target
		{
			get
			{
				return (ObjectInput<IField>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<IField>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		public ValueInput<bool> ForceNew
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ForceNew"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ForceNew", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CreateFieldUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Undo")]
	public class CreateReferenceUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ISyncRef> Target
		{
			get
			{
				return (ObjectInput<ISyncRef>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<ISyncRef>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		public ValueInput<bool> ForceNew
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ForceNew"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ForceNew", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CreateReferenceUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Undo")]
	public class CreateTypeFieldUndoStep : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<SyncType> Target
		{
			get
			{
				return (ObjectInput<SyncType>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<SyncType>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		public ValueInput<bool> ForceNew
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ForceNew"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ForceNew", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CreateTypeFieldUndoStep(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interactions
{
	[NodeCategory("Utility")]
	public class NotifyModified : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.IComponent> ModifiedComponent
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.IComponent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ModifiedComponent"), typeof(ObjectInput<global::FrooxEngine.IComponent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ModifiedComponent", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NotifyModified(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Utility
{
	internal struct TimepointValue<T> : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public T value
		{
			get
			{
				return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(T));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public double timestamp
		{
			get
			{
				return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "timestamp"), typeof(double));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "timestamp", value);
			}
		}

		public TimepointValue(T value, double timestamp)
		{
			this.value = value;
			this.timestamp = timestamp;
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimepointValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility")]
	[NodeName("Delay", false)]
	[NodeOverload("Engine.DelayValue")]
	public abstract class DelayBase<T> : UpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> DelaySeconds;

		private ObjectStore<Queue<TimepointValue<T>>> _buffer;

		protected override void RunUpdate(FrooxEngineContext context)
		{
			Queue<TimepointValue<T>> queue = _buffer.Read(context);
			if (queue == null)
			{
				queue = new Queue<TimepointValue<T>>();
				_buffer.Write(queue, context);
			}
			double worldTime = context.Time.WorldTime;
			float num = MathX.Max(0f, DelaySeconds.Evaluate(context, 0f));
			while (queue.Count > 0 && worldTime - queue.Peek().timestamp > (double)num)
			{
				queue.Dequeue();
			}
			T value = EvaluateCurrent(context);
			queue.Enqueue(new TimepointValue<T>(value, worldTime));
		}

		protected T GetCurrent(FrooxEngineContext context)
		{
			Queue<TimepointValue<T>> queue = _buffer.Read(context);
			if (queue == null || queue.Count == 0)
			{
				return default(T);
			}
			return queue.Peek().value;
		}

		protected abstract T EvaluateCurrent(FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class DelayValue<T> : DelayBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<T> DelayedValue
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DelayedValue"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DelayedValue", value);
			}
		}

		protected override T EvaluateCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "EvaluateCurrent", context), typeof(T));
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public DelayValue()
		{
			((DelayValue<>)(object)this).DelayedValue = new ValueOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayObject<T> : DelayBase<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ObjectOutput<T> DelayedValue
		{
			get
			{
				return (ObjectOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DelayedValue"), typeof(ObjectOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DelayedValue", value);
			}
		}

		protected override T EvaluateCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "EvaluateCurrent", context), typeof(T));
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public DelayObject()
		{
			((DelayObject<>)(object)this).DelayedValue = new ObjectOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility")]
	public class TypeColor : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Type> Type
		{
			get
			{
				return (ObjectArgument<Type>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Type"), typeof(ObjectArgument<Type>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Type", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TypeColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Rendering
{
	[NodeCategory("Rendering")]
	public class RenderToTextureAsset : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public int MAX_RESOLUTION
		{
			get
			{
				return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MAX_RESOLUTION"), typeof(int));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MAX_RESOLUTION", value);
			}
		}

		public ObjectInput<Camera> Camera
		{
			get
			{
				return (ObjectInput<Camera>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Camera"), typeof(ObjectInput<Camera>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Camera", value);
			}
		}

		public ValueInput<int2> Resolution
		{
			get
			{
				return (ValueInput<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Resolution"), typeof(ValueInput<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Resolution", value);
			}
		}

		public ObjectInput<string> Format
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ValueInput<int> Quality
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Quality"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Quality", value);
			}
		}

		public AsyncCall OnRenderStarted
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnRenderStarted"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnRenderStarted", value);
			}
		}

		public Continuation OnRendered
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnRendered"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnRendered", value);
			}
		}

		public Continuation OnFailed
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFailed"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFailed", value);
			}
		}

		public ObjectOutput<Uri> RenderedAssetURL
		{
			get
			{
				return (ObjectOutput<Uri>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RenderedAssetURL"), typeof(ObjectOutput<Uri>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RenderedAssetURL", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public RenderToTextureAsset()
		{
			RenderedAssetURL = new ObjectOutput<Uri>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RenderToTextureAsset(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Rendering")]
	public class FlashHighlightHierarchy : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> HierarchyRoot
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HierarchyRoot"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HierarchyRoot", value);
			}
		}

		public ValueInput<bool> ExcludeColliders
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ExcludeColliders"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ExcludeColliders", value);
			}
		}

		public ValueInput<bool> ExcludeMeshes
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ExcludeMeshes"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ExcludeMeshes", value);
			}
		}

		public ValueInput<bool> ExcludeDisabled
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ExcludeDisabled"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ExcludeDisabled", value);
			}
		}

		public ValueInput<bool> TrackPosition
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TrackPosition"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TrackPosition", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ObjectOutput<Slot> FlashRoot
		{
			get
			{
				return (ObjectOutput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FlashRoot"), typeof(ObjectOutput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FlashRoot", value);
			}
		}

		public static color ColorDefault => color.White;

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		public FlashHighlightHierarchy()
		{
			FlashRoot = new ObjectOutput<Slot>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FlashHighlightHierarchy(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Rendering")]
	public class BakeReflectionProbe : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ReflectionProbe> Probe
		{
			get
			{
				return (ObjectInput<ReflectionProbe>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Probe"), typeof(ObjectInput<ReflectionProbe>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Probe", value);
			}
		}

		public AsyncCall OnBakeStart
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnBakeStart"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnBakeStart", value);
			}
		}

		public Continuation OnBakeFail
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnBakeFail"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnBakeFail", value);
			}
		}

		public Continuation OnBakeComplete
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnBakeComplete"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnBakeComplete", value);
			}
		}

		public ObjectOutput<Uri> BakedCubemapURL
		{
			get
			{
				return (ObjectOutput<Uri>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BakedCubemapURL"), typeof(ObjectOutput<Uri>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BakedCubemapURL", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public BakeReflectionProbe()
		{
			BakedCubemapURL = new ObjectOutput<Uri>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BakeReflectionProbe(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Rendering")]
	public class BakeReflectionProbes : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Root
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Root"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Root", value);
			}
		}

		public ValueInput<bool> BakeInactive
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BakeInactive"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BakeInactive", value);
			}
		}

		public ObjectInput<string> FilterWithTag
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FilterWithTag"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FilterWithTag", value);
			}
		}

		public ValueInput<float> DelayBeforeBake
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DelayBeforeBake"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DelayBeforeBake", value);
			}
		}

		public ObjectOutput<ReflectionProbe> Probe
		{
			get
			{
				return (ObjectOutput<ReflectionProbe>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Probe"), typeof(ObjectOutput<ReflectionProbe>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Probe", value);
			}
		}

		public ValueOutput<int> ProbeIndex
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ProbeIndex"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ProbeIndex", value);
			}
		}

		public ValueOutput<int> ProbeCount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ProbeCount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ProbeCount", value);
			}
		}

		public AsyncCall OnBakeBatchStart
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnBakeBatchStart"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnBakeBatchStart", value);
			}
		}

		public AsyncCall OnBeforeProbeBake
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnBeforeProbeBake"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnBeforeProbeBake", value);
			}
		}

		public AsyncCall OnProbeBaked
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnProbeBaked"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnProbeBaked", value);
			}
		}

		public Continuation OnBakeBatchFinished
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnBakeBatchFinished"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnBakeBatchFinished", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public BakeReflectionProbes()
		{
			Probe = new ObjectOutput<ReflectionProbe>(this);
			ProbeIndex = new ValueOutput<int>(this);
			ProbeCount = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BakeReflectionProbes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Rendering")]
	public class SampleColorX : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ValueInput<float3> Direction
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		public ObjectInput<Slot> Reference
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Reference"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Reference", value);
			}
		}

		public ValueInput<float> NearClip
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NearClip"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NearClip", value);
			}
		}

		public ValueInput<float> FarClip
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FarClip"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FarClip", value);
			}
		}

		public AsyncCall OnSampleStart
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSampleStart"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSampleStart", value);
			}
		}

		public Continuation OnSampled
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSampled"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSampled", value);
			}
		}

		public ValueOutput<colorX> SampledColor
		{
			get
			{
				return (ValueOutput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SampledColor"), typeof(ValueOutput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SampledColor", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public SampleColorX()
		{
			SampledColor = new ValueOutput<colorX>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SampleColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Nodes
{
	[NodeCategory("Nodes")]
	public class PackProtoFluxNodes : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Root
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Root"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Root", value);
			}
		}

		public ObjectInput<Slot> Target
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackProtoFluxNodes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Nodes")]
	public class PackProtoFluxFromNode : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ProtoFluxNode> StartNode
		{
			get
			{
				return (ObjectInput<ProtoFluxNode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "StartNode"), typeof(ObjectInput<ProtoFluxNode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "StartNode", value);
			}
		}

		public ObjectInput<Slot> Target
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackProtoFluxFromNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Nodes")]
	public class PackProtoFluxInPlace : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ProtoFluxNode> StartNode
		{
			get
			{
				return (ObjectInput<ProtoFluxNode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "StartNode"), typeof(ObjectInput<ProtoFluxNode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "StartNode", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackProtoFluxInPlace(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Nodes")]
	public class UnpackProtoFlux : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Root
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Root"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Root", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackProtoFlux(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Physics
{
	[NodeCategory("Physics")]
	public class IsCharacterController : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ICollider> Collider
		{
			get
			{
				return (ObjectArgument<ICollider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Collider"), typeof(ObjectArgument<ICollider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Collider", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsCharacterController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class AsCharacterController : ObjectFunctionNode<FrooxEngineContext, CharacterController>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ICollider> Collider
		{
			get
			{
				return (ObjectArgument<ICollider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Collider"), typeof(ObjectArgument<ICollider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Collider", value);
			}
		}

		protected override CharacterController Compute(FrooxEngineContext context)
		{
			return (CharacterController)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(CharacterController));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AsCharacterController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class CharacterControllerUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				return (ObjectArgument<CharacterController>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ObjectArgument<CharacterController>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CharacterControllerUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class FindCharacterControllerFromSlot : ObjectFunctionNode<FrooxEngineContext, CharacterController>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Source
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Source"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Source", value);
			}
		}

		protected override CharacterController Compute(FrooxEngineContext context)
		{
			return (CharacterController)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(CharacterController));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FindCharacterControllerFromSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class FindCharacterControllerFromUser : ObjectFunctionNode<FrooxEngineContext, CharacterController>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> Source
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Source"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Source", value);
			}
		}

		protected override CharacterController Compute(FrooxEngineContext context)
		{
			return (CharacterController)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(CharacterController));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FindCharacterControllerFromUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class CharacterLinearVelocity : ValueFunctionNode<FrooxEngineContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				return (ObjectArgument<CharacterController>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ObjectArgument<CharacterController>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		protected override float3 Compute(FrooxEngineContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CharacterLinearVelocity(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class IsCharacterOnGround : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				return (ObjectArgument<CharacterController>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ObjectArgument<CharacterController>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsCharacterOnGround(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class CharacterGravity : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				return (ObjectArgument<CharacterController>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ObjectArgument<CharacterController>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		public ValueOutput<float3> Gravity
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Gravity"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Gravity", value);
			}
		}

		public ValueOutput<float3> ActualGravity
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ActualGravity"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ActualGravity", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public CharacterGravity()
		{
			Gravity = new ValueOutput<float3>(this);
			ActualGravity = new ValueOutput<float3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CharacterGravity(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	[ContinuouslyChanging]
	public class CharacterGroundCollider : ObjectFunctionNode<FrooxEngineContext, ICollider>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<CharacterController> Character
		{
			get
			{
				return (ObjectArgument<CharacterController>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ObjectArgument<CharacterController>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		protected override ICollider Compute(FrooxEngineContext context)
		{
			return (ICollider)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ICollider));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CharacterGroundCollider(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class ApplyCharacterImpulse : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Impulse
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Impulse"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Impulse", value);
			}
		}

		public ObjectInput<CharacterController> Character
		{
			get
			{
				return (ObjectInput<CharacterController>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ObjectInput<CharacterController>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		public ValueInput<bool> IgnoreMass
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IgnoreMass"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IgnoreMass", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApplyCharacterImpulse(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class ApplyCharacterForce : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Force
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Force"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Force", value);
			}
		}

		public ObjectInput<CharacterController> Character
		{
			get
			{
				return (ObjectInput<CharacterController>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ObjectInput<CharacterController>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		public ValueInput<bool> IgnoreMass
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IgnoreMass"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IgnoreMass", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApplyCharacterForce(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class SetCharacterVelocity : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Velocity
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Velocity"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Velocity", value);
			}
		}

		public ObjectInput<CharacterController> Character
		{
			get
			{
				return (ObjectInput<CharacterController>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ObjectInput<CharacterController>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetCharacterVelocity(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class SetCharacterGravity : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Gravity
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Gravity"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Gravity", value);
			}
		}

		public ObjectInput<CharacterController> Character
		{
			get
			{
				return (ObjectInput<CharacterController>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ObjectInput<CharacterController>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetCharacterGravity(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics/Events")]
	public abstract class LocomotionEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly GlobalRef<PhysicalLocomotion> Locomotion;

		private ObjectStore<PhysicalLocomotion> _current;

		public override bool CanBeEvaluated => false;

		private void OnLocomotionChanged(PhysicalLocomotion locomotion, FrooxEngineContext context)
		{
			PhysicalLocomotion physicalLocomotion = _current.Read(context);
			if (physicalLocomotion != locomotion)
			{
				if (physicalLocomotion != null)
				{
					Unregister(physicalLocomotion, context);
				}
				if (locomotion != null)
				{
					NodeContextPath path = context.CaptureContextPath();
					context.GetEventDispatcher(out ExecutionEventDispatcher<FrooxEngineContext> eventDispatcher);
					Register(locomotion, path, eventDispatcher, context);
					_current.Write(locomotion, context);
				}
				else
				{
					_current.Clear(context);
					Clear(context);
				}
			}
		}

		protected abstract void Register(PhysicalLocomotion locomotion, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context);

		protected abstract void Unregister(PhysicalLocomotion locomotion, FrooxEngineContext context);

		protected abstract void Clear(FrooxEngineContext context);

		protected LocomotionEvents()
		{
			Locomotion = new GlobalRef<PhysicalLocomotion>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public abstract class LocomotionGripEvent : LocomotionEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnEvent;

		public readonly ObjectOutput<Slot> GrippedSlot;

		public readonly ValueOutput<float3> GrippedPoint;

		public readonly ValueOutput<Chirality> GrippingHand;

		private ObjectStore<PhysicalLocomotion.HandGripHandler> _handler;

		protected override void Register(PhysicalLocomotion locomotion, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			PhysicalLocomotion.HandGripHandler handGripHandler = delegate(Slot s, float3 p, Chirality h)
			{
				Slot s2 = s;
				dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
				{
					Handle(s2, in p, h, c);
				});
			};
			Register(locomotion, handGripHandler);
			_handler.Write(handGripHandler, context);
		}

		protected override void Unregister(PhysicalLocomotion locomotion, FrooxEngineContext context)
		{
			Unregister(locomotion, _handler.Read(context));
		}

		protected override void Clear(FrooxEngineContext context)
		{
			_handler.Clear(context);
		}

		private void Handle(Slot slot, in float3 point, Chirality hand, FrooxEngineContext context)
		{
			GrippedSlot.Write(slot, context);
			GrippedPoint.Write(point, context);
			GrippingHand.Write(hand, context);
			OnEvent.Execute(context);
		}

		protected abstract void Register(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler);

		protected abstract void Unregister(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler);

		protected LocomotionGripEvent()
		{
			GrippedSlot = new ObjectOutput<Slot>(this);
			GrippedPoint = new ValueOutput<float3>(this);
			GrippingHand = new ValueOutput<Chirality>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class OnLocomotionGripBegin : LocomotionGripEvent, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Register(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", locomotion, handler);
		}

		protected override void Unregister(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", locomotion, handler);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnLocomotionGripBegin(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class OnLocomotionGripEnd : LocomotionGripEvent, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Register(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", locomotion, handler);
		}

		protected override void Unregister(PhysicalLocomotion locomotion, PhysicalLocomotion.HandGripHandler handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", locomotion, handler);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnLocomotionGripEnd(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics/Events")]
	public abstract class ContactEventNode : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly GlobalRef<ICollider> Collider;

		public Call OnEvent;

		public readonly ObjectOutput<ICollider> Other;

		private ObjectStore<ICollider> _current;

		private ObjectStore<ContactEvent> _handler;

		private NodeEventHandler<FrooxEngineContext> _cachedEventHandler;

		public override bool CanBeEvaluated => false;

		private void OnColliderChanged(ICollider collider, FrooxEngineContext context)
		{
			ICollider collider2 = _current.Read(context);
			if (collider2 == collider)
			{
				return;
			}
			if (collider2 != null)
			{
				Unregister(collider2, _handler.Read(context));
			}
			if (collider != null)
			{
				if (_cachedEventHandler == null)
				{
					_cachedEventHandler = HandleEvent;
				}
				NodeContextPath path = context.CaptureContextPath();
				context.GetEventDispatcher(out var dispatcher);
				ContactEvent contactEvent = delegate(ICollider c, ICollider o)
				{
					dispatcher.ScheduleEvent(path, _cachedEventHandler, o);
				};
				Register(collider, contactEvent);
				_current.Write(collider, context);
				_handler.Write(contactEvent, context);
			}
			else
			{
				_current.Clear(context);
				_handler.Clear(context);
			}
		}

		private void HandleEvent(FrooxEngineContext context, object other)
		{
			Other.Write(other as ICollider, context);
			OnEvent.Execute(context);
		}

		protected abstract void Register(ICollider collider, ContactEvent handler);

		protected abstract void Unregister(ICollider collider, ContactEvent handler);

		protected ContactEventNode()
		{
			Collider = new GlobalRef<ICollider>(this, 0);
			Other = new ObjectOutput<ICollider>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class OnContactStart : ContactEventNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Register(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", collider, handler);
		}

		protected override void Unregister(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", collider, handler);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnContactStart(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class OnContactStay : ContactEventNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Register(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", collider, handler);
		}

		protected override void Unregister(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", collider, handler);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnContactStay(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class OnContactEnd : ContactEventNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Register(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", collider, handler);
		}

		protected override void Unregister(ICollider collider, ContactEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", collider, handler);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnContactEnd(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics/Events")]
	public abstract class GripEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly GlobalRef<LocomotionGrip> Grip;

		public Call OnEvent;

		public readonly ObjectOutput<ILocomotionModule> Module;

		public readonly ValueOutput<BodyNode> GrippingBodyNode;

		private ObjectStore<LocomotionGrip> _current;

		private ObjectStore<GripEvent> _handler;

		public override bool CanBeEvaluated => false;

		private void OnGripChanged(LocomotionGrip grip, FrooxEngineContext context)
		{
			LocomotionGrip locomotionGrip = _current.Read(context);
			if (locomotionGrip == grip)
			{
				return;
			}
			if (locomotionGrip != null)
			{
				Unregister(locomotionGrip, _handler.Read(context));
			}
			if (grip != null)
			{
				NodeContextPath path = context.CaptureContextPath();
				context.GetEventDispatcher(out var dispatcher);
				GripEvent gripEvent = delegate(ILocomotionModule m, BodyNode n)
				{
					ILocomotionModule i = m;
					dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
					{
						Handle(i, n, c);
					});
				};
				Register(grip, gripEvent);
				_current.Write(grip, context);
				_handler.Write(gripEvent, context);
			}
			else
			{
				_current.Clear(context);
				_handler.Clear(context);
			}
		}

		protected abstract void Register(LocomotionGrip grip, GripEvent handler);

		protected abstract void Unregister(LocomotionGrip grip, GripEvent handler);

		private void Handle(ILocomotionModule module, BodyNode node, FrooxEngineContext context)
		{
			Module.Write(module, context);
			GrippingBodyNode.Write(node, context);
			OnEvent.Execute(context);
		}

		protected GripEvents()
		{
			Grip = new GlobalRef<LocomotionGrip>(this, 0);
			Module = new ObjectOutput<ILocomotionModule>(this);
			GrippingBodyNode = new ValueOutput<BodyNode>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class OnGripStart : GripEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Register(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", grip, handler);
		}

		protected override void Unregister(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", grip, handler);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnGripStart(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class OnGripStay : GripEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Register(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", grip, handler);
		}

		protected override void Unregister(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", grip, handler);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnGripStay(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class OnGripEnd : GripEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Register(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", grip, handler);
		}

		protected override void Unregister(LocomotionGrip grip, GripEvent handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", grip, handler);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnGripEnd(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class HitUVCoordinate : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ICollider> HitCollider
		{
			get
			{
				return (ObjectArgument<ICollider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitCollider"), typeof(ObjectArgument<ICollider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitCollider", value);
			}
		}

		public ValueArgument<int> HitTriangleIndex
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitTriangleIndex"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitTriangleIndex", value);
			}
		}

		public ValueArgument<float3> HitPoint
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitPoint"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitPoint", value);
			}
		}

		public ValueOutput<float2> UV
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UV"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UV", value);
			}
		}

		public ValueOutput<bool> IsValidUV
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsValidUV"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsValidUV", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public HitUVCoordinate()
		{
			UV = new ValueOutput<float2>(this);
			IsValidUV = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HitUVCoordinate(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class RaycastOne : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Origin
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Origin"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Origin", value);
			}
		}

		public ValueInput<float3> Direction
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		public ValueInput<float> MaxDistance
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MaxDistance"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MaxDistance", value);
			}
		}

		public ValueInput<bool> HitTriggers
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitTriggers"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitTriggers", value);
			}
		}

		public ValueInput<bool> UsersOnly
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UsersOnly"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UsersOnly", value);
			}
		}

		public ValueInput<float> DebugDuration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DebugDuration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DebugDuration", value);
			}
		}

		public ObjectInput<Slot> Root
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Root"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Root", value);
			}
		}

		public Continuation OnHit
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnHit"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnHit", value);
			}
		}

		public Continuation OnMiss
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnMiss"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnMiss", value);
			}
		}

		public ObjectOutput<ICollider> HitCollider
		{
			get
			{
				return (ObjectOutput<ICollider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitCollider"), typeof(ObjectOutput<ICollider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitCollider", value);
			}
		}

		public ValueOutput<float> HitDistance
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitDistance"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitDistance", value);
			}
		}

		public ValueOutput<float3> HitPoint
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitPoint"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitPoint", value);
			}
		}

		public ValueOutput<float3> HitNormal
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitNormal"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitNormal", value);
			}
		}

		public ValueOutput<int> HitTriangleIndex
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitTriangleIndex"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitTriangleIndex", value);
			}
		}

		private static Predicate<ICollider> _userFilter
		{
			get
			{
				return (Predicate<ICollider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RaycastOne", ResoniteBridge.ResoniteBridgeValueType.Type), "_userFilter"), typeof(Predicate<ICollider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RaycastOne", ResoniteBridge.ResoniteBridgeValueType.Type), "_userFilter", value);
			}
		}

		private static bool UserFilter(ICollider c)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RaycastOne", ResoniteBridge.ResoniteBridgeValueType.Type), "UserFilter", c), typeof(bool));
		}

		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		public RaycastOne()
		{
			HitCollider = new ObjectOutput<ICollider>(this);
			HitDistance = new ValueOutput<float>(this);
			HitPoint = new ValueOutput<float3>(this);
			HitNormal = new ValueOutput<float3>(this);
			HitTriangleIndex = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RaycastOne(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Physics")]
	public class Raycaster : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Origin
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Origin"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Origin", value);
			}
		}

		public ValueArgument<float3> Direction
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		public ValueArgument<float> MaxDistance
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MaxDistance"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MaxDistance", value);
			}
		}

		public ValueArgument<bool> HitTriggers
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitTriggers"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitTriggers", value);
			}
		}

		public ValueArgument<bool> UsersOnly
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UsersOnly"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UsersOnly", value);
			}
		}

		public ObjectArgument<Slot> Root
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Root"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Root", value);
			}
		}

		public ValueOutput<bool> HasHit
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HasHit"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HasHit", value);
			}
		}

		public ObjectOutput<ICollider> HitCollider
		{
			get
			{
				return (ObjectOutput<ICollider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitCollider"), typeof(ObjectOutput<ICollider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitCollider", value);
			}
		}

		public ValueOutput<float> HitDistance
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitDistance"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitDistance", value);
			}
		}

		public ValueOutput<float3> HitPoint
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitPoint"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitPoint", value);
			}
		}

		public ValueOutput<float3> HitNormal
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitNormal"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitNormal", value);
			}
		}

		public ValueOutput<int> HitTriangleIndex
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitTriangleIndex"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitTriangleIndex", value);
			}
		}

		private static Predicate<ICollider> _userFilter
		{
			get
			{
				return (Predicate<ICollider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Raycaster", ResoniteBridge.ResoniteBridgeValueType.Type), "_userFilter"), typeof(Predicate<ICollider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Raycaster", ResoniteBridge.ResoniteBridgeValueType.Type), "_userFilter", value);
			}
		}

		private static bool UserFilter(ICollider c)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Raycaster", ResoniteBridge.ResoniteBridgeValueType.Type), "UserFilter", c), typeof(bool));
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Raycaster()
		{
			HasHit = new ValueOutput<bool>(this);
			HitCollider = new ObjectOutput<ICollider>(this);
			HitDistance = new ValueOutput<float>(this);
			HitPoint = new ValueOutput<float3>(this);
			HitNormal = new ValueOutput<float3>(this);
			HitTriangleIndex = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Raycaster(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Operators
{
	[NodeCategory("Math")]
	[ContinuouslyChanging]
	[NodeOverload("Engine.Operators.Delta")]
	public abstract class DeltaBase<T> : ValueFunctionUpdateBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value;

		private ValueStore<bool> _initialized;

		private ValueStore<T> _delta;

		private ValueStore<T> _previous;

		protected override T Compute(FrooxEngineContext context)
		{
			return _delta.Read(context);
		}

		protected override void RunUpdate(FrooxEngineContext context)
		{
			T current = Value.Evaluate(context);
			if (_initialized.Read(context))
			{
				ref T reference = ref _delta.Access(context);
				ref T reference2 = ref _previous.Access(context);
				reference = Delta(ref current, ref reference2);
				reference2 = current;
			}
			else
			{
				_initialized.Write(value: true, context);
				_delta.Write(default(T), context);
				_previous.Write(current, context);
			}
		}

		protected abstract T Delta(ref T current, ref T previous);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class ValueDelta<T> : DeltaBase<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public static bool IsValidGenericType => Coder<T>.SupportsAddSub;

		protected override T Delta(ref T current, ref T previous)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Delta", current, previous), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueDelta(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Delta", false)]
	public class Delta_floatQ : DeltaBase<floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override floatQ Delta(ref floatQ current, ref floatQ previous)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Delta", current, previous), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Delta_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Delta", false)]
	public class Delta_doubleQ : DeltaBase<doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override doubleQ Delta(ref doubleQ current, ref doubleQ previous)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Delta", current, previous), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Delta_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ContinuouslyChanging]
	[NodeCategory("Time")]
	[NodeOverload("Engine.Operators.Mul_dT")]
	[NodeName("*dT", false)]
	public class MulDeltaTime<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMul;

		protected override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MulDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ContinuouslyChanging]
	[NodeCategory("Time")]
	[NodeName("÷dT", false)]
	[NodeOverload("Engine.Operators.Div_dT")]
	public class DivDeltaTime<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMul;

		protected override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DivDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Network
{
	[NodeCategory("Network")]
	[NodeName("Is Host Access Allowed", false)]
	[NodeOverload("FrooxEngine.Network.IsHostAccessAllowed")]
	public class IsHostAccessAllowed : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Host
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Host"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Host", value);
			}
		}

		public ValueArgument<int> Port
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Port"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Port", value);
			}
		}

		public ValueArgument<HostAccessScope> Scope
		{
			get
			{
				return (ValueArgument<HostAccessScope>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scope"), typeof(ValueArgument<HostAccessScope>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scope", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsHostAccessAllowed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Network")]
	[NodeName("Is Host Access Allowed", false)]
	[NodeOverload("FrooxEngine.Network.IsHostAccessAllowed")]
	public class IsHostAccessAllowedUrl : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Uri> Host
		{
			get
			{
				return (ObjectArgument<Uri>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Host"), typeof(ObjectArgument<Uri>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Host", value);
			}
		}

		public ValueArgument<HostAccessScope> Scope
		{
			get
			{
				return (ValueArgument<HostAccessScope>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scope"), typeof(ValueArgument<HostAccessScope>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scope", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsHostAccessAllowedUrl(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Request Host Access", false)]
	[NodeCategory("Network")]
	[NodeOverload("FrooxEngine.Network.RequestHostAccess")]
	public abstract class RequestHostAccessBase : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnGranted;

		public Continuation OnDenied;

		public Continuation OnIgnored;

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return await Request(context) switch
			{
				HostAccessPermission.Allowed => OnGranted.Target, 
				HostAccessPermission.Denied => OnDenied.Target, 
				HostAccessPermission.Ignored => OnIgnored.Target, 
				_ => null, 
			};
		}

		protected abstract Task<HostAccessPermission?> Request(FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class RequestHostAccess : RequestHostAccessBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Host
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Host"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Host", value);
			}
		}

		public ValueInput<int> Port
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Port"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Port", value);
			}
		}

		public ValueInput<HostAccessScope> Scope
		{
			get
			{
				return (ValueInput<HostAccessScope>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scope"), typeof(ValueInput<HostAccessScope>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scope", value);
			}
		}

		public ObjectInput<string> Reason
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Reason"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Reason", value);
			}
		}

		protected override async Task<HostAccessPermission?> Request(FrooxEngineContext context)
		{
			return (Task<HostAccessPermission?>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Request", context), typeof(Task<HostAccessPermission?>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RequestHostAccess(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class RequestHostAccessUrl : RequestHostAccessBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Uri> Host
		{
			get
			{
				return (ObjectInput<Uri>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Host"), typeof(ObjectInput<Uri>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Host", value);
			}
		}

		public ObjectInput<string> Reason
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Reason"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Reason", value);
			}
		}

		public ValueInput<HostAccessScope> Scope
		{
			get
			{
				return (ValueInput<HostAccessScope>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scope"), typeof(ValueInput<HostAccessScope>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scope", value);
			}
		}

		protected override async Task<HostAccessPermission?> Request(FrooxEngineContext context)
		{
			return (Task<HostAccessPermission?>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Request", context), typeof(Task<HostAccessPermission?>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RequestHostAccessUrl(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Network")]
	public abstract class WebRequestBase : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Uri> URL;

		public readonly ValueOutput<HttpStatusCode> StatusCode;

		public AsyncCall OnSent;

		public Continuation OnResponse;

		public Continuation OnError;

		public Continuation OnDenied;

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			Uri url = URL.Evaluate(context);
			if (url == null)
			{
				return null;
			}
			if (url.Scheme != "http" && url.Scheme != "https" && url.Scheme != "ftp")
			{
				return null;
			}
			switch (await context.Engine.Security.RequestAccessPermission(url.Host, url.Port, HostAccessScope.HTTP, "Web Request Node"))
			{
				case HostAccessPermission.Denied:
					return OnDenied.Target;
				default:
					return null;
				case HostAccessPermission.Allowed:
					try
					{
						using HttpRequestMessage request = CreateRequest(context, url);
						request.Headers.UserAgent.Add(context.Cloud.UserAgent);
						Task<HttpResponseMessage> responseTask = context.Cloud.SafeHttpClient.SendAsync(request);
						await OnSent.ExecuteAsync(context);
						using HttpResponseMessage response = await responseTask;
						StatusCode.Write(response.StatusCode, context);
						await ProcessResponse(context, response);
						return OnResponse.Target;
					}
					catch (HttpRequestException exception)
					{
						await ProcessError(context, exception);
						StatusCode.Write((HttpStatusCode)0, context);
						return OnError.Target;
					}
			}
		}

		protected abstract HttpRequestMessage CreateRequest(FrooxEngineContext context, Uri url);

		protected abstract ValueTask ProcessResponse(FrooxEngineContext context, HttpResponseMessage response);

		protected abstract ValueTask ProcessError(FrooxEngineContext context, HttpRequestException exception);

		protected WebRequestBase()
		{
			StatusCode = new ValueOutput<HttpStatusCode>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public abstract class StringResponseWebRequest : WebRequestBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly ObjectOutput<string> Content;

		protected override async ValueTask ProcessResponse(FrooxEngineContext context, HttpResponseMessage response)
		{
			ObjectOutput<string> content = Content;
			content.Write(await response.Content.ReadAsStringAsync(), context);
		}

		protected override async ValueTask ProcessError(FrooxEngineContext context, HttpRequestException exception)
		{
			Content.Write(exception.Message, context);
		}

		protected StringResponseWebRequest()
		{
			Content = new ObjectOutput<string>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("GET String", false)]
	public class GET_String : StringResponseWebRequest, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override HttpRequestMessage CreateRequest(FrooxEngineContext context, Uri url)
		{
			return (HttpRequestMessage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "CreateRequest", context, url), typeof(HttpRequestMessage));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GET_String(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("POST String", false)]
	public class POST_String : StringResponseWebRequest, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> String
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "String"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "String", value);
			}
		}

		public ObjectInput<string> MediaType
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MediaType"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MediaType", value);
			}
		}

		protected override HttpRequestMessage CreateRequest(FrooxEngineContext context, Uri url)
		{
			return (HttpRequestMessage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "CreateRequest", context, url), typeof(HttpRequestMessage));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public POST_String(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Network/Websockets")]
	public class WebsocketConnect : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<WebsocketClient> Client
		{
			get
			{
				return (ObjectInput<WebsocketClient>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Client"), typeof(ObjectInput<WebsocketClient>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Client", value);
			}
		}

		public ObjectInput<Uri> URL
		{
			get
			{
				return (ObjectInput<Uri>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "URL"), typeof(ObjectInput<Uri>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "URL", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> HandlingUser
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HandlingUser"), typeof(ObjectInput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HandlingUser", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WebsocketConnect(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Network/Websockets")]
	public class WebsocketTextMessageSender : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<WebsocketClient> Client
		{
			get
			{
				return (ObjectInput<WebsocketClient>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Client"), typeof(ObjectInput<WebsocketClient>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Client", value);
			}
		}

		public ObjectInput<string> Data
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Data"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Data", value);
			}
		}

		public AsyncCall OnSendStart
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSendStart"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSendStart", value);
			}
		}

		public Continuation OnSent
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSent"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSent", value);
			}
		}

		public Continuation OnSendError
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSendError"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSendError", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WebsocketTextMessageSender(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Network/Websockets")]
	public abstract class WebsocketEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly GlobalRef<WebsocketClient> Client;

		private ObjectStore<WebsocketClient> _current;

		private void OnClientChanged(WebsocketClient client, FrooxEngineContext context)
		{
			WebsocketClient websocketClient = _current.Read(context);
			if (client != websocketClient)
			{
				if (websocketClient != null)
				{
					Unregister(websocketClient, context);
				}
				if (client != null)
				{
					NodeContextPath path = context.CaptureContextPath();
					context.GetEventDispatcher(out ExecutionEventDispatcher<FrooxEngineContext> eventDispatcher);
					Register(client, path, eventDispatcher, context);
					_current.Write(client, context);
				}
				else
				{
					_current.Clear(context);
					Clear(context);
				}
			}
		}

		protected abstract void Register(WebsocketClient client, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context);

		protected abstract void Unregister(WebsocketClient client, FrooxEngineContext context);

		protected abstract void Clear(FrooxEngineContext context);

		protected WebsocketEvents()
		{
			Client = new GlobalRef<WebsocketClient>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class WebsocketConnectionEvents : WebsocketEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnConnected
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnConnected"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnConnected", value);
			}
		}

		public Call OnDisconnected
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnDisconnected"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnDisconnected", value);
			}
		}

		private ObjectStore<Action<WebsocketClient>> _connected
		{
			get
			{
				return (ObjectStore<Action<WebsocketClient>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_connected"), typeof(ObjectStore<Action<WebsocketClient>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_connected", value);
			}
		}

		private ObjectStore<Action<WebsocketClient>> _disconnected
		{
			get
			{
				return (ObjectStore<Action<WebsocketClient>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_disconnected"), typeof(ObjectStore<Action<WebsocketClient>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_disconnected", value);
			}
		}

		protected override void Register(WebsocketClient client, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", client, path, dispatcher, context);
		}

		protected override void Unregister(WebsocketClient client, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", client, context);
		}

		protected override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", context);
		}

		private void Connected(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Connected", context);
		}

		private void Disconnected(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Disconnected", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WebsocketConnectionEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class WebsocketTextMessageReceiver : WebsocketEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnReceived
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnReceived"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnReceived", value);
			}
		}

		public ObjectOutput<string> Data
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Data"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Data", value);
			}
		}

		private ObjectStore<Action<WebsocketClient, string>> _handler
		{
			get
			{
				return (ObjectStore<Action<WebsocketClient, string>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handler"), typeof(ObjectStore<Action<WebsocketClient, string>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handler", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _callback
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_callback"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_callback", value);
			}
		}

		public override bool CanBeEvaluated => false;

		protected override void Register(WebsocketClient client, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", client, path, dispatcher, context);
		}

		protected override void Unregister(WebsocketClient client, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", client, context);
		}

		protected override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", context);
		}

		private void Receive(FrooxEngineContext context, object data)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Receive", context, data);
		}

		public WebsocketTextMessageReceiver()
		{
			Data = new ObjectOutput<string>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WebsocketTextMessageReceiver(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction
{
	[NodeCategory("Interaction")]
	public class ButtonEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<IButton> Button
		{
			get
			{
				return (GlobalRef<IButton>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Button"), typeof(GlobalRef<IButton>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Button", value);
			}
		}

		public Call Pressed
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Pressed"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Pressed", value);
			}
		}

		public Call Pressing
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Pressing"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Pressing", value);
			}
		}

		public Call Released
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Released"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Released", value);
			}
		}

		public Call HoverEnter
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HoverEnter"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HoverEnter", value);
			}
		}

		public Call HoverStay
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HoverStay"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HoverStay", value);
			}
		}

		public Call HoverLeave
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HoverLeave"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HoverLeave", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.Component> Source
		{
			get
			{
				return (ObjectOutput<global::FrooxEngine.Component>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Source"), typeof(ObjectOutput<global::FrooxEngine.Component>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Source", value);
			}
		}

		public ValueOutput<float3> GlobalPoint
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GlobalPoint"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GlobalPoint", value);
			}
		}

		public ValueOutput<float2> LocalPoint
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalPoint"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalPoint", value);
			}
		}

		public ValueOutput<float2> NormalizedPoint
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NormalizedPoint"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NormalizedPoint", value);
			}
		}

		private ObjectStore<IButton> _currentButton
		{
			get
			{
				return (ObjectStore<IButton>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_currentButton"), typeof(ObjectStore<IButton>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_currentButton", value);
			}
		}

		private ObjectStore<ButtonEventHandler> _pressed
		{
			get
			{
				return (ObjectStore<ButtonEventHandler>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_pressed"), typeof(ObjectStore<ButtonEventHandler>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_pressed", value);
			}
		}

		private ObjectStore<ButtonEventHandler> _pressing
		{
			get
			{
				return (ObjectStore<ButtonEventHandler>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_pressing"), typeof(ObjectStore<ButtonEventHandler>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_pressing", value);
			}
		}

		private ObjectStore<ButtonEventHandler> _released
		{
			get
			{
				return (ObjectStore<ButtonEventHandler>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_released"), typeof(ObjectStore<ButtonEventHandler>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_released", value);
			}
		}

		private ObjectStore<ButtonEventHandler> _hoverEnter
		{
			get
			{
				return (ObjectStore<ButtonEventHandler>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_hoverEnter"), typeof(ObjectStore<ButtonEventHandler>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_hoverEnter", value);
			}
		}

		private ObjectStore<ButtonEventHandler> _hoverStay
		{
			get
			{
				return (ObjectStore<ButtonEventHandler>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_hoverStay"), typeof(ObjectStore<ButtonEventHandler>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_hoverStay", value);
			}
		}

		private ObjectStore<ButtonEventHandler> _hoverLeave
		{
			get
			{
				return (ObjectStore<ButtonEventHandler>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_hoverLeave"), typeof(ObjectStore<ButtonEventHandler>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_hoverLeave", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private void OnButtonChanged(IButton button, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnButtonChanged", button, context);
		}

		private void WriteEventData(in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "WriteEventData", eventData, context);
		}

		private void OnPressed(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnPressed", button, eventData, context);
		}

		private void OnPressing(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnPressing", button, eventData, context);
		}

		private void OnRelased(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnRelased", button, eventData, context);
		}

		private void OnHoverEnter(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnHoverEnter", button, eventData, context);
		}

		private void OnHoverStay(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnHoverStay", button, eventData, context);
		}

		private void OnHoverLeave(IButton button, in ButtonEventData eventData, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnHoverLeave", button, eventData, context);
		}

		public ButtonEvents()
		{
			Button = new GlobalRef<IButton>(this, 0);
			Source = new ObjectOutput<global::FrooxEngine.Component>(this);
			GlobalPoint = new ValueOutput<float3>(this);
			LocalPoint = new ValueOutput<float2>(this);
			NormalizedPoint = new ValueOutput<float2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ButtonEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction")]
	public class CloseContextMenu : ActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IWorldElement> Summoner
		{
			get
			{
				return (ObjectInput<IWorldElement>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Summoner"), typeof(ObjectInput<IWorldElement>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Summoner", value);
			}
		}

		protected override void Do(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CloseContextMenu(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction")]
	[ContinuouslyChanging]
	public class IsContextMenuOpen : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsContextMenuOpen(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public class ReleaseAllGrabbed : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<BodyNode> Node
		{
			get
			{
				return (ValueInput<BodyNode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Node"), typeof(ValueInput<BodyNode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Node", value);
			}
		}

		public ValueInput<bool> SupressEvents
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SupressEvents"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SupressEvents", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReleaseAllGrabbed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public abstract class GrabbableEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly GlobalRef<IGrabbable> Grabbable;

		private ObjectStore<IGrabbable> _current;

		private ObjectStore<Action<IGrabbable>> _handler;

		private void OnGrabbableChanged(IGrabbable grabbable, FrooxEngineContext context)
		{
			IGrabbable grabbable2 = _current.Read(context);
			if (grabbable2 == grabbable)
			{
				return;
			}
			if (grabbable2 != null)
			{
				Unregister(grabbable2, _handler.Read(context));
			}
			if (grabbable != null)
			{
				NodeContextPath path = context.CaptureContextPath();
				context.GetEventDispatcher(out var dispatcher);
				Action<IGrabbable> action = delegate(IGrabbable g)
				{
					dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
					{
						Handle(g, c);
					});
				};
				Register(grabbable, action);
				_current.Write(grabbable, context);
				_handler.Write(action, context);
			}
			else
			{
				_current.Clear(context);
				_handler.Clear(context);
			}
		}

		protected abstract void Register(IGrabbable grabbable, Action<IGrabbable> handler);

		protected abstract void Unregister(IGrabbable grabbable, Action<IGrabbable> handler);

		protected abstract void Handle(IGrabbable grabbable, FrooxEngineContext context);

		protected GrabbableEvents()
		{
			Grabbable = new GlobalRef<IGrabbable>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class OnGrabbableGrabbed : GrabbableEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnGrabbed
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnGrabbed"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnGrabbed", value);
			}
		}

		protected override void Register(IGrabbable grabbable, Action<IGrabbable> handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", grabbable, handler);
		}

		protected override void Unregister(IGrabbable grabbable, Action<IGrabbable> handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", grabbable, handler);
		}

		protected override void Handle(IGrabbable grabbable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Handle", grabbable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnGrabbableGrabbed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class OnGrabbableReleased : GrabbableEvents, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnReleased
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnReleased"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnReleased", value);
			}
		}

		protected override void Register(IGrabbable grabbable, Action<IGrabbable> handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", grabbable, handler);
		}

		protected override void Unregister(IGrabbable grabbable, Action<IGrabbable> handler)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", grabbable, handler);
		}

		protected override void Handle(IGrabbable grabbable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Handle", grabbable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnGrabbableReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	[ContinuouslyChanging]
	public class CanBeGrabbed : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Slot
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Slot"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Slot", value);
			}
		}

		public ObjectArgument<Grabber> Grabber
		{
			get
			{
				return (ObjectArgument<Grabber>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Grabber"), typeof(ObjectArgument<Grabber>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Grabber", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CanBeGrabbed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	[ContinuouslyChanging]
	public abstract class GrabbableValuePropertyNode<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ObjectArgument<IGrabbable> Grabbable;

		protected override T Compute(FrooxEngineContext context)
		{
			return Get(0.ReadObject<IGrabbable>(context));
		}

		protected abstract T Get(IGrabbable grabbable);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	[ContinuouslyChanging]
	public abstract class GrabbableObjectPropertyNode<T> : ObjectFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IGrabbable> Grabbable;

		protected override T Compute(FrooxEngineContext context)
		{
			return Get(0.ReadObject<IGrabbable>(context));
		}

		protected abstract T Get(IGrabbable grabbable);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class IsGrabbableGrabbed : GrabbableValuePropertyNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Get(IGrabbable grabbable)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Get", grabbable), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsGrabbableGrabbed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsGrabbableScalable : GrabbableValuePropertyNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Get(IGrabbable grabbable)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Get", grabbable), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsGrabbableScalable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsGrabbableReceivable : GrabbableValuePropertyNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Get(IGrabbable grabbable)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Get", grabbable), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsGrabbableReceivable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class GrabbablePriority : GrabbableValuePropertyNode<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Get(IGrabbable grabbable)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Get", grabbable), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GrabbablePriority(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class GrabbableGrabber : GrabbableObjectPropertyNode<Grabber>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override Grabber Get(IGrabbable grabbable)
		{
			return (Grabber)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Get", grabbable), typeof(Grabber));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GrabbableGrabber(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public class OnGrabbableReceiverSurfaceReceived : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<GrabbableReceiverSurface> Source
		{
			get
			{
				return (GlobalRef<GrabbableReceiverSurface>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Source"), typeof(GlobalRef<GrabbableReceiverSurface>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Source", value);
			}
		}

		public Call OnReceived
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnReceived"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnReceived", value);
			}
		}

		public ObjectOutput<IGrabbable> ReceivedGrabbable
		{
			get
			{
				return (ObjectOutput<IGrabbable>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ReceivedGrabbable"), typeof(ObjectOutput<IGrabbable>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ReceivedGrabbable", value);
			}
		}

		public ObjectOutput<Grabber> FromGrabber
		{
			get
			{
				return (ObjectOutput<Grabber>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FromGrabber"), typeof(ObjectOutput<Grabber>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FromGrabber", value);
			}
		}

		private ObjectStore<GrabbableReceiverSurface> _current
		{
			get
			{
				return (ObjectStore<GrabbableReceiverSurface>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_current"), typeof(ObjectStore<GrabbableReceiverSurface>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_current", value);
			}
		}

		private ObjectStore<Action<IGrabbable, Grabber>> _handler
		{
			get
			{
				return (ObjectStore<Action<IGrabbable, Grabber>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handler"), typeof(ObjectStore<Action<IGrabbable, Grabber>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handler", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private void OnSourceChanged(GrabbableReceiverSurface surface, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnSourceChanged", surface, context);
		}

		private void Received(IGrabbable grabbable, Grabber grabber, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Received", grabbable, grabber, context);
		}

		public OnGrabbableReceiverSurfaceReceived()
		{
			Source = new GlobalRef<GrabbableReceiverSurface>(this, 0);
			ReceivedGrabbable = new ObjectOutput<IGrabbable>(this);
			FromGrabber = new ObjectOutput<Grabber>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnGrabbableReceiverSurfaceReceived(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public class GetUserGrabber : ObjectFunctionNode<FrooxEngineContext, Grabber>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		public ValueArgument<BodyNode> Node
		{
			get
			{
				return (ValueArgument<BodyNode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Node"), typeof(ValueArgument<BodyNode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Node", value);
			}
		}

		protected override Grabber Compute(FrooxEngineContext context)
		{
			return (Grabber)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Grabber));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetUserGrabber(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/Grabbable")]
	public class GrabberBodyNode : ValueFunctionNode<FrooxEngineContext, BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Grabber> Grabber
		{
			get
			{
				return (ObjectArgument<Grabber>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Grabber"), typeof(ObjectArgument<Grabber>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Grabber", value);
			}
		}

		protected override BodyNode Compute(FrooxEngineContext context)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(BodyNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GrabberBodyNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/UI")]
	public class TextEditorEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<TextEditor> Editor
		{
			get
			{
				return (GlobalRef<TextEditor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Editor"), typeof(GlobalRef<TextEditor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Editor", value);
			}
		}

		public Call EditingStarted
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "EditingStarted"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "EditingStarted", value);
			}
		}

		public Call EditingChanged
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "EditingChanged"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "EditingChanged", value);
			}
		}

		public Call EditingFinished
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "EditingFinished"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "EditingFinished", value);
			}
		}

		public Call SubmitPressed
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SubmitPressed"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SubmitPressed", value);
			}
		}

		private ObjectStore<TextEditor> _current
		{
			get
			{
				return (ObjectStore<TextEditor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_current"), typeof(ObjectStore<TextEditor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_current", value);
			}
		}

		private ObjectStore<Action<TextEditor>> _started
		{
			get
			{
				return (ObjectStore<Action<TextEditor>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_started"), typeof(ObjectStore<Action<TextEditor>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_started", value);
			}
		}

		private ObjectStore<Action<TextEditor>> _changed
		{
			get
			{
				return (ObjectStore<Action<TextEditor>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_changed"), typeof(ObjectStore<Action<TextEditor>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_changed", value);
			}
		}

		private ObjectStore<Action<TextEditor>> _finished
		{
			get
			{
				return (ObjectStore<Action<TextEditor>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_finished"), typeof(ObjectStore<Action<TextEditor>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_finished", value);
			}
		}

		private ObjectStore<Action<TextEditor>> _submit
		{
			get
			{
				return (ObjectStore<Action<TextEditor>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_submit"), typeof(ObjectStore<Action<TextEditor>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_submit", value);
			}
		}

		private void OnEditorChanged(TextEditor editor, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnEditorChanged", editor, context);
		}

		private void OnStarted(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnStarted", context);
		}

		private void OnChanged(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnChanged", context);
		}

		private void OnFinished(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnFinished", context);
		}

		private void OnSubmit(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnSubmit", context);
		}

		public TextEditorEvents()
		{
			Editor = new GlobalRef<TextEditor>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TextEditorEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction")]
	public class TouchableEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<TouchEventRelay> EventSource
		{
			get
			{
				return (GlobalRef<TouchEventRelay>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "EventSource"), typeof(GlobalRef<TouchEventRelay>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "EventSource", value);
			}
		}

		public Call OnEvent
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnEvent"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnEvent", value);
			}
		}

		public ValueOutput<EventState> Hover
		{
			get
			{
				return (ValueOutput<EventState>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Hover"), typeof(ValueOutput<EventState>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Hover", value);
			}
		}

		public ValueOutput<EventState> Touch
		{
			get
			{
				return (ValueOutput<EventState>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Touch"), typeof(ValueOutput<EventState>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Touch", value);
			}
		}

		public ValueOutput<float3> Point
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ValueOutput<float3> Tip
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tip"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tip", value);
			}
		}

		public ValueOutput<TouchType> Type
		{
			get
			{
				return (ValueOutput<TouchType>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Type"), typeof(ValueOutput<TouchType>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Type", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.Component> Source
		{
			get
			{
				return (ObjectOutput<global::FrooxEngine.Component>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Source"), typeof(ObjectOutput<global::FrooxEngine.Component>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Source", value);
			}
		}

		private ObjectStore<TouchEventRelay> _current
		{
			get
			{
				return (ObjectStore<TouchEventRelay>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_current"), typeof(ObjectStore<TouchEventRelay>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_current", value);
			}
		}

		private ObjectStore<TouchEvent> _handler
		{
			get
			{
				return (ObjectStore<TouchEvent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handler"), typeof(ObjectStore<TouchEvent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handler", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private void OnEventSourceChanged(TouchEventRelay source, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnEventSourceChanged", source, context);
		}

		private void OnTouched(ITouchable touchable, in TouchEventInfo eventInfo, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnTouched", touchable, eventInfo, context);
		}

		public TouchableEvents()
		{
			EventSource = new GlobalRef<TouchEventRelay>(this, 0);
			Hover = new ValueOutput<EventState>(this);
			Touch = new ValueOutput<EventState>(this);
			Point = new ValueOutput<float3>(this);
			Tip = new ValueOutput<float3>(this);
			Type = new ValueOutput<TouchType>(this);
			Source = new ObjectOutput<global::FrooxEngine.Component>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TouchableEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tools
{
	[NodeCategory("Tools")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.EquipTooltip", null)]
	public class EquipTool : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<ITool> Tool
		{
			get
			{
				return (ObjectInput<ITool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tool"), typeof(ObjectInput<ITool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tool", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		public ValueInput<Chirality> Side
		{
			get
			{
				return (ValueInput<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Side"), typeof(ValueInput<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Side", value);
			}
		}

		public ValueInput<bool> DequipExisting
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DequipExisting"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DequipExisting", value);
			}
		}

		public Continuation OnEquipped
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnEquipped"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnEquipped", value);
			}
		}

		public Continuation OnEquipFail
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnEquipFail"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnEquipFail", value);
			}
		}

		public static Chirality SideDefault => (Chirality)(-1);

		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EquipTool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.DequipTooltip", null)]
	public class DequipTool : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		public ValueInput<Chirality> Side
		{
			get
			{
				return (ValueInput<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Side"), typeof(ValueInput<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Side", value);
			}
		}

		public ValueInput<bool> PopOff
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PopOff"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PopOff", value);
			}
		}

		public Continuation OnDequipped
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnDequipped"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnDequipped", value);
			}
		}

		public Continuation OnDequipFail
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnDequipFail"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnDequipFail", value);
			}
		}

		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DequipTool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.TooltipEvents", null)]
	public class ToolEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<ITool> Tool
		{
			get
			{
				return (GlobalRef<ITool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tool"), typeof(GlobalRef<ITool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tool", value);
			}
		}

		public Call Equipped
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Equipped"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Equipped", value);
			}
		}

		public Call Dequipped
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Dequipped"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Dequipped", value);
			}
		}

		private ObjectStore<ITool> _current
		{
			get
			{
				return (ObjectStore<ITool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_current"), typeof(ObjectStore<ITool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_current", value);
			}
		}

		private ObjectStore<Action> _equipped
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_equipped"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_equipped", value);
			}
		}

		private ObjectStore<Action> _dequipped
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_dequipped"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_dequipped", value);
			}
		}

		private void OnToolChanged(ITool tool, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnToolChanged", tool, context);
		}

		private void HandleEquipped(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEquipped", context, args);
		}

		private void HandleDequipped(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleDequipped", context, args);
		}

		public ToolEvents()
		{
			Tool = new GlobalRef<ITool>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToolEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.RawDataTooltipEvents", null)]
	public class RawDataToolEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<RawDataTool> Tool
		{
			get
			{
				return (GlobalRef<RawDataTool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tool"), typeof(GlobalRef<RawDataTool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tool", value);
			}
		}

		public Call Equipped
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Equipped"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Equipped", value);
			}
		}

		public Call Dequipped
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Dequipped"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Dequipped", value);
			}
		}

		public Call ToolUpdate
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ToolUpdate"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ToolUpdate", value);
			}
		}

		public Call PrimaryPressed
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PrimaryPressed"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PrimaryPressed", value);
			}
		}

		public Call PrimaryHeld
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PrimaryHeld"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PrimaryHeld", value);
			}
		}

		public Call PrimaryReleased
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PrimaryReleased"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PrimaryReleased", value);
			}
		}

		public Call SecondaryPressed
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SecondaryPressed"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SecondaryPressed", value);
			}
		}

		public Call SecondaryHeld
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SecondaryHeld"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SecondaryHeld", value);
			}
		}

		public Call SecondaryReleased
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SecondaryReleased"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SecondaryReleased", value);
			}
		}

		private ObjectStore<RawDataTool> _current
		{
			get
			{
				return (ObjectStore<RawDataTool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_current"), typeof(ObjectStore<RawDataTool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_current", value);
			}
		}

		private ObjectStore<Action> _update
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_update"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_update", value);
			}
		}

		private ObjectStore<Action> _equipped
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_equipped"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_equipped", value);
			}
		}

		private ObjectStore<Action> _dequipped
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_dequipped"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_dequipped", value);
			}
		}

		private ObjectStore<Action> _primaryPressed
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_primaryPressed"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_primaryPressed", value);
			}
		}

		private ObjectStore<Action> _primaryHeld
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_primaryHeld"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_primaryHeld", value);
			}
		}

		private ObjectStore<Action> _primaryReleased
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_primaryReleased"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_primaryReleased", value);
			}
		}

		private ObjectStore<Action> _secondaryPressed
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_secondaryPressed"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_secondaryPressed", value);
			}
		}

		private ObjectStore<Action> _secondaryHeld
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_secondaryHeld"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_secondaryHeld", value);
			}
		}

		private ObjectStore<Action> _secondaryReleased
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_secondaryReleased"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_secondaryReleased", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _handleUpdate
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handleUpdate"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handleUpdate", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _handlePrimaryPressed
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handlePrimaryPressed"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handlePrimaryPressed", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _handlePrimaryHeld
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handlePrimaryHeld"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handlePrimaryHeld", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _handlePrimaryReleased
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handlePrimaryReleased"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handlePrimaryReleased", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _handleSecondaryPressed
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handleSecondaryPressed"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handleSecondaryPressed", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _handleSecondaryHeld
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handleSecondaryHeld"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handleSecondaryHeld", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _handleSecondaryReleased
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handleSecondaryReleased"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handleSecondaryReleased", value);
			}
		}

		private void OnToolChanged(RawDataTool tool, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnToolChanged", tool, context);
		}

		private void HandleEquipped(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEquipped", context, args);
		}

		private void HandleDequipped(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleDequipped", context, args);
		}

		private void HandleUpdate(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleUpdate", context, args);
		}

		private void HandlePrimaryPressed(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandlePrimaryPressed", context, args);
		}

		private void HandlePrimaryHeld(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandlePrimaryHeld", context, args);
		}

		private void HandlePrimaryReleased(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandlePrimaryReleased", context, args);
		}

		private void HandleSecondaryPressed(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleSecondaryPressed", context, args);
		}

		private void HandleSecondaryHeld(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleSecondaryHeld", context, args);
		}

		private void HandleSecondaryReleased(FrooxEngineContext context, object args)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleSecondaryReleased", context, args);
		}

		public RawDataToolEvents()
		{
			Tool = new GlobalRef<RawDataTool>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RawDataToolEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.GetTooltip", null)]
	public class GetTool : ObjectFunctionNode<FrooxEngineContext, ITool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		public ValueArgument<Chirality> Side
		{
			get
			{
				return (ValueArgument<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Side"), typeof(ValueArgument<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Side", value);
			}
		}

		public static Chirality SideDefault => (Chirality)(-1);

		protected override ITool Compute(FrooxEngineContext context)
		{
			return (ITool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ITool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetTool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.HasTooltip", null)]
	public class HasTool : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		public ValueArgument<Chirality> Side
		{
			get
			{
				return (ValueArgument<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Side"), typeof(ValueArgument<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Side", value);
			}
		}

		public static Chirality SideDefault => (Chirality)(-1);

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HasTool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.IsTooltipEquipped", null)]
	public class IsToolEquipped : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ITool> Tool
		{
			get
			{
				return (ObjectArgument<ITool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tool"), typeof(ObjectArgument<ITool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tool", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsToolEquipped(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.IsTooltipInUse", null)]
	public class IsToolInUse : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ITool> Tool
		{
			get
			{
				return (ObjectArgument<ITool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tool"), typeof(ObjectArgument<ITool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tool", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsToolInUse(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.TooltipEquippingSlot", null)]
	public class ToolEquippingSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ITool> Tool
		{
			get
			{
				return (ObjectArgument<ITool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tool"), typeof(ObjectArgument<ITool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tool", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToolEquippingSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.TooltipEquippingSide", null)]
	public class ToolEquippingSide : ValueFunctionNode<FrooxEngineContext, Chirality>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ITool> Tool
		{
			get
			{
				return (ObjectArgument<ITool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tool"), typeof(ObjectArgument<ITool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tool", value);
			}
		}

		protected override Chirality Compute(FrooxEngineContext context)
		{
			return (Chirality)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Chirality));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToolEquippingSide(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Tools")]
	[ContinuouslyChanging]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Tooltips.GetRawDataTooltipHit", null)]
	public class GetRawDataToolHit : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<RawDataTool> Tool
		{
			get
			{
				return (ObjectArgument<RawDataTool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tool"), typeof(ObjectArgument<RawDataTool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tool", value);
			}
		}

		public ObjectOutput<ICollider> HitCollider
		{
			get
			{
				return (ObjectOutput<ICollider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitCollider"), typeof(ObjectOutput<ICollider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitCollider", value);
			}
		}

		public ValueOutput<float3> HitPoint
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitPoint"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitPoint", value);
			}
		}

		public ValueOutput<float3> HitNormal
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitNormal"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitNormal", value);
			}
		}

		public ValueOutput<float> HitDistance
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitDistance"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitDistance", value);
			}
		}

		public ValueOutput<int> HitTriangleIndex
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitTriangleIndex"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitTriangleIndex", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public GetRawDataToolHit()
		{
			HitCollider = new ObjectOutput<ICollider>(this);
			HitPoint = new ValueOutput<float3>(this);
			HitNormal = new ValueOutput<float3>(this);
			HitDistance = new ValueOutput<float>(this);
			HitTriangleIndex = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetRawDataToolHit(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Interaction.Focusing
{
	[NodeCategory("Interaction/UI")]
	public class FocusFocusable : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IFocusable> Target
		{
			get
			{
				return (ObjectInput<IFocusable>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<IFocusable>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FocusFocusable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/UI")]
	public class DefocusFocusable : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IFocusable> Target
		{
			get
			{
				return (ObjectInput<IFocusable>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<IFocusable>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DefocusFocusable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/UI")]
	public class ClearFocus : ActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Do(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClearFocus(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Interaction/UI")]
	[ContinuouslyChanging]
	public class HasLocalFocus : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IFocusable> Target
		{
			get
			{
				return (ObjectArgument<IFocusable>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectArgument<IFocusable>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HasLocalFocus(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Mouse
{
	[NodeCategory("Devices/Mouse")]
	[ContinuouslyChanging]
	public abstract class MouseNode<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		protected override T Compute(FrooxEngineContext context)
		{
			return GetState(context.World.InputInterface);
		}

		protected abstract T GetState(InputInterface input);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class LeftMousePressed : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetState(InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LeftMousePressed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class LeftMouseHeld : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetState(InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LeftMouseHeld(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class LeftMouseReleased : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetState(InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LeftMouseReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class RightMousePressed : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetState(InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RightMousePressed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class RightMouseHeld : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetState(InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RightMouseHeld(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class RightMouseReleased : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetState(InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RightMouseReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class MiddleMousePressed : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetState(InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MiddleMousePressed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class MiddleMouseHeld : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetState(InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MiddleMouseHeld(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class MiddleMouseReleased : MouseNode<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetState(InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MiddleMouseReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class MouseScrollDelta : MouseNode<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float GetState(InputInterface input)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MouseScrollDelta(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class MouseScrollDelta2D : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MouseScrollDelta2D(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class MousePosition : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MousePosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class NormalizedMousePosition : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NormalizedMousePosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DesktopMousePosition : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DesktopMousePosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class MouseMovementDelta : MouseNode<float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 GetState(InputInterface input)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetState", input), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MouseMovementDelta(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Keyboard
{
	public static class KeyboardNodeHelper
	{
		public static bool CanReadKeyboard(this FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "KeyboardNodeHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "CanReadKeyboard", context), typeof(bool));
		}
	}
	[NodeCategory("Devices/Keyboard")]
	[ContinuouslyChanging]
	public class TypeDelta : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TypeDelta(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Devices/Keyboard")]
	[ContinuouslyChanging]
	public abstract class KeyNode : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Key> Key;

		protected override bool Compute(FrooxEngineContext context)
		{
			if (!context.CanReadKeyboard())
			{
				return false;
			}
			return GetStatus(0.ReadValue<Key>(context), context.World.InputInterface);
		}

		protected abstract bool GetStatus(Key key, InputInterface input);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class KeyPressed : KeyNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetStatus(Key key, InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetStatus", key, input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public KeyPressed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class KeyHeld : KeyNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetStatus(Key key, InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetStatus", key, input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public KeyHeld(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class KeyReleased : KeyNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetStatus(Key key, InputInterface input)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetStatus", key, input), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public KeyReleased(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Headsets
{
	[NodeCategory("Devices")]
	public class GeneralHeadset : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		public ValueOutput<bool> IsActive
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsActive"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsActive", value);
			}
		}

		public ValueOutput<float> BatteryLevel
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BatteryLevel"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BatteryLevel", value);
			}
		}

		public ValueOutput<bool> IsBatteryCharging
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsBatteryCharging"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsBatteryCharging", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public GeneralHeadset()
		{
			IsActive = new ValueOutput<bool>(this);
			BatteryLevel = new ValueOutput<float>(this);
			IsBatteryCharging = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GeneralHeadset(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Haptics
{
	[NodeCategory("Devices/Haptics")]
	public class TriggerHapticsInHierarchy : ActionBreakableFlowNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> TargetHierarchy
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TargetHierarchy"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TargetHierarchy", value);
			}
		}

		public ValueInput<float> RelativeIntensity
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RelativeIntensity"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RelativeIntensity", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TriggerHapticsInHierarchy(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Devices/Haptics")]
	public class TriggerHapticsOnController : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<Chirality> Side
		{
			get
			{
				return (ValueInput<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Side"), typeof(ValueInput<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Side", value);
			}
		}

		public ValueInput<float> RelativeIntensity
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RelativeIntensity"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RelativeIntensity", value);
			}
		}

		public static Chirality SideDefault => (Chirality)(-1);

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TriggerHapticsOnController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Display
{
	[NodeCategory("Devices/Display")]
	public class LocalPrimaryResolution : ValueFunctionNode<FrooxEngineContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int2 Compute(FrooxEngineContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalPrimaryResolution(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Devices/Display")]
	[ContinuouslyChanging]
	public class LocalWindowResolution : ValueFunctionNode<FrooxEngineContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int2 Compute(FrooxEngineContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalWindowResolution(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Devices/Display")]
	[ContinuouslyChanging]
	public class LocalWindowAspectRatio : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalWindowAspectRatio(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Input.Controllers
{
	[NodeCategory("Devices/Controllers")]
	public abstract class ControllerNode<C, P> : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where C : class, IStandardController where P : ControllerProxy<C>, new()
	{
		public ObjectArgument<global::FrooxEngine.User> User;

		public ValueArgument<Chirality> Node;

		[ContinuouslyChanging]
		public readonly ValueOutput<bool> IsActive;

		[ContinuouslyChanging]
		public readonly ObjectOutput<Type> Type;

		[ContinuouslyChanging]
		public readonly ValueOutput<float> BatteryLevel;

		[ContinuouslyChanging]
		public readonly ValueOutput<bool> IsBatteryCharging;

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			global::FrooxEngine.User user = 0.ReadObject<global::FrooxEngine.User>(context);
			Chirality side = 1.ReadValue<Chirality>(context);
			if (user != null && user.IsRemoved)
			{
				user = null;
			}
			P val = ((user != null) ? user.GetComponent((P c) => c.Side.Value == side) : null);
			if (val == null && user != null)
			{
				val = user.AttachComponent<P>();
				val.Side.Value = side;
			}
			IsActive.Write(val?.IsControllerActive.Value ?? false, context);
			Type.Write(val?.ControllerType.Value, context);
			BatteryLevel.Write((val?.BatteryLevel.Target?.Value).GetValueOrDefault(-1f), context);
			IsBatteryCharging.Write((val?.BatteryCharging.Target?.Value).GetValueOrDefault(), context);
			Update(val, context);
		}

		protected abstract void Update(P proxy, FrooxEngineContext context);

		protected ControllerNode()
		{
			((ControllerNode<, >)(object)this).IsActive = new ValueOutput<bool>(this);
			((ControllerNode<, >)(object)this).Type = new ObjectOutput<Type>(this);
			((ControllerNode<, >)(object)this).BatteryLevel = new ValueOutput<float>(this);
			((ControllerNode<, >)(object)this).IsBatteryCharging = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class StandardController : ControllerNode<IStandardController, StandardControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> Primary
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Primary"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Primary", value);
			}
		}

		public ValueOutput<bool> Secondary
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Secondary"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Secondary", value);
			}
		}

		public ValueOutput<bool> Grab
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Grab"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Grab", value);
			}
		}

		public ValueOutput<bool> Menu
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Menu"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Menu", value);
			}
		}

		public ValueOutput<float> Strength
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Strength"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Strength", value);
			}
		}

		public ValueOutput<float2> Axis
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Axis"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Axis", value);
			}
		}

		protected override void Update(StandardControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Update", proxy, context);
		}

		public StandardController()
		{
			Primary = new ValueOutput<bool>(this);
			Secondary = new ValueOutput<bool>(this);
			Grab = new ValueOutput<bool>(this);
			Menu = new ValueOutput<bool>(this);
			Strength = new ValueOutput<float>(this);
			Axis = new ValueOutput<float2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StandardController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IndexController : ControllerNode<global::FrooxEngine.IndexController, IndexControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> ButtonA
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonA"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonA", value);
			}
		}

		public ValueOutput<bool> ButtonB
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonB"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonB", value);
			}
		}

		public ValueOutput<bool> ButtonA_Touch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonA_Touch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonA_Touch", value);
			}
		}

		public ValueOutput<bool> ButtonB_Touch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonB_Touch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonB_Touch", value);
			}
		}

		public ValueOutput<float> Grip
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Grip"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> GripTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GripTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GripTouch", value);
			}
		}

		public ValueOutput<bool> GripClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GripClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GripClick", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Joystick"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "JoystickTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "JoystickTouch", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "JoystickClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerTouch", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerClick", value);
			}
		}

		public ValueOutput<float2> Touchpad
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Touchpad"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Touchpad", value);
			}
		}

		public ValueOutput<bool> TouchpadTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TouchpadTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TouchpadTouch", value);
			}
		}

		public ValueOutput<bool> TouchpadPress
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TouchpadPress"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TouchpadPress", value);
			}
		}

		public ValueOutput<float> TouchpadForce
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TouchpadForce"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TouchpadForce", value);
			}
		}

		protected override void Update(IndexControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Update", proxy, context);
		}

		public IndexController()
		{
			ButtonA = new ValueOutput<bool>(this);
			ButtonB = new ValueOutput<bool>(this);
			ButtonA_Touch = new ValueOutput<bool>(this);
			ButtonB_Touch = new ValueOutput<bool>(this);
			Grip = new ValueOutput<float>(this);
			GripTouch = new ValueOutput<bool>(this);
			GripClick = new ValueOutput<bool>(this);
			Joystick = new ValueOutput<float2>(this);
			JoystickTouch = new ValueOutput<bool>(this);
			JoystickClick = new ValueOutput<bool>(this);
			Trigger = new ValueOutput<float>(this);
			TriggerTouch = new ValueOutput<bool>(this);
			TriggerClick = new ValueOutput<bool>(this);
			Touchpad = new ValueOutput<float2>(this);
			TouchpadTouch = new ValueOutput<bool>(this);
			TouchpadPress = new ValueOutput<bool>(this);
			TouchpadForce = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IndexController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TouchController : ControllerNode<global::FrooxEngine.TouchController, TouchControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<global::FrooxEngine.TouchController.Model> Model
		{
			get
			{
				return (ValueOutput<global::FrooxEngine.TouchController.Model>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Model"), typeof(ValueOutput<global::FrooxEngine.TouchController.Model>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Model", value);
			}
		}

		public ValueOutput<bool> Start
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Start"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Start", value);
			}
		}

		public ValueOutput<bool> ButtonYB
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonYB"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonYB", value);
			}
		}

		public ValueOutput<bool> ButtonXA
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonXA"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonXA", value);
			}
		}

		public ValueOutput<bool> ButtonYB_Touch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonYB_Touch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonYB_Touch", value);
			}
		}

		public ValueOutput<bool> ButtonXA_Touch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonXA_Touch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonXA_Touch", value);
			}
		}

		public ValueOutput<bool> ThumbRestTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ThumbRestTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ThumbRestTouch", value);
			}
		}

		public ValueOutput<float> Grip
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Grip"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> GripClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GripClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GripClick", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Joystick"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "JoystickTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "JoystickTouch", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "JoystickClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerTouch", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerClick", value);
			}
		}

		protected override void Update(TouchControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Update", proxy, context);
		}

		public TouchController()
		{
			Model = new ValueOutput<global::FrooxEngine.TouchController.Model>(this);
			Start = new ValueOutput<bool>(this);
			ButtonYB = new ValueOutput<bool>(this);
			ButtonXA = new ValueOutput<bool>(this);
			ButtonYB_Touch = new ValueOutput<bool>(this);
			ButtonXA_Touch = new ValueOutput<bool>(this);
			ThumbRestTouch = new ValueOutput<bool>(this);
			Grip = new ValueOutput<float>(this);
			GripClick = new ValueOutput<bool>(this);
			Joystick = new ValueOutput<float2>(this);
			JoystickTouch = new ValueOutput<bool>(this);
			JoystickClick = new ValueOutput<bool>(this);
			Trigger = new ValueOutput<float>(this);
			TriggerTouch = new ValueOutput<bool>(this);
			TriggerClick = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TouchController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ViveController : ControllerNode<global::FrooxEngine.ViveController, ViveControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> Grip
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Grip"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> App
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "App"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "App", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerHair
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerHair"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerHair", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerClick", value);
			}
		}

		public ValueOutput<float2> Touchpad
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Touchpad"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Touchpad", value);
			}
		}

		public ValueOutput<bool> TouchpadTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TouchpadTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TouchpadTouch", value);
			}
		}

		public ValueOutput<bool> TouchpadClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TouchpadClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TouchpadClick", value);
			}
		}

		protected override void Update(ViveControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Update", proxy, context);
		}

		public ViveController()
		{
			Grip = new ValueOutput<bool>(this);
			App = new ValueOutput<bool>(this);
			Trigger = new ValueOutput<float>(this);
			TriggerHair = new ValueOutput<bool>(this);
			TriggerClick = new ValueOutput<bool>(this);
			Touchpad = new ValueOutput<float2>(this);
			TouchpadTouch = new ValueOutput<bool>(this);
			TouchpadClick = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ViveController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class WindowsMRController : ControllerNode<global::FrooxEngine.WindowsMRController, WindowsMRControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> Grip
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Grip"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> App
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "App"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "App", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Joystick"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "JoystickClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerHair
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerHair"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerHair", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerClick", value);
			}
		}

		public ValueOutput<float2> Touchpad
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Touchpad"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Touchpad", value);
			}
		}

		public ValueOutput<bool> TouchpadTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TouchpadTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TouchpadTouch", value);
			}
		}

		public ValueOutput<bool> TouchpadClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TouchpadClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TouchpadClick", value);
			}
		}

		protected override void Update(WindowsMRControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Update", proxy, context);
		}

		public WindowsMRController()
		{
			Grip = new ValueOutput<bool>(this);
			App = new ValueOutput<bool>(this);
			Joystick = new ValueOutput<float2>(this);
			JoystickClick = new ValueOutput<bool>(this);
			Trigger = new ValueOutput<float>(this);
			TriggerHair = new ValueOutput<bool>(this);
			TriggerClick = new ValueOutput<bool>(this);
			Touchpad = new ValueOutput<float2>(this);
			TouchpadTouch = new ValueOutput<bool>(this);
			TouchpadClick = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WindowsMRController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class HPReverbController : ControllerNode<global::FrooxEngine.HPReverbController, HPReverbControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> AppMenu
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "AppMenu"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "AppMenu", value);
			}
		}

		public ValueOutput<bool> ButtonYB
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonYB"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonYB", value);
			}
		}

		public ValueOutput<bool> ButtonXA
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonXA"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonXA", value);
			}
		}

		public ValueOutput<float> Grip
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Grip"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Grip", value);
			}
		}

		public ValueOutput<bool> GripTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GripTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GripTouch", value);
			}
		}

		public ValueOutput<bool> GripClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GripClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GripClick", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Joystick"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "JoystickClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerClick", value);
			}
		}

		protected override void Update(HPReverbControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Update", proxy, context);
		}

		public HPReverbController()
		{
			AppMenu = new ValueOutput<bool>(this);
			ButtonYB = new ValueOutput<bool>(this);
			ButtonXA = new ValueOutput<bool>(this);
			Grip = new ValueOutput<float>(this);
			GripTouch = new ValueOutput<bool>(this);
			GripClick = new ValueOutput<bool>(this);
			Joystick = new ValueOutput<float2>(this);
			JoystickClick = new ValueOutput<bool>(this);
			Trigger = new ValueOutput<float>(this);
			TriggerClick = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HPReverbController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class CosmosController : ControllerNode<global::FrooxEngine.CosmosController, CosmosControllerProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueOutput<bool> Menu
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Menu"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Menu", value);
			}
		}

		public ValueOutput<bool> ButtonBY
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonBY"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonBY", value);
			}
		}

		public ValueOutput<bool> ButtonAX
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ButtonAX"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ButtonAX", value);
			}
		}

		public ValueOutput<bool> GripClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GripClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GripClick", value);
			}
		}

		public ValueOutput<bool> Bumper
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bumper"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bumper", value);
			}
		}

		public ValueOutput<float2> Joystick
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Joystick"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Joystick", value);
			}
		}

		public ValueOutput<bool> JoystickTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "JoystickTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "JoystickTouch", value);
			}
		}

		public ValueOutput<bool> JoystickClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "JoystickClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "JoystickClick", value);
			}
		}

		public ValueOutput<float> Trigger
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueOutput<bool> TriggerTouch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerTouch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerTouch", value);
			}
		}

		public ValueOutput<bool> TriggerClick
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TriggerClick"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TriggerClick", value);
			}
		}

		protected override void Update(CosmosControllerProxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Update", proxy, context);
		}

		public CosmosController()
		{
			Menu = new ValueOutput<bool>(this);
			ButtonBY = new ValueOutput<bool>(this);
			ButtonAX = new ValueOutput<bool>(this);
			GripClick = new ValueOutput<bool>(this);
			Bumper = new ValueOutput<bool>(this);
			Joystick = new ValueOutput<float2>(this);
			JoystickTouch = new ValueOutput<bool>(this);
			JoystickClick = new ValueOutput<bool>(this);
			Trigger = new ValueOutput<float>(this);
			TriggerTouch = new ValueOutput<bool>(this);
			TriggerClick = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosmosController(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Experimental
{
	[NodeCategory("Experimental")]
	public class WriteTextToFile : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> String
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "String"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "String", value);
			}
		}

		public ObjectInput<string> FilePath
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FilePath"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FilePath", value);
			}
		}

		public ValueInput<bool> Append
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Append"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Append", value);
			}
		}

		public ValueInput<bool> NewLine
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NewLine"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NewLine", value);
			}
		}

		public AsyncCall OnWriteStarted
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnWriteStarted"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnWriteStarted", value);
			}
		}

		public Continuation OnWriteFinished
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnWriteFinished"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnWriteFinished", value);
			}
		}

		public Continuation OnWriteFail
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnWriteFail"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnWriteFail", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WriteTextToFile(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Debugging
{
	[NodeCategory("Debug")]
	[ContinuouslyChanging]
	public class EstimatedMasterClockError : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EstimatedMasterClockError(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Debug")]
	public abstract class DebugNode : ActionFlowNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public static colorX ColorDefault => colorX.White;

		protected override void Do(FrooxEngineContext context)
		{
			RunDebug(context.World.Debug, context.GetRootSlotContainer(this), context);
		}

		protected abstract void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class DebugText : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ObjectInput<string> Text
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Text"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Text", value);
			}
		}

		public ValueInput<float> Size
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Size"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Size", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		public static float SizeDefault => 0.1f;

		protected override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunDebug", debug, container, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DebugText(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DebugVector : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueInput<float3> Vector
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Vector"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Vector", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueInput<float> RadiusRatio
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RadiusRatio"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RadiusRatio", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		public static float RadiusRatioDefault => 1f;

		protected override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunDebug", debug, container, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DebugVector(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DebugLine : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point0
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point0"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point0", value);
			}
		}

		public ValueInput<float3> Point1
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point1"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point1", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueInput<float> Radius
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Radius"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Radius", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		public static float RadiusDefault => 0.005f;

		protected override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunDebug", debug, container, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DebugLine(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DebugTriangle : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point0
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point0"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point0", value);
			}
		}

		public ValueInput<float3> Point1
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point1"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point1", value);
			}
		}

		public ValueInput<float3> Point2
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point2"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point2", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunDebug", debug, container, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DebugTriangle(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DebugSphere : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ValueInput<float> Radius
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Radius"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Radius", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunDebug", debug, container, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DebugSphere(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DebugBox : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Point
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ValueInput<float3> Size
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Size"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Size", value);
			}
		}

		public ValueInput<floatQ> Orientation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Orientation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Orientation", value);
			}
		}

		public ValueInput<colorX> Color
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		public static floatQ OrientationDefault => floatQ.Identity;

		protected override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunDebug", debug, container, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DebugBox(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DebugAxes : DebugNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float3> Position
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueInput<floatQ> Rotation
		{
			get
			{
				return (ValueInput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueInput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public ValueInput<float> Length
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		public ValueInput<colorX> RightColor
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RightColor"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RightColor", value);
			}
		}

		public ValueInput<colorX> UpColor
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UpColor"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UpColor", value);
			}
		}

		public ValueInput<colorX> ForwardColor
		{
			get
			{
				return (ValueInput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ForwardColor"), typeof(ValueInput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ForwardColor", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		public static floatQ RotationDefault => floatQ.Identity;

		public static float LengthDefault => 0.1f;

		public static colorX RightColorDefault => colorX.Red;

		public static colorX UpColorDefault => colorX.Green;

		public static colorX ForwardColorDefault => colorX.Blue;

		protected override void RunDebug(DebugManager debug, Slot container, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunDebug", debug, container, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DebugAxes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Experimental")]
	[FeatureUpgradeReplacement("DebuggingTest", 1, typeof(TestFeatureUpgrade))]
	public class TestFeatureUpgrade : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TestFeatureUpgrade(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Elements
{
	[NodeCategory("References/Elements")]
	public class ElementExists : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				return (ObjectArgument<IWorldElement>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Element"), typeof(ObjectArgument<IWorldElement>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Element", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ElementExists(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("References/Elements")]
	public class IsRemoved : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				return (ObjectArgument<IWorldElement>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Element"), typeof(ObjectArgument<IWorldElement>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Element", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsRemoved(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("References/Elements")]
	public class IsDisposed : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Worker> Element
		{
			get
			{
				return (ObjectArgument<Worker>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Element"), typeof(ObjectArgument<Worker>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Element", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsDisposed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("References/Elements")]
	public class IsDestroyed : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IDestroyable> Element
		{
			get
			{
				return (ObjectArgument<IDestroyable>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Element"), typeof(ObjectArgument<IDestroyable>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Element", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsDestroyed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("References/Elements")]
	public class IsLocalElement : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				return (ObjectArgument<IWorldElement>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Element"), typeof(ObjectArgument<IWorldElement>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Element", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsLocalElement(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Slots
{
	[NodeCategory("Slots/Info")]
	public class SetSlotName : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectInput<string> Name
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Name"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Name", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetSlotName(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class SetSlotActiveSelf : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueInput<bool> Active
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Active"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Active", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetSlotActiveSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class SetSlotPersistentSelf : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueInput<bool> Persistent
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Persistent"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Persistent", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetSlotPersistentSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class SetTag : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectInput<string> Tag
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class SetChildIndex : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueInput<int> Index
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Index"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Index", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetChildIndex(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class SetSlotOrderOffset : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueInput<long> OrderOffset
		{
			get
			{
				return (ValueInput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OrderOffset"), typeof(ValueInput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OrderOffset", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetSlotOrderOffset(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class DuplicateSlot : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Template
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Template"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Template", value);
			}
		}

		public ObjectOutput<Slot> Duplicate
		{
			get
			{
				return (ObjectOutput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duplicate"), typeof(ObjectOutput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duplicate", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		public DuplicateSlot()
		{
			Duplicate = new ObjectOutput<Slot>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DuplicateSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class SetParent : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectInput<Slot> NewParent
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NewParent"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NewParent", value);
			}
		}

		public ValueInput<bool> PreserveGlobalPosition
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PreserveGlobalPosition"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PreserveGlobalPosition", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetParent(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class DestroySlot : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueInput<bool> PreserveAssets
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PreserveAssets"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PreserveAssets", value);
			}
		}

		public ValueInput<bool> SendDestroyingEvent
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SendDestroyingEvent"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SendDestroyingEvent", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DestroySlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class DestroySlotChildren : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Instance
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueInput<bool> PreserveAssets
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PreserveAssets"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PreserveAssets", value);
			}
		}

		public ValueInput<bool> SendDestroyingEvent
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SendDestroyingEvent"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SendDestroyingEvent", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DestroySlotChildren(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnStart : ProxyVoidNode<FrooxEngineContext, OnStart.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Start
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Start"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Start", value);
				}
			}

			public bool StartScheduled
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "StartScheduled"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "StartScheduled", value);
				}
			}

			protected override void OnStart()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnStart");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnlyHost"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnlyHost", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, eventData);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnStart(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnDuplicate : ProxyVoidNode<FrooxEngineContext, OnDuplicate.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Duplicate
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Duplicate"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Duplicate", value);
				}
			}

			public bool DuplicateScheduled
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "DuplicateScheduled"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "DuplicateScheduled", value);
				}
			}

			protected override void OnDuplicate()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnDuplicate");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, eventData);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnDuplicate(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnPaste : ProxyVoidNode<FrooxEngineContext, OnPaste.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Paste
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Paste"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Paste", value);
				}
			}

			public bool PasteScheduled
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "PasteScheduled"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "PasteScheduled", value);
				}
			}

			protected override void OnPaste()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnPaste");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, eventData);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnPaste(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnActivated : ProxyVoidNode<FrooxEngineContext, OnActivated.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Activated
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Activated"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Activated", value);
				}
			}

			public bool ActivatedScheduled
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ActivatedScheduled"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ActivatedScheduled", value);
				}
			}

			protected override void OnActivated()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnActivated");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnlyHost"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnlyHost", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, eventData);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnActivated(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnDeactivated : ProxyVoidNode<FrooxEngineContext, OnDeactivated.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Deactivated
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Deactivated"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Deactivated", value);
				}
			}

			public bool DeactivatedScheduled
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "DeactivatedScheduled"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "DeactivatedScheduled", value);
				}
			}

			protected override void OnDeactivated()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnDeactivated");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnlyHost"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnlyHost", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, eventData);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnDeactivated(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnDestroy : ProxyVoidNode<FrooxEngineContext, OnDestroy.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public new Action Destroy
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Destroy"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Destroy", value);
				}
			}

			protected override void OnDestroy()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnDestroy");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public ValueInput<bool> OnlyHost
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnlyHost"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnlyHost", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnDestroy(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnDestroying : ProxyVoidNode<FrooxEngineContext, OnDestroying.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Destroying
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Destroying"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Destroying", value);
				}
			}

			protected override void OnDestroying()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnDestroying");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnDestroying(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnSaving : ProxyVoidNode<FrooxEngineContext, OnSaving.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Saving
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Saving"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Saving", value);
				}
			}

			protected override void OnSaving(SaveControl control)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnSaving", control);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnSaving(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnLoaded : ProxyVoidNode<FrooxEngineContext, OnLoaded.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Loaded
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Loaded"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Loaded", value);
				}
			}

			public bool LoadedScheduled
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "LoadedScheduled"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "LoadedScheduled", value);
				}
			}

			protected override void OnLoading(DataTreeNode node, LoadControl control)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnLoading", node, control);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, eventData);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnLoaded(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Events")]
	public class OnPackageImported : ProxyVoidNode<FrooxEngineContext, OnPackageImported.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IPackageImportEventReceiver, IWorker, IWorldElement, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Action Imported
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Imported"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Imported", value);
				}
			}

			public bool ImportedScheduled
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ImportedScheduled"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ImportedScheduled", value);
				}
			}

			public void OnPackageImported()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnPackageImported");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public Call Trigger
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		private void HandleEvent(FrooxEngineContext context, object eventData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", context, eventData);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnPackageImported(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class SlotChildrenEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<Slot> Instance
		{
			get
			{
				return (GlobalRef<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(GlobalRef<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> OnUser
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnUser"), typeof(ObjectInput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnUser", value);
			}
		}

		public Call OnChildAdded
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnChildAdded"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnChildAdded", value);
			}
		}

		public Call OnChildRemoved
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnChildRemoved"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnChildRemoved", value);
			}
		}

		public ObjectOutput<Slot> Child
		{
			get
			{
				return (ObjectOutput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Child"), typeof(ObjectOutput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Child", value);
			}
		}

		private ObjectStore<Slot> _currentSlot
		{
			get
			{
				return (ObjectStore<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_currentSlot"), typeof(ObjectStore<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_currentSlot", value);
			}
		}

		private ObjectStore<SlotChildEvent> _currentOnAdded
		{
			get
			{
				return (ObjectStore<SlotChildEvent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_currentOnAdded"), typeof(ObjectStore<SlotChildEvent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_currentOnAdded", value);
			}
		}

		private ObjectStore<SlotChildEvent> _currentOnRemoved
		{
			get
			{
				return (ObjectStore<SlotChildEvent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_currentOnRemoved"), typeof(ObjectStore<SlotChildEvent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_currentOnRemoved", value);
			}
		}

		private HashSet<NodeContextPath> _currentlyFiring
		{
			get
			{
				return (HashSet<NodeContextPath>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_currentlyFiring"), typeof(HashSet<NodeContextPath>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_currentlyFiring", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private void OnInstanceChanged(Slot target, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnInstanceChanged", target, context);
		}

		private void ChildAdded(Slot child, FrooxEngineContext context, bool canMakeSynchronousChanges)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ChildAdded", child, context, canMakeSynchronousChanges);
		}

		private void ChildRemoved(Slot child, FrooxEngineContext context, bool canMakeSynchronousChanges)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ChildRemoved", child, context, canMakeSynchronousChanges);
		}

		private bool ShouldUserHandleEvent(FrooxEngineContext context, bool canMakeSynchronousChanges)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ShouldUserHandleEvent", context, canMakeSynchronousChanges), typeof(bool));
		}

		public SlotChildrenEvents()
		{
			Instance = new GlobalRef<Slot>(this, 0);
			Child = new ObjectOutput<Slot>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SlotChildrenEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class RootSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RootSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class GetSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.IComponent> Component
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.IComponent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Component"), typeof(ObjectArgument<global::FrooxEngine.IComponent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Component", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ContinuouslyChanging]
	[NodeCategory("Slots")]
	public class GetObjectRoot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<bool> OnlyExplicit
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnlyExplicit"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnlyExplicit", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetObjectRoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ContinuouslyChanging]
	[NodeCategory("Slots")]
	public class GetParentSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetParentSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotName : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetSlotName(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotActive : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetSlotActive(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotActiveSelf : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetSlotActiveSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotPersistent : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetSlotPersistent(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetSlotPersistentSelf : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetSlotPersistentSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class GetTag : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Info")]
	public class HasTag : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Tag
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HasTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	[ContinuouslyChanging]
	public class ChildrenCount : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ChildrenCount(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	[ContinuouslyChanging]
	public class GetChild : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ValueArgument<int> ChildIndex
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ChildIndex"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ChildIndex", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetChild(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	[ContinuouslyChanging]
	public class IndexOfChild : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IndexOfChild(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users/User Root")]
	[NodeCategory("Slots")]
	public class GetActiveUserRoot : ObjectFunctionNode<FrooxEngineContext, UserRoot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override UserRoot Compute(FrooxEngineContext context)
		{
			return (UserRoot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(UserRoot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetActiveUserRoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[NodeCategory("Slots")]
	public class GetActiveUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetActiveUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class GetSlotOrderOffset : ValueFunctionNode<FrooxEngineContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		protected override long Compute(FrooxEngineContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetSlotOrderOffset(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Users")]
	[NodeCategory("Slots")]
	[ChangeSource]
	public class GetActiveUserSelf : ProxyObjectFunctionNode<FrooxEngineContext, GetActiveUserSelf.Proxy, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public new Action<Slot> Changed
			{
				get
				{
					return (Action<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Changed"), typeof(Action<Slot>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Changed", value);
				}
			}

			protected override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnAwake");
			}

			protected override void OnDispose()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnDispose");
			}

			private void OnChanged(Slot slot)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnChanged", slot);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetActiveUserSelf(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots")]
	public class IsChildOf : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectArgument<Slot> Other
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Other"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Other", value);
			}
		}

		public ValueArgument<bool> IncludeSelf
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IncludeSelf"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IncludeSelf", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsChildOf(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Searching")]
	public class FindChildByName : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Name
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Name"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Name", value);
			}
		}

		public ValueArgument<bool> MatchSubstring
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MatchSubstring"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MatchSubstring", value);
			}
		}

		public ValueArgument<bool> IgnoreCase
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IgnoreCase"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IgnoreCase", value);
			}
		}

		public ValueArgument<int> SearchDepth
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SearchDepth"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SearchDepth", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FindChildByName(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Searching")]
	public class FindChildByTag : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Tag
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		public ValueArgument<int> SearchDepth
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SearchDepth"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SearchDepth", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FindChildByTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Searching")]
	public class FindParentByName : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Name
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Name"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Name", value);
			}
		}

		public ValueArgument<bool> MatchSubstring
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MatchSubstring"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MatchSubstring", value);
			}
		}

		public ValueArgument<bool> IgnoreCase
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IgnoreCase"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IgnoreCase", value);
			}
		}

		public ValueArgument<int> SearchDepth
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SearchDepth"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SearchDepth", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FindParentByName(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Slots/Searching")]
	public class FindParentByTag : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Instance
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Instance"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Instance", value);
			}
		}

		public ObjectArgument<string> Tag
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		public ValueArgument<int> SearchDepth
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SearchDepth"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SearchDepth", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FindParentByTag(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.References
{
	[NodeCategory("References")]
	public class ReferenceTarget<T> : ObjectFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IWorldElement
	{
		public ObjectArgument<SyncRef<T>> Reference
		{
			get
			{
				return (ObjectArgument<SyncRef<T>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Reference"), typeof(ObjectArgument<SyncRef<T>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Reference", value);
			}
		}

		protected override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReferenceTarget(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("References")]
	public class ReferenceID : ValueFunctionNode<FrooxEngineContext, RefID>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				return (ObjectArgument<IWorldElement>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Element"), typeof(ObjectArgument<IWorldElement>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Element", value);
			}
		}

		protected override RefID Compute(FrooxEngineContext context)
		{
			return (RefID)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(RefID));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReferenceID(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("References")]
	public class AllocatingUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IWorldElement> Element
		{
			get
			{
				return (ObjectArgument<IWorldElement>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Element"), typeof(ObjectArgument<IWorldElement>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Element", value);
			}
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AllocatingUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Playback
{
	[NodeCategory("Media")]
	public abstract class PlaybackAction : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IPlayable> Target;

		protected override bool Do(FrooxEngineContext context)
		{
			IPlayable playable = Target.Evaluate(context);
			if (playable == null)
			{
				return false;
			}
			Perform(playable, context);
			return true;
		}

		protected abstract void Perform(IPlayable playable, FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class Play : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Play(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class Pause : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pause(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class Stop : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Stop(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class Resume : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Resume(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class Toggle : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Toggle(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Media")]
	public class Wait : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IPlayable> Target
		{
			get
			{
				return (ObjectInput<IPlayable>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<IPlayable>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		public AsyncCall OnWaitBegin
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnWaitBegin"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnWaitBegin", value);
			}
		}

		public Continuation OnPlaybackFinished
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnPlaybackFinished"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnPlaybackFinished", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Wait(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Media")]
	public class PlayAndWait : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IPlayable> Target
		{
			get
			{
				return (ObjectInput<IPlayable>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<IPlayable>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		public AsyncCall OnStarted
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnStarted"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnStarted", value);
			}
		}

		public Continuation OnPlaybackFinished
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnPlaybackFinished"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnPlaybackFinished", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PlayAndWait(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Media")]
	public class PlaybackState : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IPlayable> Source
		{
			get
			{
				return (ObjectArgument<IPlayable>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Source"), typeof(ObjectArgument<IPlayable>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Source", value);
			}
		}

		public ValueOutput<bool> IsPlaying
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsPlaying"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsPlaying", value);
			}
		}

		public ValueOutput<bool> Loop
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Loop"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Loop", value);
			}
		}

		public ValueOutput<float> Position
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueOutput<float> NormalizedPosition
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NormalizedPosition"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NormalizedPosition", value);
			}
		}

		public ValueOutput<float> ClipLength
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ClipLength"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ClipLength", value);
			}
		}

		public ValueOutput<float> Speed
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Speed"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Speed", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public PlaybackState()
		{
			IsPlaying = new ValueOutput<bool>(this);
			Loop = new ValueOutput<bool>(this);
			Position = new ValueOutput<float>(this);
			NormalizedPosition = new ValueOutput<float>(this);
			ClipLength = new ValueOutput<float>(this);
			Speed = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PlaybackState(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Media")]
	[ContinuouslyChanging]
	public abstract class PlaybackProperty<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ObjectArgument<IPlayable> Source;

		protected override T Compute(FrooxEngineContext context)
		{
			IPlayable playable = 0.ReadObject<IPlayable>(context);
			if (playable == null)
			{
				return default(T);
			}
			return GetProperty(playable);
		}

		protected abstract T GetProperty(IPlayable playable);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class IsPlaying : PlaybackProperty<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetProperty(IPlayable playable)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetProperty", playable), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsPlaying(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsLooped : PlaybackProperty<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool GetProperty(IPlayable playable)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetProperty", playable), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsLooped(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class Position : PlaybackProperty<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float GetProperty(IPlayable playable)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetProperty", playable), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Position(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class NormalizedPosition : PlaybackProperty<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float GetProperty(IPlayable playable)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetProperty", playable), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NormalizedPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class Speed : PlaybackProperty<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float GetProperty(IPlayable playable)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetProperty", playable), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Speed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Engine.Playback.ClipLength")]
	public class ClipLengthFloat : PlaybackProperty<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float GetProperty(IPlayable playable)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetProperty", playable), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClipLengthFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Engine.Playback.ClipLength")]
	public class ClipLengthDouble : PlaybackProperty<double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double GetProperty(IPlayable playable)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetProperty", playable), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClipLengthDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetLoop : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<bool> Loop
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Loop"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Loop", value);
			}
		}

		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetLoop(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetPosition : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Position
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ShiftPosition : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Delta
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Delta"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Delta", value);
			}
		}

		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetNormalizedPosition : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> NormalizedPosition
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NormalizedPosition"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NormalizedPosition", value);
			}
		}

		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetNormalizedPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class SetSpeed : PlaybackAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Speed
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Speed"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Speed", value);
			}
		}

		protected override void Perform(IPlayable playable, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Perform", playable, context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetSpeed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Time
{
	[ContinuouslyChanging]
	[NodeCategory("Time")]
	[NodeName("Elapsed Time", false)]
	[NodeOverload("Engine.ElapsedTime")]
	public abstract class ElapsedTime<T> : ProxyValueFunctionNode<FrooxEngineContext, ElapsedTime<T>.Proxy, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public SyncTime StartTime
			{
				get
				{
					return (SyncTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "StartTime"), typeof(SyncTime));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "StartTime", value);
				}
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public readonly Operation Reset;

		public Continuation OnReset;

		private IOperation DoReset(FrooxEngineContext context)
		{
			Proxy proxy = GetProxy(context);
			if (proxy == null)
			{
				return null;
			}
			proxy.StartTime.SetNow();
			return OnReset.Target;
		}

		protected ElapsedTime()
		{
			((ElapsedTime<>)(object)this).Reset = new Operation(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class ElapsedTimeFloat : ElapsedTime<float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ElapsedTimeFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ElapsedTimeDouble : ElapsedTime<double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(FrooxEngineContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ElapsedTimeDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ElapsedTimeTimeSpan : ElapsedTime<TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override TimeSpan Compute(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ElapsedTimeTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	public class Stopwatch : ProxyVoidNode<FrooxEngineContext, Stopwatch.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public SyncPlayback Stopwatch
			{
				get
				{
					return (SyncPlayback)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Stopwatch"), typeof(SyncPlayback));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Stopwatch", value);
				}
			}

			protected override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnAwake");
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public ValueOutput<float> Time
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueOutput<bool> IsRunning
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsRunning"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsRunning", value);
			}
		}

		public Operation Start
		{
			get
			{
				return (Operation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Start"), typeof(Operation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Start", value);
			}
		}

		public Operation Stop
		{
			get
			{
				return (Operation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Stop"), typeof(Operation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Stop", value);
			}
		}

		public Operation Reset
		{
			get
			{
				return (Operation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Reset"), typeof(Operation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Reset", value);
			}
		}

		public Continuation OnStart
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnStart"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnStart", value);
			}
		}

		public Continuation OnStop
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnStop"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnStop", value);
			}
		}

		public Continuation OnReset
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnReset"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnReset", value);
			}
		}

		private IOperation DoStart(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "DoStart", context), typeof(IOperation));
		}

		private IOperation DoStop(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "DoStop", context), typeof(IOperation));
		}

		private IOperation DoReset(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "DoReset", context), typeof(IOperation));
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Stopwatch()
		{
			Time = new ValueOutput<float>(this);
			IsRunning = new ValueOutput<bool>(this);
			Start = new Operation(this, 0);
			Stop = new Operation(this, 1);
			Reset = new Operation(this, 2);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Stopwatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	[NodeName("T", false)]
	[ContinuouslyChanging]
	public class WorldTimeFloat : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldTimeFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	[NodeName("T*2", false)]
	[ContinuouslyChanging]
	public class WorldTime2Float : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldTime2Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	[NodeName("T*10", false)]
	[ContinuouslyChanging]
	public class WorldTime10Float : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldTime10Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("T/2", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class WorldTimeHalfFloat : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldTimeHalfFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("T/10", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class WorldTimeTenthFloat : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldTimeTenthFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("T <size=25%>(double)", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class WorldTimeDouble : ValueFunctionNode<FrooxEngineContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(FrooxEngineContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WorldTimeDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	[NodeName("dT", false)]
	[ContinuouslyChanging]
	public class DeltaTime : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("1/dT", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class InvertedDeltaTime : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InvertedDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Smooth dT", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class SmoothDeltaTime : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SmoothDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Smooth 1/dT", false)]
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class InvertedSmoothDeltaTime : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InvertedSmoothDeltaTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Variables
{
	[NodeCategory("Flow")]
	[NodeName("Boolean Latch", false)]
	[NodeOverload("Engine.DataModelBooleanToggle")]
	[ChangeSource]
	public class DataModelBooleanToggle : DataModelValueFieldStore<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Operation Set
		{
			get
			{
				return (Operation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Set"), typeof(Operation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Set", value);
			}
		}

		public Operation Reset
		{
			get
			{
				return (Operation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Reset"), typeof(Operation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Reset", value);
			}
		}

		public Operation Toggle
		{
			get
			{
				return (Operation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Toggle"), typeof(Operation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Toggle", value);
			}
		}

		public Continuation OnSet
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSet"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSet", value);
			}
		}

		public Continuation OnReset
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnReset"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnReset", value);
			}
		}

		private IOperation DoSet(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "DoSet", context), typeof(IOperation));
		}

		private IOperation DoReset(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "DoReset", context), typeof(IOperation));
		}

		private IOperation DoToggle(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "DoToggle", context), typeof(IOperation));
		}

		public DataModelBooleanToggle()
		{
			Set = new Operation(this, 0);
			Reset = new Operation(this, 1);
			Toggle = new Operation(this, 2);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DataModelBooleanToggle(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelValueFieldStore<T> : ProxyValueFunctionNode<FrooxEngineContext, DataModelValueFieldStore<T>.Store, T>, IVariable<FrooxEngineContext, T>, INode, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Sync<T> Value
			{
				get
				{
					return (Sync<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Value"), typeof(Sync<T>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Value", value);
				}
			}

			internal Action ValueChanged
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ValueChanged"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ValueChanged", value);
				}
			}

			protected override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnAwake");
			}

			private void Value_Changed(IChangeable obj)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Value_Changed", obj);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public static bool IsValidGenericType => Coder<T>.IsEnginePrimitive;

		protected override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Store proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		protected override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public T Read(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Read", context), typeof(T));
		}

		public bool Write(T value, FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Write", value, context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DataModelValueFieldStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelObjectFieldStore<T> : ProxyObjectFunctionNode<FrooxEngineContext, DataModelObjectFieldStore<T>.Store, T>, IVariable<FrooxEngineContext, T>, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Sync<T> Value
			{
				get
				{
					return (Sync<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Value"), typeof(Sync<T>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Value", value);
				}
			}

			internal Action ValueChanged
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ValueChanged"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ValueChanged", value);
				}
			}

			protected override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnAwake");
			}

			private void Value_Changed(IChangeable obj)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Value_Changed", obj);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DataModelObjectFieldStore", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DataModelObjectFieldStore", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Store proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		protected override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public T Read(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Read", context), typeof(T));
		}

		public bool Write(T value, FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Write", value, context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DataModelObjectFieldStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelTypeStore : ProxyObjectFunctionNode<FrooxEngineContext, DataModelTypeStore.Store, Type>, IVariable<FrooxEngineContext, Type>, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public SyncType Value
			{
				get
				{
					return (SyncType)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Value"), typeof(SyncType));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Value", value);
				}
			}

			internal Action ValueChanged
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ValueChanged"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ValueChanged", value);
				}
			}

			protected override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnAwake");
			}

			private void Value_Changed(IChangeable obj)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Value_Changed", obj);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		protected override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Store proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		protected override Type Compute(FrooxEngineContext context)
		{
			return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Type));
		}

		public Type Read(FrooxEngineContext context)
		{
			return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Read", context), typeof(Type));
		}

		public bool Write(Type value, FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Write", value, context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DataModelTypeStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelObjectRefStore<T> : ProxyObjectFunctionNode<FrooxEngineContext, DataModelObjectRefStore<T>.Store, T>, IVariable<FrooxEngineContext, T>, INode, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IWorldElement
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public SyncRef<T> Target
			{
				get
				{
					return (SyncRef<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Target"), typeof(SyncRef<T>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Target", value);
				}
			}

			internal Action ValueChanged
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ValueChanged"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ValueChanged", value);
				}
			}

			protected override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnAwake");
			}

			private void Target_OnTargetChange(SyncRef<T> reference)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Target_OnTargetChange", reference);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		protected override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Store proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		protected override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public T Read(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Read", context), typeof(T));
		}

		public bool Write(T value, FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Write", value, context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DataModelObjectRefStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelUserRefStore : ProxyObjectFunctionNode<FrooxEngineContext, DataModelUserRefStore.Store, global::FrooxEngine.User>, IVariable<FrooxEngineContext, global::FrooxEngine.User>, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public UserRef User
			{
				get
				{
					return (UserRef)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "User"), typeof(UserRef));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "User", value);
				}
			}

			internal Action ValueChanged
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ValueChanged"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ValueChanged", value);
				}
			}

			protected override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnAwake");
			}

			private void User_OnTargetChange(SyncRef<global::FrooxEngine.User> reference)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "User_OnTargetChange", reference);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		protected override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Store proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		public global::FrooxEngine.User Read(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Read", context), typeof(global::FrooxEngine.User));
		}

		public bool Write(global::FrooxEngine.User value, FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Write", value, context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DataModelUserRefStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables")]
	[ChangeSource]
	[NodeOverload("Engine.DataModelStore")]
	public class DataModelObjectAssetRefStore<T> : ProxyObjectFunctionNode<FrooxEngineContext, DataModelObjectAssetRefStore<T>.Store, IAssetProvider<T>>, IVariable<FrooxEngineContext, IAssetProvider<T>>, INode, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IAsset
	{
		public class Store : ProtoFluxEngineProxy, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public AssetRef<T> Target
			{
				get
				{
					return (AssetRef<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Target"), typeof(AssetRef<T>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Target", value);
				}
			}

			internal Action ValueChanged
			{
				get
				{
					return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ValueChanged"), typeof(Action));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ValueChanged", value);
				}
			}

			protected override void OnAwake()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnAwake");
			}

			private void Value_Changed(IChangeable obj)
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Value_Changed", obj);
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Store __New()
			{
				return (Store)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Store", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Store));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Store(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		protected override void ProxyAdded(Store proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Store proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		protected override IAssetProvider<T> Compute(FrooxEngineContext context)
		{
			return (IAssetProvider<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(IAssetProvider<T>));
		}

		public IAssetProvider<T> Read(FrooxEngineContext context)
		{
			return (IAssetProvider<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Read", context), typeof(IAssetProvider<T>));
		}

		public bool Write(IAssetProvider<T> value, FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Write", value, context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DataModelObjectAssetRefStore(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables/Dynamic")]
	public abstract class DynamicVariableAction : ActionNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target;

		[OldName("VariableName")]
		public ObjectInput<string> Path;

		public Continuation OnNotFound;

		protected override IOperation Run(FrooxEngineContext context)
		{
			Slot slot = ((Target.Source != null) ? Target.Evaluate(context) : context.GetRootSlotContainer(this));
			if (slot == null || slot.IsRemoved)
			{
				return OnNotFound.Target;
			}
			DynamicVariableHelper.ParsePath(Path.Evaluate(context), out string spaceName, out string variableName);
			if (string.IsNullOrEmpty(variableName))
			{
				return OnNotFound.Target;
			}
			DynamicVariableSpace dynamicVariableSpace = slot.FindSpace(spaceName);
			if (dynamicVariableSpace == null)
			{
				return OnNotFound.Target;
			}
			return DoAction(dynamicVariableSpace, variableName, slot, context);
		}

		protected abstract IOperation DoAction(DynamicVariableSpace space, string variableName, Slot target, FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Write DynVar", false)]
	[NodeOverload("Engine.DynamicVariables.Write")]
	public abstract class WriteDynamicVariable<T> : DynamicVariableAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnSuccess;

		public Continuation OnFailed;

		protected override IOperation DoAction(DynamicVariableSpace space, string variableName, Slot target, FrooxEngineContext context)
		{
			T valueToWrite = GetValueToWrite(context);
			if (valueToWrite is IWorldElement { IsLocalElement: not false } && !space.IsLocalElement)
			{
				return OnFailed.Target;
			}
			DynamicVariableWriteResult dynamicVariableWriteResult = space.TryWriteValue(variableName, valueToWrite);
			return dynamicVariableWriteResult switch
			{
				DynamicVariableWriteResult.Success => OnSuccess.Target, 
				DynamicVariableWriteResult.NotFound => OnNotFound.Target, 
				DynamicVariableWriteResult.Failed => OnFailed.Target, 
				_ => throw new NotImplementedException("Unsupported variable write result: " + dynamicVariableWriteResult), 
			};
		}

		protected abstract T GetValueToWrite(FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class WriteDynamicValueVariable<T> : WriteDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override T GetValueToWrite(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetValueToWrite", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WriteDynamicValueVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class WriteDynamicObjectVariable<T> : WriteDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override T GetValueToWrite(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetValueToWrite", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WriteDynamicObjectVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Create DynVar", false)]
	[NodeOverload("Engine.DynamicVariables.Create")]
	public abstract class CreateDynamicVariable<T> : DynamicVariableAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnCreated;

		public Continuation OnAlreadyExists;

		public Continuation OnFailed;

		public ValueInput<bool> CreateDirectlyOnTarget;

		public ValueInput<bool> CreateNonPersistent;

		protected override IOperation DoAction(DynamicVariableSpace space, string variableName, Slot target, FrooxEngineContext context)
		{
			DynamicVariableSpace.ValueManager<T> manager = space.GetManager<T>(variableName, createIfNotExist: false);
			if (manager == null || manager.ReadableValueCount == 0)
			{
				Slot slot = (CreateDirectlyOnTarget.Evaluate(context, defaultValue: false) ? target : space.Slot);
				string text = variableName;
				if (!string.IsNullOrEmpty(space.SpaceName.Value))
				{
					text = space.SpaceName.Value + "/" + text;
				}
				T initialValue = GetInitialValue(context);
				if (initialValue is IWorldElement { IsLocalElement: not false } && !slot.IsLocalElement)
				{
					return OnFailed.Target;
				}
				slot.CreateVariable(text, initialValue, !CreateNonPersistent.Evaluate(context, defaultValue: false));
				return OnCreated.Target;
			}
			return OnAlreadyExists.Target;
		}

		protected abstract T GetInitialValue(FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class CreateDynamicValueVariable<T> : CreateDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> InitialValue
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "InitialValue"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "InitialValue", value);
			}
		}

		protected override T GetInitialValue(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetInitialValue", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CreateDynamicValueVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class CreateDynamicObjectVariable<T> : CreateDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> InitialValue
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "InitialValue"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "InitialValue", value);
			}
		}

		protected override T GetInitialValue(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetInitialValue", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CreateDynamicObjectVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Write or Create DynVar", false)]
	[NodeOverload("Engine.DynamicVariables.WriteOrCreate")]
	public abstract class WriteOrCreateDynamicVariable<T> : DynamicVariableAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnCreated;

		public Continuation OnWritten;

		public Continuation OnFailed;

		public ValueInput<bool> CreateDirectlyOnTarget;

		public ValueInput<bool> CreateNonPersistent;

		protected override IOperation DoAction(DynamicVariableSpace space, string variableName, Slot target, FrooxEngineContext context)
		{
			T value = GetValue(context);
			if (value is IWorldElement { IsLocalElement: not false } && !space.IsLocalElement)
			{
				return OnFailed.Target;
			}
			switch (space.TryWriteValue(variableName, value))
			{
				case DynamicVariableWriteResult.Success:
					return OnWritten.Target;
				case DynamicVariableWriteResult.Failed:
					return OnFailed.Target;
				default:
				{
					Slot slot = (CreateDirectlyOnTarget.Evaluate(context, defaultValue: false) ? target : space.Slot);
					string text = variableName;
					if (!string.IsNullOrEmpty(space.SpaceName.Value))
					{
						text = space.SpaceName.Value + "/" + text;
					}
					if (slot.CreateVariable(text, value, !CreateNonPersistent.Evaluate(context, defaultValue: false)))
					{
						return OnCreated.Target;
					}
					return OnNotFound.Target;
				}
			}
		}

		protected abstract T GetValue(FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class WriteOrCreateDynamicValueVariable<T> : WriteOrCreateDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override T GetValue(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetValue", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WriteOrCreateDynamicValueVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class WriteOrCreateDynamicObjectVariable<T> : WriteOrCreateDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override T GetValue(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetValue", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WriteOrCreateDynamicObjectVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DeleteDynamicVariable<T> : DynamicVariableAction, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Continuation OnDeleted
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnDeleted"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnDeleted", value);
			}
		}

		protected override IOperation DoAction(DynamicVariableSpace space, string variableName, Slot target, FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "DoAction", space, variableName, target, context), typeof(IOperation));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DeleteDynamicVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables/Dynamic")]
	public abstract class ClearDynamicVariablesBase : ActionNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Target;

		public ObjectInput<string> SpaceName;

		public Continuation OnNotFound;

		public Continuation OnCleared;

		public readonly ValueOutput<int> ClearedCount;

		protected override IOperation Run(FrooxEngineContext context)
		{
			Slot slot = ((Target.Source != null) ? Target.Evaluate(context) : context.GetRootSlotContainer(this));
			ClearedCount.Write(0, context);
			if (slot == null || slot.IsRemoved)
			{
				return OnNotFound.Target;
			}
			string text = SpaceName.Evaluate(context);
			if (string.IsNullOrEmpty(text))
			{
				return OnNotFound.Target;
			}
			if (!text.EndsWith("/"))
			{
				text += "/";
			}
			DynamicVariableHelper.ParsePath(text, out string spaceName, out string _);
			if (string.IsNullOrEmpty(spaceName))
			{
				return OnNotFound.Target;
			}
			DynamicVariableSpace dynamicVariableSpace = slot.FindSpace(spaceName);
			if (dynamicVariableSpace == null)
			{
				return OnNotFound.Target;
			}
			ClearedCount.Write(Clear(dynamicVariableSpace, context), context);
			return OnCleared.Target;
		}

		protected abstract int Clear(DynamicVariableSpace space, FrooxEngineContext context);

		protected ClearDynamicVariablesBase()
		{
			ClearedCount = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class ClearDynamicVariables : ClearDynamicVariablesBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Clear(DynamicVariableSpace space, FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", space, context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClearDynamicVariables(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ClearDynamicVariablesOfType<T> : ClearDynamicVariablesBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Clear(DynamicVariableSpace space, FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", space, context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClearDynamicVariablesOfType(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DynamicVariableInputProxy<T> : ProtoFluxEngineProxy, IDynamicVariable<T>, IDynamicVariable, IWorldElement, ResoniteBridge.ResoniteBridgeValueHolder
	{
		internal Action OnChanged
		{
			get
			{
				return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnChanged"), typeof(Action));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnChanged", value);
			}
		}

		internal Action OnSpaceLinked
		{
			get
			{
				return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSpaceLinked"), typeof(Action));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSpaceLinked", value);
			}
		}

		internal Action OnSpaceUnlinked
		{
			get
			{
				return (Action)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSpaceUnlinked"), typeof(Action));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSpaceUnlinked", value);
			}
		}

		protected DynamicVariableHandler<T> handler
		{
			get
			{
				return (DynamicVariableHandler<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "handler"), typeof(DynamicVariableHandler<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "handler", value);
			}
		}

		private string _variableName
		{
			get
			{
				return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_variableName"), typeof(string));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_variableName", value);
			}
		}

		public bool AlwaysOverrideOnLink => false;

		public bool IsWriteOnly => true;

		public T DynamicValue
		{
			get
			{
				return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "DynamicValue"), typeof(T));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "DynamicValue", value);
			}
		}

		public bool HasValue => handler.HasVariable;

		public string VariableName
		{
			get
			{
				return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "VariableName"), typeof(string));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "VariableName", value);
			}
		}

		public void MarkSpaceDirty()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "MarkSpaceDirty");
		}

		public bool UpdateLinking()
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateLinking"), typeof(bool));
		}

		private void MarkDirty()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "MarkDirty");
		}

		protected override void OnAwake()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnAwake");
		}

		protected override void OnDispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnDispose");
		}

		protected override void InitializeSyncMembers()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
		}

		public override ISyncMember GetSyncMember(int index)
		{
			return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
		}

		public static DynamicVariableInputProxy<T> __New()
		{
			return (DynamicVariableInputProxy<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicVariableInputProxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(DynamicVariableInputProxy<T>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicVariableInputProxy(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables/Dynamic")]
	public abstract class DynamicVariableInput<T> : ProxyVoidNode<FrooxEngineContext, DynamicVariableInputProxy<T>>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly GlobalRef<string> VariableName;

		protected abstract IOutput ValueOutput { get; }

		protected abstract IOutput HasValueOutput { get; }

		private void OnVariableNameChanged(string name, FrooxEngineContext context)
		{
			DynamicVariableInputProxy<T> proxy = GetProxy(context);
			if (proxy != null)
			{
				proxy.VariableName = name;
			}
		}

		protected override void ProxyAdded(DynamicVariableInputProxy<T> proxy, FrooxEngineContext context)
		{
			NodeContextPath path = context.CaptureContextPath();
			ElementPath<IOutput> valueElement = new ElementPath<IOutput>(ValueOutput, path);
			ElementPath<IOutput> hasValueElement = new ElementPath<IOutput>(HasValueOutput, path);
			ExecutionChangesDispatcher<FrooxEngineContext> changes = context.Changes;
			proxy.VariableName = context.CurrentScope.ReadGlobal(VariableName);
			proxy.OnChanged = (Action)Delegate.Combine(proxy.OnChanged, (Action)delegate
			{
				changes.OutputChanged(valueElement);
				changes.OutputChanged(hasValueElement);
			});
		}

		protected override void ProxyRemoved(DynamicVariableInputProxy<T> proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			if (!inUseByAnotherInstance)
			{
				proxy.VariableName = null;
				proxy.OnChanged = null;
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			DynamicVariableInputProxy<T> proxy = GetProxy(context);
			if (proxy == null)
			{
				UpdateValue(default(T), hasValue: false, context);
			}
			else
			{
				UpdateValue(proxy.DynamicValue, proxy.HasValue, context);
			}
		}

		protected abstract void UpdateValue(T value, bool hasValue, FrooxEngineContext context);

		protected DynamicVariableInput()
		{
			((DynamicVariableInput<>)(object)this).VariableName = new GlobalRef<string>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public abstract class DynamicVariableInputWithEvents<T> : DynamicVariableInput<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> DetectingUser;

		public Call OnSpaceLinked;

		public Call OnSpaceUnlinked;

		protected override void ProxyAdded(DynamicVariableInputProxy<T> proxy, FrooxEngineContext context)
		{
			base.ProxyAdded(proxy, context);
			NodeContextPath path = context.CaptureContextPath();
			context.GetEventDispatcher(out var dispatcher);
			proxy.OnSpaceLinked = delegate
			{
				dispatcher.ScheduleEvent(path, HandleLinked, null);
			};
			proxy.OnSpaceUnlinked = delegate
			{
				dispatcher.ScheduleEvent(path, HandleUnlinked, null);
			};
		}

		protected override void ProxyRemoved(DynamicVariableInputProxy<T> proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			base.ProxyRemoved(proxy, context, inUseByAnotherInstance);
			if (!inUseByAnotherInstance)
			{
				proxy.OnSpaceLinked = null;
				proxy.OnSpaceUnlinked = null;
			}
		}

		private void HandleLinked(FrooxEngineContext context, object arg)
		{
			global::FrooxEngine.User user = DetectingUser.Evaluate(context);
			if (user != null && user.IsLocalUser)
			{
				OnSpaceLinked.Execute(context);
			}
		}

		private void HandleUnlinked(FrooxEngineContext context, object arg)
		{
			global::FrooxEngine.User user = DetectingUser.Evaluate(context);
			if (user != null && user.IsLocalUser)
			{
				OnSpaceUnlinked.Execute(context);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("DynVar Input", false)]
	[NodeOverload("Engine.DynamicVariables.Input")]
	public class DynamicVariableValueInput<T> : DynamicVariableInput<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueOutput<T> Value
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> HasValue
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HasValue"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HasValue", value);
			}
		}

		protected override IOutput ValueOutput => Value;

		protected override IOutput HasValueOutput => HasValue;

		protected override void UpdateValue(T value, bool hasValue, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateValue", value, hasValue, context);
		}

		public DynamicVariableValueInput()
		{
			((DynamicVariableValueInput<>)(object)this).Value = new ValueOutput<T>(this);
			((DynamicVariableValueInput<>)(object)this).HasValue = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicVariableValueInput(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("DynVar Input", false)]
	[NodeOverload("Engine.DynamicVariables.Input")]
	public class DynamicVariableObjectInput<T> : DynamicVariableInput<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectOutput<T> Value
		{
			get
			{
				return (ObjectOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> HasValue
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HasValue"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HasValue", value);
			}
		}

		protected override IOutput ValueOutput => Value;

		protected override IOutput HasValueOutput => HasValue;

		protected override void UpdateValue(T value, bool hasValue, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateValue", value, hasValue, context);
		}

		public DynamicVariableObjectInput()
		{
			((DynamicVariableObjectInput<>)(object)this).Value = new ObjectOutput<T>(this);
			((DynamicVariableObjectInput<>)(object)this).HasValue = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicVariableObjectInput(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("DynVar Input with Events", false)]
	[NodeOverload("Engine.DynamicVariables.InputWithEvents")]
	public class DynamicVariableValueInputWithEvents<T> : DynamicVariableInputWithEvents<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueOutput<T> Value
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> HasValue
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HasValue"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HasValue", value);
			}
		}

		protected override IOutput ValueOutput => Value;

		protected override IOutput HasValueOutput => HasValue;

		protected override void UpdateValue(T value, bool hasValue, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateValue", value, hasValue, context);
		}

		public DynamicVariableValueInputWithEvents()
		{
			((DynamicVariableValueInputWithEvents<>)(object)this).Value = new ValueOutput<T>(this);
			((DynamicVariableValueInputWithEvents<>)(object)this).HasValue = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicVariableValueInputWithEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("DynVar Input with Events", false)]
	[NodeOverload("Engine.DynamicVariables.InputWithEvents")]
	public class DynamicVariableObjectInputWithEvents<T> : DynamicVariableInputWithEvents<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectOutput<T> Value
		{
			get
			{
				return (ObjectOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> HasValue
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HasValue"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HasValue", value);
			}
		}

		protected override IOutput ValueOutput => Value;

		protected override IOutput HasValueOutput => HasValue;

		protected override void UpdateValue(T value, bool hasValue, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateValue", value, hasValue, context);
		}

		public DynamicVariableObjectInputWithEvents()
		{
			((DynamicVariableObjectInputWithEvents<>)(object)this).Value = new ObjectOutput<T>(this);
			((DynamicVariableObjectInputWithEvents<>)(object)this).HasValue = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicVariableObjectInputWithEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Variables/Dynamic")]
	[NodeName("Read DynVar", false)]
	[NodeOverload("Engine.DynamicVariables.Read")]
	public abstract class ReadDynamicVariable<T> : VoidNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Source;

		public ObjectArgument<string> Path;

		[ContinuouslyChanging]
		public readonly ValueOutput<bool> FoundValue;

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			Slot slot = ((Source.Source != null) ? 0.ReadObject<Slot>(context) : context.GetRootSlotContainer(this));
			if (slot == null)
			{
				SetNotFound(context);
				return;
			}
			DynamicVariableHelper.ParsePath(1.ReadObject<string>(context), out string spaceName, out string variableName);
			if (string.IsNullOrEmpty(variableName))
			{
				SetNotFound(context);
				return;
			}
			DynamicVariableSpace dynamicVariableSpace = slot.FindSpace(spaceName);
			T value;
			if (dynamicVariableSpace == null)
			{
				SetNotFound(context);
			}
			else if (dynamicVariableSpace.TryReadValue<T>(variableName, out value))
			{
				FoundValue.Write(value: true, context);
				SetValue(value, context);
			}
			else
			{
				SetNotFound(context);
			}
		}

		protected void SetNotFound(FrooxEngineContext context)
		{
			FoundValue.Write(value: false, context);
			SetValue(Coder<T>.Default, context);
		}

		protected abstract void SetValue(T value, FrooxEngineContext context);

		protected ReadDynamicVariable()
		{
			((ReadDynamicVariable<>)(object)this).FoundValue = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class ReadDynamicValueVariable<T> : ReadDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueOutput<T> Value
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override void SetValue(T value, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "SetValue", value, context);
		}

		public ReadDynamicValueVariable()
		{
			((ReadDynamicValueVariable<>)(object)this).Value = new ValueOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReadDynamicValueVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ReadDynamicObjectVariable<T> : ReadDynamicVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectOutput<T> Value
		{
			get
			{
				return (ObjectOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override void SetValue(T value, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "SetValue", value, context);
		}

		public ReadDynamicObjectVariable()
		{
			((ReadDynamicObjectVariable<>)(object)this).Value = new ObjectOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReadDynamicObjectVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Components
{
	[NodeCategory("Components")]
	public class GetComponentEnabled : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.IComponent> Component
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.IComponent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Component"), typeof(ObjectArgument<global::FrooxEngine.IComponent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Component", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetComponentEnabled(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Components")]
	public class SetComponentEnabled : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.IComponent> Component
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.IComponent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Component"), typeof(ObjectInput<global::FrooxEngine.IComponent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Component", value);
			}
		}

		public ValueInput<bool> State
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "State"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "State", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetComponentEnabled(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Cloud
{
	[NodeCategory("Variables/Cloud")]
	public abstract class CloudVariableRequest<T> : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Path;

		public ObjectInput<string> VariableOwnerId;

		public AsyncCall OnRequest;

		public Continuation OnDone;

		public Continuation OnFail;

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			string path = Path.Evaluate(context);
			if (!CloudVariableHelper.IsValidPath(path))
			{
				return OnFail.Target;
			}
			string text = VariableOwnerId.Evaluate(context, context.LocalUser?.UserID);
			OwnerType ownerType = IdUtil.GetOwnerType(text);
			if (ownerType != OwnerType.User && ownerType != OwnerType.Group)
			{
				return OnFail.Target;
			}
			CloudVariableProxy proxy = context.Cloud.Variables.RequestProxy(text, path);
			Task refreshTask = proxy.Refresh();
			await OnRequest.ExecuteAsync(context);
			await refreshTask;
			if (proxy.State == CloudVariableState.Invalid || proxy.State == CloudVariableState.Unregistered)
			{
				return OnFail.Target;
			}
			if (Process(proxy, context))
			{
				return OnDone.Target;
			}
			return OnFail.Target;
		}

		protected abstract bool Process(CloudVariableProxy proxy, FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Read Cloud Variable", false)]
	[NodeOverload("Engine.Cloud.ReadCloudVariable")]
	public abstract class ReadCloudVariable<T> : CloudVariableRequest<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Process(CloudVariableProxy proxy, FrooxEngineContext context)
		{
			if (!proxy.PublicRead && !context.World.IsUserspace())
			{
				return false;
			}
			SetValue(proxy.ReadValue<T>(), context);
			return true;
		}

		protected abstract void SetValue(T value, FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class ReadValueCloudVariable<T> : ReadCloudVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueOutput<T> Value
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override void SetValue(T value, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "SetValue", value, context);
		}

		public ReadValueCloudVariable()
		{
			((ReadValueCloudVariable<>)(object)this).Value = new ValueOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReadValueCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ReadObjectCloudVariable<T> : ReadCloudVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectOutput<T> Value
		{
			get
			{
				return (ObjectOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override void SetValue(T value, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "SetValue", value, context);
		}

		public ReadObjectCloudVariable()
		{
			((ReadObjectCloudVariable<>)(object)this).Value = new ObjectOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReadObjectCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Write Cloud Variable", false)]
	[NodeOverload("Engine.Cloud.WriteCloudVariable")]
	public abstract class WriteCloudVariable<T> : CloudVariableRequest<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Process(CloudVariableProxy proxy, FrooxEngineContext context)
		{
			if (!proxy.PublicWrite && !context.World.IsUserspace())
			{
				return false;
			}
			return proxy.SetValue(GetValueToWrite(context));
		}

		protected abstract T GetValueToWrite(FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class WriteValueCloudVariable<T> : WriteCloudVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override T GetValueToWrite(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetValueToWrite", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WriteValueCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class WriteObjectCloudVariable<T> : WriteCloudVariable<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override T GetValueToWrite(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetValueToWrite", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WriteObjectCloudVariable(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Cloud.Twitch
{
	[NodeCategory("Network/Twitch")]
	public abstract class TwitchEventsNode : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly GlobalRef<TwitchInterface> Interface;

		private ObjectStore<TwitchInterface> _current;

		public override bool CanBeEvaluated => false;

		private void OnInterfaceChanged(TwitchInterface twitch, FrooxEngineContext context)
		{
			TwitchInterface twitchInterface = _current.Read(context);
			if (twitchInterface != twitch)
			{
				if (twitchInterface != null)
				{
					Unregister(twitchInterface, context);
				}
				if (twitch != null)
				{
					NodeContextPath path = context.CaptureContextPath();
					context.GetEventDispatcher(out ExecutionEventDispatcher<FrooxEngineContext> eventDispatcher);
					Register(twitch, path, eventDispatcher, context);
					_current.Write(twitch, context);
				}
				else
				{
					_current.Clear(context);
					Clear(context);
				}
			}
		}

		protected abstract void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context);

		protected abstract void Unregister(TwitchInterface twitch, FrooxEngineContext context);

		protected abstract void Clear(FrooxEngineContext context);

		protected TwitchEventsNode()
		{
			Interface = new GlobalRef<TwitchInterface>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class TwitchChatMessageEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnMessage
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnMessage"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnMessage", value);
			}
		}

		public ObjectOutput<string> Message
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Message"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Message", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserId"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DisplayName"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DisplayName", value);
			}
		}

		public ValueOutput<colorX> Color
		{
			get
			{
				return (ValueOutput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueOutput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueOutput<bool> IsHighlighted
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsHighlighted"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsHighlighted", value);
			}
		}

		public ValueOutput<bool> IsSubscriber
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsSubscriber"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsSubscriber", value);
			}
		}

		public ValueOutput<bool> IsModerator
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsModerator"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsModerator", value);
			}
		}

		public ValueOutput<bool> IsBroadcaster
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsBroadcaster"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsBroadcaster", value);
			}
		}

		public ValueOutput<bool> IsTurbo
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsTurbo"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsTurbo", value);
			}
		}

		public ValueOutput<bool> IsVIP
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsVIP"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsVIP", value);
			}
		}

		public ValueOutput<BadgeColor> CheerBadge
		{
			get
			{
				return (ValueOutput<BadgeColor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CheerBadge"), typeof(ValueOutput<BadgeColor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CheerBadge", value);
			}
		}

		public ValueOutput<int> CheerAmount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CheerAmount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CheerAmount", value);
			}
		}

		public ValueOutput<int> Bits
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bits"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bits", value);
			}
		}

		public ValueOutput<double> BitsDollars
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BitsDollars"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BitsDollars", value);
			}
		}

		public ValueOutput<int> SubscribedMonthCount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SubscribedMonthCount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SubscribedMonthCount", value);
			}
		}

		public ObjectOutput<string> CustomRewardId
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CustomRewardId"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CustomRewardId", value);
			}
		}

		private ObjectStore<Action<OnMessageReceivedArgs>> _handler
		{
			get
			{
				return (ObjectStore<Action<OnMessageReceivedArgs>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handler"), typeof(ObjectStore<Action<OnMessageReceivedArgs>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handler", value);
			}
		}

		protected override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", twitch, path, dispatcher, context);
		}

		protected override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", twitch, context);
		}

		protected override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", context);
		}

		private void HandleEvent(OnMessageReceivedArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleEvent", args, context);
		}

		public TwitchChatMessageEvent()
		{
			Message = new ObjectOutput<string>(this);
			UserId = new ObjectOutput<string>(this);
			DisplayName = new ObjectOutput<string>(this);
			Color = new ValueOutput<colorX>(this);
			IsHighlighted = new ValueOutput<bool>(this);
			IsSubscriber = new ValueOutput<bool>(this);
			IsModerator = new ValueOutput<bool>(this);
			IsBroadcaster = new ValueOutput<bool>(this);
			IsTurbo = new ValueOutput<bool>(this);
			IsVIP = new ValueOutput<bool>(this);
			CheerBadge = new ValueOutput<BadgeColor>(this);
			CheerAmount = new ValueOutput<int>(this);
			Bits = new ValueOutput<int>(this);
			BitsDollars = new ValueOutput<double>(this);
			SubscribedMonthCount = new ValueOutput<int>(this);
			CustomRewardId = new ObjectOutput<string>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TwitchChatMessageEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TwitchSubscriptionEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnSubscription
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSubscription"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSubscription", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserId"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DisplayName"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DisplayName", value);
			}
		}

		public ObjectOutput<string> Message
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Message"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Message", value);
			}
		}

		public ValueOutput<int> Months
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Months"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Months", value);
			}
		}

		public ValueOutput<SubscriptionPlan> Plan
		{
			get
			{
				return (ValueOutput<SubscriptionPlan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Plan"), typeof(ValueOutput<SubscriptionPlan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Plan", value);
			}
		}

		public ValueOutput<bool> IsResub
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsResub"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsResub", value);
			}
		}

		public ValueOutput<bool> IsGifted
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsGifted"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsGifted", value);
			}
		}

		public ObjectOutput<string> GiftedBy
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GiftedBy"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GiftedBy", value);
			}
		}

		public ValueOutput<bool> IsAnonymous
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsAnonymous"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsAnonymous", value);
			}
		}

		private ObjectStore<Action<OnNewSubscriberArgs>> _newSub
		{
			get
			{
				return (ObjectStore<Action<OnNewSubscriberArgs>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_newSub"), typeof(ObjectStore<Action<OnNewSubscriberArgs>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_newSub", value);
			}
		}

		private ObjectStore<Action<OnReSubscriberArgs>> _reSub
		{
			get
			{
				return (ObjectStore<Action<OnReSubscriberArgs>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_reSub"), typeof(ObjectStore<Action<OnReSubscriberArgs>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_reSub", value);
			}
		}

		private ObjectStore<Action<OnGiftedSubscriptionArgs>> _gifted
		{
			get
			{
				return (ObjectStore<Action<OnGiftedSubscriptionArgs>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_gifted"), typeof(ObjectStore<Action<OnGiftedSubscriptionArgs>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_gifted", value);
			}
		}

		protected override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", twitch, path, dispatcher, context);
		}

		protected override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", twitch, context);
		}

		protected override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", context);
		}

		private void OnNew(OnNewSubscriberArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnNew", args, context);
		}

		private void OnResub(OnReSubscriberArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnResub", args, context);
		}

		private void OnGifted(OnGiftedSubscriptionArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnGifted", args, context);
		}

		private void SendEvent(SubscriberBase args, int months, bool isResub, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "SendEvent", args, months, isResub, context);
		}

		public TwitchSubscriptionEvent()
		{
			UserId = new ObjectOutput<string>(this);
			DisplayName = new ObjectOutput<string>(this);
			Message = new ObjectOutput<string>(this);
			Months = new ValueOutput<int>(this);
			Plan = new ValueOutput<SubscriptionPlan>(this);
			IsResub = new ValueOutput<bool>(this);
			IsGifted = new ValueOutput<bool>(this);
			GiftedBy = new ObjectOutput<string>(this);
			IsAnonymous = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TwitchSubscriptionEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TwitchFollowEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnFollow
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFollow"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFollow", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserId"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DisplayName"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DisplayName", value);
			}
		}

		private ObjectStore<Action<OnFollowArgs>> _handler
		{
			get
			{
				return (ObjectStore<Action<OnFollowArgs>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handler"), typeof(ObjectStore<Action<OnFollowArgs>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handler", value);
			}
		}

		protected override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", twitch, path, dispatcher, context);
		}

		protected override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", twitch, context);
		}

		protected override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", context);
		}

		private void Follow(OnFollowArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Follow", args, context);
		}

		public TwitchFollowEvent()
		{
			UserId = new ObjectOutput<string>(this);
			DisplayName = new ObjectOutput<string>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TwitchFollowEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TwitchRewardRedeemEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnRedeem
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnRedeem"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnRedeem", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DisplayName"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DisplayName", value);
			}
		}

		public ObjectOutput<string> Message
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Message"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Message", value);
			}
		}

		public ValueOutput<DateTime> TimeStamp
		{
			get
			{
				return (ValueOutput<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TimeStamp"), typeof(ValueOutput<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TimeStamp", value);
			}
		}

		public ObjectOutput<string> RewardId
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RewardId"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RewardId", value);
			}
		}

		public ObjectOutput<string> RewardTitle
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RewardTitle"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RewardTitle", value);
			}
		}

		public ObjectOutput<string> RewardPrompt
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RewardPrompt"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RewardPrompt", value);
			}
		}

		public ObjectOutput<string> Status
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Status"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Status", value);
			}
		}

		public ValueOutput<int> RewardCost
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RewardCost"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RewardCost", value);
			}
		}

		private ObjectStore<Action<OnRewardRedeemedArgs>> _handler
		{
			get
			{
				return (ObjectStore<Action<OnRewardRedeemedArgs>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handler"), typeof(ObjectStore<Action<OnRewardRedeemedArgs>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handler", value);
			}
		}

		protected override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", twitch, path, dispatcher, context);
		}

		protected override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", twitch, context);
		}

		protected override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", context);
		}

		private void Redeem(OnRewardRedeemedArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Redeem", args, context);
		}

		public TwitchRewardRedeemEvent()
		{
			DisplayName = new ObjectOutput<string>(this);
			Message = new ObjectOutput<string>(this);
			TimeStamp = new ValueOutput<DateTime>(this);
			RewardId = new ObjectOutput<string>(this);
			RewardTitle = new ObjectOutput<string>(this);
			RewardPrompt = new ObjectOutput<string>(this);
			Status = new ObjectOutput<string>(this);
			RewardCost = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TwitchRewardRedeemEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TwitchRaidEvent : TwitchEventsNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnRaid
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnRaid"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnRaid", value);
			}
		}

		public ObjectOutput<string> UserId
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UserId"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UserId", value);
			}
		}

		public ObjectOutput<string> DisplayName
		{
			get
			{
				return (ObjectOutput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DisplayName"), typeof(ObjectOutput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DisplayName", value);
			}
		}

		public ValueOutput<colorX> Color
		{
			get
			{
				return (ValueOutput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueOutput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueOutput<int> ViewerCount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ViewerCount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ViewerCount", value);
			}
		}

		public ValueOutput<bool> IsSubscriber
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsSubscriber"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsSubscriber", value);
			}
		}

		private ObjectStore<Action<OnRaidNotificationArgs>> _handler
		{
			get
			{
				return (ObjectStore<Action<OnRaidNotificationArgs>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handler"), typeof(ObjectStore<Action<OnRaidNotificationArgs>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handler", value);
			}
		}

		protected override void Register(TwitchInterface twitch, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", twitch, path, dispatcher, context);
		}

		protected override void Unregister(TwitchInterface twitch, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", twitch, context);
		}

		protected override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", context);
		}

		private void Raid(OnRaidNotificationArgs args, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Raid", args, context);
		}

		public TwitchRaidEvent()
		{
			UserId = new ObjectOutput<string>(this);
			DisplayName = new ObjectOutput<string>(this);
			Color = new ValueOutput<colorX>(this);
			ViewerCount = new ValueOutput<int>(this);
			IsSubscriber = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TwitchRaidEvent(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Locomotion
{
	[NodeCategory("Locomotion")]
	[ContinuouslyChanging]
	public class GetActiveLocomotionModule : ObjectFunctionNode<FrooxEngineContext, ILocomotionModule>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override ILocomotionModule Compute(FrooxEngineContext context)
		{
			return (ILocomotionModule)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ILocomotionModule));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetActiveLocomotionModule(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Locomotion")]
	public class InstallLocomotionModules : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> ModulesRoot
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ModulesRoot"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ModulesRoot", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> TargetUser
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TargetUser"), typeof(ObjectInput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TargetUser", value);
			}
		}

		public ValueInput<bool> ClearExisting
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ClearExisting"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ClearExisting", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InstallLocomotionModules(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Locomotion")]
	public class SwitchLocomotionModule : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> TargetUser
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TargetUser"), typeof(ObjectInput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TargetUser", value);
			}
		}

		public ObjectInput<string> ModuleName
		{
			get
			{
				return (ObjectInput<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ModuleName"), typeof(ObjectInput<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ModuleName", value);
			}
		}

		public ValueInput<bool> ExactMatch
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ExactMatch"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ExactMatch", value);
			}
		}

		public Continuation OnSwitched
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnSwitched"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnSwitched", value);
			}
		}

		public Continuation OnNotFound
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnNotFound"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnNotFound", value);
			}
		}

		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SwitchLocomotionModule(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Locomotion")]
	public class GetLocomotionArchetype : ObjectFunctionNode<FrooxEngineContext, LocomotionArchetype?>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<ILocomotionModule> Module
		{
			get
			{
				return (ObjectArgument<ILocomotionModule>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Module"), typeof(ObjectArgument<ILocomotionModule>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Module", value);
			}
		}

		protected override LocomotionArchetype? Compute(FrooxEngineContext context)
		{
			return (LocomotionArchetype?)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(LocomotionArchetype?));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetLocomotionArchetype(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Locomotion")]
	public class FootstepEvents : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlobalRef<IFootstepEventRelay> Source
		{
			get
			{
				return (GlobalRef<IFootstepEventRelay>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Source"), typeof(GlobalRef<IFootstepEventRelay>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Source", value);
			}
		}

		public Call Footstep
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Footstep"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Footstep", value);
			}
		}

		public ValueOutput<Chirality> Side
		{
			get
			{
				return (ValueOutput<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Side"), typeof(ValueOutput<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Side", value);
			}
		}

		public ValueOutput<float3> Position
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueOutput<floatQ> Rotation
		{
			get
			{
				return (ValueOutput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueOutput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public ValueOutput<float3> ImpactVelocity
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ImpactVelocity"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ImpactVelocity", value);
			}
		}

		public ValueOutput<bool> HasLanded
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HasLanded"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HasLanded", value);
			}
		}

		public ObjectOutput<ICollider> HitCollider
		{
			get
			{
				return (ObjectOutput<ICollider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitCollider"), typeof(ObjectOutput<ICollider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitCollider", value);
			}
		}

		public ValueOutput<int> HitTriangleIndex
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HitTriangleIndex"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HitTriangleIndex", value);
			}
		}

		private ObjectStore<IFootstepEventRelay> _currentRelay
		{
			get
			{
				return (ObjectStore<IFootstepEventRelay>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_currentRelay"), typeof(ObjectStore<IFootstepEventRelay>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_currentRelay", value);
			}
		}

		private ObjectStore<FootstepEventHandler> _eventHandler
		{
			get
			{
				return (ObjectStore<FootstepEventHandler>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_eventHandler"), typeof(ObjectStore<FootstepEventHandler>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_eventHandler", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private void OnSourceChanged(IFootstepEventRelay relay, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnSourceChanged", relay, context);
		}

		private void OnFootstep(Chirality side, float3 position, floatQ rotation, float3 impactVelocity, bool hasLanded, RaycastHit hit, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnFootstep", side, position, rotation, impactVelocity, hasLanded, hit, context);
		}

		public FootstepEvents()
		{
			Source = new GlobalRef<IFootstepEventRelay>(this, 0);
			Side = new ValueOutput<Chirality>(this);
			Position = new ValueOutput<float3>(this);
			Rotation = new ValueOutput<floatQ>(this);
			ImpactVelocity = new ValueOutput<float3>(this);
			HasLanded = new ValueOutput<bool>(this);
			HitCollider = new ObjectOutput<ICollider>(this);
			HitTriangleIndex = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FootstepEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Avatar
{
	[NodeCategory("Avatars")]
	public class EquipAvatar : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		public ObjectInput<Slot> AvatarRoot
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "AvatarRoot"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "AvatarRoot", value);
			}
		}

		public ValueInput<bool> DestroyOld
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DestroyOld"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DestroyOld", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EquipAvatar(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars/Body Nodes")]
	public class BodyNodeSlot : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> Source
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Source"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Source", value);
			}
		}

		public ValueArgument<BodyNode> Node
		{
			get
			{
				return (ValueArgument<BodyNode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Node"), typeof(ValueArgument<BodyNode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Node", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BodyNodeSlot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars/Body Nodes")]
	public class BodyNodeSlotInChildren : ObjectFunctionNode<FrooxEngineContext, Slot>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Slot> Source
		{
			get
			{
				return (ObjectArgument<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Source"), typeof(ObjectArgument<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Source", value);
			}
		}

		public ValueArgument<BodyNode> Node
		{
			get
			{
				return (ValueArgument<BodyNode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Node"), typeof(ValueArgument<BodyNode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Node", value);
			}
		}

		protected override Slot Compute(FrooxEngineContext context)
		{
			return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Slot));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BodyNodeSlotInChildren(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars")]
	[ContinuouslyChanging]
	public class UserFingerPoseSource : ObjectFunctionNode<FrooxEngineContext, IFingerPoseSourceComponent>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override IFingerPoseSourceComponent Compute(FrooxEngineContext context)
		{
			return (IFingerPoseSourceComponent)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(IFingerPoseSourceComponent));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UserFingerPoseSource(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars")]
	[ContinuouslyChanging]
	public class FingerPose : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IFingerPoseSourceComponent> PoseSource
		{
			get
			{
				return (ObjectArgument<IFingerPoseSourceComponent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PoseSource"), typeof(ObjectArgument<IFingerPoseSourceComponent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PoseSource", value);
			}
		}

		public ValueArgument<BodyNode> FingerNode
		{
			get
			{
				return (ValueArgument<BodyNode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FingerNode"), typeof(ValueArgument<BodyNode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FingerNode", value);
			}
		}

		public ValueOutput<float3> Position
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueOutput<floatQ> Rotation
		{
			get
			{
				return (ValueOutput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueOutput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public FingerPose()
		{
			Position = new ValueOutput<float3>(this);
			Rotation = new ValueOutput<floatQ>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FingerPose(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public interface INearestData : ResoniteBridge.ResoniteBridgeValueHolder
	{
		float Distance { get; set; }

		global::FrooxEngine.User User { get; set; }

		Slot Slot { get; set; }
	}
	[NodeCategory("Avatars")]
	public abstract class NearestUserNode<D> : VoidNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder where D : struct, INearestData
	{
		public ObjectInput<Slot> Reference;

		public ObjectInput<global::FrooxEngine.User> IgnoreUser;

		public ValueInput<bool> IgnoreAFK;

		[ContinuouslyChanging]
		public readonly ObjectOutput<Slot> Slot;

		[ContinuouslyChanging]
		public readonly ObjectOutput<global::FrooxEngine.User> User;

		[ContinuouslyChanging]
		public readonly ValueOutput<float> Distance;

		private ValueStore<int> _cachedFrame;

		private ObjectStore<Slot> _slot;

		private ObjectStore<global::FrooxEngine.User> _user;

		private ValueStore<float> _distance;

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ref int reference = ref _cachedFrame.Access(context);
			if (reference != context.Time.LocalUpdateIndex)
			{
				ComputeData(context);
				reference = context.Time.LocalUpdateIndex;
			}
			Slot.Write(_slot.Read(context), context);
			User.Write(_user.Read(context), context);
			Distance.Write(_distance.Read(context), context);
			WriteOutputs(context);
		}

		private void ComputeData(FrooxEngineContext context)
		{
			Slot obj = Reference.Evaluate(context).FilterWorldElement() ?? context.GetRootSlotContainer(this);
			global::FrooxEngine.User user = IgnoreUser.Evaluate(context);
			bool flag = IgnoreAFK.Evaluate(context, defaultValue: false);
			D nearest = new D
			{
				Distance = float.MaxValue
			};
			Initialize(ref nearest, context);
			float3 referencePos = obj.GlobalPosition;
			foreach (global::FrooxEngine.User allUser in context.World.AllUsers)
			{
				if (allUser != user && (!flag || allUser.IsPresentInWorld))
				{
					UpdateNearest(allUser, in referencePos, ref nearest, context);
				}
			}
			_slot.Write(nearest.Slot, context);
			_user.Write(nearest.User, context);
			_distance.Write(nearest.Distance, context);
			StoreNearest(ref nearest, context);
		}

		protected abstract void Initialize(ref D nearest, FrooxEngineContext context);

		protected abstract void UpdateNearest(global::FrooxEngine.User user, in float3 referencePos, ref D nearest, FrooxEngineContext context);

		protected abstract void StoreNearest(ref D nearest, FrooxEngineContext context);

		protected abstract void WriteOutputs(FrooxEngineContext context);

		protected NearestUserNode()
		{
			((NearestUserNode<>)(object)this).Slot = new ObjectOutput<Slot>(this);
			((NearestUserNode<>)(object)this).User = new ObjectOutput<global::FrooxEngine.User>(this);
			((NearestUserNode<>)(object)this).Distance = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class NearestUserHead : NearestUserNode<NearestUserHead.Data>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public struct Data : INearestData, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public float Distance
			{
				get
				{
					return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Distance"), typeof(float));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Distance", value);
				}
			}

			public global::FrooxEngine.User User
			{
				get
				{
					return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "User"), typeof(global::FrooxEngine.User));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "User", value);
				}
			}

			public Slot Slot
			{
				get
				{
					return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Slot"), typeof(Slot));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Slot", value);
				}
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Data(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		protected override void Initialize(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Initialize", nearest, context);
		}

		protected override void UpdateNearest(global::FrooxEngine.User user, in float3 referencePos, ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateNearest", user, referencePos, nearest, context);
		}

		protected override void StoreNearest(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "StoreNearest", nearest, context);
		}

		protected override void WriteOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "WriteOutputs", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NearestUserHead(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class NearestUserHand : NearestUserNode<NearestUserHand.Data>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public struct Data : INearestData, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Chirality Chirality
			{
				get
				{
					return (Chirality)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Chirality"), typeof(Chirality));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Chirality", value);
				}
			}

			public bool GetLeft
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "GetLeft"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "GetLeft", value);
				}
			}

			public bool GetRight
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "GetRight"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "GetRight", value);
				}
			}

			public float Distance
			{
				get
				{
					return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Distance"), typeof(float));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Distance", value);
				}
			}

			public global::FrooxEngine.User User
			{
				get
				{
					return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "User"), typeof(global::FrooxEngine.User));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "User", value);
				}
			}

			public Slot Slot
			{
				get
				{
					return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Slot"), typeof(Slot));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Slot", value);
				}
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Data(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public ValueInput<bool> GetLeft
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GetLeft"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GetLeft", value);
			}
		}

		public ValueInput<bool> GetRight
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GetRight"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GetRight", value);
			}
		}

		public ValueOutput<Chirality> Chirality
		{
			get
			{
				return (ValueOutput<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Chirality"), typeof(ValueOutput<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Chirality", value);
			}
		}

		private ValueStore<Chirality> _chirality
		{
			get
			{
				return (ValueStore<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_chirality"), typeof(ValueStore<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_chirality", value);
			}
		}

		protected override void Initialize(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Initialize", nearest, context);
		}

		protected override void UpdateNearest(global::FrooxEngine.User user, in float3 referencePos, ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateNearest", user, referencePos, nearest, context);
		}

		protected override void StoreNearest(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "StoreNearest", nearest, context);
		}

		protected override void WriteOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "WriteOutputs", context);
		}

		public NearestUserHand()
		{
			Chirality = new ValueOutput<Chirality>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NearestUserHand(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class NearestUserFoot : NearestUserNode<NearestUserFoot.Data>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public struct Data : INearestData, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Chirality Chirality
			{
				get
				{
					return (Chirality)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Chirality"), typeof(Chirality));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Chirality", value);
				}
			}

			public bool GetLeft
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "GetLeft"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "GetLeft", value);
				}
			}

			public bool GetRight
			{
				get
				{
					return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "GetRight"), typeof(bool));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "GetRight", value);
				}
			}

			public float Distance
			{
				get
				{
					return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Distance"), typeof(float));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Distance", value);
				}
			}

			public global::FrooxEngine.User User
			{
				get
				{
					return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "User"), typeof(global::FrooxEngine.User));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "User", value);
				}
			}

			public Slot Slot
			{
				get
				{
					return (Slot)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Slot"), typeof(Slot));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Slot", value);
				}
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Data(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public ValueInput<bool> GetLeft
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GetLeft"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GetLeft", value);
			}
		}

		public ValueInput<bool> GetRight
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GetRight"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GetRight", value);
			}
		}

		public ValueOutput<Chirality> Chirality
		{
			get
			{
				return (ValueOutput<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Chirality"), typeof(ValueOutput<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Chirality", value);
			}
		}

		private ValueStore<Chirality> _chirality
		{
			get
			{
				return (ValueStore<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_chirality"), typeof(ValueStore<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_chirality", value);
			}
		}

		protected override void Initialize(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Initialize", nearest, context);
		}

		protected override void UpdateNearest(global::FrooxEngine.User user, in float3 referencePos, ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateNearest", user, referencePos, nearest, context);
		}

		protected override void StoreNearest(ref Data nearest, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "StoreNearest", nearest, context);
		}

		protected override void WriteOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "WriteOutputs", context);
		}

		public NearestUserFoot()
		{
			Chirality = new ValueOutput<Chirality>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NearestUserFoot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars")]
	[NodeOverload("Engine.Avatars.DefaultUserScale")]
	public class DefaultUserScale : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DefaultUserScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars")]
	[NodeOverload("Engine.Avatars.DefaultUserScale")]
	public class DefaultUserRootScale : ValueFunctionNode<FrooxEngineContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<UserRoot> User
		{
			get
			{
				return (ObjectArgument<UserRoot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<UserRoot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override float Compute(FrooxEngineContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DefaultUserRootScale(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Avatar.BodyNodes
{
	[NodeCategory("Avatars/Body Nodes")]
	public abstract class BodyNodeConverter<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<BodyNode> Node;

		protected override T Compute(ExecutionContext context)
		{
			return Convert(0.ReadValue<BodyNode>(context), context);
		}

		protected virtual T Convert(BodyNode node)
		{
			throw new NotImplementedException();
		}

		protected virtual T Convert(BodyNode node, ExecutionContext context)
		{
			return Convert(node);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class BodyNodeChirality : BodyNodeConverter<Chirality>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override Chirality Convert(BodyNode node)
		{
			return (Chirality)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", node), typeof(Chirality));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BodyNodeChirality(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class RelativeBodyNode : BodyNodeConverter<BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override BodyNode Convert(BodyNode node)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", node), typeof(BodyNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RelativeBodyNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class FingerNodeIndex : BodyNodeConverter<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Convert(BodyNode node)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", node), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FingerNodeIndex(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsEye : BodyNodeConverter<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Convert(BodyNode node)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", node), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsEye(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class OtherSide : BodyNodeConverter<BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override BodyNode Convert(BodyNode node)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", node), typeof(BodyNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OtherSide(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class GetSide : BodyNodeConverter<BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Chirality> Side
		{
			get
			{
				return (ValueArgument<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Side"), typeof(ValueArgument<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Side", value);
			}
		}

		protected override BodyNode Convert(BodyNode node, ExecutionContext context)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", node, context), typeof(BodyNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetSide(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class GetFingerType : BodyNodeConverter<FingerType>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override FingerType Convert(BodyNode node)
		{
			return (FingerType)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", node), typeof(FingerType));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetFingerType(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class GetFingerSegmentType : BodyNodeConverter<FingerSegmentType>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override FingerSegmentType Convert(BodyNode node)
		{
			return (FingerSegmentType)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", node), typeof(FingerSegmentType));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetFingerSegmentType(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars/Body Nodes")]
	public class ComposeFinger : ValueFunctionNode<FrooxEngineContext, BodyNode>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<FingerType> Finger
		{
			get
			{
				return (ValueArgument<FingerType>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Finger"), typeof(ValueArgument<FingerType>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Finger", value);
			}
		}

		public ValueArgument<FingerSegmentType> Segment
		{
			get
			{
				return (ValueArgument<FingerSegmentType>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Segment"), typeof(ValueArgument<FingerSegmentType>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Segment", value);
			}
		}

		public ValueArgument<Chirality> Chirality
		{
			get
			{
				return (ValueArgument<Chirality>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Chirality"), typeof(ValueArgument<Chirality>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Chirality", value);
			}
		}

		protected override BodyNode Compute(FrooxEngineContext context)
		{
			return (BodyNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(BodyNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeFinger(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Avatar.Anchors
{
	[NodeCategory("Avatars/Anchors")]
	public abstract class AnchorEventsBase : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly GlobalRef<AvatarAnchor> Anchor;

		private ObjectStore<AvatarAnchor> _current;

		private ObjectStore<AvatarAnchorUserEvent> _anchored;

		private ObjectStore<AvatarAnchorUserEvent> _released;

		public override bool CanBeEvaluated => false;

		private void OnAnchorChanged(AvatarAnchor anchor, FrooxEngineContext context)
		{
			AvatarAnchor avatarAnchor = _current.Read(context);
			if (anchor == avatarAnchor)
			{
				return;
			}
			if (avatarAnchor != null)
			{
				avatarAnchor.LocalUserAnchored -= _anchored.Read(context);
				avatarAnchor.LocalUserReleased -= _released.Read(context);
				Unregister(avatarAnchor, context);
			}
			if (anchor != null)
			{
				NodeContextPath path = context.CaptureContextPath();
				context.GetEventDispatcher(out var dispatcher);
				AvatarAnchorUserEvent value = delegate(AvatarAnchor a, global::FrooxEngine.User u)
				{
					global::FrooxEngine.User u3 = u;
					dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
					{
						HandleAnchored(u3, c);
					});
				};
				AvatarAnchorUserEvent value2 = delegate(AvatarAnchor a, global::FrooxEngine.User u)
				{
					global::FrooxEngine.User u2 = u;
					dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
					{
						HandleReleased(u2, c);
					});
				};
				anchor.LocalUserAnchored += value;
				anchor.LocalUserReleased += value2;
				Register(anchor, path, dispatcher, context);
				_current.Write(anchor, context);
				_anchored.Write(value, context);
				_released.Write(value2, context);
			}
			else
			{
				_current.Clear(context);
				_anchored.Clear(context);
				_released.Clear(context);
				Clear(context);
			}
		}

		protected abstract void Register(AvatarAnchor anchor, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context);

		protected abstract void Unregister(AvatarAnchor anchor, FrooxEngineContext context);

		protected abstract void Clear(FrooxEngineContext context);

		protected abstract void HandleAnchored(global::FrooxEngine.User user, FrooxEngineContext context);

		protected abstract void HandleReleased(global::FrooxEngine.User user, FrooxEngineContext context);

		protected AnchorEventsBase()
		{
			Anchor = new GlobalRef<AvatarAnchor>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class AnchorEvents : AnchorEventsBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnAnchored
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnAnchored"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnAnchored", value);
			}
		}

		public Call OnReleased
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnReleased"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnReleased", value);
			}
		}

		public ObjectOutput<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectOutput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectOutput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override void Register(AvatarAnchor anchor, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", anchor, path, dispatcher, context);
		}

		protected override void Unregister(AvatarAnchor anchor, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", anchor, context);
		}

		protected override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", context);
		}

		protected override void HandleAnchored(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleAnchored", user, context);
		}

		protected override void HandleReleased(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleReleased", user, context);
		}

		public AnchorEvents()
		{
			User = new ObjectOutput<global::FrooxEngine.User>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AnchorEvents(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class AnchorLocomotionData : AnchorEventsBase, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnLocomotionUpdate
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnLocomotionUpdate"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnLocomotionUpdate", value);
			}
		}

		public ValueOutput<bool> HasPrimary
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HasPrimary"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HasPrimary", value);
			}
		}

		public ValueOutput<bool> HasSecondary
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HasSecondary"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HasSecondary", value);
			}
		}

		public ValueOutput<float2> PrimaryAxis
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PrimaryAxis"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PrimaryAxis", value);
			}
		}

		public ValueOutput<float2> SecondaryAxis
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SecondaryAxis"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SecondaryAxis", value);
			}
		}

		public ValueOutput<bool> PrimaryAction
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PrimaryAction"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PrimaryAction", value);
			}
		}

		public ValueOutput<bool> SecondaryAction
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SecondaryAction"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SecondaryAction", value);
			}
		}

		private ObjectStore<AvatarAnchorUserEvent> _userStay
		{
			get
			{
				return (ObjectStore<AvatarAnchorUserEvent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_userStay"), typeof(ObjectStore<AvatarAnchorUserEvent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_userStay", value);
			}
		}

		private ObjectStore<AnchorLocomotionInputs> _locomotionInputs
		{
			get
			{
				return (ObjectStore<AnchorLocomotionInputs>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_locomotionInputs"), typeof(ObjectStore<AnchorLocomotionInputs>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_locomotionInputs", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _handler
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handler"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handler", value);
			}
		}

		protected override void Register(AvatarAnchor anchor, NodeContextPath path, ExecutionEventDispatcher<FrooxEngineContext> dispatcher, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Register", anchor, path, dispatcher, context);
		}

		protected override void Unregister(AvatarAnchor anchor, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Unregister", anchor, context);
		}

		protected override void Clear(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Clear", context);
		}

		protected override void HandleAnchored(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleAnchored", user, context);
		}

		protected override void HandleReleased(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleReleased", user, context);
		}

		private void UnregisterInputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UnregisterInputs", context);
		}

		private void HandleStay(FrooxEngineContext context, object userObj)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleStay", context, userObj);
		}

		public AnchorLocomotionData()
		{
			HasPrimary = new ValueOutput<bool>(this);
			HasSecondary = new ValueOutput<bool>(this);
			PrimaryAxis = new ValueOutput<float2>(this);
			SecondaryAxis = new ValueOutput<float2>(this);
			PrimaryAction = new ValueOutput<bool>(this);
			SecondaryAction = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AnchorLocomotionData(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars/Anchors")]
	[ContinuouslyChanging]
	public class AnchoredUser : ObjectFunctionNode<FrooxEngineContext, global::FrooxEngine.User>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IAvatarAnchor> Anchor
		{
			get
			{
				return (ObjectArgument<IAvatarAnchor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Anchor"), typeof(ObjectArgument<IAvatarAnchor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Anchor", value);
			}
		}

		protected override global::FrooxEngine.User Compute(FrooxEngineContext context)
		{
			return (global::FrooxEngine.User)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(global::FrooxEngine.User));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AnchoredUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars/Anchors")]
	[ContinuouslyChanging]
	public class GetUserAnchor : ObjectFunctionNode<FrooxEngineContext, IAvatarAnchor>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override IAvatarAnchor Compute(FrooxEngineContext context)
		{
			return (IAvatarAnchor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(IAvatarAnchor));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetUserAnchor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars/Anchors")]
	[ContinuouslyChanging]
	public class IsUserAnchored : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUserAnchored(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars/Anchors")]
	[ContinuouslyChanging]
	public class IsAnchorOccupied : ValueFunctionNode<FrooxEngineContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<IAvatarAnchor> Anchor
		{
			get
			{
				return (ObjectArgument<IAvatarAnchor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Anchor"), typeof(ObjectArgument<IAvatarAnchor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Anchor", value);
			}
		}

		protected override bool Compute(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsAnchorOccupied(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars/Anchors")]
	public class AnchorUser : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IAvatarAnchor> Anchor
		{
			get
			{
				return (ObjectInput<IAvatarAnchor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Anchor"), typeof(ObjectInput<IAvatarAnchor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Anchor", value);
			}
		}

		public ObjectInput<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectInput<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectInput<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		public Continuation OnAnchored
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnAnchored"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnAnchored", value);
			}
		}

		public Continuation OnFailure
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFailure"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFailure", value);
			}
		}

		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AnchorUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Avatars/Anchors")]
	public class ReleaseUser : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IAvatarAnchor> Anchor
		{
			get
			{
				return (ObjectInput<IAvatarAnchor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Anchor"), typeof(ObjectInput<IAvatarAnchor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Anchor", value);
			}
		}

		public Continuation OnReleased
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnReleased"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnReleased", value);
			}
		}

		public Continuation OnFailure
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFailure"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFailure", value);
			}
		}

		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReleaseUser(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Audio
{
	[NodeCategory("Audio")]
	public class PlayOneShot : ActionNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IAssetProvider<AudioClip>> Clip
		{
			get
			{
				return (ObjectInput<IAssetProvider<AudioClip>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Clip"), typeof(ObjectInput<IAssetProvider<AudioClip>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Clip", value);
			}
		}

		public ValueInput<float> Volume
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Volume"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Volume", value);
			}
		}

		public ValueInput<float> Speed
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Speed"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Speed", value);
			}
		}

		public ValueInput<bool> Spatialize
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Spatialize"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Spatialize", value);
			}
		}

		public ValueInput<float> SpatialBlend
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SpatialBlend"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SpatialBlend", value);
			}
		}

		public ValueInput<float3> Point
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ObjectInput<Slot> Root
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Root"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Root", value);
			}
		}

		public ValueInput<bool> ParentUnderRoot
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ParentUnderRoot"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ParentUnderRoot", value);
			}
		}

		public ValueInput<int> Priority
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Priority"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Priority", value);
			}
		}

		public ValueInput<float> Doppler
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Doppler"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Doppler", value);
			}
		}

		public ValueInput<float> MinDistance
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MinDistance"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MinDistance", value);
			}
		}

		public ValueInput<float> MaxDistance
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MaxDistance"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MaxDistance", value);
			}
		}

		public ValueInput<AudioRolloffMode> Rolloff
		{
			get
			{
				return (ValueInput<AudioRolloffMode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rolloff"), typeof(ValueInput<AudioRolloffMode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rolloff", value);
			}
		}

		public ValueInput<AudioDistanceSpace> DistanceSpace
		{
			get
			{
				return (ValueInput<AudioDistanceSpace>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DistanceSpace"), typeof(ValueInput<AudioDistanceSpace>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DistanceSpace", value);
			}
		}

		public ValueInput<float> MinScale
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MinScale"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MinScale", value);
			}
		}

		public ValueInput<float> MaxScale
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MaxScale"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MaxScale", value);
			}
		}

		public ValueInput<AudioTypeGroup> Group
		{
			get
			{
				return (ValueInput<AudioTypeGroup>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Group"), typeof(ValueInput<AudioTypeGroup>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Group", value);
			}
		}

		public ValueInput<bool> LocalOnly
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalOnly"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalOnly", value);
			}
		}

		public ObjectOutput<AudioOutput> Audio
		{
			get
			{
				return (ObjectOutput<AudioOutput>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Audio"), typeof(ObjectOutput<AudioOutput>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Audio", value);
			}
		}

		public Continuation OnStartedPlaying
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnStartedPlaying"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnStartedPlaying", value);
			}
		}

		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		public PlayOneShot()
		{
			Audio = new ObjectOutput<AudioOutput>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PlayOneShot(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Audio")]
	public class PlayOneShotAndWait : AsyncActionNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<IAssetProvider<AudioClip>> Clip
		{
			get
			{
				return (ObjectInput<IAssetProvider<AudioClip>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Clip"), typeof(ObjectInput<IAssetProvider<AudioClip>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Clip", value);
			}
		}

		public ValueInput<float> Volume
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Volume"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Volume", value);
			}
		}

		public ValueInput<float> Speed
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Speed"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Speed", value);
			}
		}

		public ValueInput<bool> Spatialize
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Spatialize"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Spatialize", value);
			}
		}

		public ValueInput<float> SpatialBlend
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SpatialBlend"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SpatialBlend", value);
			}
		}

		public ValueInput<float3> Point
		{
			get
			{
				return (ValueInput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueInput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ObjectInput<Slot> Root
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Root"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Root", value);
			}
		}

		public ValueInput<bool> ParentUnderRoot
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ParentUnderRoot"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ParentUnderRoot", value);
			}
		}

		public ValueInput<int> Priority
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Priority"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Priority", value);
			}
		}

		public ValueInput<float> Doppler
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Doppler"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Doppler", value);
			}
		}

		public ValueInput<float> MinDistance
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MinDistance"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MinDistance", value);
			}
		}

		public ValueInput<float> MaxDistance
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MaxDistance"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MaxDistance", value);
			}
		}

		public ValueInput<AudioRolloffMode> Rolloff
		{
			get
			{
				return (ValueInput<AudioRolloffMode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rolloff"), typeof(ValueInput<AudioRolloffMode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rolloff", value);
			}
		}

		public ValueInput<AudioDistanceSpace> DistanceSpace
		{
			get
			{
				return (ValueInput<AudioDistanceSpace>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DistanceSpace"), typeof(ValueInput<AudioDistanceSpace>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DistanceSpace", value);
			}
		}

		public ValueInput<float> MinScale
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MinScale"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MinScale", value);
			}
		}

		public ValueInput<float> MaxScale
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MaxScale"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MaxScale", value);
			}
		}

		public ValueInput<AudioTypeGroup> Group
		{
			get
			{
				return (ValueInput<AudioTypeGroup>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Group"), typeof(ValueInput<AudioTypeGroup>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Group", value);
			}
		}

		public ValueInput<bool> LocalOnly
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LocalOnly"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LocalOnly", value);
			}
		}

		public ObjectOutput<AudioOutput> Audio
		{
			get
			{
				return (ObjectOutput<AudioOutput>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Audio"), typeof(ObjectOutput<AudioOutput>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Audio", value);
			}
		}

		public AsyncCall OnStartedPlaying
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnStartedPlaying"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnStartedPlaying", value);
			}
		}

		public Continuation OnFinishedPlaying
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFinishedPlaying"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFinishedPlaying", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public PlayOneShotAndWait()
		{
			Audio = new ObjectOutput<AudioOutput>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PlayOneShotAndWait(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async
{
	[NodeName("Updates Delay", false)]
	[NodeCategory("Flow/Async")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async.UpdatesDelay", null)]
	public class DelayUpdates : AsyncActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public AsyncCall OnTriggered
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTriggered"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTriggered", value);
			}
		}

		public ValueInput<int> Updates
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Updates"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Updates", value);
			}
		}

		protected virtual void BeforeUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "BeforeUpdate", context);
		}

		protected override async Task Do(FrooxEngineContext context)
		{
			return (Task)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(Task));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdates(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Updates Delay with Data", false)]
	[NodeOverload("Engine.UpdatesDelayWithData")]
	[NodeCategory("Flow/Async")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async.UpdatesDelayWithValue", null)]
	public class DelayUpdatesWithValue<T> : DelayUpdates, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<T> DelayedValue
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DelayedValue"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DelayedValue", value);
			}
		}

		protected override void BeforeUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "BeforeUpdate", context);
		}

		public DelayUpdatesWithValue()
		{
			((DelayUpdatesWithValue<>)(object)this).DelayedValue = new ValueOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Updates Delay with Data", false)]
	[NodeOverload("Engine.UpdatesDelayWithData")]
	[NodeCategory("Flow/Async")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Async.UpdatesDelayWithObject", null)]
	public class DelayUpdatesWithObject<T> : DelayUpdates, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ObjectOutput<T> DelayedValue
		{
			get
			{
				return (ObjectOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DelayedValue"), typeof(ObjectOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DelayedValue", value);
			}
		}

		protected override void BeforeUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "BeforeUpdate", context);
		}

		public DelayUpdatesWithObject()
		{
			((DelayUpdatesWithObject<>)(object)this).DelayedValue = new ObjectOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Async")]
	[NodeName("Updates or Time Delay", false)]
	[NodeOverload("Engine.UpdatesOrTimeDelay")]
	public abstract class DelayUpdatesOrTime : AsyncActionFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public AsyncCall OnTriggered;

		[ProtoFlux.Core.DefaultValue(1)]
		public ValueInput<int> Updates;

		protected virtual void BeforeDelay(FrooxEngineContext context)
		{
		}

		protected abstract TimeSpan GetDuration(FrooxEngineContext context);

		protected override async Task Do(FrooxEngineContext context)
		{
			TimeSpan duration = GetDuration(context);
			int updates2 = Updates.Evaluate(context, 1);
			int frameIndex = context.World.Time.LocalUpdateIndex;
			Task delayTask = Task.Delay(duration);
			BeforeDelay(context);
			await OnTriggered.ExecuteAsync(context);
			await delayTask;
			int localUpdateIndex = context.World.Time.LocalUpdateIndex;
			updates2 -= localUpdateIndex - frameIndex;
			if (updates2 > 0)
			{
				await new Updates(updates2);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class DelayUpdatesOrSecondsInt : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<int> Duration
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrSecondsInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayUpdatesOrSecondsFloat : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrSecondsFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayUpdatesOrSecondsDouble : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<double> Duration
		{
			get
			{
				return (ValueInput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrSecondsDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayUpdatesOrTimeSpan : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<TimeSpan> Duration
		{
			get
			{
				return (ValueInput<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Updates or Time Delay with Data", false)]
	[NodeOverload("Engine.UpdatesOrTimeDelayWithData")]
	public abstract class DelayUpdatesOrTimeWithValue<T> : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value;

		public readonly ValueOutput<T> DelayedValue;

		protected override void BeforeDelay(FrooxEngineContext context)
		{
			DelayedValue.Write(Value.Evaluate(context), context);
		}

		protected DelayUpdatesOrTimeWithValue()
		{
			((DelayUpdatesOrTimeWithValue<>)(object)this).DelayedValue = new ValueOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class DelayUpdatesOrTimeWithValueTimeSpan<T> : DelayUpdatesOrTimeWithValue<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<TimeSpan> Duration
		{
			get
			{
				return (ValueInput<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithValueTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayUpdatesOrTimeWithValueSecondsInt<T> : DelayUpdatesOrTimeWithValue<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<int> Duration
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithValueSecondsInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayUpdatesOrTimeWithValueSecondsFloat<T> : DelayUpdatesOrTimeWithValue<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithValueSecondsFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayUpdatesOrTimeWithValueSecondsDouble<T> : DelayUpdatesOrTimeWithValue<T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<double> Duration
		{
			get
			{
				return (ValueInput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithValueSecondsDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Updates or Time Delay with Data", false)]
	[NodeOverload("Engine.UpdatesOrTimeDelayWithData")]
	public abstract class DelayUpdatesOrTimeWithObject<T> : DelayUpdatesOrTime, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value;

		public readonly ObjectOutput<T> DelayedValue;

		protected override void BeforeDelay(FrooxEngineContext context)
		{
			DelayedValue.Write(Value.Evaluate(context), context);
		}

		protected DelayUpdatesOrTimeWithObject()
		{
			((DelayUpdatesOrTimeWithObject<>)(object)this).DelayedValue = new ObjectOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class DelayUpdatesOrTimeWithObjectTimeSpan<T> : DelayUpdatesOrTimeWithObject<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<TimeSpan> Duration
		{
			get
			{
				return (ValueInput<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithObjectTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayUpdatesOrTimeWithObjectSecondsInt<T> : DelayUpdatesOrTimeWithObject<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<int> Duration
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithObjectSecondsInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayUpdatesOrTimeWithObjectSecondsFloat<T> : DelayUpdatesOrTimeWithObject<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithObjectSecondsFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DelayUpdatesOrTimeWithObjectSecondsDouble<T> : DelayUpdatesOrTimeWithObject<T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<double> Duration
		{
			get
			{
				return (ValueInput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		protected override TimeSpan GetDuration(FrooxEngineContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetDuration", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DelayUpdatesOrTimeWithObjectSecondsDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Async")]
	public class StartAsyncTask : ActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public AsyncResumption TaskStart
		{
			get
			{
				return (AsyncResumption)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TaskStart"), typeof(AsyncResumption));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TaskStart", value);
			}
		}

		public Continuation OnStarted
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnStarted"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnStarted", value);
			}
		}

		public Continuation OnFailed
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFailed"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFailed", value);
			}
		}

		protected override IOperation Run(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StartAsyncTask(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Assets
{
	[NodeCategory("Assets")]
	public class SampleValueAnimationTrack<T> : ValueFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ObjectArgument<global::FrooxEngine.Animation> Animation
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.Animation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Animation"), typeof(ObjectArgument<global::FrooxEngine.Animation>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Animation", value);
			}
		}

		public ValueArgument<int> TrackIndex
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TrackIndex"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TrackIndex", value);
			}
		}

		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SampleValueAnimationTrack(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	public class SampleObjectAnimationTrack<T> : ObjectFunctionNode<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.Animation> Animation
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.Animation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Animation"), typeof(ObjectArgument<global::FrooxEngine.Animation>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Animation", value);
			}
		}

		public ValueArgument<int> TrackIndex
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TrackIndex"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TrackIndex", value);
			}
		}

		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override T Compute(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SampleObjectAnimationTrack(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	public class FindAnimationTrackIndex : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.Animation> Animation
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.Animation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Animation"), typeof(ObjectArgument<global::FrooxEngine.Animation>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Animation", value);
			}
		}

		public ObjectArgument<string> Node
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Node"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Node", value);
			}
		}

		public ObjectArgument<string> Property
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Property"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Property", value);
			}
		}

		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FindAnimationTrackIndex(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	[GenericTypes(GenericTypesAttribute.Group.Assets)]
	[NodeOverload("Engine.AssetLoadProgress")]
	public class AssetLoadProgress<A> : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where A : class, IAsset
	{
		public ObjectArgument<UsersAssetLoadProgress<A>> Tracker
		{
			get
			{
				return (ObjectArgument<UsersAssetLoadProgress<A>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tracker"), typeof(ObjectArgument<UsersAssetLoadProgress<A>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tracker", value);
			}
		}

		public ObjectArgument<global::FrooxEngine.User> User
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.User>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "User"), typeof(ObjectArgument<global::FrooxEngine.User>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "User", value);
			}
		}

		public ObjectOutput<float?> DownloadProgress
		{
			get
			{
				return (ObjectOutput<float?>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DownloadProgress"), typeof(ObjectOutput<float?>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DownloadProgress", value);
			}
		}

		public ValueOutput<AssetLoadState> LoadState
		{
			get
			{
				return (ValueOutput<AssetLoadState>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LoadState"), typeof(ValueOutput<AssetLoadState>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LoadState", value);
			}
		}

		public override bool CanBeEvaluated => true;

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public AssetLoadProgress()
		{
			((AssetLoadProgress<>)(object)this).DownloadProgress = new ObjectOutput<float?>(this);
			((AssetLoadProgress<>)(object)this).LoadState = new ValueOutput<AssetLoadState>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AssetLoadProgress(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	public class GetAsset<A> : ObjectFunctionNode<FrooxEngineContext, A>, ResoniteBridge.ResoniteBridgeValueHolder where A : class, IAsset
	{
		public ObjectArgument<IAssetProvider<A>> Provider
		{
			get
			{
				return (ObjectArgument<IAssetProvider<A>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Provider"), typeof(ObjectArgument<IAssetProvider<A>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Provider", value);
			}
		}

		protected override A Compute(FrooxEngineContext context)
		{
			return (A)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(A));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetAsset(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	public abstract class AttachAsset<A> : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where A : class, IAssetProvider
	{
		public ObjectInput<Uri> URL;

		public ObjectInput<Slot> Target;

		[ProtoFlux.Core.DefaultValue(true)]
		public ValueInput<bool> GetExisting;

		public readonly ObjectOutput<A> AttachedProvider;

		protected override bool Do(FrooxEngineContext context)
		{
			Slot slot = Target.Evaluate(context);
			if (slot == null || slot.IsRemoved)
			{
				return false;
			}
			Uri uri = URL.Evaluate(context);
			if (uri == null)
			{
				return false;
			}
			A value = Attach(slot, uri, GetExisting.Evaluate(context, defaultValue: true));
			AttachedProvider.Write(value, context);
			return true;
		}

		protected abstract A Attach(Slot root, Uri url, bool getExisting);

		protected AttachAsset()
		{
			((AttachAsset<>)(object)this).AttachedProvider = new ObjectOutput<A>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class AttachTexture2D : AttachAsset<StaticTexture2D>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override StaticTexture2D Attach(Slot root, Uri url, bool getExisting)
		{
			return (StaticTexture2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Attach", root, url, getExisting), typeof(StaticTexture2D));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AttachTexture2D(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class AttachSprite : AttachAsset<SpriteProvider>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override SpriteProvider Attach(Slot root, Uri url, bool getExisting)
		{
			return (SpriteProvider)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Attach", root, url, getExisting), typeof(SpriteProvider));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AttachSprite(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class AttachMesh : AttachAsset<StaticMesh>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override StaticMesh Attach(Slot root, Uri url, bool getExisting)
		{
			return (StaticMesh)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Attach", root, url, getExisting), typeof(StaticMesh));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AttachMesh(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class AttachAudioClip : AttachAsset<StaticAudioClip>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override StaticAudioClip Attach(Slot root, Uri url, bool getExisting)
		{
			return (StaticAudioClip)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Attach", root, url, getExisting), typeof(StaticAudioClip));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AttachAudioClip(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Localization")]
	public class FormatLocaleString : ObjectFunctionNode<FrooxEngineContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.LocaleResource> Locale
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.LocaleResource>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Locale"), typeof(ObjectArgument<global::FrooxEngine.LocaleResource>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Locale", value);
			}
		}

		public ObjectArgument<string> Key
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Key"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Key", value);
			}
		}

		protected override string Compute(FrooxEngineContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FormatLocaleString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Localization")]
	public class LocaleMessageCount : ValueFunctionNode<FrooxEngineContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<global::FrooxEngine.LocaleResource> Locale
		{
			get
			{
				return (ObjectArgument<global::FrooxEngine.LocaleResource>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Locale"), typeof(ObjectArgument<global::FrooxEngine.LocaleResource>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Locale", value);
			}
		}

		protected override int Compute(FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocaleMessageCount(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	public class BakeMeshes : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Slot> Root
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Root"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Root", value);
			}
		}

		public ValueInput<bool> SkinnedMeshMode
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SkinnedMeshMode"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SkinnedMeshMode", value);
			}
		}

		public ValueInput<bool> IncludeInactive
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IncludeInactive"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IncludeInactive", value);
			}
		}

		public ValueInput<bool> DestroyOriginal
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DestroyOriginal"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DestroyOriginal", value);
			}
		}

		public ObjectInput<Slot> AssetsSlot
		{
			get
			{
				return (ObjectInput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "AssetsSlot"), typeof(ObjectInput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "AssetsSlot", value);
			}
		}

		public ValueInput<ComponentHandling> GrabbableHandling
		{
			get
			{
				return (ValueInput<ComponentHandling>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "GrabbableHandling"), typeof(ValueInput<ComponentHandling>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "GrabbableHandling", value);
			}
		}

		public ValueInput<ComponentHandling> ColliderHandling
		{
			get
			{
				return (ValueInput<ComponentHandling>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ColliderHandling"), typeof(ValueInput<ComponentHandling>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ColliderHandling", value);
			}
		}

		public ValueInput<bool> Undoable
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Undoable"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Undoable", value);
			}
		}

		public ObjectOutput<Slot> BakedRoot
		{
			get
			{
				return (ObjectOutput<Slot>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BakedRoot"), typeof(ObjectOutput<Slot>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BakedRoot", value);
			}
		}

		public AsyncCall OnBakeStarted
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnBakeStarted"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnBakeStarted", value);
			}
		}

		public Continuation OnBaked
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnBaked"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnBaked", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		public BakeMeshes()
		{
			BakedRoot = new ObjectOutput<Slot>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BakeMeshes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Sample Texture 2D UV", false)]
	public class SampleTexture2D_UV : ValueFunctionNode<FrooxEngineContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture2D> Texture
		{
			get
			{
				return (ObjectArgument<Texture2D>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Texture"), typeof(ObjectArgument<Texture2D>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Texture", value);
			}
		}

		public ValueArgument<float2> UV
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UV"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UV", value);
			}
		}

		public ValueArgument<WrapMode> WrapMode
		{
			get
			{
				return (ValueArgument<WrapMode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "WrapMode"), typeof(ValueArgument<WrapMode>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "WrapMode", value);
			}
		}

		public static WrapMode WrapModeDefault => global::Elements.Assets.WrapMode.Repeat;

		protected override colorX Compute(FrooxEngineContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SampleTexture2D_UV(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Get Texture 2D Pixel", false)]
	public class GetTexture2D_Pixel : ValueFunctionNode<FrooxEngineContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture2D> Texture
		{
			get
			{
				return (ObjectArgument<Texture2D>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Texture"), typeof(ObjectArgument<Texture2D>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Texture", value);
			}
		}

		public ValueArgument<int2> Position
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueArgument<int> MipLevel
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MipLevel"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MipLevel", value);
			}
		}

		public static int2 PositionDefault => new int2(-1, -1);

		protected override colorX Compute(FrooxEngineContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetTexture2D_Pixel(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Texture 2D Format", false)]
	public class Texture2D_Format : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture2D> Texture
		{
			get
			{
				return (ObjectArgument<Texture2D>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Texture"), typeof(ObjectArgument<Texture2D>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Texture", value);
			}
		}

		public ValueOutput<int2> Size
		{
			get
			{
				return (ValueOutput<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Size"), typeof(ValueOutput<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Size", value);
			}
		}

		public ValueOutput<TextureFormat> Format
		{
			get
			{
				return (ValueOutput<TextureFormat>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ValueOutput<TextureFormat>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ValueOutput<int> MipMapCount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MipMapCount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MipMapCount", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Texture2D_Format()
		{
			Size = new ValueOutput<int2>(this);
			Format = new ValueOutput<TextureFormat>(this);
			MipMapCount = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Texture2D_Format(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Sample Texture 2D UVW", false)]
	public class SampleTexture3D_UVW : ValueFunctionNode<FrooxEngineContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture3D> Texture
		{
			get
			{
				return (ObjectArgument<Texture3D>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Texture"), typeof(ObjectArgument<Texture3D>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Texture", value);
			}
		}

		public ValueArgument<float3> UVW
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UVW"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UVW", value);
			}
		}

		protected override colorX Compute(FrooxEngineContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SampleTexture3D_UVW(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Get Texture 3D Pixel", false)]
	public class GetTexture3D_Pixel : ValueFunctionNode<FrooxEngineContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture3D> Texture
		{
			get
			{
				return (ObjectArgument<Texture3D>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Texture"), typeof(ObjectArgument<Texture3D>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Texture", value);
			}
		}

		public ValueArgument<int3> Position
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueArgument<int> MipLevel
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MipLevel"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MipLevel", value);
			}
		}

		public static int3 PositionDefault => new int3(-1, -1, -1);

		protected override colorX Compute(FrooxEngineContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetTexture3D_Pixel(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Assets")]
	[NodeName("Texture 3D Format", false)]
	public class Texture3D_Format : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Texture3D> Texture
		{
			get
			{
				return (ObjectArgument<Texture3D>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Texture"), typeof(ObjectArgument<Texture3D>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Texture", value);
			}
		}

		public ValueOutput<int3> Size
		{
			get
			{
				return (ValueOutput<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Size"), typeof(ValueOutput<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Size", value);
			}
		}

		public ValueOutput<TextureFormat> Format
		{
			get
			{
				return (ValueOutput<TextureFormat>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ValueOutput<TextureFormat>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ValueOutput<int> MipMapCount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MipMapCount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MipMapCount", value);
			}
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Texture3D_Format()
		{
			Size = new ValueOutput<int3>(this);
			Format = new ValueOutput<TextureFormat>(this);
			MipMapCount = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Texture3D_Format(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.FrooxEngine.Animation
{
	[NodeCategory("Actions")]
	[NodeName("Tween", false)]
	public class TweenValue<T> : AsyncActionNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> To
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueInput<T> From
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueInput<float> Duration
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Duration"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Duration", value);
			}
		}

		public ValueInput<CurvePreset> Curve
		{
			get
			{
				return (ValueInput<CurvePreset>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Curve"), typeof(ValueInput<CurvePreset>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Curve", value);
			}
		}

		public ValueInput<bool> ProportionalDuration
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ProportionalDuration"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ProportionalDuration", value);
			}
		}

		public ObjectInput<IField<T>> Target
		{
			get
			{
				return (ObjectInput<IField<T>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Target"), typeof(ObjectInput<IField<T>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Target", value);
			}
		}

		public AsyncCall OnStarted
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnStarted"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnStarted", value);
			}
		}

		public Continuation OnDone
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnDone"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnDone", value);
			}
		}

		protected override async Task<IOperation> RunAsync(FrooxEngineContext context)
		{
			return (Task<IOperation>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunAsync", context), typeof(Task<IOperation>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TweenValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Actions
{
	[NodeOverload("Core.Action.FireOnLocalChange")]
	public class FireOnLocalValueChange<T> : FireOnLocalValueChange<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnLocalValueChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Action.FireOnLocalChange")]
	public class FireOnLocalObjectChange<T> : FireOnLocalObjectChange<FrooxEngineContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnLocalObjectChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Action.FireOnLocalTrue")]
	public class FireOnLocalTrue : FireOnLocalTrue<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnLocalTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Action.FireOnLocalFalse")]
	public class FireOnLocalFalse : FireOnLocalFalse<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnLocalFalse(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public interface IAsyncDynamicImpulseTarget : ResoniteBridge.ResoniteBridgeValueHolder
	{
		string Tag { get; }
	}
	public delegate Task AsyncDynamicImpulseHandler(FrooxEngineContext sourceContext);
	public delegate Task AsyncDynamicImpulseHandler<T>(T value, FrooxEngineContext sourceContext);
	[NodeCategory("Flow/Async")]
	public class AsyncDynamicImpulseReceiver : ProxyVoidNode<FrooxEngineContext, AsyncDynamicImpulseReceiver.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public AsyncDynamicImpulseHandler Trigger
			{
				get
				{
					return (AsyncDynamicImpulseHandler)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Trigger"), typeof(AsyncDynamicImpulseHandler));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Trigger", value);
				}
			}

			public string Tag
			{
				get
				{
					return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Tag"), typeof(string));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Tag", value);
				}
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				return (GlobalRef<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(GlobalRef<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		public AsyncCall OnTriggered
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTriggered"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTriggered", value);
			}
		}

		private void OnTagChanged(string newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnTagChanged", newTag, context);
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public AsyncDynamicImpulseReceiver()
		{
			Tag = new GlobalRef<string>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AsyncDynamicImpulseReceiver(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Async")]
	[NodeName("Async Dynamic Impulse Receiver With Data", false)]
	[NodeOverload("Engine.AsyncDynamicImpulseReceiver")]
	public class AsyncDynamicImpulseReceiverWithValue<T> : ProxyVoidNode<FrooxEngineContext, AsyncDynamicImpulseReceiverWithValue<T>.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public AsyncDynamicImpulseHandler<T> Trigger
			{
				get
				{
					return (AsyncDynamicImpulseHandler<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Trigger"), typeof(AsyncDynamicImpulseHandler<T>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Trigger", value);
				}
			}

			public string Tag
			{
				get
				{
					return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Tag"), typeof(string));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Tag", value);
				}
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				return (GlobalRef<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(GlobalRef<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		public AsyncCall OnTriggered
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTriggered"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTriggered", value);
			}
		}

		public ValueOutput<T> Value
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private void OnTagChanged(string newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnTagChanged", newTag, context);
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public AsyncDynamicImpulseReceiverWithValue()
		{
			((AsyncDynamicImpulseReceiverWithValue<>)(object)this).Tag = new GlobalRef<string>(this, 0);
			((AsyncDynamicImpulseReceiverWithValue<>)(object)this).Value = new ValueOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AsyncDynamicImpulseReceiverWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Async")]
	[NodeName("Async Dynamic Impulse Receiver With Data", false)]
	[NodeOverload("Engine.AsyncDynamicImpulseReceiver")]
	public class AsyncDynamicImpulseReceiverWithObject<T> : ProxyVoidNode<FrooxEngineContext, AsyncDynamicImpulseReceiverWithObject<T>.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public AsyncDynamicImpulseHandler<T> Trigger
			{
				get
				{
					return (AsyncDynamicImpulseHandler<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Trigger"), typeof(AsyncDynamicImpulseHandler<T>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Trigger", value);
				}
			}

			public string Tag
			{
				get
				{
					return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Tag"), typeof(string));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Tag", value);
				}
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				return (GlobalRef<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(GlobalRef<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		public AsyncCall OnTriggered
		{
			get
			{
				return (AsyncCall)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTriggered"), typeof(AsyncCall));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTriggered", value);
			}
		}

		public ObjectOutput<T> Value
		{
			get
			{
				return (ObjectOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private void OnTagChanged(string newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnTagChanged", newTag, context);
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public AsyncDynamicImpulseReceiverWithObject()
		{
			((AsyncDynamicImpulseReceiverWithObject<>)(object)this).Tag = new GlobalRef<string>(this, 0);
			((AsyncDynamicImpulseReceiverWithObject<>)(object)this).Value = new ObjectOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AsyncDynamicImpulseReceiverWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow/Async")]
	public abstract class AsyncDynamicImpulseTriggerBase : AsyncActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Tag;

		public ObjectInput<Slot> TargetHierarchy;

		public ValueInput<bool> ExcludeDisabled;

		public readonly ValueOutput<int> TriggeredCount;

		protected override async Task<bool> Do(FrooxEngineContext context)
		{
			Slot slot = TargetHierarchy.Evaluate(context);
			if (slot == null || slot.IsRemoved)
			{
				TriggeredCount.Write(0, context);
				return false;
			}
			string tag = Tag.Evaluate(context);
			bool excludeDisabled = ExcludeDisabled.Evaluate(context, defaultValue: false);
			int value = await Trigger(slot, tag, excludeDisabled, context);
			TriggeredCount.Write(value, context);
			return true;
		}

		protected abstract Task<int> Trigger(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext context);

		protected AsyncDynamicImpulseTriggerBase()
		{
			TriggeredCount = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Asyncs Dynamic Impulse Trigger", false)]
	public class AsyncDynamicImpulseTrigger : AsyncDynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override Task<int> Trigger(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext context)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(Task<int>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AsyncDynamicImpulseTrigger(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Async Dynamic Impulse Trigger With Data", false)]
	[NodeOverload("Engine.AsyncDynamicImpulseTrigger")]
	public class AsyncDynamicImpulseTriggerWithValue<T> : AsyncDynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override Task<int> Trigger(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext context)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(Task<int>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AsyncDynamicImpulseTriggerWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Async Dynamic Impulse Trigger With Data", false)]
	[NodeOverload("Engine.AsyncDynamicImpulseTrigger")]
	public class AsyncDynamicImpulseTriggerWithObject<T> : AsyncDynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override Task<int> Trigger(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext context)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(Task<int>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AsyncDynamicImpulseTriggerWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DynamicImpulseHelper : IDynamicImpulseHandler, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public static DynamicImpulseHelper Singleton
		{
			get
			{
				return (DynamicImpulseHelper)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "Singleton"), typeof(DynamicImpulseHelper));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "Singleton", value);
			}
		}

		static DynamicImpulseHelper()
		{
			Singleton = new DynamicImpulseHelper();
		}

		public int TriggerDynamicImpulse(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext sourceContext = null)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "TriggerDynamicImpulse", hierarchy, tag, excludeDisabled, sourceContext), typeof(int));
		}

		public int TriggerDynamicImpulseWithArgument<T>(Slot hierarchy, string tag, bool excludeDisabled, T value, FrooxEngineContext sourceContext = null)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "TriggerDynamicImpulseWithArgument", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(int));
		}

		public Task<int> TriggerAsyncDynamicImpulse(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext sourceContext = null)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "TriggerAsyncDynamicImpulse", hierarchy, tag, excludeDisabled, sourceContext), typeof(Task<int>));
		}

		public Task<int> TriggerAsyncDynamicImpulseWithArgument<T>(Slot hierarchy, string tag, bool excludeDisabled, T value, FrooxEngineContext sourceContext = null)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "TriggerAsyncDynamicImpulseWithArgument", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(Task<int>));
		}

		internal static int TriggerDynamicImpulseWithValue<T>(Slot hierarchy, string tag, bool excludeDisabled, T value, FrooxEngineContext sourceContext = null) where T : struct
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerDynamicImpulseWithValue", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(int));
		}

		internal static int TriggerDynamicImpulseWithObject<T>(Slot hierarchy, string tag, bool excludeDisabled, T value, FrooxEngineContext sourceContext = null)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerDynamicImpulseWithObject", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(int));
		}

		internal static int TriggerDynamicImpulse<P>(Slot hierarchy, string tag, bool excludeDisabled, Action<P> trigger) where P : class, IDynamicImpulseTarget
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerDynamicImpulse", hierarchy, tag, excludeDisabled, trigger), typeof(int));
		}

		internal static Task<int> TriggerAsyncDynamicImpulseWithValue<T>(Slot hierarchy, string tag, bool excludeDisabled, T value, FrooxEngineContext sourceContext = null) where T : struct
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerAsyncDynamicImpulseWithValue", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(Task<int>));
		}

		internal static Task<int> TriggerAsyncDynamicImpulseWithObject<T>(Slot hierarchy, string tag, bool excludeDisabled, T value, FrooxEngineContext sourceContext = null)
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerAsyncDynamicImpulseWithObject", hierarchy, tag, excludeDisabled, value, sourceContext), typeof(Task<int>));
		}

		internal static async Task<int> TriggerAsyncDynamicImpulse<P>(Slot hierarchy, string tag, bool excludeDisabled, Func<P, Task> trigger) where P : class, IDynamicImpulseTarget
		{
			return (Task<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "DynamicImpulseHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TriggerAsyncDynamicImpulse", hierarchy, tag, excludeDisabled, trigger), typeof(Task<int>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicImpulseHelper(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public interface IDynamicImpulseTarget : ResoniteBridge.ResoniteBridgeValueHolder
	{
		string Tag { get; }
	}
	public delegate void DynamicImpulseHandler(FrooxEngineContext sourceContext);
	public delegate void DynamicImpulseHandler<T>(T value, FrooxEngineContext sourceContext);
	[NodeCategory("Flow")]
	public class DynamicImpulseReceiver : ProxyVoidNode<FrooxEngineContext, DynamicImpulseReceiver.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public DynamicImpulseHandler Trigger
			{
				get
				{
					return (DynamicImpulseHandler)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Trigger"), typeof(DynamicImpulseHandler));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Trigger", value);
				}
			}

			public string Tag
			{
				get
				{
					return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Tag"), typeof(string));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Tag", value);
				}
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				return (GlobalRef<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(GlobalRef<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		public Call OnTriggered
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTriggered"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTriggered", value);
			}
		}

		private void OnTagChanged(string newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnTagChanged", newTag, context);
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public DynamicImpulseReceiver()
		{
			Tag = new GlobalRef<string>(this, 0);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicImpulseReceiver(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Dynamic Impulse Receiver With Data", false)]
	[NodeOverload("Engine.DynamicImpulseReceiverWithData")]
	public class DynamicImpulseReceiverWithValue<T> : ProxyVoidNode<FrooxEngineContext, DynamicImpulseReceiverWithValue<T>.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public DynamicImpulseHandler<T> Trigger
			{
				get
				{
					return (DynamicImpulseHandler<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Trigger"), typeof(DynamicImpulseHandler<T>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Trigger", value);
				}
			}

			public string Tag
			{
				get
				{
					return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Tag"), typeof(string));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Tag", value);
				}
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				return (GlobalRef<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(GlobalRef<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		public Call OnTriggered
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTriggered"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTriggered", value);
			}
		}

		public ValueOutput<T> Value
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private void OnTagChanged(string newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnTagChanged", newTag, context);
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public DynamicImpulseReceiverWithValue()
		{
			((DynamicImpulseReceiverWithValue<>)(object)this).Tag = new GlobalRef<string>(this, 0);
			((DynamicImpulseReceiverWithValue<>)(object)this).Value = new ValueOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicImpulseReceiverWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Dynamic Impulse Receiver With Data", false)]
	[NodeOverload("Engine.DynamicImpulseReceiverWithData")]
	public class DynamicImpulseReceiverWithObject<T> : ProxyVoidNode<FrooxEngineContext, DynamicImpulseReceiverWithObject<T>.Proxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Proxy : ProtoFluxEngineProxy, IDynamicImpulseTarget, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public DynamicImpulseHandler<T> Trigger
			{
				get
				{
					return (DynamicImpulseHandler<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Trigger"), typeof(DynamicImpulseHandler<T>));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Trigger", value);
				}
			}

			public string Tag
			{
				get
				{
					return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Tag"), typeof(string));
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Tag", value);
				}
			}

			protected override void InitializeSyncMembers()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
			}

			public override ISyncMember GetSyncMember(int index)
			{
				return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
			}

			public static Proxy __New()
			{
				return (Proxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "Proxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(Proxy));
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return this.__backing;
				}
				set
				{
					this.__backing = value;
				}
			}

			public Proxy(ResoniteBridge.ResoniteBridgeValue value)
			{
				this.__Backing = value;
			}
		}

		public GlobalRef<string> Tag
		{
			get
			{
				return (GlobalRef<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tag"), typeof(GlobalRef<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tag", value);
			}
		}

		public Call OnTriggered
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTriggered"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTriggered", value);
			}
		}

		public ObjectOutput<T> Value
		{
			get
			{
				return (ObjectOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public override bool CanBeEvaluated => false;

		private void OnTagChanged(string newTag, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "OnTagChanged", newTag, context);
		}

		protected override void ProxyAdded(Proxy proxy, FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyAdded", proxy, context);
		}

		protected override void ProxyRemoved(Proxy proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ProxyRemoved", proxy, context, inUseByAnotherInstance);
		}

		public DynamicImpulseReceiverWithObject()
		{
			((DynamicImpulseReceiverWithObject<>)(object)this).Tag = new GlobalRef<string>(this, 0);
			((DynamicImpulseReceiverWithObject<>)(object)this).Value = new ObjectOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicImpulseReceiverWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public abstract class DynamicImpulseTriggerBase : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<string> Tag;

		public ObjectInput<Slot> TargetHierarchy;

		public ValueInput<bool> ExcludeDisabled;

		public readonly ValueOutput<int> TriggeredCount;

		protected override bool Do(FrooxEngineContext context)
		{
			Slot slot = TargetHierarchy.Evaluate(context);
			if (slot == null || slot.IsRemoved)
			{
				return false;
			}
			string tag = Tag.Evaluate(context);
			bool excludeDisabled = ExcludeDisabled.Evaluate(context, defaultValue: false);
			int value = Trigger(slot, tag, excludeDisabled, context);
			TriggeredCount.Write(value, context);
			return true;
		}

		protected abstract int Trigger(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext context);

		protected DynamicImpulseTriggerBase()
		{
			TriggeredCount = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeCategory("Flow")]
	public class DynamicImpulseTrigger : DynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Trigger(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicImpulseTrigger(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Dynamic Impulse Trigger With Data", false)]
	[NodeOverload("Engine.DynamicImpulseTriggerWithData")]
	public class DynamicImpulseTriggerWithValue<T> : DynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override int Trigger(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicImpulseTriggerWithValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Dynamic Impulse Trigger With Data", false)]
	[NodeOverload("Engine.DynamicImpulseTriggerWithData")]
	public class DynamicImpulseTriggerWithObject<T> : DynamicImpulseTriggerBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override int Trigger(Slot hierarchy, string tag, bool excludeDisabled, FrooxEngineContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Trigger", hierarchy, tag, excludeDisabled, context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DynamicImpulseTriggerWithObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public interface ILastValueProxy<T> : global::FrooxEngine.IComponent, IComponentBase, IDestroyable, IWorker, IWorldElement, IUpdatable, IChangeable, IAudioUpdatable, IInitializable, ILinkable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		T Last { get; set; }
	}
	public class ValueProxy<T> : ProtoFluxEngineProxy, ILastValueProxy<T>, global::FrooxEngine.IComponent, IComponentBase, IDestroyable, IWorker, IWorldElement, IUpdatable, IChangeable, IAudioUpdatable, IInitializable, ILinkable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Sync<T> Last
		{
			get
			{
				return (Sync<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Last"), typeof(Sync<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Last", value);
			}
		}

		T ILastValueProxy<T>.Last
		{
			get
			{
				return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Last"), typeof(T));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Last", value);
			}
		}

		protected override void InitializeSyncMembers()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
		}

		public override ISyncMember GetSyncMember(int index)
		{
			return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
		}

		public static ValueProxy<T> __New()
		{
			return (ValueProxy<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "ValueProxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(ValueProxy<T>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueProxy(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class RefProxy<T> : ProtoFluxEngineProxy, ILastValueProxy<T>, global::FrooxEngine.IComponent, IComponentBase, IDestroyable, IWorker, IWorldElement, IUpdatable, IChangeable, IAudioUpdatable, IInitializable, ILinkable, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IWorldElement
	{
		public SyncRef<T> Last
		{
			get
			{
				return (SyncRef<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Last"), typeof(SyncRef<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Last", value);
			}
		}

		T ILastValueProxy<T>.Last
		{
			get
			{
				return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Last"), typeof(T));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Last", value);
			}
		}

		protected override void InitializeSyncMembers()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
		}

		public override ISyncMember GetSyncMember(int index)
		{
			return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
		}

		public static RefProxy<T> __New()
		{
			return (RefProxy<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "RefProxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(RefProxy<T>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RefProxy(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TypeProxy : ProtoFluxEngineProxy, ILastValueProxy<Type>, global::FrooxEngine.IComponent, IComponentBase, IDestroyable, IWorker, IWorldElement, IUpdatable, IChangeable, IAudioUpdatable, IInitializable, ILinkable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public SyncType Last
		{
			get
			{
				return (SyncType)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Last"), typeof(SyncType));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Last", value);
			}
		}

		Type ILastValueProxy<Type>.Last
		{
			get
			{
				return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "Last"), typeof(Type));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "Last", value);
			}
		}

		protected override void InitializeSyncMembers()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "InitializeSyncMembers");
		}

		public override ISyncMember GetSyncMember(int index)
		{
			return (ISyncMember)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetSyncMember", index), typeof(ISyncMember));
		}

		public static TypeProxy __New()
		{
			return (TypeProxy)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.FrooxEngine", "TypeProxy", ResoniteBridge.ResoniteBridgeValueType.Type), "__New"), typeof(TypeProxy));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TypeProxy(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Fire On Change", false)]
	public abstract class FireOnChange<T, P> : ProxyVoidNode<FrooxEngineContext, P>, IMappableNode, INode, IExecutionChangeListener<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder where P : ProtoFluxEngineProxy, ILastValueProxy<T>, new()
	{
		public ObjectInput<global::FrooxEngine.User> OnlyForUser;

		public Call OnChanged;

		private ObjectStore<Action<IChangeable>> _enabledChangedHandler;

		private ObjectStore<SlotEvent> _activeChangedHandler;

		public override bool CanBeEvaluated => false;

		protected bool InputListensToChanges { get; private set; }

		private bool ShouldListen(P proxy)
		{
			if (proxy.Enabled)
			{
				return proxy.Slot.IsActive;
			}
			return false;
		}

		protected override void ProxyAdded(P proxy, FrooxEngineContext context)
		{
			NodeContextPath path = context.CaptureContextPath();
			context.GetEventDispatcher(out var dispatcher);
			Action<IChangeable> value = delegate
			{
				dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
				{
					UpdateListenerState(c);
				});
			};
			SlotEvent value2 = delegate
			{
				dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
				{
					UpdateListenerState(c);
				});
			};
			proxy.EnabledField.Changed += value;
			proxy.Slot.ActiveChanged += value2;
			InputListensToChanges = ShouldListen(proxy);
			dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
			{
				if (DetectChanges(proxy, c))
				{
					proxy.Last = GetCurrent(c);
				}
			});
		}

		protected override void ProxyRemoved(P proxy, FrooxEngineContext context, bool inUseByAnotherInstance)
		{
			if (!inUseByAnotherInstance)
			{
				proxy.EnabledField.Changed -= _enabledChangedHandler.Read(context);
				proxy.Slot.ActiveChanged -= _activeChangedHandler.Read(context);
				_enabledChangedHandler.Clear(context);
				_activeChangedHandler.Clear(context);
			}
		}

		protected void UpdateListenerState(FrooxEngineContext context)
		{
			P proxy = GetProxy(context);
			if (proxy != null)
			{
				bool flag = ShouldListen(proxy);
				if (flag != InputListensToChanges)
				{
					InputListensToChanges = flag;
					context.Group.MarkChangeTrackingDirty();
				}
			}
		}

		public void Changed(FrooxEngineContext context)
		{
			P proxy = GetProxy(context);
			if (proxy == null || !DetectChanges(proxy, context))
			{
				return;
			}
			T current = GetCurrent(context);
			if (!EqualityComparer<T>.Default.Equals(current, proxy.Last))
			{
				proxy.Last = current;
				if (ShouldFire(current))
				{
					OnChanged.Execute(context);
				}
			}
		}

		private bool DetectChanges(P proxy, FrooxEngineContext context)
		{
			if (!proxy.Enabled)
			{
				return false;
			}
			global::FrooxEngine.User user = OnlyForUser.Evaluate(context);
			if (user != null)
			{
				if (!user.IsLocalUser)
				{
					return false;
				}
			}
			else if (proxy.Slot.ActiveUserRoot != null && !proxy.IsUnderLocalUser)
			{
				return false;
			}
			return true;
		}

		protected abstract T GetCurrent(FrooxEngineContext context);

		protected virtual bool ShouldFire(T value)
		{
			return true;
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeOverload("Engine.FireOnChange")]
	public class FireOnValueChange<T> : FireOnChange<T, ValueProxy<T>>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public bool ValueListensToChanges => base.InputListensToChanges;

		protected override T GetCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetCurrent", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnValueChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Engine.FireOnChange")]
	public class FireOnObjectValueChange<T> : FireOnChange<T, ValueProxy<T>>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.IsSupported;

		public bool ValueListensToChanges => base.InputListensToChanges;

		protected override T GetCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetCurrent", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnObjectValueChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Engine.FireOnChange")]
	public class FireOnRefChange<T> : FireOnChange<T, RefProxy<T>>, ResoniteBridge.ResoniteBridgeValueHolder where T : class, IWorldElement
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public bool ValueListensToChanges => base.InputListensToChanges;

		protected override T GetCurrent(FrooxEngineContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetCurrent", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnRefChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Engine.FireOnChange")]
	public class FireOnTypeChange : FireOnChange<Type, TypeProxy>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInput<Type> Value
		{
			get
			{
				return (ObjectInput<Type>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<Type>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public bool ValueListensToChanges => base.InputListensToChanges;

		protected override Type GetCurrent(FrooxEngineContext context)
		{
			return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetCurrent", context), typeof(Type));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnTypeChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Fire On True", false)]
	public class FireOnTrue : FireOnChange<bool, ValueProxy<bool>>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<bool> Condition
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Condition"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Condition", value);
			}
		}

		public bool ConditionListensToChanges => base.InputListensToChanges;

		protected override bool GetCurrent(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetCurrent", context), typeof(bool));
		}

		protected override bool ShouldFire(bool value)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ShouldFire", value), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Fire On False", false)]
	public class FireOnFalse : FireOnChange<bool, ValueProxy<bool>>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<bool> Condition
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Condition"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Condition", value);
			}
		}

		public bool ConditionListensToChanges => base.InputListensToChanges;

		protected override bool GetCurrent(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetCurrent", context), typeof(bool));
		}

		protected override bool ShouldFire(bool value)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ShouldFire", value), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnFalse(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	public abstract class FireOnLocalBool<C> : VoidNode<FrooxEngineContext>, IExecutionChangeListener<C>, IScopeEventListener<C>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext
	{
		public ValueInput<bool> Condition;

		public Call OnChange;

		private ValueStore<bool> _last;

		private ObjectStore<global::FrooxEngine.Component> _container;

		private ObjectStore<Action<IChangeable>> _enabledChangedHandler;

		private ObjectStore<SlotEvent> _activeChangedHandler;

		public bool ConditionListensToChanges { get; private set; }

		public void AddedToScope(C context)
		{
			NodeContextPath path = context.CaptureContextPath();
			context.GetEventDispatcher(out var dispatcher);
			dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
			{
				_last.Write(Condition.Evaluate(c, defaultValue: false), c);
			});
			global::FrooxEngine.Component rootContainer = context.GetRootContainer(this);
			Action<IChangeable> value = delegate
			{
				dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
				{
					UpdateListenerState(c);
				});
			};
			SlotEvent value2 = delegate
			{
				dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
				{
					UpdateListenerState(c);
				});
			};
			rootContainer.EnabledField.Changed += value;
			rootContainer.Slot.ActiveChanged += value2;
			_container.Write(rootContainer, context);
			_activeChangedHandler.Write(value2, context);
			_enabledChangedHandler.Write(value, context);
			ConditionListensToChanges = ShouldListen(rootContainer);
		}

		public void Changed(C context)
		{
			bool flag = Condition.Evaluate(context, defaultValue: false);
			bool flag2 = _last.Read(context);
			if (flag != flag2)
			{
				if (ShouldFire(flag))
				{
					OnChange.Execute(context);
				}
				_last.Write(flag, context);
			}
		}

		public void RemovedFromScope(C context)
		{
			global::FrooxEngine.Component component = _container.Read(context);
			component.EnabledField.Changed -= _enabledChangedHandler.Read(context);
			component.Slot.ActiveChanged -= _activeChangedHandler.Read(context);
			_enabledChangedHandler.Clear(context);
			_activeChangedHandler.Clear(context);
			_container.Clear(context);
		}

		protected abstract bool ShouldFire(bool state);

		protected bool ShouldListen(global::FrooxEngine.Component component)
		{
			if (component.Enabled)
			{
				return component.Slot.IsActive;
			}
			return false;
		}

		protected void UpdateListenerState(FrooxEngineContext context)
		{
			global::FrooxEngine.Component rootContainer = context.GetRootContainer(this);
			if (rootContainer != null)
			{
				bool flag = ShouldListen(rootContainer);
				if (flag != ConditionListensToChanges)
				{
					ConditionListensToChanges = flag;
					context.Group.MarkChangeTrackingDirty();
				}
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeOverload("Core.Action.FireOnLocalTrue")]
	public class FireOnLocalTrue<C> : FireOnLocalBool<C>, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext
	{
		protected override bool ShouldFire(bool state)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ShouldFire", state), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnLocalTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Action.FireOnLocalFalse")]
	public class FireOnLocalFalse<C> : FireOnLocalBool<C>, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext
	{
		protected override bool ShouldFire(bool state)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ShouldFire", state), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnLocalFalse(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeOverload("Core.Action.FireOnLocalChange")]
	public class FireOnLocalValueChange<C, T> : VoidNode<FrooxEngineContext>, IExecutionChangeListener<C>, IScopeEventListener<C>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext where T : struct
	{
		public ValueInput<T> Value
		{
			get
			{
				return (ValueInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public Call OnChange
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnChange"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnChange", value);
			}
		}

		private ValueStore<T> _last
		{
			get
			{
				return (ValueStore<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_last"), typeof(ValueStore<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_last", value);
			}
		}

		private ObjectStore<global::FrooxEngine.Component> _container
		{
			get
			{
				return (ObjectStore<global::FrooxEngine.Component>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_container"), typeof(ObjectStore<global::FrooxEngine.Component>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_container", value);
			}
		}

		private ObjectStore<Action<IChangeable>> _enabledChangedHandler
		{
			get
			{
				return (ObjectStore<Action<IChangeable>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_enabledChangedHandler"), typeof(ObjectStore<Action<IChangeable>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_enabledChangedHandler", value);
			}
		}

		private ObjectStore<SlotEvent> _activeChangedHandler
		{
			get
			{
				return (ObjectStore<SlotEvent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_activeChangedHandler"), typeof(ObjectStore<SlotEvent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_activeChangedHandler", value);
			}
		}

		public bool ValueListensToChanges
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ValueListensToChanges"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ValueListensToChanges", value);
			}
		}

		public void AddedToScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "AddedToScope", context);
		}

		public void RemovedFromScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RemovedFromScope", context);
		}

		public void Changed(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Changed", context);
		}

		protected bool ShouldListen(global::FrooxEngine.Component component)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ShouldListen", component), typeof(bool));
		}

		protected void UpdateListenerState(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateListenerState", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnLocalValueChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeOverload("Core.Action.FireOnLocalChange")]
	public class FireOnLocalObjectChange<C, T> : VoidNode<FrooxEngineContext>, IExecutionChangeListener<C>, IScopeEventListener<C>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder where C : FrooxEngineContext
	{
		public ObjectInput<T> Value
		{
			get
			{
				return (ObjectInput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectInput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public Call OnChange
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnChange"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnChange", value);
			}
		}

		private ObjectStore<T> _last
		{
			get
			{
				return (ObjectStore<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_last"), typeof(ObjectStore<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_last", value);
			}
		}

		private ObjectStore<global::FrooxEngine.Component> _container
		{
			get
			{
				return (ObjectStore<global::FrooxEngine.Component>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_container"), typeof(ObjectStore<global::FrooxEngine.Component>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_container", value);
			}
		}

		private ObjectStore<Action<IChangeable>> _enabledChangedHandler
		{
			get
			{
				return (ObjectStore<Action<IChangeable>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_enabledChangedHandler"), typeof(ObjectStore<Action<IChangeable>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_enabledChangedHandler", value);
			}
		}

		private ObjectStore<SlotEvent> _activeChangedHandler
		{
			get
			{
				return (ObjectStore<SlotEvent>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_activeChangedHandler"), typeof(ObjectStore<SlotEvent>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_activeChangedHandler", value);
			}
		}

		public bool ValueListensToChanges
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(this.__Backing, "ValueListensToChanges"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(this.__Backing, "ValueListensToChanges", value);
			}
		}

		public void AddedToScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "AddedToScope", context);
		}

		public void RemovedFromScope(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RemovedFromScope", context);
		}

		public void Changed(C context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Changed", context);
		}

		protected bool ShouldListen(global::FrooxEngine.Component component)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ShouldListen", component), typeof(bool));
		}

		protected void UpdateListenerState(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "UpdateListenerState", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireOnLocalObjectChange(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	public class FireWhileTrue : UserUpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnUpdate"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnUpdate", value);
			}
		}

		public ValueInput<bool> Condition
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Condition"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Condition", value);
			}
		}

		protected override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunUpdate", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FireWhileTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	public class LocalFireWhileTrue : VoidNode<FrooxEngineContext>, IExecutionUpdateReceiver<FrooxEngineContext>, INode, IScopeEventListener<FrooxEngineContext>, IMappableNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnUpdate"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnUpdate", value);
			}
		}

		public ValueInput<bool> Condition
		{
			get
			{
				return (ValueInput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Condition"), typeof(ValueInput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Condition", value);
			}
		}

		public void AddedToScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "AddedToScope", context);
		}

		public void RemovedFromScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RemovedFromScope", context);
		}

		public void Update(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Update", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalFireWhileTrue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	[NodeName("Local Impulse Timeout", false)]
	[NodeOverload("Core.Actions.LocalImpulseTimeout")]
	public abstract class LocalImpulseTimeout : VoidNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		[PossibleContinuations(new string[] { "Next" })]
		public readonly Operation Trigger;

		[PossibleContinuations(new string[] { })]
		public readonly Operation Reset;

		public Continuation Next;

		private ValueStore<double> _blockUntil;

		protected IOperation DoTrigger(FrooxEngineContext context)
		{
			double num = _blockUntil.Read(context);
			if (context.World.Time.WorldTime >= num)
			{
				_blockUntil.Write(context.World.Time.WorldTime + EvaluateTimeout(context), context);
				return Next.Target;
			}
			return null;
		}

		protected void DoReset(FrooxEngineContext context)
		{
			_blockUntil.Write(-1.0, context);
		}

		protected abstract double EvaluateTimeout(FrooxEngineContext context);

		protected LocalImpulseTimeout()
		{
			Trigger = new Operation(this, 0);
			Reset = new Operation(this, 1);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class LocalImpulseTimeoutSeconds : LocalImpulseTimeout, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<float> Timeout
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Timeout"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Timeout", value);
			}
		}

		protected override double EvaluateTimeout(FrooxEngineContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "EvaluateTimeout", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalImpulseTimeoutSeconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class LocalImpulseTimeoutTimeSpan : LocalImpulseTimeout, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInput<TimeSpan> Timeout
		{
			get
			{
				return (ValueInput<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Timeout"), typeof(ValueInput<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Timeout", value);
			}
		}

		protected override double EvaluateTimeout(FrooxEngineContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "EvaluateTimeout", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalImpulseTimeoutTimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	public class LocalLeakyImpulseBucket : VoidNode<FrooxEngineContext>, IMappableNode, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call Pulse
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Pulse"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Pulse", value);
			}
		}

		public Continuation Overflow
		{
			get
			{
				return (Continuation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Overflow"), typeof(Continuation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Overflow", value);
			}
		}

		public ValueInput<float> Interval
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interval"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interval", value);
			}
		}

		public ValueInput<int> MaximumCapacity
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "MaximumCapacity"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "MaximumCapacity", value);
			}
		}

		public ValueOutput<int> CurrentCapacity
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CurrentCapacity"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CurrentCapacity", value);
			}
		}

		public Operation Trigger
		{
			get
			{
				return (Operation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Trigger"), typeof(Operation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Trigger", value);
			}
		}

		public Operation Reset
		{
			get
			{
				return (Operation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Reset"), typeof(Operation));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Reset", value);
			}
		}

		private ValueStore<int> _capacity
		{
			get
			{
				return (ValueStore<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_capacity"), typeof(ValueStore<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_capacity", value);
			}
		}

		private ValueStore<double> _lastPulse
		{
			get
			{
				return (ValueStore<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_lastPulse"), typeof(ValueStore<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_lastPulse", value);
			}
		}

		private ValueStore<bool> _delayRunning
		{
			get
			{
				return (ValueStore<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_delayRunning"), typeof(ValueStore<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_delayRunning", value);
			}
		}

		private ObjectStore<CancellationTokenSource> _cancellation
		{
			get
			{
				return (ObjectStore<CancellationTokenSource>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_cancellation"), typeof(ObjectStore<CancellationTokenSource>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_cancellation", value);
			}
		}

		private ObjectStore<Action> _scheduler
		{
			get
			{
				return (ObjectStore<Action>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_scheduler"), typeof(ObjectStore<Action>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_scheduler", value);
			}
		}

		private ObjectStore<NodeContextPath> _path
		{
			get
			{
				return (ObjectStore<NodeContextPath>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_path"), typeof(ObjectStore<NodeContextPath>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_path", value);
			}
		}

		private NodeEventHandler<FrooxEngineContext> _handler
		{
			get
			{
				return (NodeEventHandler<FrooxEngineContext>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_handler"), typeof(NodeEventHandler<FrooxEngineContext>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_handler", value);
			}
		}

		private void CapacityChanged(FrooxEngineContext context, NodeContextPath path)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "CapacityChanged", context, path);
		}

		protected override void ComputeOutputs(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		private NodeContextPath GetPath(FrooxEngineContext context)
		{
			return (NodeContextPath)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetPath", context), typeof(NodeContextPath));
		}

		protected IOperation DoTrigger(FrooxEngineContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "DoTrigger", context), typeof(IOperation));
		}

		private void HandleDelay(FrooxEngineContext context, object data)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "HandleDelay", context, data);
		}

		protected void DoReset(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "DoReset", context);
		}

		public LocalLeakyImpulseBucket()
		{
			CurrentCapacity = new ValueOutput<int>(this);
			Trigger = new Operation(this, 0);
			Reset = new Operation(this, 1);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalLeakyImpulseBucket(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	public class LocalUpdate : VoidNode<FrooxEngineContext>, IExecutionUpdateReceiver<FrooxEngineContext>, INode, IScopeEventListener<FrooxEngineContext>, IMappableNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnUpdate"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnUpdate", value);
			}
		}

		public void AddedToScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "AddedToScope", context);
		}

		public void RemovedFromScope(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RemovedFromScope", context);
		}

		public void Update(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Update", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LocalUpdate(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Once Per Frame", false)]
	[NodeCategory("Flow")]
	public class OnePerFrame : ActionBreakableFlowNode<FrooxEngineContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ValueStore<double> _lastTime
		{
			get
			{
				return (ValueStore<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_lastTime"), typeof(ValueStore<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_lastTime", value);
			}
		}

		protected override bool Do(FrooxEngineContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Do", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OnePerFrame(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Actions.Timer", null)]
	public class SecondsTimer : UserUpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnUpdate"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnUpdate", value);
			}
		}

		public ValueInput<float> Interval
		{
			get
			{
				return (ValueInput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interval"), typeof(ValueInput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interval", value);
			}
		}

		private ValueStore<double> _lastPulse
		{
			get
			{
				return (ValueStore<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_lastPulse"), typeof(ValueStore<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_lastPulse", value);
			}
		}

		protected override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunUpdate", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SecondsTimer(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	public class UpdatesTimer : UserUpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnUpdate"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnUpdate", value);
			}
		}

		public ValueInput<int> Interval
		{
			get
			{
				return (ValueInput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interval"), typeof(ValueInput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interval", value);
			}
		}

		private ValueStore<int> _lastPulse
		{
			get
			{
				return (ValueStore<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "_lastPulse"), typeof(ValueStore<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "_lastPulse", value);
			}
		}

		protected override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunUpdate", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UpdatesTimer(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	public class Update : UserUpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Call OnUpdate
		{
			get
			{
				return (Call)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnUpdate"), typeof(Call));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnUpdate", value);
			}
		}

		protected override void RunUpdate(FrooxEngineContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "RunUpdate", context);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Update(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public abstract class UpdateBase : VoidNode<FrooxEngineContext>, IExecutionUpdateReceiver<FrooxEngineContext>, INode, IScopeEventListener<FrooxEngineContext>, IMappableNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ValueStore<bool> _registered;

		private ObjectStore<global::FrooxEngine.Component> _container;

		private ObjectStore<Action<IChangeable>> _enabledChangedHandler;

		private ObjectStore<SlotEvent> _activeChangedHandler;

		protected virtual int Bucket => 0;

		protected virtual bool ShouldRegister(FrooxEngineContext context)
		{
			return true;
		}

		protected void UpdateRegistration(FrooxEngineContext context)
		{
			ref bool reference = ref _registered.Access(context);
			global::FrooxEngine.Component rootContainer = context.GetRootContainer(this);
			bool flag = rootContainer.Enabled && rootContainer.Slot.IsActive && ShouldRegister(context);
			if (reference != flag)
			{
				NodeContextPath path = context.CaptureContextPath();
				if (reference)
				{
					context.Updates.UnregisterNode(path, this, Bucket);
				}
				reference = flag;
				if (reference)
				{
					context.Updates.RegisterNode(path, this, Bucket);
				}
			}
		}

		void IExecutionUpdateReceiver<FrooxEngineContext>.Update(FrooxEngineContext context)
		{
			global::FrooxEngine.Component component = _container.Read(context);
			if (component.Enabled && component.Slot.IsActive && !component.IsRemoved)
			{
				RunUpdate(context);
			}
		}

		public void AddedToScope(FrooxEngineContext context)
		{
			UpdateRegistration(context);
			global::FrooxEngine.Component rootContainer = context.GetRootContainer(this);
			NodeContextPath path = context.CaptureContextPath();
			context.GetEventDispatcher(out var dispatcher);
			Action<IChangeable> value = delegate
			{
				dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
				{
					UpdateRegistration(c);
				});
			};
			SlotEvent value2 = delegate
			{
				dispatcher.ScheduleEvent(path, delegate(FrooxEngineContext c)
				{
					UpdateRegistration(c);
				});
			};
			rootContainer.EnabledField.Changed += value;
			rootContainer.Slot.ActiveChanged += value2;
			_container.Write(rootContainer, context);
			_activeChangedHandler.Write(value2, context);
			_enabledChangedHandler.Write(value, context);
			OnAddedToScope(context, path);
		}

		public void RemovedFromScope(FrooxEngineContext context)
		{
			OnRemoveFromScope(context);
			ref bool reference = ref _registered.Access(context);
			if (reference)
			{
				NodeContextPath path = context.CaptureContextPath();
				context.Updates.UnregisterNode(path, this, Bucket);
				reference = false;
			}
			global::FrooxEngine.Component component = _container.Read(context);
			component.EnabledField.Changed -= _enabledChangedHandler.Read(context);
			component.Slot.ActiveChanged -= _activeChangedHandler.Read(context);
			_enabledChangedHandler.Clear(context);
			_activeChangedHandler.Clear(context);
			_container.Clear(context);
		}

		protected virtual void OnAddedToScope(FrooxEngineContext context, NodeContextPath path)
		{
		}

		protected virtual void OnRemoveFromScope(FrooxEngineContext context)
		{
		}

		protected abstract void RunUpdate(FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public abstract class ValueFunctionUpdateBase<T> : UpdateBase, IValueOutput<T>, IOutput<T>, IOutput, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public Node OwnerNode => this;

		public override int OutputCount => 1;

		public Type OutputType => typeof(T);

		public DataClass OutputDataClass => DataClass.Value;

		public override bool CanBeEvaluated => true;

		public override IOutput GetOutput(int index)
		{
			if (index != 0)
			{
				throw new ArgumentOutOfRangeException("index");
			}
			return this;
		}

		public override Type GetOutputType(int index)
		{
			if (index != 0)
			{
				throw new ArgumentOutOfRangeException("index");
			}
			return typeof(T);
		}

		public override DataClass GetOutputTypeClass(int index)
		{
			if (index != 0)
			{
				throw new ArgumentOutOfRangeException("index");
			}
			return DataClass.Value;
		}

		public sealed override void Evaluate(FrooxEngineContext context)
		{
			T value = Compute(context);
			context.PopInputs();
			context.Values.Push(value);
		}

		protected abstract T Compute(FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public abstract class ObjectFunctionUpdateBase<T> : UpdateBase, IObjectOutput<T>, IOutput<T>, IOutput, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public Node OwnerNode => this;

		public override int OutputCount => 1;

		public Type OutputType => typeof(T);

		public DataClass OutputDataClass => DataClass.Object;

		public override bool CanBeEvaluated => true;

		public override IOutput GetOutput(int index)
		{
			if (index != 0)
			{
				throw new ArgumentOutOfRangeException("index");
			}
			return this;
		}

		public override Type GetOutputType(int index)
		{
			if (index != 0)
			{
				throw new ArgumentOutOfRangeException("index");
			}
			return typeof(T);
		}

		public override DataClass GetOutputTypeClass(int index)
		{
			if (index != 0)
			{
				throw new ArgumentOutOfRangeException("index");
			}
			return DataClass.Object;
		}

		public sealed override void Evaluate(FrooxEngineContext context)
		{
			T obj = Compute(context);
			context.PopInputs();
			context.Objects.Push(obj);
		}

		protected abstract T Compute(FrooxEngineContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public abstract class UserUpdateBase : UpdateBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public readonly GlobalRef<global::FrooxEngine.User> UpdatingUser;

		public readonly GlobalRef<bool> SkipIfNull;

		private void OnUpdatingUserChanged(global::FrooxEngine.User user, FrooxEngineContext context)
		{
			UpdateRegistration(context);
		}

		private void OnSkipIfNullChanged(bool skipIfNull, FrooxEngineContext context)
		{
			UpdateRegistration(context);
		}

		protected override bool ShouldRegister(FrooxEngineContext context)
		{
			global::FrooxEngine.User user = UpdatingUser.Read(context);
			if (user != null && user.IsRemoved)
			{
				user = null;
			}
			if (user == null && !SkipIfNull.Read(context))
			{
				user = context.World.HostUser;
			}
			return user?.IsLocalUser ?? false;
		}

		protected UserUpdateBase()
		{
			UpdatingUser = new GlobalRef<global::FrooxEngine.User>(this, 0);
			SkipIfNull = new GlobalRef<bool>(this, 1);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
}
internal class ProtoFluxNodesFrooxEngine_ProcessedByFody : ResoniteBridge.ResoniteBridgeValueHolder
{
	internal string FodyVersion
	{
		get
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FodyVersion"), typeof(string));
		}
		set
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FodyVersion", value);
		}
	}

	internal string NodeWeaver
	{
		get
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NodeWeaver"), typeof(string));
		}
		set
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NodeWeaver", value);
		}
	}

	private ResoniteBridge.ResoniteBridgeValue __backing;

	public ResoniteBridge.ResoniteBridgeValue __Backing
	{
		get
		{
			return this.__backing;
		}
		set
		{
			this.__backing = value;
		}
	}

	public ProtoFluxNodesFrooxEngine_ProcessedByFody(ResoniteBridge.ResoniteBridgeValue value)
	{
		this.__Backing = value;
	}
}
