using ResoniteBridge;
using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Security;
using System.Security.Permissions;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Assimp;
using CSCore;
using CSCore.Codecs;
using CSCore.Codecs.FLAC;
using CSCore.Codecs.OGG;
using CSCore.Codecs.WAV;
using Elements.Core;
using Microsoft.CodeAnalysis;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using PDFiumSharp;
using PDFiumSharp.Enums;
using PDFiumSharp.Types;
using QRCoder;
using SkyFrost.Base;

namespace Microsoft.CodeAnalysis
{
}
namespace System.Runtime.CompilerServices
{
}
namespace MPOHeaderReader
{
	public class MPO_File : ResoniteBridge.ResoniteBridgeValueHolder
	{
		private static byte?[] MP_IDENTIFIER
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MPO_File", ResoniteBridge.ResoniteBridgeValueType.Type), "MP_IDENTIFIER"), typeof(byte?[])) is byte?[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte?[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MPO_File", ResoniteBridge.ResoniteBridgeValueType.Type), "MP_IDENTIFIER", value);
			}
		}

		public MPO_File(System.String file)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MPO_File", ResoniteBridge.ResoniteBridgeValueType.Type), file);
		}

		public MPO_File(Stream stream)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MPO_File", ResoniteBridge.ResoniteBridgeValueType.Type), stream);
		}

		private void Init(Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Init", stream);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MPO_File(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MPO_File()
		{
		}
	}
}
namespace Elements.Assets
{
	public static class AnimJImporter
	{
		public static AnimX ImportFromFile(System.String file)
		{
			return (AnimX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AnimJImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "ImportFromFile", file), typeof(AnimX));
		}

		public static ValueTask<AnimX> Import(Stream stream)
		{
			return (ValueTask<AnimX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AnimJImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "Import", stream), typeof(ValueTask<AnimX>));
		}

		public static AnimX ImportFromJSON(System.String json)
		{
			return (AnimX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AnimJImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "ImportFromJSON", json), typeof(AnimX));
		}

		public static AnimX CreateFrom(Animation animation)
		{
			return (AnimX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AnimJImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "CreateFrom", animation), typeof(AnimX));
		}
	}
	public class Animation : ResoniteBridge.ResoniteBridgeValueHolder
	{
		[JsonPropertyName("name")]
		public System.String Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Name"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Name", value);
			}
		}

		[JsonPropertyName("globalDuration")]
		public System.Single GlobalDuration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "GlobalDuration"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "GlobalDuration", value);
			}
		}

		[JsonPropertyName("tracks")]
		public List<AnimationTrack> Tracks
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tracks"), typeof(List<AnimationTrack>)) is List<AnimationTrack> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<AnimationTrack>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tracks", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Animation(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Animation()
		{
		}
	}
	public class AnimationTrackConverter : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Boolean CanConvert(Type typeToConvert)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CanConvert", typeToConvert), typeof(System.Boolean));
		}

		public AnimationTrack Read(ref ResoniteBridge.ResoniteBridgeValue reader, Type typeToConvert, JsonSerializerOptions options)
		{
			return (AnimationTrack)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", reader, typeToConvert, options), typeof(AnimationTrack));
		}

		public void Write(Utf8JsonWriter writer, AnimationTrack value, JsonSerializerOptions options)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", writer, value, options);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AnimationTrackConverter(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AnimationTrackConverter()
		{
		}
	}
	public abstract class AnimationTrack : ResoniteBridge.ResoniteBridgeValueHolder
	{
		[System.Text.Json.Serialization.JsonIgnore]
		public abstract TrackType TrackType { get; }

		[System.Text.Json.Serialization.JsonIgnore]
		public abstract Type ValueType { get; }

		[JsonPropertyName("node")]
		public System.String Node
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Node"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Node", value);
			}
		}

		[JsonPropertyName("property")]
		public System.String Property
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Property"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Property", value);
			}
		}

		internal abstract System.Single AddTo(AnimX animx);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AnimationTrack(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AnimationTrack()
		{
		}
	}
	public class CurveAnimationTrack<T> : AnimationTrack, ResoniteBridge.ResoniteBridgeValueHolder
	{
		[System.Text.Json.Serialization.JsonIgnore]
		public override TrackType TrackType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TrackType"), typeof(TrackType)) is TrackType __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TrackType");
				}
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public override Type ValueType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueType"), typeof(Type)) is Type __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Type");
				}
			}
		}

		[JsonPropertyName("keyframes")]
		public List<CurveAnimationKeyframe<T>> Keyframes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Keyframes"), typeof(List<CurveAnimationKeyframe<T>>)) is List<CurveAnimationKeyframe<T>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<CurveAnimationKeyframe<T>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Keyframes", value);
			}
		}

		internal override System.Single AddTo(AnimX animx)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTo", animx), typeof(System.Single));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CurveAnimationTrack(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CurveAnimationTrack()
		{
		}
	}
	public class CurveAnimationKeyframe<T> : ResoniteBridge.ResoniteBridgeValueHolder
	{
		[JsonPropertyName("time")]
		public System.Single Time
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Time"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Time", value);
			}
		}

		[JsonPropertyName("value")]
		public T Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Value"), typeof(T)) is T __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to T");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Value", value);
			}
		}

		[JsonPropertyName("leftTangent")]
		public T LeftTangent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LeftTangent"), typeof(T)) is T __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to T");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "LeftTangent", value);
			}
		}

		[JsonPropertyName("rightTangent")]
		public T RightTangent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RightTangent"), typeof(T)) is T __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to T");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "RightTangent", value);
			}
		}

		[JsonPropertyName("interpolation")]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public KeyframeInterpolation Interpolation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Interpolation"), typeof(KeyframeInterpolation)) is KeyframeInterpolation __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to KeyframeInterpolation");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Interpolation", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CurveAnimationKeyframe(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CurveAnimationKeyframe()
		{
		}
	}
	public class DiscreteAnimationTrack<T> : AnimationTrack, ResoniteBridge.ResoniteBridgeValueHolder
	{
		[System.Text.Json.Serialization.JsonIgnore]
		public override TrackType TrackType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TrackType"), typeof(TrackType)) is TrackType __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TrackType");
				}
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public override Type ValueType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueType"), typeof(Type)) is Type __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Type");
				}
			}
		}

		[JsonPropertyName("keyframes")]
		public List<DiscreteAnimationKeyframe<T>> Keyframes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Keyframes"), typeof(List<DiscreteAnimationKeyframe<T>>)) is List<DiscreteAnimationKeyframe<T>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<DiscreteAnimationKeyframe<T>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Keyframes", value);
			}
		}

		internal override System.Single AddTo(AnimX animx)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTo", animx), typeof(System.Single));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DiscreteAnimationTrack(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DiscreteAnimationTrack()
		{
		}
	}
	public class DiscreteAnimationKeyframe<T> : ResoniteBridge.ResoniteBridgeValueHolder
	{
		[JsonPropertyName("time")]
		public System.Single Time
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Time"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Time", value);
			}
		}

		[JsonPropertyName("value")]
		public T Value
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Value"), typeof(T)) is T __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to T");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Value", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DiscreteAnimationKeyframe(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DiscreteAnimationKeyframe()
		{
		}
	}
	public class RawAnimationTrack<T> : AnimationTrack, ResoniteBridge.ResoniteBridgeValueHolder
	{
		[System.Text.Json.Serialization.JsonIgnore]
		public override TrackType TrackType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TrackType"), typeof(TrackType)) is TrackType __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TrackType");
				}
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public override Type ValueType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValueType"), typeof(Type)) is Type __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Type");
				}
			}
		}

		[JsonPropertyName("interval")]
		public System.Single Interval
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Interval"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Interval", value);
			}
		}

		[JsonPropertyName("keyframes")]
		public List<T> Keyframes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Keyframes"), typeof(List<T>)) is List<T> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<T>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Keyframes", value);
			}
		}

		internal override System.Single AddTo(AnimX animx)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTo", animx), typeof(System.Single));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RawAnimationTrack(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RawAnimationTrack()
		{
		}
	}
	public static class SubtitleImporter
	{
		public static System.Single CONVERSION_RATIO
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubtitleImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "CONVERSION_RATIO"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubtitleImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "CONVERSION_RATIO", value);
			}
		}

		public static System.String DEFAULT_NODE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubtitleImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_NODE"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubtitleImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_NODE", value);
			}
		}

		public static System.String DEFAULT_PROPERTY
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubtitleImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_PROPERTY"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubtitleImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_PROPERTY", value);
			}
		}

		public static AnimX Import(System.String file)
		{
			return (AnimX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubtitleImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "Import", file), typeof(AnimX));
		}

		public static AnimX Import(Stream stream, System.String name)
		{
			return (AnimX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubtitleImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "Import", stream, name), typeof(AnimX));
		}

		public static void Import(Stream stream, AnimX anim, System.String node, System.String property)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubtitleImporter", ResoniteBridge.ResoniteBridgeValueType.Type), "Import", stream, anim, node, property);
		}
	}
	public enum AssetClass
	{
		Unknown,
		Text,
		Package,
		Object,
		Texture,
		Cubemap,
		Volume,
		Document,
		Model,
		PointCloud,
		Audio,
		Video,
		Shader,
		Animation,
		Font,
		Folder,
		Subtitle,
		Special
	}
	public static class AssetHelper
	{
		private static Dictionary<AssetClass, List<string>> associatedExtensions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "associatedExtensions"), typeof(Dictionary<AssetClass, List<string>>)) is Dictionary<AssetClass, List<string>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<AssetClass, List<string>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "associatedExtensions", value);
			}
		}

		private static System.Boolean IsLinux
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "IsLinux"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public static void Init()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "Init");
		}

		static AssetHelper()
		{
		}

		public static System.Boolean IsVideoStreamingService(System.Uri url)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "IsVideoStreamingService", url), typeof(System.Boolean));
		}

		public static AssetClass IdentifyClass(System.String path)
		{
			return (AssetClass)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "IdentifyClass", path), typeof(AssetClass));
		}

		public static AssetClass ClassifyExtension(System.String ext)
		{
			return (AssetClass)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "ClassifyExtension", ext), typeof(AssetClass));
		}

		public static AssetClass ClassifyMime(System.String mime)
		{
			return (AssetClass)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "ClassifyMime", mime), typeof(AssetClass));
		}

		public static colorX GetClassColor(AssetClass assetClass)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "GetClassColor", assetClass), typeof(colorX));
		}

		public static System.Boolean IsStreamingProtocol(System.Uri uri)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "IsStreamingProtocol", uri), typeof(System.Boolean));
		}

		public static System.Boolean IsStreamingProtocol(System.String scheme)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "IsStreamingProtocol", scheme), typeof(System.Boolean));
		}
	}
	public delegate float RawSampleFilter(System.Int32 index, System.Int32 channel, System.Single amplitude);
	public delegate void RawSampleHandler(System.Int32 index, System.Int32 channel, System.Single amplitude);
	public delegate void SampleHandler<S>(System.Int32 index, S sample) where S : struct, IAudioSample<S>;
	public delegate S SampleFilter<S>(System.Int32 index, S sample) where S : struct, IAudioSample<S>;
	public delegate void SampleChunkFilter<S>(ref ResoniteBridge.ResoniteBridgeValue chunk, System.Boolean isLastChunk) where S : struct, IAudioSample<S>;
	public class AudioX : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private struct SourceData<S> : ResoniteBridge.ResoniteBridgeValueHolder where S : struct, IAudioSample<S>
		{
			public ResoniteBridge.ResoniteBridgeValue data
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Span<S>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
				}
			}

			public BufferBlock block
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "block"), typeof(BufferBlock)) is BufferBlock __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to BufferBlock");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "block", value);
				}
			}

			public SourceData(ResoniteBridge.ResoniteBridgeValue data, BufferBlock block = null)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SourceData", ResoniteBridge.ResoniteBridgeValueType.Type), data, block);
			}

			public void Dispose()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public SourceData(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public SourceData()
			{
			}
		}

		public System.Int32 DEFAULT_BUFFER_SIZE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DEFAULT_BUFFER_SIZE"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DEFAULT_BUFFER_SIZE", value);
			}
		}

		private AudioEncodeSettings encodeSettings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "encodeSettings"), typeof(AudioEncodeSettings)) is AudioEncodeSettings __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AudioEncodeSettings");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "encodeSettings", value);
			}
		}

		private ISampleDecoder sampleDecoder
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "sampleDecoder"), typeof(ISampleDecoder)) is ISampleDecoder __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ISampleDecoder");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "sampleDecoder", value);
			}
		}

		private ISampleEncoder sampleEncoder
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "sampleEncoder"), typeof(ISampleEncoder)) is ISampleEncoder __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ISampleEncoder");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "sampleEncoder", value);
			}
		}

		private float[] samples
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "samples"), typeof(float[])) is float[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "samples", value);
			}
		}

		public System.Boolean IsFullyDecoded
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsFullyDecoded"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public ChannelConfiguration Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(ChannelConfiguration)) is ChannelConfiguration __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ChannelConfiguration");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Channels", value);
			}
		}

		public System.Int32 ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public Type SampleType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SampleType"), typeof(Type)) is Type __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Type");
				}
			}
		}

		public System.Int32 SampleRate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SampleRate"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SampleRate", value);
			}
		}

		public System.Int32 SampleCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SampleCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SampleCount", value);
			}
		}

		public System.Double Duration
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Duration"), typeof(System.Double)) is System.Double __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Duration", value);
			}
		}

		public System.Boolean IsReadable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsReadable"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "IsReadable", value);
			}
		}

		public System.Boolean IsWriteable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsWriteable"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "IsWriteable", value);
			}
		}

		public AudioEncodeSettings EncodeSettings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "EncodeSettings"), typeof(AudioEncodeSettings)) is AudioEncodeSettings __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AudioEncodeSettings");
				}
			}
		}

		public float[] RawSamples
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawSamples"), typeof(float[])) is float[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float[]");
				}
			}
		}

		public AudioX(ChannelConfiguration channels, System.Int32 sampleRate)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioX", ResoniteBridge.ResoniteBridgeValueType.Type), channels, sampleRate);
		}

		public AudioX(AudioEncodeSettings encodeSettings)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioX", ResoniteBridge.ResoniteBridgeValueType.Type), encodeSettings);
		}

		public AudioX(float[] data, ChannelConfiguration channels, System.Int32 sampleRate, System.Boolean writeable = false)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioX", ResoniteBridge.ResoniteBridgeValueType.Type), data, channels, sampleRate, writeable);
		}

		public AudioX(System.String file)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioX", ResoniteBridge.ResoniteBridgeValueType.Type), file);
		}

		public AudioX(Stream stream, System.String ext = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioX", ResoniteBridge.ResoniteBridgeValueType.Type), stream, ext);
		}

		private void LoadFromStream(Stream stream, System.String extension)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LoadFromStream", stream, extension);
		}

		private void ComputeDuration()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeDuration");
		}

		public System.Int32 Read<T>(ResoniteBridge.ResoniteBridgeValue target, System.Double position, System.Double rate = 1.0, System.Boolean loop = false) where T : struct, IAudioSample<T>
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", target, position, rate, loop), typeof(System.Int32));
		}

		private SourceData<S> GetSource<S>(System.Int32 offset, System.Int32 count) where S : struct, IAudioSample<S>
		{
			return (SourceData<S>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSource", offset, count), typeof(SourceData<S>));
		}

		public ResoniteBridge.ResoniteBridgeValue GetRawBuffer<S>() where S : struct, IAudioSample<S>
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawBuffer"), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public unsafe void WriteSample<S>(S sample) where S : struct, IAudioSample<S>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteSample", sample);
		}

		public void WriteSamples(ResoniteBridge.ResoniteBridgeValue newRawSamples)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteSamples", newRawSamples);
		}

		public void FinishEncode()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FinishEncode");
		}

		private void FinishEncode(ISampleEncoder encoder, AudioEncodeSettings encodeSettings)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FinishEncode", encoder, encodeSettings);
		}

		public void SetSampleCount(System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetSampleCount", count);
		}

		public void IncreaseSampleCount(System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IncreaseSampleCount", count);
		}

		public void SetDuration(System.Single duration)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetDuration", duration);
		}

		private void EnsureCapacity(System.Int32 capacity)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureCapacity", capacity);
		}

		private void CheckWritable()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckWritable");
		}

		private void CheckReadable()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckReadable");
		}

		private void CheckSampleType<S>() where S : struct, IAudioSample<S>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckSampleType");
		}

		public void Save(System.String file)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Save", file);
		}

		public static System.String SetExtension(System.String file, AudioEncodeSettings settings)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioX", ResoniteBridge.ResoniteBridgeValueType.Type), "SetExtension", file, settings), typeof(System.String));
		}

		public static ISampleEncoder CreateEncoder(Stream stream, AudioEncodeSettings settings)
		{
			return (ISampleEncoder)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioX", ResoniteBridge.ResoniteBridgeValueType.Type), "CreateEncoder", stream, settings), typeof(ISampleEncoder));
		}

		public void Encode(System.String file, AudioEncodeSettings settings)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Encode", file, settings);
		}

		public void Encode(Stream stream, AudioEncodeSettings settings)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Encode", stream, settings);
		}

		private void Encode(ISampleEncoder encoder)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Encode", encoder);
		}

		public void FullyDecode()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FullyDecode");
		}

		public void ForEachRawSample(RawSampleHandler onRead)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachRawSample", onRead);
		}

		private System.Int32 ForeachRawSampleInBlock<S>(System.Int32 offset, RawSampleHandler onRead) where S : struct, IAudioSample<S>
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForeachRawSampleInBlock", offset, onRead), typeof(System.Int32));
		}

		public void ForeachSample<S>(SampleHandler<S> onRead) where S : struct, IAudioSample<S>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForeachSample", onRead);
		}

		private System.Int32 ForeachSampleInBlock<S>(System.Int32 offset, SampleHandler<S> onRead) where S : struct, IAudioSample<S>
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForeachSampleInBlock", offset, onRead), typeof(System.Int32));
		}

		public void Trim(System.Int32 start, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trim", start, count);
		}

		public void ProcessSamplesAndTrim<S>(System.Int32 start, System.Int32 count, SampleFilter<S> filter) where S : struct, IAudioSample<S>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProcessSamplesAndTrim", start, count, filter);
		}

		public void ProcessSamples<S>(SampleFilter<S> filter) where S : struct, IAudioSample<S>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProcessSamples", filter);
		}

		public void ProcessSamples<S>(SampleChunkFilter<S> chunkFilter) where S : struct, IAudioSample<S>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProcessSamples", chunkFilter);
		}

		public void ProcessRawSamples(Func<float, float> filter)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProcessRawSamples", filter);
		}

		public void ProcessRawSamples(RawSampleFilter filter)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ProcessRawSamples", filter);
		}

		private void TrimAndProcess(System.Int32 start, System.Int32 count, RawSampleFilter rawFilter)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimAndProcess", start, count, rawFilter);
		}

		private void TrimAndProcess<S>(System.Int32 start, System.Int32 count, SampleFilter<S> sampleFilter, SampleChunkFilter<S> chunkFilter, RawSampleFilter rawFilter) where S : struct, IAudioSample<S>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimAndProcess", start, count, sampleFilter, chunkFilter, rawFilter);
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public System.Single ComputeMaximumAmplitude()
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeMaximumAmplitude"), typeof(System.Single));
		}

		public System.Single ComputeMaximumAmplitude<S>(Func<S, S> sampleFilter) where S : struct, IAudioSample<S>
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeMaximumAmplitude", sampleFilter), typeof(System.Single));
		}

		public void Normalize()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Normalize");
		}

		public void AdjustVolume(System.Single multiply)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AdjustVolume", multiply);
		}

		public void TrimSilence(System.Single threshold = 0.002f)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimSilence", threshold);
		}

		public void TrimStartSilence(System.Single threshold = 0.002f)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimStartSilence", threshold);
		}

		public void TrimEndSilence(System.Single threshold = 0.002f)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimEndSilence", threshold);
		}

		public void TrimStart(System.Single duration)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimStart", duration);
		}

		public void TrimEnd(System.Single duration)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimEnd", duration);
		}

		public void FadeIn(System.Single duration)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FadeIn", duration);
		}

		public void FadeOut(System.Single duration)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FadeOut", duration);
		}

		public void MakeFadeLoop(System.Single duration)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MakeFadeLoop", duration);
		}

		public void Resample(System.Int32 newSampleRate)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Resample", newSampleRate);
		}

		public void Denoise()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Denoise");
		}

		public void ExtractSides()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractSides");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AudioX(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AudioX()
		{
		}
	}
	public class AudioBufferPool : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public static AudioBufferPool Instance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioBufferPool", ResoniteBridge.ResoniteBridgeValueType.Type), "Instance"), typeof(AudioBufferPool)) is AudioBufferPool __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AudioBufferPool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioBufferPool", ResoniteBridge.ResoniteBridgeValueType.Type), "Instance", value);
			}
		}

		public System.Int32 BUFFER_LENGTH
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BUFFER_LENGTH"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BUFFER_LENGTH", value);
			}
		}

		public System.Int32 MaxBlockCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MaxBlockCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MaxBlockCount", value);
			}
		}

		private Dictionary<BufferBlockKey, BufferBlock> bufferBlocks
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "bufferBlocks"), typeof(Dictionary<BufferBlockKey, BufferBlock>)) is Dictionary<BufferBlockKey, BufferBlock> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<BufferBlockKey, BufferBlock>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "bufferBlocks", value);
			}
		}

		private Queue<BufferBlockKey> recycleQueue
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "recycleQueue"), typeof(Queue<BufferBlockKey>)) is Queue<BufferBlockKey> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Queue<BufferBlockKey>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "recycleQueue", value);
			}
		}

		private HashSet<BufferBlockKey> recycleQueuedBlocks
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "recycleQueuedBlocks"), typeof(HashSet<BufferBlockKey>)) is HashSet<BufferBlockKey> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to HashSet<BufferBlockKey>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "recycleQueuedBlocks", value);
			}
		}

		private System.Object _lock
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lock"), typeof(System.Object)) is System.Object __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to object");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lock", value);
			}
		}

		public BufferBlock RequestBlock(AudioX clip, System.Int32 position)
		{
			return (BufferBlock)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RequestBlock", clip, position), typeof(BufferBlock));
		}

		public BufferBlock RequestBlock(in BufferBlockKey key)
		{
			return (BufferBlock)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RequestBlock", key), typeof(BufferBlock));
		}

		public void ReturnBlock(BufferBlock block)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReturnBlock", block);
		}

		private BufferBlock GetFreshBlock()
		{
			return (BufferBlock)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetFreshBlock"), typeof(BufferBlock));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AudioBufferPool(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AudioBufferPool()
		{
		}
	}
	public class BufferBlock : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public BufferBlockKey key
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "key"), typeof(BufferBlockKey)) is BufferBlockKey __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BufferBlockKey");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "key", value);
			}
		}

		public System.Boolean isDecoded
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "isDecoded"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "isDecoded", value);
			}
		}

		public System.Int32 userCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "userCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "userCount", value);
			}
		}

		public System.Int32 decodedSamples
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "decodedSamples"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "decodedSamples", value);
			}
		}

		public float[] buffer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "buffer"), typeof(float[])) is float[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "buffer", value);
			}
		}

		public BufferBlock(float[] buffer)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BufferBlock", ResoniteBridge.ResoniteBridgeValueType.Type), buffer);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BufferBlock(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BufferBlock()
		{
		}
	}
	public struct BufferBlockKey : IEquatable<BufferBlockKey>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public AudioX clip
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "clip"), typeof(AudioX)) is AudioX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AudioX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "clip", value);
			}
		}

		public System.Int32 position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "position"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "position", value);
			}
		}

		public BufferBlockKey(AudioX clip, System.Int32 position)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BufferBlockKey", ResoniteBridge.ResoniteBridgeValueType.Type), clip, position);
		}

		public override System.Boolean Equals(System.Object obj)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", obj), typeof(System.Boolean));
		}

		public System.Boolean Equals(BufferBlockKey other)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other), typeof(System.Boolean));
		}

		public override System.Int32 GetHashCode()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
		}

		public static bool operator ==(BufferBlockKey left, BufferBlockKey right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BufferBlockKey", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Equality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public static bool operator !=(BufferBlockKey left, BufferBlockKey right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BufferBlockKey", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Inequality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BufferBlockKey(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BufferBlockKey()
		{
		}
	}
	public struct CircularBufferReadState<S> : ResoniteBridge.ResoniteBridgeValueHolder where S : struct, IAudioSample<S>
	{
		public S lastSample
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "lastSample"), typeof(S)) is S __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to S");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "lastSample", value);
			}
		}

		public System.Int64 lastGlobalPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "lastGlobalPosition"), typeof(System.Int64)) is System.Int64 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to long");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "lastGlobalPosition", value);
			}
		}

		public System.Double lastPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "lastPosition"), typeof(System.Double)) is System.Double __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "lastPosition", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CircularBufferReadState(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CircularBufferReadState()
		{
		}
	}
	public struct CircularBufferWriteState<S> : ResoniteBridge.ResoniteBridgeValueHolder where S : struct, IAudioSample<S>
	{
		public S lastSample
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "lastSample"), typeof(S)) is S __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to S");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "lastSample", value);
			}
		}

		public System.Double lastPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "lastPosition"), typeof(System.Double)) is System.Double __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "lastPosition", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CircularBufferWriteState(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CircularBufferWriteState()
		{
		}
	}
	public abstract class CircularAudioBuffer : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public abstract System.Int32 Length { get; }

		public System.Int64 GlobalIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "GlobalIndex"), typeof(System.Int64)) is System.Int64 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to long");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "GlobalIndex", value);
			}
		}

		public System.Int32 CurrentHead
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CurrentHead"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "CurrentHead", value);
			}
		}

		public System.Int64 StartGlobalIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "StartGlobalIndex"), typeof(System.Int64)) is System.Int64 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to long");
				}
			}
		}

		public System.Int32 AvailableSamples(System.Int64 lastIndex)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AvailableSamples", lastIndex), typeof(System.Int32));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CircularAudioBuffer(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CircularAudioBuffer()
		{
		}
	}
	public class CircularAudioBuffer<S> : CircularAudioBuffer, IEnumerable<S>, IEnumerable, ResoniteBridge.ResoniteBridgeValueHolder where S : struct, IAudioSample<S>
	{
		private S[] data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(S[])) is S[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to S[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
			}
		}

		public override System.Int32 Length
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Length"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public CircularAudioBuffer(System.Int32 length, CircularAudioBuffer<S> initializeWith = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CircularAudioBuffer", ResoniteBridge.ResoniteBridgeValueType.Type), length, initializeWith);
		}

		public void Put<T>(ResoniteBridge.ResoniteBridgeValue source) where T : struct, IAudioSample<T>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Put", source);
		}

		public void Put<T>(ResoniteBridge.ResoniteBridgeValue source, ref CircularBufferWriteState<T> state, System.Double rate = 1.0) where T : struct, IAudioSample<T>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Put", source, state, rate);
		}

		public void Put<T>(ResoniteBridge.ResoniteBridgeValue source, ref System.Double position, ref T lastSample, System.Double rate = 1.0) where T : struct, IAudioSample<T>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Put", source, position, lastSample, rate);
		}

		public System.Int32 Read<T>(ResoniteBridge.ResoniteBridgeValue target, ref System.Int64 globalPosition, System.Double rate = 1.0) where T : struct, IAudioSample<T>
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", target, globalPosition, rate), typeof(System.Int32));
		}

		public System.Int32 Read<T>(ResoniteBridge.ResoniteBridgeValue target, ref CircularBufferReadState<S> state, System.Double rate) where T : struct, IAudioSample<T>
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", target, state, rate), typeof(System.Int32));
		}

		public System.Int32 Read<T>(ResoniteBridge.ResoniteBridgeValue target, ref System.Int64 globalPosition, System.Double rate, ref System.Double position, ref S lastSample) where T : struct, IAudioSample<T>
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", target, globalPosition, rate, position, lastSample), typeof(System.Int32));
		}

		public IEnumerator<S> GetEnumerator()
		{
			return (IEnumerator<S>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetEnumerator"), typeof(IEnumerator<S>));
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return (IEnumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable.GetEnumerator"), typeof(IEnumerator));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CircularAudioBuffer(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CircularAudioBuffer()
		{
		}
	}
	[DataModelType]
	public enum ChannelConfiguration
	{
		Mono,
		Stereo,
		Quad,
		Surround51
	}
	public static class ChannelHelper
	{
		public static System.Int32 ChannelCount(this ChannelConfiguration channelConfiguration)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ChannelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "ChannelCount", channelConfiguration), typeof(System.Int32));
		}

		public static Type SampleType(this ChannelConfiguration channelConfiguration)
		{
			return (Type)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ChannelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "SampleType", channelConfiguration), typeof(Type));
		}
	}
	public class CSCoreSampleDecoder : ISampleDecoder, IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private IWaveSource waveSource
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "waveSource"), typeof(IWaveSource)) is IWaveSource __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IWaveSource");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "waveSource", value);
			}
		}

		private ISampleSource sampleSource
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "sampleSource"), typeof(ISampleSource)) is ISampleSource __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ISampleSource");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "sampleSource", value);
			}
		}

		public Stream InputStream
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "InputStream"), typeof(Stream)) is Stream __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Stream");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "InputStream", value);
			}
		}

		public System.Int32 Samples
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Samples"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Samples", value);
			}
		}

		public System.Int32 SampleRate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SampleRate"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SampleRate", value);
			}
		}

		public ChannelConfiguration Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(ChannelConfiguration)) is ChannelConfiguration __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ChannelConfiguration");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Channels", value);
			}
		}

		public System.Int64 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Position"), typeof(System.Int64)) is System.Int64 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to long");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Position", value);
			}
		}

		public AudioEncodeSettings EncodeSettings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "EncodeSettings"), typeof(AudioEncodeSettings)) is AudioEncodeSettings __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AudioEncodeSettings");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "EncodeSettings", value);
			}
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		public System.Int32 Read(float[] buffer, System.Int32 offset, System.Int32 count)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", buffer, offset, count), typeof(System.Int32));
		}

		public CSCoreSampleDecoder(System.String file)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CSCoreSampleDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), file);
		}

		public CSCoreSampleDecoder(Stream stream, System.String extension = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CSCoreSampleDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), stream, extension);
		}

		private void Load(Stream stream, System.String extension)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Load", stream, extension);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CSCoreSampleDecoder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CSCoreSampleDecoder()
		{
		}
	}
	public class FlacEncoder : ISampleEncoder, IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue writer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "writer"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to FlakeWriter");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "writer", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue buffer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "buffer"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AudioBuffer");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "buffer", value);
			}
		}

		public Stream OutputStream
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputStream"), typeof(Stream)) is Stream __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Stream");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "OutputStream", value);
			}
		}

		public FlacEncoder(Stream stream, FlacEncodeSettings settings)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FlacEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), stream, settings);
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		public void Write(ResoniteBridge.ResoniteBridgeValue samples)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", samples);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FlacEncoder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FlacEncoder()
		{
		}
	}
	public class VorbisEncoder : ISampleEncoder, IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 BUFFER_SIZE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BUFFER_SIZE"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BUFFER_SIZE", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue oggStream
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "oggStream"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to OggStream");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "oggStream", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue processingState
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "processingState"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ProcessingState");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "processingState", value);
			}
		}

		private float[][] buffer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "buffer"), typeof(float[][])) is float[][] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float[][]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "buffer", value);
			}
		}

		public System.Int32 Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public Stream OutputStream
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputStream"), typeof(Stream)) is Stream __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Stream");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "OutputStream", value);
			}
		}

		public VorbisEncoder(Stream stream, VorbisEncodeSettings settings)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VorbisEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), stream, settings);
		}

		public void Write(ResoniteBridge.ResoniteBridgeValue samples)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", samples);
		}

		public void Finish()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Finish");
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		private void WritePackets()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WritePackets");
		}

		private void FlushPages(System.Boolean force)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FlushPages", force);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public VorbisEncoder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public VorbisEncoder()
		{
		}
	}
	public class WavEncoder : ISampleEncoder, IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private WaveWriter writer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "writer"), typeof(WaveWriter)) is WaveWriter __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to WaveWriter");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "writer", value);
			}
		}

		public Stream OutputStream
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputStream"), typeof(Stream)) is Stream __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Stream");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "OutputStream", value);
			}
		}

		public WavEncoder(Stream stream, WavEncodeSettings settings)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "WavEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), stream, settings);
		}

		public void Write(ResoniteBridge.ResoniteBridgeValue samples)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", samples);
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WavEncoder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WavEncoder()
		{
		}
	}
	public abstract class AudioEncodeSettings : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 SampleRate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SampleRate"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SampleRate", value);
			}
		}

		public ChannelConfiguration Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(ChannelConfiguration)) is ChannelConfiguration __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ChannelConfiguration");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Channels", value);
			}
		}

		public System.Int32 ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public abstract System.String Extension { get; }

		public override System.Boolean Equals(System.Object obj)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", obj), typeof(System.Boolean));
		}

		public override System.Int32 GetHashCode()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
		}

		public void UpdateFrom(AudioX audio)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateFrom", audio);
		}

		public static bool operator ==(AudioEncodeSettings left, AudioEncodeSettings right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Equality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public static bool operator !=(AudioEncodeSettings left, AudioEncodeSettings right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AudioEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Inequality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public abstract System.String ToString(System.Boolean includeBaseInfo);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AudioEncodeSettings(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AudioEncodeSettings()
		{
		}
	}
	public class FlacEncodeSettings : AudioEncodeSettings, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 BitsPerSample
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsPerSample"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BitsPerSample", value);
			}
		}

		public System.Int32 CompressionLevel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CompressionLevel"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "CompressionLevel", value);
			}
		}

		public override System.String Extension
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Extension"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public void EnsureValidSettings()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureValidSettings");
		}

		public override System.Boolean Equals(System.Object obj)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", obj), typeof(System.Boolean));
		}

		public override System.Int32 GetHashCode()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
		}

		public static bool operator ==(FlacEncodeSettings left, FlacEncodeSettings right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FlacEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Equality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public static bool operator !=(FlacEncodeSettings left, FlacEncodeSettings right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FlacEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Inequality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public override System.String ToString(System.Boolean includeBaseInfo)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString", includeBaseInfo), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FlacEncodeSettings(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FlacEncodeSettings()
		{
		}
	}
	public class VorbisEncodeSettings : AudioEncodeSettings, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public static float[] QualityBitrates
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VorbisEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "QualityBitrates"), typeof(float[])) is float[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VorbisEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "QualityBitrates", value);
			}
		}

		public Dictionary<string, string> Tags
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tags"), typeof(Dictionary<string, string>)) is Dictionary<string, string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tags", value);
			}
		}

		public System.Single Quality
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Quality"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Quality", value);
			}
		}

		public override System.String Extension
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Extension"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public static System.Single BitrateToQuality(System.Single bitrate)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VorbisEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "BitrateToQuality", bitrate), typeof(System.Single));
		}

		public static System.Single QualityToBitrate(System.Single quality)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VorbisEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "QualityToBitrate", quality), typeof(System.Single));
		}

		public void EnsureValidSettings()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureValidSettings");
		}

		public override System.Boolean Equals(System.Object obj)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", obj), typeof(System.Boolean));
		}

		public override System.Int32 GetHashCode()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
		}

		public static bool operator ==(VorbisEncodeSettings left, VorbisEncodeSettings right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VorbisEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Equality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public static bool operator !=(VorbisEncodeSettings left, VorbisEncodeSettings right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VorbisEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Inequality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public override System.String ToString(System.Boolean includeBaseInfo)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString", includeBaseInfo), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public VorbisEncodeSettings(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public VorbisEncodeSettings()
		{
		}
	}
	public class WavEncodeSettings : AudioEncodeSettings, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public enum SampleFormat
		{
			Byte_8,
			Short_16,
			Int_24,
			Int_32,
			Float_32
		}

		public SampleFormat Format
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Format"), typeof(SampleFormat)) is SampleFormat __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SampleFormat");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Format", value);
			}
		}

		public System.Int32 BitsPerSample
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsPerSample"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public override System.String Extension
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Extension"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public override System.Boolean Equals(System.Object obj)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", obj), typeof(System.Boolean));
		}

		public override System.Int32 GetHashCode()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
		}

		public static bool operator ==(WavEncodeSettings left, WavEncodeSettings right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "WavEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Equality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public static bool operator !=(WavEncodeSettings left, WavEncodeSettings right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "WavEncodeSettings", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Inequality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public override System.String ToString(System.Boolean includeBaseInfo)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString", includeBaseInfo), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public WavEncodeSettings(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public WavEncodeSettings()
		{
		}
	}
	public interface ISampleDecoder : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		Stream InputStream
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "InputStream"), typeof(Stream)) is Stream __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Stream");
				}
			}
		}

		System.Int32 Samples
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Samples"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		System.Int32 SampleRate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SampleRate"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		ChannelConfiguration Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(ChannelConfiguration)) is ChannelConfiguration __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ChannelConfiguration");
				}
			}
		}

		System.Int64 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Position"), typeof(System.Int64)) is System.Int64 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to long");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Position", value);
			}
		}

		AudioEncodeSettings EncodeSettings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "EncodeSettings"), typeof(AudioEncodeSettings)) is AudioEncodeSettings __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AudioEncodeSettings");
				}
			}
		}

		System.Int32 Read(float[] buffer, System.Int32 offset, System.Int32 count);
	}
	public interface ISampleEncoder : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		Stream OutputStream
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OutputStream"), typeof(Stream)) is Stream __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Stream");
				}
			}
		}

		void Write(ResoniteBridge.ResoniteBridgeValue samples);
	}
	public interface IAudioDataSource : ResoniteBridge.ResoniteBridgeValueHolder
	{
	}
	public class BufferDenoiser<S> : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder where S : struct, IAudioSample<S>
	{
		private List<ResoniteBridge.ResoniteBridgeValue> _denoisers
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_denoisers"), typeof(List<ResoniteBridge.ResoniteBridgeValue>)) is List<ResoniteBridge.ResoniteBridgeValue> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Denoiser>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_denoisers", value);
			}
		}

		private System.Int32 ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public BufferDenoiser()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BufferDenoiser", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public void Denoise(ref ResoniteBridge.ResoniteBridgeValue buffer, System.Boolean finish)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Denoise", buffer, finish);
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BufferDenoiser(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public static class SampleHelper
	{
		public static System.Double SAMPLE_POSITION_EPSILON
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "SAMPLE_POSITION_EPSILON"), typeof(System.Double)) is System.Double __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "SAMPLE_POSITION_EPSILON", value);
			}
		}

		public static System.Int32 GetSampleChannelCount(this Type type)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "GetSampleChannelCount", type), typeof(System.Int32));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsMonoBuffer(this float[] buffer, System.Int32 offset = 0, System.Int32 count = -1)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsMonoBuffer", buffer, offset, count), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsStereoBuffer(this float[] buffer, System.Int32 offset = 0, System.Int32 count = -1)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsStereoBuffer", buffer, offset, count), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsQuadBuffer(this float[] buffer, System.Int32 offset = 0, System.Int32 count = -1)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsQuadBuffer", buffer, offset, count), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsSurround51Buffer(this float[] buffer, System.Int32 offset = 0, System.Int32 count = -1)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsSurround51Buffer", buffer, offset, count), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsAudioBuffer<S>(this float[] buffer, System.Int32 offset = 0, System.Int32 count = -1) where S : struct, IAudioSample<S>
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsAudioBuffer", buffer, offset, count), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsMonoBuffer(this ResoniteBridge.ResoniteBridgeValue buffer)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsMonoBuffer", buffer), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsStereoBuffer(this ResoniteBridge.ResoniteBridgeValue buffer)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsStereoBuffer", buffer), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsQuadBuffer(this ResoniteBridge.ResoniteBridgeValue buffer)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsQuadBuffer", buffer), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsSurround51Buffer(this ResoniteBridge.ResoniteBridgeValue buffer)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsSurround51Buffer", buffer), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue AsAudioBuffer<S>(this ResoniteBridge.ResoniteBridgeValue buffer) where S : struct, IAudioSample<S>
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "AsAudioBuffer", buffer), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static System.Int32 TransitionSampleBlock<S, T>(ResoniteBridge.ResoniteBridgeValue target, ref System.Double startOffset, S lastSample, S nextSample, System.Double rate = 1.0) where S : struct, IAudioSample<S> where T : struct, IAudioSample<T>
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TransitionSampleBlock", target, startOffset, lastSample, nextSample, rate), typeof(System.Int32));
		}

		public static System.Int32 CopySamples<S, T>(this ResoniteBridge.ResoniteBridgeValue source, ResoniteBridge.ResoniteBridgeValue target) where S : struct, IAudioSample<S> where T : struct, IAudioSample<T>
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "CopySamples", source, target), typeof(System.Int32));
		}

		public static System.Int32 CopySamples<S, T>(this ResoniteBridge.ResoniteBridgeValue source, ResoniteBridge.ResoniteBridgeValue target, ref System.Double sourcePosition, ref S lastSample, System.Double rate = 1.0) where S : struct, IAudioSample<S> where T : struct, IAudioSample<T>
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "CopySamples", source, target, sourcePosition, lastSample, rate), typeof(System.Int32));
		}

		public static void Multiply<S>(this ResoniteBridge.ResoniteBridgeValue buffer, System.Single gain) where S : struct, IAudioSample<S>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "Multiply", buffer, gain);
		}

		public static void Add<S>(this ResoniteBridge.ResoniteBridgeValue buffer, ResoniteBridge.ResoniteBridgeValue other) where S : struct, IAudioSample<S>
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SampleHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "Add", buffer, other);
		}
	}
	[DataModelType]
	public interface IAudioSample : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.Int32 ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		ChannelConfiguration Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(ChannelConfiguration)) is ChannelConfiguration __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ChannelConfiguration");
				}
			}
		}

		float this[System.Int32 ch]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		System.Single AbsoluteAmplitude
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AbsoluteAmplitude"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		MonoSample ToMono();

		StereoSample ToStereo();

		QuadSample ToQuad();

		Surround51Sample ToSurround51();
	}
	public interface IAudioSample<S> : IAudioSample, ResoniteBridge.ResoniteBridgeValueHolder where S : struct, IAudioSample<S>
	{
		S Add(S sample);

		S Subtract(S sample);

		S Multiply(System.Single value);

		S Bias(System.Single value);

		S LerpTo(S next, System.Single lerp);

		S SetChannel(System.Int32 channel, System.Single value);
	}
	public struct MonoSample : IAudioSample<MonoSample>, IAudioSample, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 CHANNEL_COUNT
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CHANNEL_COUNT"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CHANNEL_COUNT", value);
			}
		}

		public System.Single amplitude
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "amplitude"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "amplitude", value);
			}
		}

		public System.Int32 ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public ChannelConfiguration Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(ChannelConfiguration)) is ChannelConfiguration __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ChannelConfiguration");
				}
			}
		}

		public System.Single AbsoluteAmplitude
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AbsoluteAmplitude"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public float this[System.Int32 channel] => amplitude;

		public MonoSample SetChannel(System.Int32 channel, System.Single value)
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetChannel", channel, value), typeof(MonoSample));
		}

		public MonoSample(System.Single amplitude)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), amplitude);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator float(MonoSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", sample), typeof(System.Single)) is System.Single __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to float");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator MonoSample(System.Single amplitude)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", amplitude), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static explicit operator MonoSample(in StereoSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Explicit", sample), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static explicit operator MonoSample(in QuadSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Explicit", sample), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static explicit operator MonoSample(in Surround51Sample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Explicit", sample), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static MonoSample operator +(MonoSample a, MonoSample b)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Addition", a, b), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static MonoSample operator -(MonoSample a, MonoSample b)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Subtraction", a, b), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static MonoSample operator *(MonoSample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Multiply", s, v), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static MonoSample operator /(MonoSample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Division", s, v), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static MonoSample operator *(System.Single v, MonoSample s)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Multiply", v, s), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static MonoSample operator /(System.Single v, MonoSample s)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MonoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Division", v, s), typeof(MonoSample)) is MonoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to MonoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public MonoSample Multiply(System.Single value)
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Multiply", value), typeof(MonoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public MonoSample Bias(System.Single value)
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Bias", value), typeof(MonoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public MonoSample Add(MonoSample sample)
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Add", sample), typeof(MonoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public MonoSample Subtract(MonoSample sample)
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Subtract", sample), typeof(MonoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public MonoSample LerpTo(MonoSample next, System.Single lerp)
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LerpTo", next, lerp), typeof(MonoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public MonoSample ToMono()
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToMono"), typeof(MonoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public StereoSample ToStereo()
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToStereo"), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public QuadSample ToQuad()
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToQuad"), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Surround51Sample ToSurround51()
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToSurround51"), typeof(Surround51Sample));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MonoSample(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MonoSample()
		{
		}
	}
	public struct QuadSample : IAudioSample<QuadSample>, IAudioSample, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 CHANNEL_COUNT
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CHANNEL_COUNT"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CHANNEL_COUNT", value);
			}
		}

		public System.Single leftFront
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "leftFront"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "leftFront", value);
			}
		}

		public System.Single rightFront
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "rightFront"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "rightFront", value);
			}
		}

		public System.Single leftRear
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "leftRear"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "leftRear", value);
			}
		}

		public System.Single rightRear
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "rightRear"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "rightRear", value);
			}
		}

		public System.Int32 ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public ChannelConfiguration Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(ChannelConfiguration)) is ChannelConfiguration __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ChannelConfiguration");
				}
			}
		}

		public System.Single AbsoluteAmplitude
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AbsoluteAmplitude"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public float this[System.Int32 channel] => (channel & 2) switch
		{
			0 => leftFront, 
			1 => rightFront, 
			2 => leftRear, 
			3 => rightRear, 
			_ => 0f, 
		};

		public System.Single Left
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Left"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single Right
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Right"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public QuadSample SwappedChannels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SwappedChannels"), typeof(QuadSample)) is QuadSample __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to QuadSample");
				}
			}
		}

		public QuadSample SetChannel(System.Int32 channel, System.Single value)
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetChannel", channel, value), typeof(QuadSample));
		}

		public QuadSample(System.Single amplitude)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), amplitude);
		}

		public QuadSample(System.Single left, System.Single right)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), left, right);
		}

		public QuadSample(System.Single leftFront, System.Single rightFront, System.Single leftRear, System.Single rightRear)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), leftFront, rightFront, leftRear, rightRear);
		}

		public QuadSample ExtractSides()
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractSides"), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator QuadSample(MonoSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", sample), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator QuadSample(in StereoSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", sample), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator QuadSample(in Surround51Sample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", sample), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static explicit operator float(in QuadSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Explicit", sample), typeof(System.Single)) is System.Single __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to float");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static QuadSample operator +(in QuadSample a, in QuadSample b)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Addition", a, b), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static QuadSample operator -(in QuadSample a, in QuadSample b)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Subtraction", a, b), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static QuadSample operator +(in QuadSample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Addition", s, v), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static QuadSample operator *(in QuadSample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Multiply", s, v), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static QuadSample operator /(in QuadSample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Division", s, v), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static QuadSample operator *(System.Single v, in QuadSample s)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Multiply", v, s), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static QuadSample operator /(System.Single v, in QuadSample s)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Division", v, s), typeof(QuadSample)) is QuadSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to QuadSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public QuadSample Multiply(System.Single value)
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Multiply", value), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public QuadSample Bias(System.Single value)
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Bias", value), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public QuadSample Add(QuadSample sample)
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Add", sample), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public QuadSample Subtract(QuadSample sample)
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Subtract", sample), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public QuadSample LerpTo(QuadSample next, System.Single lerp)
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LerpTo", next, lerp), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public MonoSample ToMono()
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToMono"), typeof(MonoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public StereoSample ToStereo()
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToStereo"), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public QuadSample ToQuad()
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToQuad"), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Surround51Sample ToSurround51()
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToSurround51"), typeof(Surround51Sample));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public QuadSample(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public QuadSample()
		{
		}
	}
	public struct StereoSample : IAudioSample<StereoSample>, IAudioSample, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 CHANNEL_COUNT
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CHANNEL_COUNT"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CHANNEL_COUNT", value);
			}
		}

		public System.Single left
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "left"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "left", value);
			}
		}

		public System.Single right
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "right"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "right", value);
			}
		}

		public System.Int32 ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public ChannelConfiguration Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(ChannelConfiguration)) is ChannelConfiguration __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ChannelConfiguration");
				}
			}
		}

		public float this[System.Int32 channel]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single AbsoluteAmplitude
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AbsoluteAmplitude"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public StereoSample SwappedChannels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SwappedChannels"), typeof(StereoSample)) is StereoSample __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to StereoSample");
				}
			}
		}

		public StereoSample SetChannel(System.Int32 channel, System.Single value)
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetChannel", channel, value), typeof(StereoSample));
		}

		public StereoSample(System.Single amplitude)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), amplitude);
		}

		public StereoSample(System.Single left, System.Single right)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), left, right);
		}

		public StereoSample ExtractSides()
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractSides"), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator StereoSample(MonoSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", sample), typeof(StereoSample)) is StereoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to StereoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static explicit operator StereoSample(in QuadSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Explicit", sample), typeof(StereoSample)) is StereoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to StereoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static explicit operator StereoSample(in Surround51Sample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Explicit", sample), typeof(StereoSample)) is StereoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to StereoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static explicit operator float(in StereoSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Explicit", sample), typeof(System.Single)) is System.Single __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to float");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static StereoSample operator +(in StereoSample a, in StereoSample b)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Addition", a, b), typeof(StereoSample)) is StereoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to StereoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static StereoSample operator -(in StereoSample a, in StereoSample b)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Subtraction", a, b), typeof(StereoSample)) is StereoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to StereoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static StereoSample operator *(in StereoSample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Multiply", s, v), typeof(StereoSample)) is StereoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to StereoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static StereoSample operator /(in StereoSample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Division", s, v), typeof(StereoSample)) is StereoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to StereoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static StereoSample operator *(System.Single v, in StereoSample s)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Multiply", v, s), typeof(StereoSample)) is StereoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to StereoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static StereoSample operator /(System.Single v, in StereoSample s)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StereoSample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Division", v, s), typeof(StereoSample)) is StereoSample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to StereoSample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public StereoSample Multiply(System.Single value)
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Multiply", value), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public StereoSample Bias(System.Single value)
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Bias", value), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public StereoSample Add(StereoSample sample)
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Add", sample), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public StereoSample Subtract(StereoSample sample)
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Subtract", sample), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public StereoSample LerpTo(StereoSample next, System.Single lerp)
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LerpTo", next, lerp), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public MonoSample ToMono()
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToMono"), typeof(MonoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public StereoSample ToStereo()
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToStereo"), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public QuadSample ToQuad()
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToQuad"), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Surround51Sample ToSurround51()
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToSurround51"), typeof(Surround51Sample));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StereoSample(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StereoSample()
		{
		}
	}
	public struct Surround51Sample : IAudioSample<Surround51Sample>, IAudioSample, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 CHANNEL_COUNT
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CHANNEL_COUNT"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CHANNEL_COUNT", value);
			}
		}

		public System.Single leftFront
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "leftFront"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "leftFront", value);
			}
		}

		public System.Single rightFront
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "rightFront"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "rightFront", value);
			}
		}

		public System.Single center
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "center"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "center", value);
			}
		}

		public System.Single subwoofer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "subwoofer"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "subwoofer", value);
			}
		}

		public System.Single leftRear
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "leftRear"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "leftRear", value);
			}
		}

		public System.Single rightRear
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "rightRear"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "rightRear", value);
			}
		}

		public System.Int32 ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public ChannelConfiguration Channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Channels"), typeof(ChannelConfiguration)) is ChannelConfiguration __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ChannelConfiguration");
				}
			}
		}

		public System.Single Left
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Left"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single Right
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Right"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single AbsoluteAmplitude
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AbsoluteAmplitude"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public float this[System.Int32 channel] => channel switch
		{
			0 => leftFront, 
			1 => rightFront, 
			2 => center, 
			3 => subwoofer, 
			4 => leftRear, 
			5 => rightRear, 
			_ => 0f, 
		};

		public Surround51Sample SwappedChannels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SwappedChannels"), typeof(Surround51Sample)) is Surround51Sample __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Surround51Sample");
				}
			}
		}

		public Surround51Sample SetChannel(System.Int32 channel, System.Single value)
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetChannel", channel, value), typeof(Surround51Sample));
		}

		public Surround51Sample(System.Single amplitude)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), amplitude);
		}

		public Surround51Sample(System.Single left, System.Single right)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), left, right);
		}

		public Surround51Sample(System.Single leftFront, System.Single rightFront, System.Single center, System.Single subwoofer, System.Single leftRear, System.Single rightRear)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), leftFront, rightFront, center, subwoofer, leftRear, rightRear);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator Surround51Sample(MonoSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", sample), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator Surround51Sample(in StereoSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", sample), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static implicit operator Surround51Sample(in QuadSample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", sample), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static explicit operator float(in Surround51Sample sample)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Explicit", sample), typeof(System.Single)) is System.Single __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to float");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Surround51Sample operator +(in Surround51Sample a, in Surround51Sample b)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Addition", a, b), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Surround51Sample operator -(in Surround51Sample a, in Surround51Sample b)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Subtraction", a, b), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Surround51Sample operator +(in Surround51Sample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Addition", s, v), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Surround51Sample operator *(in Surround51Sample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Multiply", s, v), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Surround51Sample operator /(in Surround51Sample s, System.Single v)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Division", s, v), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Surround51Sample operator *(System.Single v, in Surround51Sample s)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Multiply", v, s), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Surround51Sample operator /(System.Single v, in Surround51Sample s)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Surround51Sample", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Division", v, s), typeof(Surround51Sample)) is Surround51Sample __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to Surround51Sample");
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Surround51Sample Multiply(System.Single value)
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Multiply", value), typeof(Surround51Sample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Surround51Sample Bias(System.Single value)
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Bias", value), typeof(Surround51Sample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Surround51Sample Add(Surround51Sample sample)
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Add", sample), typeof(Surround51Sample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Surround51Sample Subtract(Surround51Sample sample)
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Subtract", sample), typeof(Surround51Sample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Surround51Sample LerpTo(Surround51Sample next, System.Single lerp)
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LerpTo", next, lerp), typeof(Surround51Sample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public MonoSample ToMono()
		{
			return (MonoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToMono"), typeof(MonoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public StereoSample ToStereo()
		{
			return (StereoSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToStereo"), typeof(StereoSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public QuadSample ToQuad()
		{
			return (QuadSample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToQuad"), typeof(QuadSample));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Surround51Sample ToSurround51()
		{
			return (Surround51Sample)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToSurround51"), typeof(Surround51Sample));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Surround51Sample(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Surround51Sample()
		{
		}
	}
	public class VorbisWriter : ResoniteBridge.ResoniteBridgeValueHolder
	{
		private Stream outStream
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "outStream"), typeof(Stream)) is Stream __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Stream");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "outStream", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue oggStream
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "oggStream"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to OggStream");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "oggStream", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue info
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "info"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to VorbisInfo");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "info", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue comments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "comments"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Comments");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "comments", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue processingState
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "processingState"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ProcessingState");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "processingState", value);
			}
		}

		private float[][] _buffer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_buffer"), typeof(float[][])) is float[][] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float[][]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_buffer", value);
			}
		}

		public System.Boolean HeaderWritten
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HeaderWritten"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HeaderWritten", value);
			}
		}

		public VorbisWriter(Stream stream, System.Int32 channels, System.Int32 sampleRate, System.Single quality)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VorbisWriter", ResoniteBridge.ResoniteBridgeValueType.Type), stream, channels, sampleRate, quality);
		}

		public void AddTag(System.String tag, System.String content)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTag", tag, content);
		}

		public void WriteHeader()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteHeader");
		}

		public void WriteAudio(float[] buffer)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteAudio", buffer);
		}

		public void WriteAudio(float[] buffer, System.Int32 samples)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteAudio", buffer, samples);
		}

		public void WriteAudio(float[][] data)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteAudio", data);
		}

		public void WriteAudio(float[][] data, System.Int32 samples)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteAudio", data, samples);
		}

		public void Finish()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Finish");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public VorbisWriter(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public VorbisWriter()
		{
		}
	}
	public class DocumentX : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private IDocumentDataSource documentDataSource
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "documentDataSource"), typeof(IDocumentDataSource)) is IDocumentDataSource __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IDocumentDataSource");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "documentDataSource", value);
			}
		}

		public System.String Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Name"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Name", value);
			}
		}

		public System.Int32 PageCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PageCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "PageCount", value);
			}
		}

		public DocumentX(IDocumentDataSource dataSource)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "DocumentX", ResoniteBridge.ResoniteBridgeValueType.Type), dataSource);
		}

		public DocumentX(System.String file)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "DocumentX", ResoniteBridge.ResoniteBridgeValueType.Type), file);
		}

		private void InitDataSource(IDocumentDataSource dataSource)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitDataSource", dataSource);
		}

		public IDocumentPage GetPage(System.Int32 index)
		{
			return (IDocumentPage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPage", index), typeof(IDocumentPage));
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DocumentX(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DocumentX()
		{
		}
	}
	public interface IDocumentDataSource : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.String Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Name"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		System.Int32 PageCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PageCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		IDocumentPage GetPage(System.Int32 index);
	}
	public interface IDocumentPage : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		double2 ReferenceSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ReferenceSize"), typeof(double2)) is double2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double2");
				}
			}
		}

		System.Boolean HasAlpha
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasAlpha"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		void RenderTo(Bitmap2D bitmap);

		void RenderTo(Bitmap2D bitmap, Rect pageSection);
	}
	public class PDF_DataSource : IDocumentDataSource, IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private PdfDocument _document
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_document"), typeof(PdfDocument)) is PdfDocument __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to PdfDocument");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_document", value);
			}
		}

		public System.String Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Name"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Name", value);
			}
		}

		public System.Int32 PageCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PageCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public PDF_DataSource(System.String file)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PDF_DataSource", ResoniteBridge.ResoniteBridgeValueType.Type), file);
		}

		public PDF_DataSource(Stream stream)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PDF_DataSource", ResoniteBridge.ResoniteBridgeValueType.Type), stream);
		}

		public IDocumentPage GetPage(System.Int32 index)
		{
			return (IDocumentPage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPage", index), typeof(IDocumentPage));
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PDF_DataSource(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PDF_DataSource()
		{
		}
	}
	public class PDF_Page : IDocumentPage, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private struct RenderFormat : ResoniteBridge.ResoniteBridgeValueHolder
		{
			public BitmapFormats format
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "format"), typeof(BitmapFormats)) is BitmapFormats __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to BitmapFormats");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "format", value);
				}
			}

			public System.Boolean reverseByteOrder
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "reverseByteOrder"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "reverseByteOrder", value);
				}
			}

			public RenderFormat(BitmapFormats format, System.Boolean reverseByteOrder)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "RenderFormat", ResoniteBridge.ResoniteBridgeValueType.Type), format, reverseByteOrder);
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public RenderFormat(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public RenderFormat()
			{
			}
		}

		private PdfPage _page
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_page"), typeof(PdfPage)) is PdfPage __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to PdfPage");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_page", value);
			}
		}

		public System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public double2 ReferenceSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ReferenceSize"), typeof(double2)) is double2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double2");
				}
			}
		}

		public System.Boolean HasAlpha
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasAlpha"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public PDF_Page(PdfPage page)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PDF_Page", ResoniteBridge.ResoniteBridgeValueType.Type), page);
		}

		public void RenderTo(Bitmap2D bitmap)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RenderTo", bitmap);
		}

		public unsafe void RenderTo(Bitmap2D bitmap, Rect pageSection)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RenderTo", bitmap, pageSection);
		}

		private static RenderFormat? ToPDFium(TextureFormat format)
		{
			return (RenderFormat?)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PDF_Page", ResoniteBridge.ResoniteBridgeValueType.Type), "ToPDFium", format), typeof(RenderFormat));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PDF_Page(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PDF_Page()
		{
		}
	}
	public static class FileUtility
	{
		public static System.String DetectMime(System.String path)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FileUtility", ResoniteBridge.ResoniteBridgeValueType.Type), "DetectMime", path), typeof(System.String));
		}
	}
	public class LocaleData : ResoniteBridge.ResoniteBridgeValueHolder
	{
		[JsonPropertyName("localeCode")]
		public System.String LocaleCode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LocaleCode"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "LocaleCode", value);
			}
		}

		[JsonPropertyName("authors")]
		public List<string> Authors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Authors"), typeof(List<string>)) is List<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Authors", value);
			}
		}

		[JsonPropertyName("messages")]
		public Dictionary<string, string> Messages
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Messages"), typeof(Dictionary<string, string>)) is Dictionary<string, string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Messages", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocaleData(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocaleData()
		{
		}
	}
	public class LocaleResource : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public struct Message : ResoniteBridge.ResoniteBridgeValueHolder
		{
			public System.String localeCode
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "localeCode"), typeof(System.String)) is System.String __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to string");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "localeCode", value);
				}
			}

			public System.String messagePattern
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "messagePattern"), typeof(System.String)) is System.String __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to string");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "messagePattern", value);
				}
			}

			public Message(System.String localeCode, System.String messagePattern)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Message", ResoniteBridge.ResoniteBridgeValueType.Type), localeCode, messagePattern);
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Message(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Message()
			{
			}
		}

		private Dictionary<string, Message> _formatMessages
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_formatMessages"), typeof(Dictionary<string, Message>)) is Dictionary<string, Message> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, Message>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_formatMessages", value);
			}
		}

		private Dictionary<string, ResoniteBridge.ResoniteBridgeValue> _formatters
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_formatters"), typeof(Dictionary<string, ResoniteBridge.ResoniteBridgeValue>)) is Dictionary<string, ResoniteBridge.ResoniteBridgeValue> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, MessageFormatter>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_formatters", value);
			}
		}

		private Dictionary<string, List<string>> _authors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_authors"), typeof(Dictionary<string, List<string>>)) is Dictionary<string, List<string>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, List<string>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_authors", value);
			}
		}

		public System.Int32 MessageCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MessageCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public DictionaryEnumerableWrapper<string, Message> Messages
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Messages"), typeof(DictionaryEnumerableWrapper<string, Message>)) is DictionaryEnumerableWrapper<string, Message> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to DictionaryEnumerableWrapper<string, Message>");
				}
			}
		}

		public IEnumerable<KeyValuePair<string, IReadOnlyList<string>>> Authors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Authors"), typeof(IEnumerable<KeyValuePair<string, IReadOnlyList<string>>>)) is IEnumerable<KeyValuePair<string, IReadOnlyList<string>>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IEnumerable<KeyValuePair<string, IReadOnlyList<string>>>");
				}
			}
		}

		public static System.String GetMainLanguage(System.String localeCode)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "LocaleResource", ResoniteBridge.ResoniteBridgeValueType.Type), "GetMainLanguage", localeCode), typeof(System.String));
		}

		public System.Int32 CountMessages(Predicate<string> filter)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CountMessages", filter), typeof(System.Int32));
		}

		public System.String Format(System.String key, Dictionary<string, object> arguments)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Format", key, arguments), typeof(System.String));
		}

		public System.String GetKeyLocaleCode(System.String key)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetKeyLocaleCode", key), typeof(System.String));
		}

		public System.Boolean HasKey(System.String key)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HasKey", key), typeof(System.Boolean));
		}

		public System.String GetMessagePattern(System.String key)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetMessagePattern", key), typeof(System.String));
		}

		public Task LoadAdditively(System.String file)
		{
			return (Task)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LoadAdditively", file), typeof(Task));
		}

		public void LoadDataAdditively(System.String json)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LoadDataAdditively", json);
		}

		public void LoadDataAdditively(LocaleData data)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LoadDataAdditively", data);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LocaleResource(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LocaleResource()
		{
		}
	}
	public enum TextureType
	{
		Albedo,
		Normal,
		Height,
		Emissive,
		Specular,
		Gloss,
		Roughness,
		AmbientOcclusion,
		UNKNOWN
	}
	public struct ClassifiedTexture : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public TextureType type
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "type"), typeof(TextureType)) is TextureType __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TextureType");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "type", value);
			}
		}

		public System.String file
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "file"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "file", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ClassifiedTexture(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ClassifiedTexture()
		{
		}
	}
	public static class MaterialHelper
	{
		public static TextureType DetermineTextureType(System.String filename)
		{
			return (TextureType)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MaterialHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "DetermineTextureType", filename), typeof(TextureType));
		}
	}
	[DataModelType]
	public struct ConvexHullBepuData : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ResoniteBridge.ResoniteBridgeValue convexHull
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "convexHull"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ConvexHull");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "convexHull", value);
			}
		}

		public float3 center
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "center"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "center", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ConvexHullBepuData(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ConvexHullBepuData()
		{
		}
	}
	public static class BepuMeshHelper
	{
		private delegate void Decoder<T>(Stream stream, out T decoded);

		public static System.Single POINT_CLOUD_SPREAD
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "POINT_CLOUD_SPREAD"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "POINT_CLOUD_SPREAD", value);
			}
		}

		public static System.Int32 MAX_TRIANGLES
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_TRIANGLES"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_TRIANGLES", value);
			}
		}

		public static void SerializeMeshCollider(ref ResoniteBridge.ResoniteBridgeValue mesh, Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "SerializeMeshCollider", mesh, stream);
		}

		public static void SerializeTree(ref ResoniteBridge.ResoniteBridgeValue tree, Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "SerializeTree", tree, stream);
		}

		public static void DeserializeTree(Stream stream, ResoniteBridge.ResoniteBridgeValue bufferPool, ref ResoniteBridge.ResoniteBridgeValue tree)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "DeserializeTree", stream, bufferPool, tree);
		}

		private static void SerializeNodeChild(ref ResoniteBridge.ResoniteBridgeValue nodeChild, BinaryWriter writer)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "SerializeNodeChild", nodeChild, writer);
		}

		private static void DeserializeNodeChild(ref ResoniteBridge.ResoniteBridgeValue nodeChild, BinaryReader reader)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "DeserializeNodeChild", nodeChild, reader);
		}

		public static void SerializeConvexHull(ref ResoniteBridge.ResoniteBridgeValue convexHull, in float3 center, Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "SerializeConvexHull", convexHull, center, stream);
		}

		public static ResoniteBridge.ResoniteBridgeValue BuildEmptyConvexHull(ResoniteBridge.ResoniteBridgeValue bufferPool)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "BuildEmptyConvexHull", bufferPool), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static System.Boolean IsValid(ResoniteBridge.ResoniteBridgeValue points)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValid", points), typeof(System.Boolean));
		}

		public static System.Boolean IsValid(Vector3 v)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BepuMeshHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValid", v), typeof(System.Boolean));
		}
	}
	public class BlendShape : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Mesh", value);
			}
		}

		public System.String Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Name"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Name", value);
			}
		}

		private List<BlendShapeFrame> _frames
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_frames"), typeof(List<BlendShapeFrame>)) is List<BlendShapeFrame> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<BlendShapeFrame>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_frames", value);
			}
		}

		private System.Boolean _hasNormals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_hasNormals"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_hasNormals", value);
			}
		}

		private System.Boolean _hasTangents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_hasTangents"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_hasTangents", value);
			}
		}

		public System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean HasNormals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasNormals"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasNormals", value);
			}
		}

		public System.Boolean HasTangents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasTangents"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasTangents", value);
			}
		}

		public System.Int32 FrameCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FrameCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public BlendShapeFrame this[System.Int32 frame] => _frames[frame];

		public IEnumerable<BlendShapeFrame> Frames
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Frames"), typeof(IEnumerable<BlendShapeFrame>)) is IEnumerable<BlendShapeFrame> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IEnumerable<BlendShapeFrame>");
				}
			}
		}

		public BlendShapeFrame AddFrame(System.Single weight)
		{
			return (BlendShapeFrame)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddFrame", weight), typeof(BlendShapeFrame));
		}

		public BlendShapeFrame InsertFrame(System.Int32 index, System.Single weight)
		{
			return (BlendShapeFrame)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InsertFrame", index, weight), typeof(BlendShapeFrame));
		}

		public System.Boolean RemoveFrame(BlendShapeFrame frame)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveFrame", frame), typeof(System.Boolean));
		}

		public void RemoveFrameAt(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveFrameAt", index);
		}

		public void ClearFrames()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ClearFrames");
		}

		public void NormalizeFrameWeights()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "NormalizeFrameWeights");
		}

		internal BlendShape(MeshX mesh, System.String name)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlendShape", ResoniteBridge.ResoniteBridgeValueType.Type), mesh, name);
		}

		internal void EnsureCapacity(System.Int32 capacity)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureCapacity", capacity);
		}

		internal void RemoveElements(System.Int32 index, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveElements", index, count);
		}

		internal void Encode(BinaryWriter bw)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Encode", bw);
		}

		internal void Decode(BinaryReader br)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Decode", br);
		}

		public void RecalculateNormals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateNormals");
		}

		public void RecalculateNormalsMerged(System.Double cellSize = 0.001)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateNormalsMerged", cellSize);
		}

		public void RecalculateTangentsMikktspace(System.Int32 uvChannel = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateTangentsMikktspace", uvChannel);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BlendShape(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BlendShape()
		{
		}
	}
	public class BlendShapeFrame : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public BlendShape BlendShape
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BlendShape"), typeof(BlendShape)) is BlendShape __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BlendShape");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BlendShape", value);
			}
		}

		public System.Single Weight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Weight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Weight", value);
			}
		}

		internal float3[] positions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "positions"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "positions", value);
			}
		}

		internal float3[] normals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "normals"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "normals", value);
			}
		}

		internal float3[] tangents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "tangents"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "tangents", value);
			}
		}

		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
		}

		public float3[] RawPositions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawPositions"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
		}

		public float3[] RawNormals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawNormals"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
		}

		public float3[] RawTangents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawTangents"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
		}

		internal BlendShapeFrame(BlendShape shape, System.Single weight)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlendShapeFrame", ResoniteBridge.ResoniteBridgeValueType.Type), shape, weight);
		}

		public float3 GetPositionDelta(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPositionDelta", index), typeof(float3));
		}

		public float3 GetNormalDelta(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetNormalDelta", index), typeof(float3));
		}

		public float3 GetTangentDelta(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetTangentDelta", index), typeof(float3));
		}

		public void SetPositionDelta(System.Int32 index, float3 delta)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPositionDelta", index, delta);
		}

		public void SetNormalDelta(System.Int32 index, float3 delta)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetNormalDelta", index, delta);
		}

		public void SetTangentDelta(System.Int32 index, float3 delta)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetTangentDelta", index, delta);
		}

		public void SetPositionDeltas(float3[] deltas, int? count = null, System.Int32 sourceOffset = 0, System.Int32 targetOffset = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPositionDeltas", deltas, count, sourceOffset, targetOffset);
		}

		public void SetNormalDeltas(float3[] deltas, int? count = null, System.Int32 sourceOffset = 0, System.Int32 targetOffset = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetNormalDeltas", deltas, count, sourceOffset, targetOffset);
		}

		public void SetTangentDeltas(float3[] deltas, int? count = null, System.Int32 sourceOffset = 0, System.Int32 targetOffset = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetTangentDeltas", deltas, count, sourceOffset, targetOffset);
		}

		private void CopyArray(float3[] source, float3[] target, int? count, System.Int32 sourceOffset, System.Int32 targetOffset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyArray", source, target, count, sourceOffset, targetOffset);
		}

		public void CalculateDeltaNormalsFromFull()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateDeltaNormalsFromFull");
		}

		public void RecalculateNormals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateNormals");
		}

		public void RecalculateNormalsMerged(System.Double cellSize = 0.001)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateNormalsMerged", cellSize);
		}

		public System.Boolean RecalculateTangentsMikktspace(System.Int32 uvChannel = 0)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateTangentsMikktspace", uvChannel), typeof(System.Boolean));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BlendShapeFrame(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BlendShapeFrame()
		{
		}
	}
	public interface IMeshXElement : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}
	}
	public interface IMeshXPrimitive : IMeshXElement, ResoniteBridge.ResoniteBridgeValueHolder
	{
		Submesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Submesh"), typeof(Submesh)) is Submesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Submesh");
				}
			}
		}
	}
	public struct AppendResult : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public List<int> boneMapping
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "boneMapping"), typeof(List<int>)) is List<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "boneMapping", value);
			}
		}

		public List<int> blendshapeMapping
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "blendshapeMapping"), typeof(List<int>)) is List<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "blendshapeMapping", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AppendResult(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AppendResult()
		{
		}
	}
	public struct BoneBinding : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 boneIndex0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "boneIndex0"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "boneIndex0", value);
			}
		}

		public System.Int32 boneIndex1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "boneIndex1"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "boneIndex1", value);
			}
		}

		public System.Int32 boneIndex2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "boneIndex2"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "boneIndex2", value);
			}
		}

		public System.Int32 boneIndex3
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "boneIndex3"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "boneIndex3", value);
			}
		}

		public System.Single weight0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "weight0"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "weight0", value);
			}
		}

		public System.Single weight1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "weight1"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "weight1", value);
			}
		}

		public System.Single weight2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "weight2"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "weight2", value);
			}
		}

		public System.Single weight3
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "weight3"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "weight3", value);
			}
		}

		public static BoneBinding Empty
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BoneBinding", ResoniteBridge.ResoniteBridgeValueType.Type), "Empty"), typeof(BoneBinding)) is BoneBinding __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BoneBinding");
				}
			}
		}

		public System.Single TotalWeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TotalWeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Int32 GetBoneIndex(System.Int32 index)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBoneIndex", index), typeof(System.Int32));
		}

		public void SetBoneIndex(System.Int32 index, System.Int32 boneIndex)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetBoneIndex", index, boneIndex);
		}

		public System.Int32 AddBone(Bone bone, System.Single weight)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddBone", bone, weight), typeof(System.Int32));
		}

		public System.Int32 AddBone(System.Int32 index, System.Single weight)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddBone", index, weight), typeof(System.Int32));
		}

		public void Sort()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Sort");
		}

		public void Trim(System.Single threshold)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trim", threshold);
		}

		public void TrimBoneCount(System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimBoneCount", count);
		}

		public void Normalize()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Normalize");
		}

		public void FillInEmpty(System.Int32 boneIndex)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillInEmpty", boneIndex);
		}

		public void SetBinding(System.Int32 index, Bone bone, System.Single weight)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetBinding", index, bone, weight);
		}

		public void SetBinding(System.Int32 index, System.Int32 boneIndex, System.Single weight)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetBinding", index, boneIndex, weight);
		}

		public System.Single GetWeight(System.Int32 index)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetWeight", index), typeof(System.Single));
		}

		public void VerifyBoneIndexes(MeshX meshx)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "VerifyBoneIndexes", meshx);
		}

		public void ClearBones()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ClearBones");
		}

		internal void BoneRemoved(System.Int32 removedIndex)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BoneRemoved", removedIndex);
		}

		private void VerifyBoneIndex(MeshX meshx, ref System.Int32 index, ref System.Single weight)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "VerifyBoneIndex", meshx, index, weight);
		}

		private void UpdateRemovedIndex(ref System.Int32 index, System.Int32 removed)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateRemovedIndex", index, removed);
		}

		public Bone GetBone(MeshX meshx, System.Int32 bindingIndex)
		{
			return (Bone)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBone", meshx, bindingIndex), typeof(Bone));
		}

		public float3 TransformPosition(MeshX meshx, in float3 position, ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TransformPosition", meshx, position, boneTransforms), typeof(float3));
		}

		public float3 TransformDirection(MeshX meshx, in float3 direction, ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TransformDirection", meshx, direction, boneTransforms), typeof(float3));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BoneBinding(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BoneBinding()
		{
		}
	}
	public class Bone : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Mesh", value);
			}
		}

		public System.String Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Name"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Name", value);
			}
		}

		public float4x4 BindPose
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BindPose"), typeof(float4x4)) is float4x4 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float4x4");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BindPose", value);
			}
		}

		public System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		internal Bone(System.String name, MeshX mesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bone", ResoniteBridge.ResoniteBridgeValueType.Type), name, mesh);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Bone(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Bone()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.MeshX", "Elements.Core")]
	public class MeshX : ResoniteBridge.ResoniteBridgeValueHolder
	{
		internal struct UV_Array : ResoniteBridge.ResoniteBridgeValueHolder
		{
			internal float2[] uv_2D
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "uv_2D"), typeof(float2[])) is float2[] __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to float2[]");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "uv_2D", value);
				}
			}

			internal float3[] uv_3D
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "uv_3D"), typeof(float3[])) is float3[] __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to float3[]");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "uv_3D", value);
				}
			}

			internal float4[] uv_4D
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "uv_4D"), typeof(float4[])) is float4[] __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to float4[]");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "uv_4D", value);
				}
			}

			public System.Int32 Dimensions
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Dimensions"), typeof(System.Int32)) is System.Int32 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to int");
					}
				}
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public UV_Array(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public UV_Array()
			{
			}
		}

		public struct PrimitiveEnumerator<T> : IEnumerator<T>, IEnumerator, IDisposable, ResoniteBridge.ResoniteBridgeValueHolder where T : struct, IMeshXPrimitive
		{
			private List<Submesh>.Enumerator _submeshEnumerator
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_submeshEnumerator"), typeof(List<Submesh>.Enumerator)) is List<Submesh>.Enumerator __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to List<Submesh>.Enumerator");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_submeshEnumerator", value);
				}
			}

			private System.Int32 _currentIndex
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_currentIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to int");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_currentIndex", value);
				}
			}

			private ISubmesh<T> _currentSubmesh
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_currentSubmesh"), typeof(ISubmesh<T>)) is ISubmesh<T> __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to ISubmesh<T>");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_currentSubmesh", value);
				}
			}

			public T Current
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Current"), typeof(T)) is T __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to T");
					}
				}
			}

			System.Object IEnumerator.Current
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Current"), typeof(System.Object)) is System.Object __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to object");
					}
				}
			}

			public PrimitiveEnumerator(MeshX meshx)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PrimitiveEnumerator", ResoniteBridge.ResoniteBridgeValueType.Type), meshx);
			}

			public void Dispose()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
			}

			public System.Boolean MoveNext()
			{
				return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MoveNext"), typeof(System.Boolean));
			}

			public void Reset()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Reset");
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public PrimitiveEnumerator(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public PrimitiveEnumerator()
			{
			}
		}

		public struct VertexEnumerator : IEnumerator<Vertex>, IEnumerator, IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
		{
			private MeshX meshx
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "meshx"), typeof(MeshX)) is MeshX __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to MeshX");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "meshx", value);
				}
			}

			private System.Int32 _index
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_index"), typeof(System.Int32)) is System.Int32 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to int");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_index", value);
				}
			}

			public Vertex Current
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Current"), typeof(Vertex)) is Vertex __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Vertex");
					}
				}
			}

			System.Object IEnumerator.Current
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Current"), typeof(System.Object)) is System.Object __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to object");
					}
				}
			}

			public VertexEnumerator(MeshX meshx)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VertexEnumerator", ResoniteBridge.ResoniteBridgeValueType.Type), meshx);
			}

			public void Dispose()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
			}

			public System.Boolean MoveNext()
			{
				return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MoveNext"), typeof(System.Boolean));
			}

			public void Reset()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Reset");
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public VertexEnumerator(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public VertexEnumerator()
			{
			}
		}

		public enum Encoding
		{
			Plain,
			LZ4,
			LZMA
		}

		private struct SubmeshMergeKey : IEquatable<SubmeshMergeKey>, ResoniteBridge.ResoniteBridgeValueHolder
		{
			public System.Object key
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "key"), typeof(System.Object)) is System.Object __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to object");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "key", value);
				}
			}

			public SubmeshTopology topology
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "topology"), typeof(SubmeshTopology)) is SubmeshTopology __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to SubmeshTopology");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "topology", value);
				}
			}

			public SubmeshMergeKey(System.Object key, SubmeshTopology topology)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubmeshMergeKey", ResoniteBridge.ResoniteBridgeValueType.Type), key, topology);
			}

			public System.Boolean Equals(SubmeshMergeKey other)
			{
				return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other), typeof(System.Boolean));
			}

			public override System.Boolean Equals(System.Object obj)
			{
				return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", obj), typeof(System.Boolean));
			}

			public override System.Int32 GetHashCode()
			{
				return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
			}

			public static bool operator ==(SubmeshMergeKey left, SubmeshMergeKey right)
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubmeshMergeKey", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Equality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}

			public static bool operator !=(SubmeshMergeKey left, SubmeshMergeKey right)
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SubmeshMergeKey", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Inequality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public SubmeshMergeKey(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public SubmeshMergeKey()
			{
			}
		}

		internal List<Submesh> submeshes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "submeshes"), typeof(List<Submesh>)) is List<Submesh> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Submesh>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "submeshes", value);
			}
		}

		internal List<BlendShape> blendshapes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "blendshapes"), typeof(List<BlendShape>)) is List<BlendShape> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<BlendShape>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "blendshapes", value);
			}
		}

		internal Dictionary<string, BlendShape> blendshapeMap
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "blendshapeMap"), typeof(Dictionary<string, BlendShape>)) is Dictionary<string, BlendShape> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, BlendShape>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "blendshapeMap", value);
			}
		}

		internal List<Bone> bones
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "bones"), typeof(List<Bone>)) is List<Bone> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Bone>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "bones", value);
			}
		}

		internal int[] vertexIDs
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "vertexIDs"), typeof(int[])) is int[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "vertexIDs", value);
			}
		}

		private System.Int32 _vertexID
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_vertexID"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_vertexID", value);
			}
		}

		internal float3[] positions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "positions"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "positions", value);
			}
		}

		internal float3[] normals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "normals"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "normals", value);
			}
		}

		internal float4[] tangents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "tangents"), typeof(float4[])) is float4[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float4[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "tangents", value);
			}
		}

		internal color[] colors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "colors"), typeof(color[])) is color[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "colors", value);
			}
		}

		internal UV_Array[] uv_channels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "uv_channels"), typeof(UV_Array[])) is UV_Array[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to UV_Array[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "uv_channels", value);
			}
		}

		internal BoneBinding[] boneBindings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "boneBindings"), typeof(BoneBinding[])) is BoneBinding[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BoneBinding[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "boneBindings", value);
			}
		}

		internal BitArray flags
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "flags"), typeof(BitArray)) is BitArray __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BitArray");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "flags", value);
			}
		}

		public System.Int32 MESHX_BINARY_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MESHX_BINARY_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MESHX_BINARY_VERSION", value);
			}
		}

		public System.String MAGIC_STRING
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAGIC_STRING"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAGIC_STRING", value);
			}
		}

		private static byte[] _magicHeader
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "_magicHeader"), typeof(byte[])) is byte[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "_magicHeader", value);
			}
		}

		public float3[] RawPositions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawPositions"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
		}

		public float3[] RawNormals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawNormals"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
		}

		public float4[] RawTangents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawTangents"), typeof(float4[])) is float4[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float4[]");
				}
			}
		}

		public color[] RawColors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawColors"), typeof(color[])) is color[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color[]");
				}
			}
		}

		public float2[] RawUV0s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawUV0s"), typeof(float2[])) is float2[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2[]");
				}
			}
		}

		public float2[] RawUV1s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawUV1s"), typeof(float2[])) is float2[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2[]");
				}
			}
		}

		public float2[] RawUV2s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawUV2s"), typeof(float2[])) is float2[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2[]");
				}
			}
		}

		public float2[] RawUV3s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawUV3s"), typeof(float2[])) is float2[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2[]");
				}
			}
		}

		public BoneBinding[] RawBoneBindings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawBoneBindings"), typeof(BoneBinding[])) is BoneBinding[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BoneBinding[]");
				}
			}
		}

		public BitArray RawFlags
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawFlags"), typeof(BitArray)) is BitArray __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BitArray");
				}
			}
		}

		public System.Int32 VertexCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VertexCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VertexCount", value);
			}
		}

		public System.Int32 BoneCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BoneCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 UV_ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV_ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 TotalPointCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TotalPointCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 TotalTriangleCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TotalTriangleCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 TotalFaceCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TotalFaceCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		internal System.Int32 VerticesVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VerticesVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VerticesVersion", value);
			}
		}

		public System.Int32 VertexCapacity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VertexCapacity"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VertexCapacity", value);
			}
		}

		public System.Int32 FreeCapacity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FreeCapacity"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean TrackRemovals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TrackRemovals"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "TrackRemovals", value);
			}
		}

		public System.Boolean HasNormals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasNormals"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasNormals", value);
			}
		}

		public System.Boolean HasTangents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasTangents"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasTangents", value);
			}
		}

		public System.Boolean HasColors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasColors"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasColors", value);
			}
		}

		public System.Boolean HasBoneBindings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasBoneBindings"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasBoneBindings", value);
			}
		}

		public ColorProfile Profile
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Profile"), typeof(ColorProfile)) is ColorProfile __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ColorProfile");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Profile", value);
			}
		}

		public System.Boolean HasUV0s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasUV0s"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasUV0s", value);
			}
		}

		public System.Boolean HasUV1s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasUV1s"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasUV1s", value);
			}
		}

		public System.Boolean HasUV2s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasUV2s"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasUV2s", value);
			}
		}

		public System.Boolean HasUV3s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasUV3s"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasUV3s", value);
			}
		}

		public System.Int32 SubmeshCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SubmeshCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public ListEnumerableWrapper<Submesh> Submeshes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Submeshes"), typeof(ListEnumerableWrapper<Submesh>)) is ListEnumerableWrapper<Submesh> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ListEnumerableWrapper<Submesh>");
				}
			}
		}

		public System.Boolean HasFlags
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasFlags"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasFlags", value);
			}
		}

		public System.Int32 BlendShapeCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BlendShapeCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public IEnumerable<BlendShape> BlendShapes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BlendShapes"), typeof(IEnumerable<BlendShape>)) is IEnumerable<BlendShape> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IEnumerable<BlendShape>");
				}
			}
		}

		public EnumerableWrapper<Triangle, PrimitiveEnumerator<Triangle>> Triangles
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Triangles"), typeof(EnumerableWrapper<Triangle, PrimitiveEnumerator<Triangle>>)) is EnumerableWrapper<Triangle, PrimitiveEnumerator<Triangle>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EnumerableWrapper<Triangle, PrimitiveEnumerator<Triangle>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Triangles", value);
			}
		}

		public EnumerableWrapper<Point, PrimitiveEnumerator<Point>> Points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Points"), typeof(EnumerableWrapper<Point, PrimitiveEnumerator<Point>>)) is EnumerableWrapper<Point, PrimitiveEnumerator<Point>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EnumerableWrapper<Point, PrimitiveEnumerator<Point>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Points", value);
			}
		}

		public EnumerableWrapper<Vertex, VertexEnumerator> Vertices
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertices"), typeof(EnumerableWrapper<Vertex, VertexEnumerator>)) is EnumerableWrapper<Vertex, VertexEnumerator> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EnumerableWrapper<Vertex, VertexEnumerator>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertices", value);
			}
		}

		public IEnumerable<Bone> Bones
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Bones"), typeof(IEnumerable<Bone>)) is IEnumerable<Bone> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IEnumerable<Bone>");
				}
			}
		}

		public static System.Int32 MAGIC_HEADER_LENGTH
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "MAGIC_HEADER_LENGTH"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public ResoniteBridge.ResoniteBridgeValue AccessRawPositions()
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AccessRawPositions"), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public ResoniteBridge.ResoniteBridgeValue AccessRawNormals()
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AccessRawNormals"), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public ResoniteBridge.ResoniteBridgeValue AccessRawTangents()
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AccessRawTangents"), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public ResoniteBridge.ResoniteBridgeValue AccessRawColors()
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AccessRawColors"), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public ResoniteBridge.ResoniteBridgeValue AccessRawUVs(System.Int32 index)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AccessRawUVs", index), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		internal UV_Array GetRawUV_Array(System.Int32 uv)
		{
			return (UV_Array)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawUV_Array", uv), typeof(UV_Array));
		}

		internal UV_Array TryGetRawUV_Array(System.Int32 uv)
		{
			return (UV_Array)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TryGetRawUV_Array", uv), typeof(UV_Array));
		}

		public float2[] GetRawUVs(System.Int32 uv)
		{
			return (float2[])ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawUVs", uv), typeof(float2[]));
		}

		public float3[] GetRawUVs_3D(System.Int32 uv)
		{
			return (float3[])ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawUVs_3D", uv), typeof(float3[]));
		}

		public float4[] GetRawUVs_4D(System.Int32 uv)
		{
			return (float4[])ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawUVs_4D", uv), typeof(float4[]));
		}

		public void TrimUVChannels()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimUVChannels");
		}

		public void EnsureNormals(System.Boolean enabled, in float3 defaultValue = default(float3))
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureNormals", enabled, defaultValue);
		}

		public void EnsureTangents(System.Boolean enabled, in float4 defaultValue = default(float4))
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureTangents", enabled, defaultValue);
		}

		public void EnsureColors(System.Boolean enabled, in color defaultValue = default(color))
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureColors", enabled, defaultValue);
		}

		public System.Int32 GetUV_Dimension(System.Int32 uv)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetUV_Dimension", uv), typeof(System.Int32));
		}

		public void SetUV_Dimension(System.Int32 uv, System.Int32 dimension)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetUV_Dimension", uv, dimension);
		}

		public System.Boolean HasUV_2D(System.Int32 uv)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HasUV_2D", uv), typeof(System.Boolean));
		}

		public System.Boolean HasUV_3D(System.Int32 uv)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HasUV_3D", uv), typeof(System.Boolean));
		}

		public System.Boolean HasUV_4D(System.Int32 uv)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HasUV_4D", uv), typeof(System.Boolean));
		}

		public void SetHasUV(System.Int32 uv, System.Boolean state)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetHasUV", uv, state);
		}

		public void SetHasUV_3D(System.Int32 uv, System.Boolean state)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetHasUV_3D", uv, state);
		}

		public void SetHasUV_4D(System.Int32 uv, System.Boolean state)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetHasUV_4D", uv, state);
		}

		public static implicit operator TriangleSubmesh(MeshX meshx)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", meshx), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
			}
		}

		public static implicit operator PointSubmesh(MeshX meshx)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Implicit", meshx), typeof(PointSubmesh)) is PointSubmesh __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to PointSubmesh");
			}
		}

		public Submesh GetSubmesh(System.Int32 index)
		{
			return (Submesh)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSubmesh", index), typeof(Submesh));
		}

		public Submesh GetSubmeshForFace(System.Int32 faceIndex)
		{
			return (Submesh)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSubmeshForFace", faceIndex), typeof(Submesh));
		}

		public System.Int32 IndexOfSubmesh(Submesh submesh)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IndexOfSubmesh", submesh), typeof(System.Int32));
		}

		public Submesh AddSubmesh(SubmeshTopology topology)
		{
			return (Submesh)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddSubmesh", topology), typeof(Submesh));
		}

		public T AddSubmesh<T>() where T : Submesh
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddSubmesh"), typeof(T));
		}

		public T InsertSubmesh<T>(System.Int32 index) where T : Submesh
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InsertSubmesh", index), typeof(T));
		}

		public void RemoveSubmesh(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveSubmesh", index);
		}

		public void RemoveSubmesh(Submesh submesh)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveSubmesh", submesh);
		}

		public T TryGetSubmesh<T>(System.Int32 index = 0) where T : Submesh
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TryGetSubmesh", index), typeof(T));
		}

		public Submesh TryGetSubmesh(SubmeshTopology topology, System.Int32 index = 0)
		{
			return (Submesh)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TryGetSubmesh", topology, index), typeof(Submesh));
		}

		private T InstantiateSubmesh<T>() where T : Submesh
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InstantiateSubmesh"), typeof(T));
		}

		public BlendShape AddBlendShape(System.String name)
		{
			return (BlendShape)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddBlendShape", name), typeof(BlendShape));
		}

		public BlendShape InsertBlendshapeAt(System.String name, System.Int32 index)
		{
			return (BlendShape)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InsertBlendshapeAt", name, index), typeof(BlendShape));
		}

		public BlendShape GetBlendShape(System.Int32 index)
		{
			return (BlendShape)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBlendShape", index), typeof(BlendShape));
		}

		public BlendShape GetBlendShape(System.String name)
		{
			return (BlendShape)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBlendShape", name), typeof(BlendShape));
		}

		public System.Int32 IndexOfBlendShape(BlendShape blendShape)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IndexOfBlendShape", blendShape), typeof(System.Int32));
		}

		public System.Boolean HasBlendShape(System.String name)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HasBlendShape", name), typeof(System.Boolean));
		}

		public System.Int32 BlendShapeIndex(System.String name)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BlendShapeIndex", name), typeof(System.Int32));
		}

		public BlendShape TryGetBlendShape(System.String name)
		{
			return (BlendShape)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TryGetBlendShape", name), typeof(BlendShape));
		}

		public void RemoveBlendShape(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveBlendShape", index);
		}

		public System.Boolean RemoveBlendShape(System.String name)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveBlendShape", name), typeof(System.Boolean));
		}

		public System.Boolean RemoveBlendShape(BlendShape blendshape)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveBlendShape", blendshape), typeof(System.Boolean));
		}

		public MeshX()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public MeshX(MeshX clone)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), clone);
		}

		public void EnsureFreeCapacity(System.Int32 capacity)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureFreeCapacity", capacity);
		}

		public void Clear()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear");
		}

		public void ClearVerticesAndIndicies()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ClearVerticesAndIndicies");
		}

		public void ClearSubmeshes()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ClearSubmeshes");
		}

		public void CopyDataChannelFlags(MeshX source)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyDataChannelFlags", source);
		}

		public void Copy(MeshX source, in float4x4? transform = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Copy", source, transform);
		}

		public AppendResult Append(MeshX source, System.Boolean appendSubmeshes = true, in float4x4? transform = null, Func<Submesh, int> submeshMapper = null)
		{
			return (AppendResult)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Append", source, appendSubmeshes, transform, submeshMapper), typeof(AppendResult));
		}

		public System.Boolean SetVertexCount(System.Int32 count)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetVertexCount", count), typeof(System.Boolean));
		}

		public void IncreaseVertexCount(System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IncreaseVertexCount", count);
		}

		public void RemoveVerticesFromEnd(System.Int32 count, System.Boolean updateSubmeshes = true)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveVerticesFromEnd", count, updateSubmeshes);
		}

		public void IncreasePointCount(System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IncreasePointCount", count);
		}

		public void IncreaseTriangleCount(System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IncreaseTriangleCount", count);
		}

		public void AddVertices(System.Int32 count, VertexCollection verts = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddVertices", count, verts);
		}

		public System.Boolean EnsureVertexCount(System.Int32 count)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureVertexCount", count), typeof(System.Boolean));
		}

		public Vertex AddVertex()
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddVertex"), typeof(Vertex));
		}

		public Vertex AddVertex(in float3 pos)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddVertex", pos), typeof(Vertex));
		}

		public Triangle AddTriangle(System.Int32 submesh = 0)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangle", submesh), typeof(Triangle));
		}

		public void AddTriangles(System.Int32 count, System.Int32 submesh = 0, TriangleCollection trigs = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangles", count, submesh, trigs);
		}

		public Triangle AddTriangle(System.Int32 v0, System.Int32 v1, System.Int32 v2, System.Int32 submesh = 0)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangle", v0, v1, v2, submesh), typeof(Triangle));
		}

		public Triangle AddTriangle(Vertex v0, Vertex v1, Vertex v2, System.Int32 submesh = 0)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangle", v0, v1, v2, submesh), typeof(Triangle));
		}

		public Point AddPoint(System.Int32 submesh)
		{
			return (Point)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddPoint", submesh), typeof(Point));
		}

		public void AddPoints(System.Int32 count, System.Int32 submesh, PointCollection points = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddPoints", count, submesh, points);
		}

		public Vertex GetVertex(System.Int32 index)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetVertex", index), typeof(Vertex));
		}

		public Triangle GetTriangle(System.Int32 index, System.Int32 submesh = 0)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetTriangle", index, submesh), typeof(Triangle));
		}

		public Point GetPoint(System.Int32 index, System.Int32 submesh = 0)
		{
			return (Point)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPoint", index, submesh), typeof(Point));
		}

		public Triangle GetTriangleByFaceIndex(System.Int32 faceIndex)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetTriangleByFaceIndex", faceIndex), typeof(Triangle));
		}

		public Triangle GetTriangleFromAllTriangleSubmeshes(System.Int32 triangleIndex)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetTriangleFromAllTriangleSubmeshes", triangleIndex), typeof(Triangle));
		}

		public void RemoveVertices(System.Int32 index, System.Int32 count, System.Boolean updateSubmeshes = true)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveVertices", index, count, updateSubmeshes);
		}

		public void RemoveTriangles(System.Int32 index, System.Int32 count, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveTriangles", index, count, submesh);
		}

		public void RemovePoints(System.Int32 index, System.Int32 count, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovePoints", index, count, submesh);
		}

		public void RemoveVertex(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveVertex", index);
		}

		public void RemoveVertex(Vertex v)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveVertex", v);
		}

		public void RemoveVertices(VertexCollection vertices)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveVertices", vertices);
		}

		public void RemoveTriangles(TriangleCollection triangles)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveTriangles", triangles);
		}

		public void RemovePoints(PointCollection points)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovePoints", points);
		}

		private void RemoveMixedPrimitives<T>(List<T> list) where T : IMeshXPrimitive
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveMixedPrimitives", list);
		}

		public void RemoveTriangle(System.Int32 index, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveTriangle", index, submesh);
		}

		public void RemoveTriangle(Triangle t, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveTriangle", t, submesh);
		}

		public void RemoveTriangles(TriangleCollection triangles, System.Int32 submesh)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveTriangles", triangles, submesh);
		}

		public void RemovePoint(System.Int32 index, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovePoint", index, submesh);
		}

		internal void RemoveElements<T>(List<T> elements, Action<int, int> remove) where T : IMeshXElement
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveElements", elements, remove);
		}

		public float3 GetPosition(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPosition", index), typeof(float3));
		}

		public float3 GetNormal(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetNormal", index), typeof(float3));
		}

		public void SetVertex(System.Int32 index, in float3 position)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetVertex", index, position);
		}

		public void SetNormal(System.Int32 index, in float3 normal)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetNormal", index, normal);
		}

		public void SetTangent(System.Int32 index, in float4 tangent)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetTangent", index, tangent);
		}

		public void SetColor(System.Int32 index, in color color)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetColor", index, color);
		}

		public void SetUV(System.Int32 index, System.Int32 uvChannel, in float2 uv)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetUV", index, uvChannel, uv);
		}

		public void SetTriangle(System.Int32 index, System.Int32 v0, System.Int32 v1, System.Int32 v2, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetTriangle", index, v0, v1, v2, submesh);
		}

		public Bone GetBone(System.Int32 index)
		{
			return (Bone)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBone", index), typeof(Bone));
		}

		public Bone FindBone(Func<Bone, bool> filter)
		{
			return (Bone)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FindBone", filter), typeof(Bone));
		}

		public System.Int32 IndexOfBone(Bone bone)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IndexOfBone", bone), typeof(System.Int32));
		}

		public Bone AddBone(System.String name = "Bone")
		{
			return (Bone)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddBone", name), typeof(Bone));
		}

		public void RemoveBoneAt(System.Int32 index, System.Boolean autoUpdateBindings = true)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveBoneAt", index, autoUpdateBindings);
		}

		public System.Boolean RemoveBone(Bone bone, System.Boolean autoUpdateBindings = true)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveBone", bone, autoUpdateBindings), typeof(System.Boolean));
		}

		public void ClearBones(System.Boolean autoUpdateBindings = true)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ClearBones", autoUpdateBindings);
		}

		internal void CheckNormals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckNormals");
		}

		internal void CheckTangents()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckTangents");
		}

		internal void CheckColors()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckColors");
		}

		internal void CheckBoneBindings()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckBoneBindings");
		}

		internal void CheckUV(System.Int32 uv)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckUV", uv);
		}

		internal void CheckFlags()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckFlags");
		}

		internal void VerifyVertexIndex(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "VerifyVertexIndex", index);
		}

		internal void EnsureVertexArray<T>(System.Boolean state, ref T[] array, T defaultValue = default(T))
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureVertexArray", state, array, defaultValue);
		}

		internal void EnsureArray<T>(System.Boolean state, ref T[] array, System.Int32 minSize, T defaultValue = default(T))
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureArray", state, array, minSize, defaultValue);
		}

		private void EnsureBitArray(System.Boolean state, ref BitArray array, System.Int32 minSize)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureBitArray", state, array, minSize);
		}

		private void EnsureVertexCapacity(System.Int32 capacity)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureVertexCapacity", capacity);
		}

		internal void RemoveElements<T>(T[] array, System.Int32 index, System.Int32 count, System.Int32 length, System.Boolean clear = false, T clearVal = default(T))
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveElements", array, index, count, length, clear, clearVal);
		}

		private void RemoveElements(BitArray bitArray, System.Int32 index, System.Int32 count, System.Int32 length)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveElements", bitArray, index, count, length);
		}

		public void ForEachUV(Func<float4, float4> processAll)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachUV", processAll);
		}

		public void ForEachUV(Func<float2, float2> process2D, Func<float3, float3> process3D, Func<float4, float4> process4D)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachUV", process2D, process3D, process4D);
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public void RecalculateBlendshapeNormals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateBlendshapeNormals");
		}

		public void RecalculateBlendshapeNormalsMerged(System.Double cellSize = 0.001)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateBlendshapeNormalsMerged", cellSize);
		}

		public void RecalculateBlendshapeTangentsMikktspace(System.Int32 uvChannel = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateBlendshapeTangentsMikktspace", uvChannel);
		}

		public void MergeBlendshapes(List<int> indexes = null, System.String name = "Merged")
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MergeBlendshapes", indexes, name);
		}

		public void SortBlendshapesByName(List<int> remapedOrder = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SortBlendshapesByName", remapedOrder);
		}

		public void SortBlendshapesByNameLength(List<int> remapedOrder = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SortBlendshapesByNameLength", remapedOrder);
		}

		public void SortBlendshapes(Comparison<BlendShape> comparison, List<int> remappedOrder = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SortBlendshapes", comparison, remappedOrder);
		}

		public System.Boolean RecalculateTangentsMikktspace(TriangleCollection triangles = null, System.Int32 uvChannel = 0)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateTangentsMikktspace", triangles, uvChannel), typeof(System.Boolean));
		}

		public static System.Byte MAGIC_HEADER_BYTE(System.Int32 index)
		{
			return (System.Byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "MAGIC_HEADER_BYTE", index), typeof(System.Byte));
		}

		public byte[] SaveToArray(Encoding encoding = Encoding.LZ4)
		{
			return (byte[])ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SaveToArray", encoding), typeof(byte[]));
		}

		public void SaveToFile(System.String file, Encoding encoding = Encoding.LZ4)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SaveToFile", file, encoding);
		}

		public MeshX(System.String file)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), file);
		}

		public MeshX(Stream stream)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), stream);
		}

		public void Encode(Stream stream, Encoding encoding = Encoding.LZ4)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Encode", stream, encoding);
		}

		private static System.Boolean HasMagicHeader(BinaryReader reader)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "HasMagicHeader", reader), typeof(System.Boolean));
		}

		public void Decode(Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Decode", stream);
		}

		internal static System.Boolean ReadFlag(ref System.UInt32 data)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "ReadFlag", data), typeof(System.Boolean));
		}

		private static void Write(BinaryWriter bw, ref BoneBinding binding)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "Write", bw, binding);
		}

		private static BoneBinding ReadBoneBinding(BinaryReader br)
		{
			return (BoneBinding)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "ReadBoneBinding", br), typeof(BoneBinding));
		}

		public float3 TransformVertex(System.Int32 index, ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TransformVertex", index, boneTransforms), typeof(float3));
		}

		public void TransformAllVertices(ResoniteBridge.ResoniteBridgeValue targetPoses, ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TransformAllVertices", targetPoses, boneTransforms);
		}

		public void TransformAllNormals(ResoniteBridge.ResoniteBridgeValue targetNormals, ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TransformAllNormals", targetNormals, boneTransforms);
		}

		public void TransformAllTangents(ResoniteBridge.ResoniteBridgeValue targetTangents, ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TransformAllTangents", targetTangents, boneTransforms);
		}

		public void BakeSkinnedMesh(ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BakeSkinnedMesh", boneTransforms);
		}

		public Elements.Core.BoundingBox ComputeSkinnedBounds(ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			return (Elements.Core.BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeSkinnedBounds", boneTransforms), typeof(Elements.Core.BoundingBox));
		}

		private void VerifySkinnedTransormation(ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "VerifySkinnedTransormation", boneTransforms);
		}

		public void GetVertices<T>(T[] array, Func<float3, T> convert)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetVertices", array, convert);
		}

		public void GetTriangleIndicies(int[] array, System.Int32 arrayOffset, TriangleSubmesh triangles)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetTriangleIndicies", array, arrayOffset, triangles);
		}

		public System.Boolean CompareTriangleIndicies(int[] array, System.Int32 arrayOffset, TriangleSubmesh triangles)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CompareTriangleIndicies", array, arrayOffset, triangles), typeof(System.Boolean));
		}

		public void GetTriangleIndicies(int[] array)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetTriangleIndicies", array);
		}

		public System.Boolean CompareTriangleIndicies(int[] array)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CompareTriangleIndicies", array), typeof(System.Boolean));
		}

		public Vertex AddVertex(Vertex vertex)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddVertex", vertex), typeof(Vertex));
		}

		public Vertex DuplicateVertex(System.Int32 index)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DuplicateVertex", index), typeof(Vertex));
		}

		public Triangle AddTriangle(Triangle triangle)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangle", triangle), typeof(Triangle));
		}

		public void FlipNormals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FlipNormals");
		}

		public void ReverseWinding()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReverseWinding");
		}

		public void MakeDualSided()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MakeDualSided");
		}

		public void RecalculateNormals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateNormals");
		}

		public void RecalculateNormalsMerged(System.Double cellSize = 0.001)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateNormalsMerged", cellSize);
		}

		public void RecalculateNormals(TriangleCollection triangles, System.Boolean onlyFlagged = false, System.Boolean removeFlag = false)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateNormals", triangles, onlyFlagged, removeFlag);
		}

		public System.Boolean RecalculateTangents(TriangleCollection triangles = null, System.Int32 uvChannel = 0)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RecalculateTangents", triangles, uvChannel), typeof(System.Boolean));
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private void CalcTangentValues(Triangle t, float2[] uvs, float3[] binorms)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalcTangentValues", t, uvs, binorms);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static float4 CalcTangent(in float3 nor, in float3 tan0, in float3 tan1)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "CalcTangent", nor, tan0, tan1), typeof(float4));
		}

		public void SortBoneWeights()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SortBoneWeights");
		}

		public void NormalizeBoneWeights()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "NormalizeBoneWeights");
		}

		public void SortTrimAndNormalizeBoneWeights(System.Single trimThreshold = 0.0001f, System.Int32 maxBoneCount = int.MaxValue)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SortTrimAndNormalizeBoneWeights", trimThreshold, maxBoneCount);
		}

		public void FillInEmptyBindings(System.Int32 boneIndex)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillInEmptyBindings", boneIndex);
		}

		public void StripEmptyBlendshapes(List<int> removedBlendshapes = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "StripEmptyBlendshapes", removedBlendshapes);
		}

		public System.Int32 StripEmptySubmeshes(List<int> indexRemap)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "StripEmptySubmeshes", indexRemap), typeof(System.Int32));
		}

		public System.Int32 StripEmptyBones()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "StripEmptyBones"), typeof(System.Int32));
		}

		public System.Int32 StripEmptyBones(List<int> remapIndex, Predicate<Bone> filter = null)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "StripEmptyBones", remapIndex, filter), typeof(System.Int32));
		}

		public System.Int32 StripEmptyBones(IReadOnlyList<BoneMetadata> precomputedMetadata, List<int> remapIndex, Predicate<Bone> filter = null)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "StripEmptyBones", precomputedMetadata, remapIndex, filter), typeof(System.Int32));
		}

		public void StripBlendshapeNormals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "StripBlendshapeNormals");
		}

		public void StripBlendshapeTangents()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "StripBlendshapeTangents");
		}

		public void BakeBlendShapes(Dictionary<int, float> blendshapes)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BakeBlendShapes", blendshapes);
		}

		public void BakeBlendShapes(Dictionary<BlendShape, float> blendshapes)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BakeBlendShapes", blendshapes);
		}

		public void TransformVertexByBlendshapes(System.Int32 vertexIndex, ref float3 pos, ref float3 normal, ref float4 tangent, ResoniteBridge.ResoniteBridgeValue weights)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TransformVertexByBlendshapes", vertexIndex, pos, normal, tangent, weights);
		}

		public void TransformVertexByBones(System.Int32 vertexIndex, ref float3 pos, ref float3 normal, ref float4 tangent, ResoniteBridge.ResoniteBridgeValue boneTransforms)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TransformVertexByBones", vertexIndex, pos, normal, tangent, boneTransforms);
		}

		private static System.Boolean IsValidBlendshapeValue(in float3 value)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidBlendshapeValue", value), typeof(System.Boolean));
		}

		public void SplitBlenshapeByAxis(System.Int32 blendshapeIndex, Axis3D axis, System.Single center, System.Single transition, System.String negativeSuffix, System.String positiveSuffix)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SplitBlenshapeByAxis", blendshapeIndex, axis, center, transition, negativeSuffix, positiveSuffix);
		}

		public void Translate(in float3 offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Translate", offset);
		}

		public void Rotate(in floatQ rotation)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Rotate", rotation);
		}

		public void Scale(System.Single scale)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Scale", scale);
		}

		public void Scale(in float3 scale)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Scale", scale);
		}

		public float3 AverageVertexCenter()
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AverageVertexCenter"), typeof(float3));
		}

		public Elements.Core.BoundingBox CalculateBoundingBox()
		{
			return (Elements.Core.BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateBoundingBox"), typeof(Elements.Core.BoundingBox));
		}

		public List<SubmeshMetadata> CalculateSubmeshMetadata()
		{
			return (List<SubmeshMetadata>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateSubmeshMetadata"), typeof(List<SubmeshMetadata>));
		}

		public List<BoneMetadata> CalculateBoneMetadata()
		{
			return (List<BoneMetadata>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateBoneMetadata"), typeof(List<BoneMetadata>));
		}

		public List<ApproximateBoneBounds> CalculateApproximateBoneBounds()
		{
			return (List<ApproximateBoneBounds>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateApproximateBoneBounds"), typeof(List<ApproximateBoneBounds>));
		}

		public List<ApproximateBoneBounds> CalculateApproximateBoneBounds(IReadOnlyList<BoneMetadata> metadata)
		{
			return (List<ApproximateBoneBounds>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateApproximateBoneBounds", metadata), typeof(List<ApproximateBoneBounds>));
		}

		public void GenerateFlatShadingTriangles(VertexCollection newVertices = null, VertexCollection originalVertices = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateFlatShadingTriangles", newVertices, originalVertices);
		}

		public void GenerateFlatShadingTriangles(TriangleCollection triangles, VertexCollection newVertices = null, VertexCollection originalVertices = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateFlatShadingTriangles", triangles, newVertices, originalVertices);
		}

		private void GenerateFlatShadingTriangles_Internal(System.Int32 triangleCount, Func<int, Triangle> getTriangle, VertexCollection newVertices = null, VertexCollection originalVertices = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateFlatShadingTriangles_Internal", triangleCount, getTriangle, newVertices, originalVertices);
		}

		public void ConvertToFlatShading()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ConvertToFlatShading");
		}

		public void MergeSubmeshesByKey(List<object> keys, List<int> sourceIndexes)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MergeSubmeshesByKey", keys, sourceIndexes);
		}

		public MeshX SeparateGeometryUnaffectedByBlendshapes()
		{
			return (MeshX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SeparateGeometryUnaffectedByBlendshapes"), typeof(MeshX));
		}

		public List<MeshX> SplitSubmeshes()
		{
			return (List<MeshX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SplitSubmeshes"), typeof(List<MeshX>));
		}

		public MeshX GetConvexHull()
		{
			return (MeshX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetConvexHull"), typeof(MeshX));
		}

		public MeshX GetMergedDoubles(System.Double cellSize = 0.001)
		{
			return (MeshX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetMergedDoubles", cellSize), typeof(MeshX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MeshX(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public static class MeshX_Extensions
	{
		public struct QuadTriangles : ResoniteBridge.ResoniteBridgeValueHolder
		{
			public Triangle first
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "first"), typeof(Triangle)) is Triangle __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Triangle");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "first", value);
				}
			}

			public Triangle second
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "second"), typeof(Triangle)) is Triangle __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Triangle");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "second", value);
				}
			}

			public QuadTriangles(in Triangle first, in Triangle second)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "QuadTriangles", ResoniteBridge.ResoniteBridgeValueType.Type), first, second);
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public QuadTriangles(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public QuadTriangles()
			{
			}
		}

		public static QuadTriangles AddQuadAsTriangles(this TriangleSubmesh triangles, Vertex v0, Vertex v1, Vertex v2, Vertex v3, System.Boolean reverse = false)
		{
			return (QuadTriangles)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddQuadAsTriangles", triangles, v0, v1, v2, v3, reverse), typeof(QuadTriangles));
		}

		public static QuadTriangles AddQuadAsTriangles(this TriangleSubmesh triangles, System.Int32 v0, System.Int32 v1, System.Int32 v2, System.Int32 v3, System.Boolean reverse = false)
		{
			return (QuadTriangles)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddQuadAsTriangles", triangles, v0, v1, v2, v3, reverse), typeof(QuadTriangles));
		}

		public static QuadTriangles AddQuadAsTriangles(this MeshX mesh, Vertex v0, Vertex v1, Vertex v2, Vertex v3, System.Int32 submesh = 0, System.Boolean reverse = false)
		{
			return (QuadTriangles)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddQuadAsTriangles", mesh, v0, v1, v2, v3, submesh, reverse), typeof(QuadTriangles));
		}

		public static QuadTriangles AddQuadAsTriangles(this MeshX mesh, System.Int32 v0, System.Int32 v1, System.Int32 v2, System.Int32 v3, System.Int32 submesh = 0, System.Boolean reverse = false)
		{
			return (QuadTriangles)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddQuadAsTriangles", mesh, v0, v1, v2, v3, submesh, reverse), typeof(QuadTriangles));
		}

		public static void SetQuadAsTriangles(this TriangleSubmesh triangles, System.Int32 v0, System.Int32 v1, System.Int32 v2, System.Int32 v3, System.Int32 t0, System.Int32 t1, System.Boolean reverse = false)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SetQuadAsTriangles", triangles, v0, v1, v2, v3, t0, t1, reverse);
		}

		public static void SetQuadAsTriangles(this TriangleSubmesh triangles, Vertex v0, Vertex v1, Vertex v2, Vertex v3, System.Int32 t0, System.Int32 t1, System.Boolean reverse = false)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SetQuadAsTriangles", triangles, v0, v1, v2, v3, t0, t1, reverse);
		}

		public static void SetQuadAsTriangles(this TriangleSubmesh triangles, Vertex v0, Vertex v1, Vertex v2, Vertex v3, Triangle t0, Triangle t1, System.Boolean reverse = false)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SetQuadAsTriangles", triangles, v0, v1, v2, v3, t0, t1, reverse);
		}

		public static void SetQuadAsTriangles(this MeshX mesh, System.Int32 v0, System.Int32 v1, System.Int32 v2, System.Int32 v3, System.Int32 t0, System.Int32 t1, System.Boolean reverse = false, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SetQuadAsTriangles", mesh, v0, v1, v2, v3, t0, t1, reverse, submesh);
		}

		public static void SetQuadAsTriangles(this MeshX mesh, Vertex v0, Vertex v1, Vertex v2, Vertex v3, System.Int32 t0, System.Int32 t1, System.Boolean reverse = false, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SetQuadAsTriangles", mesh, v0, v1, v2, v3, t0, t1, reverse, submesh);
		}

		public static void SetQuadAsTriangles(this MeshX mesh, Vertex v0, Vertex v1, Vertex v2, Vertex v3, Triangle t0, Triangle t1, System.Boolean reverse = false, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SetQuadAsTriangles", mesh, v0, v1, v2, v3, t0, t1, reverse, submesh);
		}

		public static void AddTriangleFan(this TriangleSubmesh submesh, IList<int> vertices, System.Boolean reverseOrder = false, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", submesh, vertices, reverseOrder, triangles);
		}

		public static void AddTriangleFan(this TriangleSubmesh submesh, IList<Vertex> vertices, System.Boolean reverseOrder = false, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", submesh, vertices, reverseOrder, triangles);
		}

		public static void AddTriangleFan<T>(this TriangleSubmesh submesh, IList<T> vertices, Func<T, int> getIndex, System.Boolean reverseOrder = false, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", submesh, vertices, getIndex, reverseOrder, triangles);
		}

		public static void AddTriangleFan(this TriangleSubmesh submesh, IList<int> vertices, System.Int32 offset, System.Int32 count, System.Boolean reverseOrder = false, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", submesh, vertices, offset, count, reverseOrder, triangles);
		}

		public static void AddTriangleFan(this TriangleSubmesh submesh, IList<Vertex> vertices, System.Int32 offset, System.Int32 count, System.Boolean reverseOrder = false, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", submesh, vertices, offset, count, reverseOrder, triangles);
		}

		public static void AddTriangleFan<T>(this TriangleSubmesh submesh, IList<T> vertices, System.Int32 offset, System.Int32 count, Func<T, int> getIndex, System.Boolean reverseOrder = false, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", submesh, vertices, offset, count, getIndex, reverseOrder, triangles);
		}

		public static void AddTriangleFan(this TriangleSubmesh submesh, System.Int32 vertexCount, Func<int, int> getVertexIndex, System.Boolean reverseOrder = false)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", submesh, vertexCount, getVertexIndex, reverseOrder);
		}

		public static void ConnectTriangleFan(this TriangleSubmesh submesh, IList<int> vertices, Func<int> getNextTriangle, System.Boolean reverseOrder = false, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "ConnectTriangleFan", submesh, vertices, getNextTriangle, reverseOrder, triangles);
		}

		public static void ConnectTriangleFan(this TriangleSubmesh submesh, System.Int32 vertexOffset, System.Int32 vertexCount, Func<int, int> getVertexIndex, Func<int> getNextTriangle, System.Boolean reverseOrder = false)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "ConnectTriangleFan", submesh, vertexOffset, vertexCount, getVertexIndex, getNextTriangle, reverseOrder);
		}

		public static void AddTriangleFan(this MeshX mesh, IList<int> vertices, System.Boolean reverseOrder = false, System.Int32 submesh = 0, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", mesh, vertices, reverseOrder, submesh, triangles);
		}

		public static void AddTriangleFan(this MeshX mesh, IList<Vertex> vertices, System.Boolean reverseOrder = false, System.Int32 submesh = 0, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", mesh, vertices, reverseOrder, submesh, triangles);
		}

		public static void AddTriangleFan<T>(this MeshX mesh, IList<T> vertices, Func<T, int> getIndex, System.Boolean reverseOrder = false, System.Int32 submesh = 0, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", mesh, vertices, getIndex, reverseOrder, submesh, triangles);
		}

		public static void AddTriangleFan(this MeshX mesh, System.Int32 vertexCount, Func<int, int> getVertexIndex, System.Boolean reverseOrder = false, System.Int32 submesh = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AddTriangleFan", mesh, vertexCount, getVertexIndex, reverseOrder, submesh);
		}

		public static void ConnectTriangleFan(this MeshX mesh, IList<int> vertices, Func<int> getNextTriangle, System.Boolean reverseOrder = false, System.Int32 submesh = 0, TriangleCollection triangles = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "ConnectTriangleFan", mesh, vertices, getNextTriangle, reverseOrder, submesh, triangles);
		}

		public static void SetupAsPointCloud(this MeshX mesh)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SetupAsPointCloud", mesh);
		}

		public static void ConvertToPointCloud(this MeshX mesh)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshX_Extensions", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertToPointCloud", mesh);
		}
	}
	public enum SubmeshTopology
	{
		Points,
		Triangles
	}
	public interface ISubmesh<P> : ResoniteBridge.ResoniteBridgeValueHolder where P : IMeshXPrimitive
	{
		P this[System.Int32 index]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(P)) is P __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to P");
				}
			}
		}
	}
	public abstract class Submesh : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Mesh", value);
			}
		}

		internal int[] indicies
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "indicies"), typeof(int[])) is int[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "indicies", value);
			}
		}

		internal int[] primitiveIDs
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "primitiveIDs"), typeof(int[])) is int[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "primitiveIDs", value);
			}
		}

		private System.Int32 _currentID
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_currentID"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_currentID", value);
			}
		}

		public abstract SubmeshTopology Topology { get; }

		public System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Count", value);
			}
		}

		public System.Int32 IndicieCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IndicieCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public int[] RawIndicies
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawIndicies"), typeof(int[])) is int[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int[]");
				}
			}
		}

		public System.Int32 Capacity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Capacity"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public abstract System.Int32 IndiciesPerElement { get; }

		internal System.Int32 PrimitivesVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PrimitivesVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "PrimitivesVersion", value);
			}
		}

		public Submesh(MeshX mesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Submesh", ResoniteBridge.ResoniteBridgeValueType.Type), mesh);
		}

		public System.Boolean SetCountAndSequence(System.Int32 count, System.Int32 sequenceStart = 0)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetCountAndSequence", count, sequenceStart), typeof(System.Boolean));
		}

		public void Clear()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear");
		}

		public System.Boolean SetCount(System.Int32 count)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetCount", count), typeof(System.Boolean));
		}

		public void IncreaseCount(System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IncreaseCount", count);
		}

		public void Append(Submesh submesh)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Append", submesh);
		}

		public void RemoveFromEnd(System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveFromEnd", count);
		}

		public void Remove(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", index);
		}

		public void Remove(System.Int32 index, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", index, count);
		}

		private void EnsureCapacity(System.Int32 capacity)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureCapacity", capacity);
		}

		internal void VerifyIndex(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "VerifyIndex", index);
		}

		internal System.Boolean UpdateIndex(ref System.Int32 version, ref System.Int32 index)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateIndex", version, index), typeof(System.Boolean));
		}

		internal void VerticesRemoved(System.Int32 index, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "VerticesRemoved", index, count);
		}

		internal void EnableTrackRemovals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnableTrackRemovals");
		}

		internal void Encode(BinaryWriter bw)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Encode", bw);
		}

		internal void Decode(BinaryReader br)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Decode", br);
		}

		public Elements.Core.BoundingBox CalculateBoundingBox()
		{
			return (Elements.Core.BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateBoundingBox"), typeof(Elements.Core.BoundingBox));
		}

		public SubmeshMetadata CalculateMetadata()
		{
			return (SubmeshMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateMetadata"), typeof(SubmeshMetadata));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Submesh(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Submesh()
		{
		}
	}
	[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
	public struct SubmeshMetadata : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 elementCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "elementCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "elementCount", value);
			}
		}

		public SubmeshTopology topology
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "topology"), typeof(SubmeshTopology)) is SubmeshTopology __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SubmeshTopology");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "topology", value);
			}
		}

		public Elements.Core.BoundingBox bounds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "bounds"), typeof(Elements.Core.BoundingBox)) is Elements.Core.BoundingBox __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Elements.Core.BoundingBox");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "bounds", value);
			}
		}

		public System.Int32 invalidIndicieCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "invalidIndicieCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "invalidIndicieCount", value);
			}
		}

		[JsonPropertyName("elementCount")]
		[JsonProperty(PropertyName = "elementCount")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public System.Int32 ElementCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ElementCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ElementCount", value);
			}
		}

		[JsonPropertyName("invalidIndicieCount")]
		[JsonProperty(PropertyName = "invalidIndicieCount")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public System.Int32 InvalidIndicieCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "InvalidIndicieCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "InvalidIndicieCount", value);
			}
		}

		[JsonProperty(PropertyName = "topology")]
		[JsonPropertyName("topology")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public SubmeshTopology Topology
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Topology"), typeof(SubmeshTopology)) is SubmeshTopology __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SubmeshTopology");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Topology", value);
			}
		}

		[JsonProperty(PropertyName = "bounds")]
		[JsonPropertyName("bounds")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public Elements.Core.BoundingBox Bounds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Bounds"), typeof(Elements.Core.BoundingBox)) is Elements.Core.BoundingBox __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Elements.Core.BoundingBox");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Bounds", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SubmeshMetadata(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SubmeshMetadata()
		{
		}
	}
	[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
	public struct BoneMetadata : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 weight0count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "weight0count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "weight0count", value);
			}
		}

		public System.Int32 weight1count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "weight1count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "weight1count", value);
			}
		}

		public System.Int32 weight2count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "weight2count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "weight2count", value);
			}
		}

		public System.Int32 weight3count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "weight3count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "weight3count", value);
			}
		}

		public Elements.Core.BoundingBox bounds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "bounds"), typeof(Elements.Core.BoundingBox)) is Elements.Core.BoundingBox __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Elements.Core.BoundingBox");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "bounds", value);
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public System.Int32 TotalVertexCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TotalVertexCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		[JsonPropertyName("weight0count")]
		[JsonProperty(PropertyName = "weight0count")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public System.Int32 Weight0Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Weight0Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Weight0Count", value);
			}
		}

		[JsonPropertyName("weight1count")]
		[JsonProperty(PropertyName = "weight1count")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public System.Int32 Weight1Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Weight1Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Weight1Count", value);
			}
		}

		[JsonPropertyName("weight2count")]
		[JsonProperty(PropertyName = "weight2count")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public System.Int32 Weight2Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Weight2Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Weight2Count", value);
			}
		}

		[JsonPropertyName("weight3count")]
		[JsonProperty(PropertyName = "weight3count")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public System.Int32 Weight3Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Weight3Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Weight3Count", value);
			}
		}

		[JsonPropertyName("bounds")]
		[JsonProperty(PropertyName = "bounds")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public Elements.Core.BoundingBox Bounds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Bounds"), typeof(Elements.Core.BoundingBox)) is Elements.Core.BoundingBox __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Elements.Core.BoundingBox");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Bounds", value);
			}
		}

		public System.Int32 GetVertexCount(System.Int32 weightIndex)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetVertexCount", weightIndex), typeof(System.Int32));
		}

		public void SetVertexCount(System.Int32 weightIndex, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetVertexCount", weightIndex, count);
		}

		public static BoneMetadata CreateEmpty()
		{
			return (BoneMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BoneMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "CreateEmpty"), typeof(BoneMetadata));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BoneMetadata(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BoneMetadata()
		{
		}
	}
	[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
	public struct ApproximateBoneBounds : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 rootBoneIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "rootBoneIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "rootBoneIndex", value);
			}
		}

		public Elements.Core.BoundingSphere bounds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "bounds"), typeof(Elements.Core.BoundingSphere)) is Elements.Core.BoundingSphere __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Elements.Core.BoundingSphere");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "bounds", value);
			}
		}

		[JsonPropertyName("rootBoneIndex")]
		[JsonProperty(PropertyName = "rootBoneIndex")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public System.Int32 RootBoneIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RootBoneIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "RootBoneIndex", value);
			}
		}

		[JsonPropertyName("bounds")]
		[JsonProperty(PropertyName = "bounds")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public Elements.Core.BoundingSphere Bounds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Bounds"), typeof(Elements.Core.BoundingSphere)) is Elements.Core.BoundingSphere __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Elements.Core.BoundingSphere");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Bounds", value);
			}
		}

		public ApproximateBoneBounds(System.Int32 rootBoneIndex, Elements.Core.BoundingSphere bounds)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ApproximateBoneBounds", ResoniteBridge.ResoniteBridgeValueType.Type), rootBoneIndex, bounds);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ApproximateBoneBounds(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ApproximateBoneBounds()
		{
		}
	}
	public struct MultiVertex : IVertex, IEnumerable<Vertex>, IEnumerable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private VertexCollection _vertices
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_vertices"), typeof(VertexCollection)) is VertexCollection __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to VertexCollection");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_vertices", value);
			}
		}

		public System.Int32 Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
		}

		public float3 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Position"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Position", value);
			}
		}

		public float3 Normal
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Normal"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Normal", value);
			}
		}

		public float3 Tangent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tangent"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tangent", value);
			}
		}

		public float4 Tangent4
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tangent4"), typeof(float4)) is float4 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float4");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tangent4", value);
			}
		}

		public color Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Color"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Color", value);
			}
		}

		public BoneBinding BoneBinding
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BoneBinding"), typeof(BoneBinding)) is BoneBinding __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BoneBinding");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BoneBinding", value);
			}
		}

		public float2 UV0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV0"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV0", value);
			}
		}

		public float2 UV1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV1"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV1", value);
			}
		}

		public float2 UV2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV2"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV2", value);
			}
		}

		public float2 UV3
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV3"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV3", value);
			}
		}

		public void Add(Vertex v)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Add", v);
		}

		public System.Boolean Remove(Vertex v)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", v), typeof(System.Boolean));
		}

		public IEnumerator<Vertex> GetEnumerator()
		{
			return (IEnumerator<Vertex>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetEnumerator"), typeof(IEnumerator<Vertex>));
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return (IEnumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable.GetEnumerator"), typeof(IEnumerator));
		}

		public float2 GetUV(System.Int32 channel)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetUV", channel), typeof(float2));
		}

		public void SetUV(System.Int32 channel, in float2 uv)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetUV", channel, uv);
		}

		private void CheckVertices()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckVertices");
		}

		private void Set(Action<Vertex> set)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", set);
		}

		public float3 GetBlendShapePositionDelta(System.String key, System.Int32 frame = 0)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBlendShapePositionDelta", key, frame), typeof(float3));
		}

		public void SetBlendShapePositionDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetBlendShapePositionDelta", key, delta, frame);
		}

		public float3 GetBlendShapeNormalDelta(System.String key, System.Int32 frame = 0)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBlendShapeNormalDelta", key, frame), typeof(float3));
		}

		public void SetBlendShapeNormalDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetBlendShapeNormalDelta", key, delta, frame);
		}

		public float3 GetBlendShapeTangentDelta(System.String key, System.Int32 frame = 0)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBlendShapeTangentDelta", key, frame), typeof(float3));
		}

		public void SetBlendShapeTangentDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetBlendShapeTangentDelta", key, delta, frame);
		}

		void IVertex.SetUV(System.Int32 channel, in float2 uv)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IVertex.SetUV", channel, uv);
		}

		void IVertex.SetBlendShapePositionDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IVertex.SetBlendShapePositionDelta", key, delta, frame);
		}

		void IVertex.SetBlendShapeNormalDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IVertex.SetBlendShapeNormalDelta", key, delta, frame);
		}

		void IVertex.SetBlendShapeTangentDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IVertex.SetBlendShapeTangentDelta", key, delta, frame);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MultiVertex(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MultiVertex()
		{
		}
	}
	public class PolarGrid : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Single RingsRadiusBegin
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RingsRadiusBegin"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RingsRadiusBegin", value);
			}
		}

		public System.Single RingsRadiusEnd
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RingsRadiusEnd"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RingsRadiusEnd", value);
			}
		}

		public System.Single RingWidth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RingWidth"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RingWidth", value);
			}
		}

		public System.Int32 RingCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RingCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RingCount", value);
			}
		}

		public System.Single LinesRadiusBegin
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LinesRadiusBegin"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LinesRadiusBegin", value);
			}
		}

		public System.Single LinesRadiusEnd
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LinesRadiusEnd"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LinesRadiusEnd", value);
			}
		}

		public System.Single LineThickness
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LineThickness"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LineThickness", value);
			}
		}

		public System.Int32 LineCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LineCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LineCount", value);
			}
		}

		public System.Int32 RingSegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RingSegments"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RingSegments", value);
			}
		}

		private List<Ring> rings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "rings"), typeof(List<Ring>)) is List<Ring> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Ring>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "rings", value);
			}
		}

		private List<Quad> lines
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "lines"), typeof(List<Quad>)) is List<Quad> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Quad>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "lines", value);
			}
		}

		public PolarGrid(MeshX meshx, System.Int32 ringSegments = 32)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PolarGrid", ResoniteBridge.ResoniteBridgeValueType.Type), meshx, ringSegments);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PolarGrid(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PolarGrid()
		{
		}
	}
	public struct Point : IMeshXPrimitive, IMeshXElement, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Int32 index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "index", value);
			}
		}

		private System.Int32 version
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "version"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "version", value);
			}
		}

		private PointSubmesh submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "submesh"), typeof(PointSubmesh)) is PointSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to PointSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "submesh", value);
			}
		}

		public PointSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Submesh"), typeof(PointSubmesh)) is PointSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to PointSubmesh");
				}
			}
		}

		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
		}

		Submesh IMeshXPrimitive.Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Submesh"), typeof(Submesh)) is Submesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Submesh");
				}
			}
		}

		public System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 SubmeshIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SubmeshIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SubmeshIndex", value);
			}
		}

		public System.Int32 VertexIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VertexIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VertexIndex", value);
			}
		}

		public Vertex Vertex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex"), typeof(Vertex)) is Vertex __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Vertex");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex", value);
			}
		}

		internal Point(System.Int32 index, PointSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Point", ResoniteBridge.ResoniteBridgeValueType.Type), index, submesh);
		}

		internal System.Boolean UpdateIndex()
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateIndex"), typeof(System.Boolean));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Point(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Point()
		{
		}
	}
	public class PointCollection : IEnumerable<Point>, IEnumerable, IList<Point>, ICollection<Point>, IPoolable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		internal List<Point> _points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_points"), typeof(List<Point>)) is List<Point> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Point>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_points", value);
			}
		}

		public System.Int32 Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 Capacity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Capacity"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Capacity", value);
			}
		}

		public System.Boolean IsReadOnly
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsReadOnly"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public Point this[System.Int32 index]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(Point)) is Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Item", value);
			}
		}

		public void UpdateIndexes()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateIndexes");
		}

		public PointCollection()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PointCollection", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public PointCollection(System.Int32 capacity = 4)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PointCollection", ResoniteBridge.ResoniteBridgeValueType.Type), capacity);
		}

		public void Add(Point v)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Add", v);
		}

		public void AddRange(IEnumerable<Point> collection)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddRange", collection);
		}

		public System.Boolean Remove(Point v)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", v), typeof(System.Boolean));
		}

		public void RemoveAt(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveAt", index);
		}

		public void RemoveRange(System.Int32 index, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveRange", index, count);
		}

		public IEnumerator<Point> GetEnumerator()
		{
			return (IEnumerator<Point>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetEnumerator"), typeof(IEnumerator<Point>));
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return (IEnumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable.GetEnumerator"), typeof(IEnumerator));
		}

		public System.Int32 IndexOf(Point item)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IndexOf", item), typeof(System.Int32));
		}

		public void Insert(System.Int32 index, Point item)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Insert", index, item);
		}

		public void Clear()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear");
		}

		public System.Boolean Contains(Point item)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Contains", item), typeof(System.Boolean));
		}

		public void CopyTo(Point[] array, System.Int32 arrayIndex)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyTo", array, arrayIndex);
		}

		void IPoolable.Clean()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IPoolable.Clean");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PointCollection(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class PointSubmesh : Submesh, ISubmesh<Point>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override SubmeshTopology Topology
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Topology"), typeof(SubmeshTopology)) is SubmeshTopology __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SubmeshTopology");
				}
			}
		}

		public override System.Int32 IndiciesPerElement
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IndiciesPerElement"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public Point this[System.Int32 index] => GetPoint(index);

		public PointSubmesh(MeshX mesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PointSubmesh", ResoniteBridge.ResoniteBridgeValueType.Type), mesh);
		}

		public Point AddPoint()
		{
			return (Point)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddPoint"), typeof(Point));
		}

		public Point AddPoint(System.Int32 vIndex)
		{
			return (Point)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddPoint", vIndex), typeof(Point));
		}

		public void AddPoints(System.Int32 count, PointCollection points = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddPoints", count, points);
		}

		public Point GetPoint(System.Int32 index)
		{
			return (Point)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPoint", index), typeof(Point));
		}

		public void SetPoint(System.Int32 index, System.Int32 vIndex)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPoint", index, vIndex);
		}

		public void Remove(Point p)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", p);
		}

		public void Remove(PointCollection points)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", points);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PointSubmesh(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PointSubmesh()
		{
		}
	}
	public class SmoothNormalsContext : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Double cellSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "cellSize"), typeof(System.Double)) is System.Double __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "cellSize", value);
			}
		}

		private System.Double multiplier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "multiplier"), typeof(System.Double)) is System.Double __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "multiplier", value);
			}
		}

		private Dictionary<int3, float3> normals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "normals"), typeof(Dictionary<int3, float3>)) is Dictionary<int3, float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<int3, float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "normals", value);
			}
		}

		public SmoothNormalsContext(System.Double cellSize = 0.001)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SmoothNormalsContext", ResoniteBridge.ResoniteBridgeValueType.Type), cellSize);
		}

		public float3 GetNormal(in float3 position)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetNormal", position), typeof(float3));
		}

		public void AssignNormal(Vertex vertex)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AssignNormal", vertex);
		}

		public void StoreNormal(in float3 normal, in float3 position)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "StoreNormal", normal, position);
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SmoothNormalsContext(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SmoothNormalsContext()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Arrow", "Elements.Core")]
	public class Arrow : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public System.Int32 Sides
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Sides"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Sides", value);
			}
		}

		public float3 Vector
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Vector"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Vector", value);
			}
		}

		public System.Single BodyRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BodyRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BodyRadius", value);
			}
		}

		public System.Single HeadRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HeadRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HeadRadius", value);
			}
		}

		public System.Single HeadLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HeadLength"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HeadLength", value);
			}
		}

		public System.Single MinimalBodyLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MinimalBodyLength"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MinimalBodyLength", value);
			}
		}

		private ConicalFrustum head
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "head"), typeof(ConicalFrustum)) is ConicalFrustum __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ConicalFrustum");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "head", value);
			}
		}

		private ConicalFrustum body
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "body"), typeof(ConicalFrustum)) is ConicalFrustum __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ConicalFrustum");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "body", value);
			}
		}

		public colorX ColorBase
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ColorBase"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ColorBase", value);
			}
		}

		public colorX ColorTop
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ColorTop"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ColorTop", value);
			}
		}

		public colorX ColorHead
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ColorHead"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ColorHead", value);
			}
		}

		public float2 BodyUVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BodyUVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BodyUVScale", value);
			}
		}

		public float2 BodyUVOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BodyUVOffset"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BodyUVOffset", value);
			}
		}

		public float2 HeadUVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HeadUVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HeadUVScale", value);
			}
		}

		public float2 HeadUVOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HeadUVOffset"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HeadUVOffset", value);
			}
		}

		public Arrow(TriangleSubmesh submesh, System.Int32 sides)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Arrow", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, sides);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		public override void Remove()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Arrow(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Arrow()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.BevelBox", "Elements.Core")]
	public class BevelBox : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public float3 Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public System.Single Bevel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Bevel"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Bevel", value);
			}
		}

		public float3 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		private System.Int32 faceVertOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "faceVertOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "faceVertOffset", value);
			}
		}

		private System.Int32 edgeVertOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "edgeVertOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "edgeVertOffset", value);
			}
		}

		private System.Int32 cornerVertOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "cornerVertOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "cornerVertOffset", value);
			}
		}

		private static color DEBUG_COLOR(System.Int32 index)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BevelBox", ResoniteBridge.ResoniteBridgeValueType.Type), "DEBUG_COLOR", index), typeof(color));
		}

		public BevelBox(TriangleSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BevelBox", ResoniteBridge.ResoniteBridgeValueType.Type), submesh);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private void PositionFace(float3 sideOffset, Func<float2, float3> vertexOffset, float2 uvScale, System.Int32 side)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PositionFace", sideOffset, vertexOffset, uvScale, side);
		}

		private void PositionCorner(float3 basePosition, System.Single bevel, System.Int32 corner)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PositionCorner", basePosition, bevel, corner);
		}

		private void PositionEdge(ref float3 basePosition, ref float3 edgeAxis, ref float3 moveAxis0, ref float3 moveAxis1, System.Single bevel, System.Single edgeLength, System.Int32 edge)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PositionEdge", basePosition, edgeAxis, moveAxis0, moveAxis1, bevel, edgeLength, edge);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BevelBox(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BevelBox()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Box", "Elements.Core")]
	public class Box : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 TOTAL_VERTICES
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TOTAL_VERTICES"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TOTAL_VERTICES", value);
			}
		}

		public System.Int32 TOTAL_TRIANGLES
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TOTAL_TRIANGLES"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TOTAL_TRIANGLES", value);
			}
		}

		public Vertex FirstVertex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FirstVertex"), typeof(Vertex)) is Vertex __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Vertex");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FirstVertex", value);
			}
		}

		public float3 Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public float3 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		public colorX? Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public override void Remove()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove");
		}

		public Box(Vertex firstVertex)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Box", ResoniteBridge.ResoniteBridgeValueType.Type), firstVertex);
		}

		public Box(TriangleSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Box", ResoniteBridge.ResoniteBridgeValueType.Type), submesh);
		}

		public static void ConnectTrianglesUnsafe(System.Int32 firstVertex, System.Int32 firstTriangle, TriangleSubmesh submesh)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Box", ResoniteBridge.ResoniteBridgeValueType.Type), "ConnectTrianglesUnsafe", firstVertex, firstTriangle, submesh);
		}

		public static Vertex AddCubeGeometry(TriangleSubmesh submesh, TriangleCollection triangles = null)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Box", ResoniteBridge.ResoniteBridgeValueType.Type), "AddCubeGeometry", submesh, triangles), typeof(Vertex));
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		public void UpdateUnsafe(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateUnsafe", index);
		}

		private static float3 GetVertexOffset(in float2 v, in float3 halfSize, System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Box", ResoniteBridge.ResoniteBridgeValueType.Type), "GetVertexOffset", v, halfSize, index), typeof(float3));
		}

		public static void UpdateAxisAlignedBoxVertices(MeshX mesh, System.Int32 index, in float3 from, in float3 to, in float3 uvScale, in colorX? color)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Box", ResoniteBridge.ResoniteBridgeValueType.Type), "UpdateAxisAlignedBoxVertices", mesh, index, from, to, uvScale, color);
		}

		public static void UpdateBoxVertices(MeshX mesh, System.Int32 index, in float3 size, in float3 uvScale, in float3? position, in floatQ? rotation, in colorX? color)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Box", ResoniteBridge.ResoniteBridgeValueType.Type), "UpdateBoxVertices", mesh, index, size, uvScale, position, rotation, color);
		}

		private static void PositionQuad(System.Int32 index, in float3 sideDir, System.Single offset, in float3 halfSize, in float2 uvScale, System.Int32 side, MeshX mesh, in float3? position, in floatQ? rotation, in colorX? color)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Box", ResoniteBridge.ResoniteBridgeValueType.Type), "PositionQuad", index, sideDir, offset, halfSize, uvScale, side, mesh, position, rotation, color);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Box(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Box()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Circle", "Elements.Core")]
	public class Circle : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 Segments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Segments"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Segments", value);
			}
		}

		public System.Boolean TriangleFan
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriangleFan"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriangleFan", value);
			}
		}

		public System.Single Radius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Radius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Radius", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		public System.Single Arc
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Arc"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Arc", value);
			}
		}

		public Circle(MeshX mesh, System.Int32 segments, System.Boolean triangleFan)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Circle", ResoniteBridge.ResoniteBridgeValueType.Type), mesh, segments, triangleFan);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Circle(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Circle()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.ConicalFrustum", "Elements.Core")]
	public class ConicalFrustum : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public enum UV_Mapping
		{
			Cylindrical,
			Radial
		}

		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public System.Int32 Sides
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Sides"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Sides", value);
			}
		}

		public System.Boolean FlatShading
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FlatShading"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FlatShading", value);
			}
		}

		public System.Boolean Cap
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Cap"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Cap", value);
			}
		}

		public System.Single Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Height"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Height", value);
			}
		}

		public System.Single RadiusBottom
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RadiusBottom"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RadiusBottom", value);
			}
		}

		public System.Single RadiusTop
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RadiusTop"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RadiusTop", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		public float2 UVOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVOffset"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVOffset", value);
			}
		}

		public UV_Mapping UVMapping
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVMapping"), typeof(UV_Mapping)) is UV_Mapping __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to UV_Mapping");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVMapping", value);
			}
		}

		public colorX ColorBase
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ColorBase"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ColorBase", value);
			}
		}

		public colorX ColorTop
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ColorTop"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ColorTop", value);
			}
		}

		public System.Int32 SideVerts
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SideVerts"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SideVerts", value);
			}
		}

		public System.Int32 CapVerts
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CapVerts"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CapVerts", value);
			}
		}

		public float3[] BaseVertexOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BaseVertexOffset"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BaseVertexOffset", value);
			}
		}

		public float3[] TopVertexOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TopVertexOffset"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TopVertexOffset", value);
			}
		}

		private System.Int32 _baseVertOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_baseVertOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_baseVertOffset", value);
			}
		}

		private System.Int32 _topVertOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_topVertOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_topVertOffset", value);
			}
		}

		private System.Int32 _baseCapVertOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_baseCapVertOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_baseCapVertOffset", value);
			}
		}

		private System.Int32 _topCapVertOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_topCapVertOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_topCapVertOffset", value);
			}
		}

		public System.Single Radius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Radius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Radius", value);
			}
		}

		public ConicalFrustum(TriangleSubmesh submesh, System.Int32 sides, System.Boolean flatShading, System.Boolean cap = true)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ConicalFrustum", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, sides, flatShading, cap);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ConicalFrustum(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ConicalFrustum()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.ConicalTube", "Elements.Core")]
	public class ConicalTube : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 Segments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Segments"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Segments", value);
			}
		}

		public System.Single Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Height"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Height", value);
			}
		}

		public System.Single UpperOuterRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UpperOuterRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UpperOuterRadius", value);
			}
		}

		public System.Single UpperInnerRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UpperInnerRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UpperInnerRadius", value);
			}
		}

		public System.Single LowerOuterRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LowerOuterRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LowerOuterRadius", value);
			}
		}

		public System.Single LowerInnerRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LowerInnerRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LowerInnerRadius", value);
			}
		}

		private Screw _outerWall
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_outerWall"), typeof(Screw)) is Screw __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Screw");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_outerWall", value);
			}
		}

		private Screw _innerWall
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_innerWall"), typeof(Screw)) is Screw __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Screw");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_innerWall", value);
			}
		}

		private Screw _top
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_top"), typeof(Screw)) is Screw __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Screw");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_top", value);
			}
		}

		private Screw _bottom
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_bottom"), typeof(Screw)) is Screw __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Screw");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_bottom", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UVScale", value);
			}
		}

		public ConicalTube(TriangleSubmesh submesh, System.Int32 segments)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ConicalTube", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, segments);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		public override void Remove()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove");
		}

		public override void RemoveGeometry()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveGeometry");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ConicalTube(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ConicalTube()
		{
		}
	}
	public abstract class EdgeBlockBuilder : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class Point : ResoniteBridge.ResoniteBridgeValueHolder
		{
			public float2 Position
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(float2)) is float2 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to float2");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
				}
			}

			public float2 Normal
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Normal"), typeof(float2)) is float2 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to float2");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Normal", value);
				}
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Point(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Point()
			{
			}
		}

		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public System.Boolean CalculateNormals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CalculateNormals"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CalculateNormals", value);
			}
		}

		public System.Boolean AutoPointNormals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AutoPointNormals"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AutoPointNormals", value);
			}
		}

		public System.Boolean UniformWidthNormals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UniformWidthNormals"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UniformWidthNormals", value);
			}
		}

		private List<Point> points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "points"), typeof(List<Point>)) is List<Point> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Point>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "points", value);
			}
		}

		private System.Boolean _geometryBuilt
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_geometryBuilt"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_geometryBuilt", value);
			}
		}

		public abstract System.Int32 ProfileVertexCount { get; }

		public abstract System.Boolean FlatShading { get; }

		public System.Int32 PointCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PointCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		private System.Int32 ActualPointVertexCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ActualPointVertexCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		private System.Int32 ActualProfileVertexCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ActualProfileVertexCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		protected abstract void UpdateVertex(Vertex vert, Point point, System.Int32 index);

		protected void InvalidateGeometry()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InvalidateGeometry");
		}

		public EdgeBlockBuilder(TriangleSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "EdgeBlockBuilder", ResoniteBridge.ResoniteBridgeValueType.Type), submesh);
		}

		public Point AddPoint()
		{
			return (Point)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddPoint"), typeof(Point));
		}

		public void RemovePoint(Point point)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovePoint", point);
		}

		public void RemovePointAt(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemovePointAt", index);
		}

		public Point GetPoint(System.Int32 index)
		{
			return (Point)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPoint", index), typeof(Point));
		}

		private Vertex GetPointFillVertex(System.Int32 pointIndex, System.Boolean top)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPointFillVertex", pointIndex, top), typeof(Vertex));
		}

		private Vertex GetPointEdgeVertex(System.Int32 pointIndex, System.Int32 vertexIndex, System.Boolean connectingToEdge)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPointEdgeVertex", pointIndex, vertexIndex, connectingToEdge), typeof(Vertex));
		}

		private System.Int32 GetProfileVertexIndex(System.Int32 actualVertexSubindex)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetProfileVertexIndex", actualVertexSubindex), typeof(System.Int32));
		}

		public void CalculatePointNormals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculatePointNormals");
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public EdgeBlockBuilder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public EdgeBlockBuilder()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.BevelEdgeBlockBuilder", "Elements.Core")]
	public class BevelEdgeBlockBuilder : EdgeBlockBuilder, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Boolean _relief
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_relief"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_relief", value);
			}
		}

		private System.Boolean _flatShading
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_flatShading"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_flatShading", value);
			}
		}

		public System.Single Thickness
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Thickness"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Thickness", value);
			}
		}

		public System.Boolean Relief
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Relief"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Relief", value);
			}
		}

		public override System.Int32 ProfileVertexCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ProfileVertexCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public override System.Boolean FlatShading
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FlatShading"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public BevelEdgeBlockBuilder(MeshX meshx, System.Boolean flatShading = true)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BevelEdgeBlockBuilder", ResoniteBridge.ResoniteBridgeValueType.Type), meshx, flatShading);
		}

		protected override void UpdateVertex(Vertex vert, Point point, System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateVertex", vert, point, index);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BevelEdgeBlockBuilder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BevelEdgeBlockBuilder()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.BevelPlane", "Elements.Core")]
	public class BevelPlane : ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Single _width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_width", value);
			}
		}

		private System.Single _height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_height"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_height", value);
			}
		}

		private System.Single _thickness
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_thickness"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_thickness", value);
			}
		}

		public System.Single TopLeftCut
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TopLeftCut"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TopLeftCut", value);
			}
		}

		public System.Single BottomRightCut
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BottomRightCut"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BottomRightCut", value);
			}
		}

		private BevelEdgeBlockBuilder builder
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "builder"), typeof(BevelEdgeBlockBuilder)) is BevelEdgeBlockBuilder __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BevelEdgeBlockBuilder");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "builder", value);
			}
		}

		private EdgeBlockBuilder.Point p0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p0"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p0", value);
			}
		}

		private EdgeBlockBuilder.Point p1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p1"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p1", value);
			}
		}

		private EdgeBlockBuilder.Point p2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p2"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p2", value);
			}
		}

		private EdgeBlockBuilder.Point p3
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p3"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p3", value);
			}
		}

		private EdgeBlockBuilder.Point p4
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p4"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p4", value);
			}
		}

		private EdgeBlockBuilder.Point p5
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p5"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p5", value);
			}
		}

		public System.Single Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Width", value);
			}
		}

		public System.Single Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Height"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Height", value);
			}
		}

		public System.Single Thickness
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Thickness"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Thickness", value);
			}
		}

		public System.Boolean Relief
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Relief"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Relief", value);
			}
		}

		public System.Single BorderWidth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BorderWidth"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single UsableWidth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UsableWidth"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single UsableHeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UsableHeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		private System.Single ComputeBorderWidth(System.Single thickness)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeBorderWidth", thickness), typeof(System.Single));
		}

		public BevelPlane(MeshX meshx)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BevelPlane", ResoniteBridge.ResoniteBridgeValueType.Type), meshx);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BevelPlane(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BevelPlane()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.BevelStripe", "Elements.Core")]
	public class BevelStripe : ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Single _width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_width", value);
			}
		}

		private System.Single _height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_height"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_height", value);
			}
		}

		private System.Single _thickness
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_thickness"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_thickness", value);
			}
		}

		public System.Single LeftSlantAngle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LeftSlantAngle"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LeftSlantAngle", value);
			}
		}

		public System.Single RightSlantAngle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RightSlantAngle"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RightSlantAngle", value);
			}
		}

		private BevelEdgeBlockBuilder builder
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "builder"), typeof(BevelEdgeBlockBuilder)) is BevelEdgeBlockBuilder __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BevelEdgeBlockBuilder");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "builder", value);
			}
		}

		private EdgeBlockBuilder.Point p0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p0"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p0", value);
			}
		}

		private EdgeBlockBuilder.Point p1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p1"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p1", value);
			}
		}

		private EdgeBlockBuilder.Point p2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p2"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p2", value);
			}
		}

		private EdgeBlockBuilder.Point p3
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "p3"), typeof(EdgeBlockBuilder.Point)) is EdgeBlockBuilder.Point __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to EdgeBlockBuilder.Point");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "p3", value);
			}
		}

		public float3 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Position"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Position", value);
			}
		}

		public floatQ Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Rotation"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Rotation", value);
			}
		}

		public float3 Scale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Scale"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Scale", value);
			}
		}

		public System.Single Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Width", value);
			}
		}

		public System.Single Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Height"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Height", value);
			}
		}

		public System.Single Thickness
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Thickness"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Thickness", value);
			}
		}

		public System.Boolean Relief
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Relief"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Relief", value);
			}
		}

		public System.Single SlantAngle
		{
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SlantAngle", value);
			}
		}

		public System.Single LeftSlantOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LeftSlantOffset"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single RightSlantOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RightSlantOffset"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single UsableWidth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UsableWidth"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single BorderWidth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BorderWidth"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		private System.Single ComputeBorderWidth(System.Single thickness)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeBorderWidth", thickness), typeof(System.Single));
		}

		public BevelStripe(MeshX meshx)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BevelStripe", ResoniteBridge.ResoniteBridgeValueType.Type), meshx);
		}

		public void Remove()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove");
		}

		private System.Single CalculateSlantOffset(System.Single angle)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateSlantOffset", angle), typeof(System.Single));
		}

		public static System.Single CalculateSlantOffset(System.Single angle, System.Single height)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BevelStripe", ResoniteBridge.ResoniteBridgeValueType.Type), "CalculateSlantOffset", angle, height), typeof(System.Single));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BevelStripe(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BevelStripe()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Frame", "Elements.Core")]
	public class Frame : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public float2 ContentSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ContentSize"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ContentSize", value);
			}
		}

		public System.Single Thickness
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Thickness"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Thickness", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		public Frame(TriangleSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Frame", ResoniteBridge.ResoniteBridgeValueType.Type), submesh);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Frame(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Frame()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Grid", "Elements.Core")]
	public class Grid : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public struct Point : ResoniteBridge.ResoniteBridgeValueHolder
		{
			public color color
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "color"), typeof(color)) is color __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to color");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "color", value);
				}
			}

			public float3 offset
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "offset"), typeof(float3)) is float3 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to float3");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "offset", value);
				}
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public Point(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public Point()
			{
			}
		}

		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public System.Boolean FlatShading
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FlatShading"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FlatShading", value);
			}
		}

		public int2 Points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Points"), typeof(int2)) is int2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Points", value);
			}
		}

		public System.Boolean ReverseWinding
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ReverseWinding"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ReverseWinding", value);
			}
		}

		public float2 Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		public float2 UVOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVOffset"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVOffset", value);
			}
		}

		public Func<int2, float3> PointDisplacement
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PointDisplacement"), typeof(Func<int2, float3>)) is Func<int2, float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Func<int2, float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PointDisplacement", value);
			}
		}

		public Func<int2, float2> UVDisplacement
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVDisplacement"), typeof(Func<int2, float2>)) is Func<int2, float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Func<int2, float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVDisplacement", value);
			}
		}

		public Func<int2, color> PointColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PointColor"), typeof(Func<int2, color>)) is Func<int2, color> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Func<int2, color>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PointColor", value);
			}
		}

		public Grid(TriangleSubmesh submesh, int2 points, System.Boolean flatShading, System.Boolean reverseWinding = false)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Grid", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, points, flatShading, reverseWinding);
		}

		private static System.Boolean IsValidQuadCoord(in int2 coord, in int2 quads)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Grid", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidQuadCoord", coord, quads), typeof(System.Boolean));
		}

		private static System.Int32 QuadOffset(in int2 coord, in int2 quads)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Grid", ResoniteBridge.ResoniteBridgeValueType.Type), "QuadOffset", coord, quads), typeof(System.Int32));
		}

		public void GetVerticesForPoint(in int2 point, in int2 quads, RawList<Vertex> vertices)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetVerticesForPoint", point, quads, vertices);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Grid(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Grid()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.IcoSphere", "Elements.Core")]
	public class IcoSphere : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public System.Single Radius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Radius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Radius", value);
			}
		}

		public System.Single FlatFaceExtrude
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FlatFaceExtrude"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FlatFaceExtrude", value);
			}
		}

		public System.Single FlatFaceScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FlatFaceScale"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FlatFaceScale", value);
			}
		}

		public System.Int32 Subdivisions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Subdivisions"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Subdivisions", value);
			}
		}

		public System.Boolean FlatShading
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FlatShading"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FlatShading", value);
			}
		}

		private float3[] _directions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_directions"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_directions", value);
			}
		}

		public IcoSphere(TriangleSubmesh submesh, System.Int32 subdivisions, System.Boolean flatShading)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "IcoSphere", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, subdivisions, flatShading);
		}

		private System.Int32 GetMiddlePoint(System.Int32 p0, System.Int32 p1, Dictionary<ulong, int> middlePointCache)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetMiddlePoint", p0, p1, middlePointCache), typeof(System.Int32));
		}

		private System.Int32 GetUnique(System.Int32 index, HashSet<int> inUse)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetUnique", index, inUse), typeof(System.Int32));
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public IcoSphere(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public IcoSphere()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.LabelPointer", "Elements.Core")]
	public class LabelPointer : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public float3 LabelPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LabelPoint"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LabelPoint", value);
			}
		}

		public float3 TargetPoint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TargetPoint"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TargetPoint", value);
			}
		}

		public floatQ LabelRotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LabelRotation"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LabelRotation", value);
			}
		}

		public System.Single LabelWidth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LabelWidth"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LabelWidth", value);
			}
		}

		public System.Single Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Width", value);
			}
		}

		public System.Single ExpandLerp
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ExpandLerp"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ExpandLerp", value);
			}
		}

		public System.Boolean DualSided
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DualSided"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DualSided", value);
			}
		}

		public LabelPointer(TriangleSubmesh submesh, System.Boolean dualSided)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "LabelPointer", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, dualSided);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public LabelPointer(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public LabelPointer()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Line2D", "Elements.Core")]
	public class Line2D : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Single Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Width", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		public colorX Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public System.Int32 VertexStartIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "VertexStartIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "VertexStartIndex", value);
			}
		}

		public System.Int32 TriangleStartIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TriangleStartIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TriangleStartIndex", value);
			}
		}

		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Submesh", value);
			}
		}

		public float2[] Points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Points"), typeof(float2[])) is float2[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Points", value);
			}
		}

		public System.Int32 PointCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PointCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public Line2D(TriangleSubmesh submesh, System.Int32 points)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Line2D", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, points);
		}

		public void GenerateGeometry(TriangleSubmesh submesh, System.Int32 points)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateGeometry", submesh, points);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		public override void RemoveGeometry()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveGeometry");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Line2D(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Line2D()
		{
		}
	}
	public abstract class MeshXShape : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public float3 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public floatQ Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public float3 Scale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Scale"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Scale", value);
			}
		}

		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Mesh", value);
			}
		}

		public VertexCollection AllVertices
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AllVertices"), typeof(VertexCollection)) is VertexCollection __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to VertexCollection");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AllVertices", value);
			}
		}

		public TriangleCollection AllTriangles
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AllTriangles"), typeof(TriangleCollection)) is TriangleCollection __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleCollection");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AllTriangles", value);
			}
		}

		public PointCollection AllPoints
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AllPoints"), typeof(PointCollection)) is PointCollection __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to PointCollection");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AllPoints", value);
			}
		}

		public MeshXShape(MeshX mesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshXShape", ResoniteBridge.ResoniteBridgeValueType.Type), mesh);
		}

		protected void UpdateMesh(MeshX mesh)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateMesh", mesh);
		}

		public abstract void Update();

		public virtual void Remove()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove");
		}

		public virtual void RemoveGeometry()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveGeometry");
		}

		protected void TransformVertices(System.Boolean normalsAndTangents)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TransformVertices", normalsAndTangents);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MeshXShape(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MeshXShape()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Quad", "Elements.Core")]
	public class Quad : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 TOTAL_VERTICES
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TOTAL_VERTICES"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TOTAL_VERTICES", value);
			}
		}

		public System.Int32 TOTAL_TRIANGLES
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TOTAL_TRIANGLES"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TOTAL_TRIANGLES", value);
			}
		}

		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public float2 Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public float2 Pivot
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Pivot"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Pivot", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		public float2 UVOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVOffset"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVOffset", value);
			}
		}

		public Vertex FirstVertex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "FirstVertex"), typeof(Vertex)) is Vertex __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Vertex");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "FirstVertex", value);
			}
		}

		public Triangle Triangle0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Triangle0"), typeof(Triangle)) is Triangle __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Triangle");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Triangle0", value);
			}
		}

		public Triangle Triangle1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Triangle1"), typeof(Triangle)) is Triangle __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Triangle");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Triangle1", value);
			}
		}

		public System.Boolean UseColors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UseColors"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UseColors", value);
			}
		}

		public colorX UpperLeftColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UpperLeftColor"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UpperLeftColor", value);
			}
		}

		public colorX UpperRightColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UpperRightColor"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UpperRightColor", value);
			}
		}

		public colorX LowerLeftColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LowerLeftColor"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LowerLeftColor", value);
			}
		}

		public colorX LowerRightColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LowerRightColor"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LowerRightColor", value);
			}
		}

		public colorX? Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Color"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Color", value);
			}
		}

		public colorX GetColor(System.Int32 index)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetColor", index), typeof(colorX));
		}

		public override void Remove()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove");
		}

		public Quad(TriangleSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Quad", ResoniteBridge.ResoniteBridgeValueType.Type), submesh);
		}

		public Quad(Vertex firstVertex)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Quad", ResoniteBridge.ResoniteBridgeValueType.Type), firstVertex);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		public void UpdateUnsafe(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateUnsafe", index);
		}

		public static void SetQuad(MeshX meshx, System.Int32 startVertex, in float3 position, in floatQ rotation, in float2 pivot, in float2 halfSize, in float2 uvScale, in float2 uvOffset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Quad", ResoniteBridge.ResoniteBridgeValueType.Type), "SetQuad", meshx, startVertex, position, rotation, pivot, halfSize, uvScale, uvOffset);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Quad(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Quad()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Ring", "Elements.Core")]
	public class Ring : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 Segments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Segments"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Segments", value);
			}
		}

		public System.Single InnerRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "InnerRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "InnerRadius", value);
			}
		}

		public System.Single OuterRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "OuterRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "OuterRadius", value);
			}
		}

		public System.Single Arc
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Arc"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Arc", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		public System.Single Radius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Radius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Radius", value);
			}
		}

		public System.Single Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Width", value);
			}
		}

		public Vertex InnerRingVertex(System.Int32 segment)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InnerRingVertex", segment), typeof(Vertex));
		}

		public Vertex OuterRingVertex(System.Int32 segment)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OuterRingVertex", segment), typeof(Vertex));
		}

		public Ring(MeshX meshx, System.Int32 segments)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Ring", ResoniteBridge.ResoniteBridgeValueType.Type), meshx, segments);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Ring(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Ring()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Screw", "Elements.Core")]
	public class Screw : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public System.Int32 Segments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Segments"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Segments", value);
			}
		}

		public System.Boolean WrapAroundCurve
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "WrapAroundCurve"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "WrapAroundCurve", value);
			}
		}

		public System.Boolean WrapAroundSegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "WrapAroundSegments"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "WrapAroundSegments", value);
			}
		}

		public System.Single Angle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Angle"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Angle", value);
			}
		}

		public float3 Axis
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Axis"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Axis", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		private float3[] curvePoints
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "curvePoints"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "curvePoints", value);
			}
		}

		public System.Int32 CurvePoints
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CurvePoints"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public float3 this[System.Int32 pointIndex]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Item", value);
			}
		}

		public Screw(TriangleSubmesh submesh, System.Int32 segments, System.Int32 curvePoints)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Screw", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, segments, curvePoints);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		public Vertex GetVertex(System.Int32 segment, System.Int32 point)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetVertex", segment, point), typeof(Vertex));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Screw(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Screw()
		{
		}
	}
	public abstract class ProfileSegmentedBuilderBase : SegmentedBuilder<ProfileSegment>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Boolean _dualSided
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_dualSided"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_dualSided", value);
			}
		}

		private Shading _shading
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_shading"), typeof(Shading)) is Shading __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Shading");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_shading", value);
			}
		}

		private Ends _ends
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_ends"), typeof(Ends)) is Ends __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Ends");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_ends", value);
			}
		}

		private Topology _topology
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_topology"), typeof(Topology)) is Topology __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Topology");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_topology", value);
			}
		}

		public override System.Boolean DualSided
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "DualSided"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override Shading ShadingType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ShadingType"), typeof(Shading)) is Shading __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Shading");
				}
			}
		}

		public override Ends EndsType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "EndsType"), typeof(Ends)) is Ends __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Ends");
				}
			}
		}

		public override Topology TopologyType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TopologyType"), typeof(Topology)) is Topology __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Topology");
				}
			}
		}

		public abstract System.Single Circumference { get; }

		public abstract float3 GetPoint(System.Int32 index);

		public ProfileSegmentedBuilderBase(TriangleSubmesh submesh, Topology topology, Shading shading = Shading.Smooth, Ends ends = Ends.Open, System.Boolean dualSided = false)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ProfileSegmentedBuilderBase", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, topology, shading, ends, dualSided);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ProfileSegmentedBuilderBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ProfileSegmentedBuilderBase()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.ProfileSegmentedBuilder", "Elements.Core")]
	public class ProfileSegmentedBuilder : ProfileSegmentedBuilderBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private float3[] _points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_points"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_points", value);
			}
		}

		private System.Single _circumference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_circumference"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_circumference", value);
			}
		}

		private System.Single _pointStep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_pointStep"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_pointStep", value);
			}
		}

		public override System.Int32 Points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Points"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public override System.Single PointStep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PointStep"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public override System.Single Circumference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Circumference"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public override float3 GetPoint(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPoint", index), typeof(float3));
		}

		public void SetPoint(System.Int32 index, in float3 point)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPoint", index, point);
		}

		public ProfileSegmentedBuilder(TriangleSubmesh submesh, System.Int32 points, Topology topology, Shading shading = Shading.Smooth, Ends ends = Ends.Open, System.Boolean dualSided = false)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ProfileSegmentedBuilder", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, points, topology, shading, ends, dualSided);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ProfileSegmentedBuilder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ProfileSegmentedBuilder()
		{
		}
	}
	public class ProfileSegment : Segment, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Single _scale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_scale"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_scale", value);
			}
		}

		public System.Single Scale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Scale"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Scale", value);
			}
		}

		protected override System.Single SimpleCircumference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SimpleCircumference"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		protected override float3 ComputeLocalPoint(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeLocalPoint", index), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ProfileSegment(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ProfileSegment()
		{
		}
	}
	public abstract class Segment : IComparable<Segment>, IComparable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Boolean _dirty
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_dirty"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_dirty", value);
			}
		}

		private float3 _position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_position"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_position", value);
			}
		}

		private floatQ _rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_rotation"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_rotation", value);
			}
		}

		private System.Single _vCoord
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_vCoord"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_vCoord", value);
			}
		}

		private color _color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_color"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_color", value);
			}
		}

		private ColorProfile _profile
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_profile"), typeof(ColorProfile)) is ColorProfile __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ColorProfile");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_profile", value);
			}
		}

		internal float3 _dir
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_dir"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_dir", value);
			}
		}

		private SegmentedBuilder builder
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "builder"), typeof(SegmentedBuilder)) is SegmentedBuilder __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SegmentedBuilder");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "builder", value);
			}
		}

		internal VertexCollection ConnectToVertices
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ConnectToVertices"), typeof(VertexCollection)) is VertexCollection __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to VertexCollection");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ConnectToVertices", value);
			}
		}

		internal VertexCollection ConnectAtVertices
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ConnectAtVertices"), typeof(VertexCollection)) is VertexCollection __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to VertexCollection");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ConnectAtVertices", value);
			}
		}

		internal TriangleCollection Triangles
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Triangles"), typeof(TriangleCollection)) is TriangleCollection __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleCollection");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Triangles", value);
			}
		}

		private float[] vertexCircumferences
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "vertexCircumferences"), typeof(float[])) is float[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "vertexCircumferences", value);
			}
		}

		public System.Boolean IsDirty
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsDirty"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Index", value);
			}
		}

		public Segment PreviousSegment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PreviousSegment"), typeof(Segment)) is Segment __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Segment");
				}
			}
		}

		public Segment NextSegment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "NextSegment"), typeof(Segment)) is Segment __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Segment");
				}
			}
		}

		public float3 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Position"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Position", value);
			}
		}

		public floatQ Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Rotation"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Rotation", value);
			}
		}

		public System.Single VCoordinate
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VCoordinate"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VCoordinate", value);
			}
		}

		public color Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Color"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Color", value);
			}
		}

		public ColorProfile Profile
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Profile"), typeof(ColorProfile)) is ColorProfile __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ColorProfile");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Profile", value);
			}
		}

		protected TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
		}

		protected System.Boolean IsCircle
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsCircle"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		protected MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
		}

		protected System.Int32 Points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Points"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		protected System.Single PointStep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PointStep"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		protected System.Int32 Sides
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Sides"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		protected System.Boolean DualSided
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "DualSided"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		protected System.Boolean FlatSides
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FlatSides"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		protected System.Boolean FlatSegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FlatSegments"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		protected System.Int32 SegmentVerts
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SegmentVerts"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		protected System.Int32 SegmentTrigs
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SegmentTrigs"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		protected System.Int32 Faces
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Faces"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		protected SegmentedBuilder Builder
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Builder"), typeof(SegmentedBuilder)) is SegmentedBuilder __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SegmentedBuilder");
				}
			}
		}

		public System.Single Circumference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Circumference"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		protected abstract System.Single SimpleCircumference { get; }

		public System.Single GetCircumferenceToVertex(System.Int32 index)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCircumferenceToVertex", index), typeof(System.Single));
		}

		internal virtual void Setup(SegmentedBuilder builder, System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Setup", builder, index);
		}

		internal void ConnectTo(Segment segment)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ConnectTo", segment);
		}

		public float3 ComputePoint(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputePoint", index), typeof(float3));
		}

		protected abstract float3 ComputeLocalPoint(System.Int32 index);

		internal void UpdateVertexGeometry(System.Boolean updateVertexCircumferences)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateVertexGeometry", updateVertexCircumferences);
		}

		internal void UpdateVertexColors()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateVertexColors");
		}

		internal void UpdateVertexUVs()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateVertexUVs");
		}

		internal void FlagVertices()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FlagVertices");
		}

		internal void SmoothCircleNormals()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SmoothCircleNormals");
		}

		private void SmoothCircleNormals(VertexCollection collection)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SmoothCircleNormals", collection);
		}

		private VertexCollection GetConnectAtVertices(Segment connectingSegment)
		{
			return (VertexCollection)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetConnectAtVertices", connectingSegment), typeof(VertexCollection));
		}

		private TriangleCollection GenerateTriangles()
		{
			return (TriangleCollection)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateTriangles"), typeof(TriangleCollection));
		}

		private VertexCollection GenerateVertices()
		{
			return (VertexCollection)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateVertices"), typeof(VertexCollection));
		}

		internal void ClearDirty()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ClearDirty");
		}

		internal void MarkDirty()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MarkDirty");
		}

		public System.Int32 CompareTo(Segment other)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CompareTo", other), typeof(System.Int32));
		}

		public System.Int32 CompareTo(System.Object obj)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CompareTo", obj), typeof(System.Int32));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Segment(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Segment()
		{
		}
	}
	public abstract class SegmentedBuilder : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		[DataModelType]
		[OldTypeName("Elements.Core.SegmentedBuilder+Shading", "Elements.Core")]
		public enum Shading
		{
			Smooth,
			FlatSides,
			FlatSegments,
			Flat
		}

		[DataModelType]
		[OldTypeName("Elements.Core.SegmentedBuilder+Topology", "Elements.Core")]
		public enum Topology
		{
			Circle,
			Line
		}

		[DataModelType]
		[OldTypeName("Elements.Core.SegmentedBuilder+Ends", "Elements.Core")]
		public enum Ends
		{
			Open,
			Capped,
			SmoothNormals,
			Connected
		}

		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public System.Boolean PreciseUV
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PreciseUV"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PreciseUV", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		public float2 UVOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVOffset"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVOffset", value);
			}
		}

		public System.Boolean ScaleUVByCircumference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ScaleUVByCircumference"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ScaleUVByCircumference", value);
			}
		}

		public System.Single MinimalCircumference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MinimalCircumference"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MinimalCircumference", value);
			}
		}

		public System.Boolean ForceUp
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ForceUp"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ForceUp", value);
			}
		}

		public float3 Up
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Up"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Up", value);
			}
		}

		public floatQ AutoOrientOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AutoOrientOffset"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AutoOrientOffset", value);
			}
		}

		public System.Boolean BlendOrientation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BlendOrientation"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BlendOrientation", value);
			}
		}

		public System.Boolean AutoOrientSegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AutoOrientSegments"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AutoOrientSegments", value);
			}
		}

		public System.Boolean AutoGenerateUV
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AutoGenerateUV"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AutoGenerateUV", value);
			}
		}

		public System.Boolean SwapUV
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SwapUV"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SwapUV", value);
			}
		}

		public abstract System.Boolean DualSided { get; }

		public abstract Shading ShadingType { get; }

		public abstract System.Int32 Points { get; }

		public abstract System.Single PointStep { get; }

		public abstract Topology TopologyType { get; }

		public abstract Ends EndsType { get; }

		public System.Int32 Sides
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Sides"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean FlatSides
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FlatSides"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Boolean FlatSegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FlatSegments"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public abstract System.Int32 SegmentCount { get; }

		public abstract Segment GetSegment(System.Int32 index);

		internal abstract void RegisterDirtySegment(Segment segment);

		public abstract void MarkAllDirty();

		public SegmentedBuilder(TriangleSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SegmentedBuilder", ResoniteBridge.ResoniteBridgeValueType.Type), submesh);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SegmentedBuilder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SegmentedBuilder()
		{
		}
	}
	public abstract class SegmentedBuilder<S> : SegmentedBuilder, ResoniteBridge.ResoniteBridgeValueHolder where S : Segment, new()
	{
		private List<S> segments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "segments"), typeof(List<S>)) is List<S> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<S>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "segments", value);
			}
		}

		private System.Boolean allDirty
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "allDirty"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "allDirty", value);
			}
		}

		private List<S> dirtySegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "dirtySegments"), typeof(List<S>)) is List<S> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<S>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "dirtySegments", value);
			}
		}

		private System.Int32 _beginCapVertOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_beginCapVertOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_beginCapVertOffset", value);
			}
		}

		private System.Int32 _endCapVertOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_endCapVertOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_endCapVertOffset", value);
			}
		}

		private Segment _lastFirstSegment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lastFirstSegment"), typeof(Segment)) is Segment __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Segment");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lastFirstSegment", value);
			}
		}

		private Segment _lastLastSegment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lastLastSegment"), typeof(Segment)) is Segment __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Segment");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lastLastSegment", value);
			}
		}

		private System.Boolean _lastAutoOrientSegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lastAutoOrientSegments"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lastAutoOrientSegments", value);
			}
		}

		public override System.Int32 SegmentCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SegmentCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public S this[System.Int32 index] => segments[index];

		public override Segment GetSegment(System.Int32 index)
		{
			return (Segment)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSegment", index), typeof(Segment));
		}

		internal override void RegisterDirtySegment(Segment segment)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RegisterDirtySegment", segment);
		}

		public override void MarkAllDirty()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MarkAllDirty");
		}

		public SegmentedBuilder(TriangleSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SegmentedBuilder", ResoniteBridge.ResoniteBridgeValueType.Type), submesh);
		}

		protected void Initialize()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Initialize");
		}

		public void EnsureSegmentCount(System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureSegmentCount", count);
		}

		public S AddSegment(float3? pos = null)
		{
			return (S)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddSegment", pos), typeof(S));
		}

		public void RemoveLastSegment()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveLastSegment");
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private void UpdateCapVerts(System.Int32 offset, Segment segment, System.Boolean flip)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateCapVerts", offset, segment, flip);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SegmentedBuilder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SegmentedBuilder()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.StripBuilder", "Elements.Core")]
	public class StripBuilder : SegmentedBuilder<StripSegment>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Boolean _dualSided
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_dualSided"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_dualSided", value);
			}
		}

		private Shading _shading
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_shading"), typeof(Shading)) is Shading __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Shading");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_shading", value);
			}
		}

		private System.Int32 _points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_points"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_points", value);
			}
		}

		private Ends _ends
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_ends"), typeof(Ends)) is Ends __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Ends");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_ends", value);
			}
		}

		private System.Single _pointStep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_pointStep"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_pointStep", value);
			}
		}

		private float3 _baseOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_baseOffset"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_baseOffset", value);
			}
		}

		internal float3[] _offsets
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_offsets"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_offsets", value);
			}
		}

		public override System.Boolean DualSided
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "DualSided"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override Shading ShadingType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ShadingType"), typeof(Shading)) is Shading __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Shading");
				}
			}
		}

		public override Ends EndsType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "EndsType"), typeof(Ends)) is Ends __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Ends");
				}
			}
		}

		public override System.Int32 Points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Points"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public override System.Single PointStep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PointStep"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public override Topology TopologyType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TopologyType"), typeof(Topology)) is Topology __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Topology");
				}
			}
		}

		public float3 BaseOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BaseOffset"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
		}

		public StripBuilder(TriangleSubmesh submesh, System.Int32 points, Ends ends = Ends.Open, Shading shading = Shading.Smooth, System.Boolean dualSided = false, float3? baseOffset = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StripBuilder", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, points, ends, shading, dualSided, baseOffset);
		}

		public float3[] GetOffsetsArray()
		{
			return (float3[])ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetOffsetsArray"), typeof(float3[]));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StripBuilder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StripBuilder()
		{
		}
	}
	public class StripSegment : Segment, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private StripBuilder _stripBuilder
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_stripBuilder"), typeof(StripBuilder)) is StripBuilder __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to StripBuilder");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_stripBuilder", value);
			}
		}

		private System.Single _width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_width", value);
			}
		}

		private System.Single _halfWidth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_halfWidth"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_halfWidth", value);
			}
		}

		public System.Single Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Width", value);
			}
		}

		protected override System.Single SimpleCircumference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SimpleCircumference"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		internal override void Setup(SegmentedBuilder builder, System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Setup", builder, index);
		}

		protected override float3 ComputeLocalPoint(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeLocalPoint", index), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StripSegment(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StripSegment()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.TubeBuilder", "Elements.Core")]
	public class TubeBuilder : SegmentedBuilder<TubeSegment>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Boolean _dualSided
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_dualSided"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_dualSided", value);
			}
		}

		private Shading _shading
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_shading"), typeof(Shading)) is Shading __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Shading");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_shading", value);
			}
		}

		private System.Int32 _points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_points"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_points", value);
			}
		}

		private Ends _ends
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_ends"), typeof(Ends)) is Ends __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Ends");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_ends", value);
			}
		}

		private System.Single _pointStep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_pointStep"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_pointStep", value);
			}
		}

		internal float3[] _offsets
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_offsets"), typeof(float3[])) is float3[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_offsets", value);
			}
		}

		public override System.Boolean DualSided
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "DualSided"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override Shading ShadingType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ShadingType"), typeof(Shading)) is Shading __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Shading");
				}
			}
		}

		public override Ends EndsType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "EndsType"), typeof(Ends)) is Ends __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Ends");
				}
			}
		}

		public override System.Int32 Points
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Points"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public override System.Single PointStep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PointStep"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public override Topology TopologyType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TopologyType"), typeof(Topology)) is Topology __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Topology");
				}
			}
		}

		public TubeBuilder(TriangleSubmesh submesh, System.Int32 points, Ends ends = Ends.Capped, Shading shading = Shading.Smooth, System.Boolean dualSided = false)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TubeBuilder", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, points, ends, shading, dualSided);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TubeBuilder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TubeBuilder()
		{
		}
	}
	public class TubeSegment : Segment, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private TubeBuilder _stripBuilder
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_stripBuilder"), typeof(TubeBuilder)) is TubeBuilder __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TubeBuilder");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_stripBuilder", value);
			}
		}

		private System.Single _radius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_radius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_radius", value);
			}
		}

		public System.Single Radius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Radius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Radius", value);
			}
		}

		protected override System.Single SimpleCircumference
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SimpleCircumference"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		internal override void Setup(SegmentedBuilder builder, System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Setup", builder, index);
		}

		protected override float3 ComputeLocalPoint(System.Int32 index)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeLocalPoint", index), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TubeSegment(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TubeSegment()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.Torus", "Elements.Core")]
	public class Torus : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 MinorSegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MinorSegments"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MinorSegments", value);
			}
		}

		public System.Int32 MajorSegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MajorSegments"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MajorSegments", value);
			}
		}

		public System.Single MinorRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MinorRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MinorRadius", value);
			}
		}

		public System.Single MajorRadius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MajorRadius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MajorRadius", value);
			}
		}

		private Screw screw
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "screw"), typeof(Screw)) is Screw __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Screw");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "screw", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UVScale", value);
			}
		}

		public Torus(TriangleSubmesh submesh, System.Int32 minorSegments, System.Int32 majorSegments)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Torus", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, minorSegments, majorSegments);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		public override void Remove()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove");
		}

		public override void RemoveGeometry()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveGeometry");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Torus(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Torus()
		{
		}
	}
	[DataModelType]
	[OldTypeName("Elements.Core.UVSphereCapsule", "Elements.Core")]
	public class UVSphereCapsule : MeshXShape, ResoniteBridge.ResoniteBridgeValueHolder
	{
		[DataModelType]
		public enum Shading
		{
			Smooth,
			FlatSegments,
			FlatRings,
			Flat
		}

		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Submesh", value);
			}
		}

		public System.Single Radius
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Radius"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Radius", value);
			}
		}

		public System.Single Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Height"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Height", value);
			}
		}

		public Shading ShadingType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ShadingType"), typeof(Shading)) is Shading __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Shading");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ShadingType", value);
			}
		}

		public System.Int32 Rings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rings"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rings", value);
			}
		}

		public System.Int32 Segments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Segments"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Segments", value);
			}
		}

		public System.Boolean Capsule
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Capsule"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Capsule", value);
			}
		}

		public float3 TopOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TopOffset"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TopOffset", value);
			}
		}

		public float3 BottomOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BottomOffset"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BottomOffset", value);
			}
		}

		public float3[,] Offsets
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Offsets"), typeof(float3[,])) is float3[,] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3[,]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Offsets", value);
			}
		}

		public System.Boolean UseColors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UseColors"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UseColors", value);
			}
		}

		public color TopColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TopColor"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TopColor", value);
			}
		}

		public color BottomColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BottomColor"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BottomColor", value);
			}
		}

		public color[,] Colors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Colors"), typeof(color[,])) is color[,] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color[,]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Colors", value);
			}
		}

		public System.Int32 SegmentVerts
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SegmentVerts"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SegmentVerts", value);
			}
		}

		public System.Int32 RingVerts
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RingVerts"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RingVerts", value);
			}
		}

		public System.Boolean DuplicatedMiddleRing
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DuplicatedMiddleRing"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DuplicatedMiddleRing", value);
			}
		}

		private System.Single _segmentStep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_segmentStep"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_segmentStep", value);
			}
		}

		private System.Single _ringStep
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_ringStep"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_ringStep", value);
			}
		}

		public float2 UVScale
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UVScale"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UVScale", value);
			}
		}

		private System.Boolean FlatRings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FlatRings"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		private System.Boolean FlatSegments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FlatSegments"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Int32 LinearOffsetCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LinearOffsetCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public UVSphereCapsule(TriangleSubmesh submesh, System.Int32 rings, System.Int32 segments, Shading shadingType = Shading.Smooth, System.Boolean capsule = false)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "UVSphereCapsule", ResoniteBridge.ResoniteBridgeValueType.Type), submesh, rings, segments, shadingType, capsule);
		}

		public override void Update()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Update");
		}

		private floatQ GenerateRotation(System.Single segmentIndex, System.Single ringIndex)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateRotation", segmentIndex, ringIndex), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public UVSphereCapsule(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public UVSphereCapsule()
		{
		}
	}
	public struct Triangle : IMeshXPrimitive, IMeshXElement, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Int32 index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "index", value);
			}
		}

		private System.Int32 version
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "version"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "version", value);
			}
		}

		private TriangleSubmesh submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "submesh", value);
			}
		}

		public TriangleSubmesh Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
		}

		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
		}

		public System.Boolean IsNull
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsNull"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		Submesh IMeshXPrimitive.Submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Submesh"), typeof(Submesh)) is Submesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Submesh");
				}
			}
		}

		public System.Int32 IndexUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IndexUnsafe"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 SubmeshIndexUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SubmeshIndexUnsafe"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 SubmeshIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SubmeshIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SubmeshIndex", value);
			}
		}

		public System.Int32 Vertex0IndexUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex0IndexUnsafe"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex0IndexUnsafe", value);
			}
		}

		public System.Int32 Vertex1IndexUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex1IndexUnsafe"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex1IndexUnsafe", value);
			}
		}

		public System.Int32 Vertex2IndexUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex2IndexUnsafe"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex2IndexUnsafe", value);
			}
		}

		public System.Int32 Vertex0Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex0Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex0Index", value);
			}
		}

		public System.Int32 Vertex1Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex1Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex1Index", value);
			}
		}

		public System.Int32 Vertex2Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex2Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex2Index", value);
			}
		}

		public Vertex Vertex0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex0"), typeof(Vertex)) is Vertex __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Vertex");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex0", value);
			}
		}

		public Vertex Vertex1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex1"), typeof(Vertex)) is Vertex __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Vertex");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex1", value);
			}
		}

		public Vertex Vertex2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Vertex2"), typeof(Vertex)) is Vertex __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Vertex");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Vertex2", value);
			}
		}

		public float3 SurfaceNormal
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SurfaceNormal"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
		}

		public float3 SurfaceNormalUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SurfaceNormalUnsafe"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
		}

		public System.Single Area
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Area"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single AreaUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AreaUnsafe"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single AverageLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageLength"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.Single AverageLengthUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageLengthUnsafe"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public color AverageColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageColor"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
		}

		public color AverageColorUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageColorUnsafe"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
		}

		internal Triangle(System.Int32 index, TriangleSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Triangle", ResoniteBridge.ResoniteBridgeValueType.Type), index, submesh);
		}

		public void Copy(Triangle t)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Copy", t);
		}

		public Vertex GetVertex(System.Int32 index)
		{
			return (Vertex)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetVertex", index), typeof(Vertex));
		}

		public System.Int32 GetVertexIndexUnsafe(System.Int32 index)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetVertexIndexUnsafe", index), typeof(System.Int32));
		}

		public void Set(Vertex v0, Vertex v1, Vertex v2)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", v0, v1, v2);
		}

		public void Set(System.Int32 v0, System.Int32 v1, System.Int32 v2)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Set", v0, v1, v2);
		}

		public void ReverseWinding()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReverseWinding");
		}

		public float3 GetBarycentricCoordinate(in float3 point)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBarycentricCoordinate", point), typeof(float3));
		}

		public float3 GetBarycentricCoordinateFromUV0(in float2 uv)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBarycentricCoordinateFromUV0", uv), typeof(float3));
		}

		public float3 InterpolatePosition(in float3 barycentricCoordinate)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InterpolatePosition", barycentricCoordinate), typeof(float3));
		}

		public float3 InterpolateNormal(in float3 barycentricCoordinate)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InterpolateNormal", barycentricCoordinate), typeof(float3));
		}

		public color InterpolateColor(in float3 barycentricCoordinate)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InterpolateColor", barycentricCoordinate), typeof(color));
		}

		public float4 InterpolateTangent(in float3 barycentricCoordinate)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InterpolateTangent", barycentricCoordinate), typeof(float4));
		}

		public float2 InterpolateUV0(in float3 barycentricCoordinate)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InterpolateUV0", barycentricCoordinate), typeof(float2));
		}

		internal System.Boolean UpdateIndex()
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateIndex"), typeof(System.Boolean));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Triangle(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Triangle()
		{
		}
	}
	public struct TriangleCollectionSlice : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 offset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "offset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "offset", value);
			}
		}

		public System.Int32 count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "count", value);
			}
		}

		public TriangleCollection collection
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "collection"), typeof(TriangleCollection)) is TriangleCollection __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleCollection");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "collection", value);
			}
		}

		public System.Boolean IsNull
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsNull"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public Triangle this[System.Int32 index]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(Triangle)) is Triangle __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Triangle");
				}
			}
		}

		public TriangleCollectionSlice(System.Int32 offset, System.Int32 count, TriangleCollection collection)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TriangleCollectionSlice", ResoniteBridge.ResoniteBridgeValueType.Type), offset, count, collection);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TriangleCollectionSlice(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TriangleCollectionSlice()
		{
		}
	}
	public class TriangleCollection : IEnumerable<Triangle>, IEnumerable, IList<Triangle>, ICollection<Triangle>, IPoolable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		internal List<Triangle> _triangles
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_triangles"), typeof(List<Triangle>)) is List<Triangle> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Triangle>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_triangles", value);
			}
		}

		public System.Int32 Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 Capacity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Capacity"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Capacity", value);
			}
		}

		public System.Boolean IsReadOnly
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsReadOnly"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public Triangle this[System.Int32 index]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(Triangle)) is Triangle __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Triangle");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Item", value);
			}
		}

		public void UpdateIndexes()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateIndexes");
		}

		public TriangleCollection()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TriangleCollection", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public TriangleCollection(System.Int32 capacity = 4)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TriangleCollection", ResoniteBridge.ResoniteBridgeValueType.Type), capacity);
		}

		public void Add(Triangle v)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Add", v);
		}

		public void AddRange(IEnumerable<Triangle> collection)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddRange", collection);
		}

		public System.Boolean Remove(Triangle v)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", v), typeof(System.Boolean));
		}

		public void RemoveAt(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveAt", index);
		}

		public void RemoveRange(System.Int32 index, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveRange", index, count);
		}

		public List<Triangle>.Enumerator GetEnumerator()
		{
			return (List<Triangle>.Enumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetEnumerator"), typeof(List<Triangle>.Enumerator));
		}

		IEnumerator<Triangle> IEnumerable<Triangle>.GetEnumerator()
		{
			return (IEnumerator<Triangle>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable<Triangle>.GetEnumerator"), typeof(IEnumerator<Triangle>));
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return (IEnumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable.GetEnumerator"), typeof(IEnumerator));
		}

		public System.Int32 IndexOf(Triangle item)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IndexOf", item), typeof(System.Int32));
		}

		public void Insert(System.Int32 index, Triangle item)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Insert", index, item);
		}

		public void Clear()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear");
		}

		public System.Boolean Contains(Triangle item)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Contains", item), typeof(System.Boolean));
		}

		public void CopyTo(Triangle[] array, System.Int32 arrayIndex)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyTo", array, arrayIndex);
		}

		void IPoolable.Clean()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IPoolable.Clean");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TriangleCollection(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public struct trig : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 v0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "v0"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "v0", value);
			}
		}

		public System.Int32 v1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "v1"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "v1", value);
			}
		}

		public System.Int32 v2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "v2"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "v2", value);
			}
		}

		public trig(System.Int32 v0, System.Int32 v1, System.Int32 v2)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "trig", ResoniteBridge.ResoniteBridgeValueType.Type), v0, v1, v2);
		}

		public void VerticesRemoved(System.Int32 index, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "VerticesRemoved", index, count);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public trig(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public trig()
		{
		}
	}
	public class TriangleSubmesh : Submesh, ISubmesh<Triangle>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override SubmeshTopology Topology
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Topology"), typeof(SubmeshTopology)) is SubmeshTopology __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SubmeshTopology");
				}
			}
		}

		public override System.Int32 IndiciesPerElement
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IndiciesPerElement"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		Triangle ISubmesh<Triangle>.this[System.Int32 index] => GetTriangle(index);

		public TriangleSubmesh(MeshX mesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TriangleSubmesh", ResoniteBridge.ResoniteBridgeValueType.Type), mesh);
		}

		public Triangle AddTriangle()
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangle"), typeof(Triangle));
		}

		public void AddTriangles(System.Int32 count, TriangleCollection trigs = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangles", count, trigs);
		}

		public Triangle AddTriangle(System.Int32 v0, System.Int32 v1, System.Int32 v2)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangle", v0, v1, v2), typeof(Triangle));
		}

		public Triangle AddTriangle(System.Int32 v0, System.Int32 v1, System.Int32 v2, System.Boolean reverse)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangle", v0, v1, v2, reverse), typeof(Triangle));
		}

		public Triangle AddTriangle(Vertex v0, Vertex v1, Vertex v2)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddTriangle", v0, v1, v2), typeof(Triangle));
		}

		public void SetTriangle(System.Int32 index, System.Int32 v0, System.Int32 v1, System.Int32 v2)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetTriangle", index, v0, v1, v2);
		}

		public Triangle GetTriangle(System.Int32 index)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetTriangle", index), typeof(Triangle));
		}

		public Triangle GetTriangleUnsafe(System.Int32 index)
		{
			return (Triangle)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetTriangleUnsafe", index), typeof(Triangle));
		}

		public void Remove(Triangle t)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", t);
		}

		public void Remove(TriangleCollection triangles)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", triangles);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TriangleSubmesh(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TriangleSubmesh()
		{
		}
	}
	public interface IVertex : ResoniteBridge.ResoniteBridgeValueHolder
	{
		MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
		}

		float3 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Position"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Position", value);
			}
		}

		float3 Normal
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Normal"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Normal", value);
			}
		}

		float3 Tangent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tangent"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tangent", value);
			}
		}

		float4 Tangent4
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tangent4"), typeof(float4)) is float4 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float4");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tangent4", value);
			}
		}

		color Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Color"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Color", value);
			}
		}

		float2 UV0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV0"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV0", value);
			}
		}

		float2 UV1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV1"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV1", value);
			}
		}

		float2 UV2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV2"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV2", value);
			}
		}

		float2 UV3
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV3"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV3", value);
			}
		}

		BoneBinding BoneBinding
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BoneBinding"), typeof(BoneBinding)) is BoneBinding __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BoneBinding");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BoneBinding", value);
			}
		}

		float2 GetUV(System.Int32 channel);

		void SetUV(System.Int32 channel, in float2 uv);

		float3 GetBlendShapePositionDelta(System.String key, System.Int32 frame = 0);

		void SetBlendShapePositionDelta(System.String key, in float3 delta, System.Int32 frame = 0);

		float3 GetBlendShapeNormalDelta(System.String key, System.Int32 frame = 0);

		void SetBlendShapeNormalDelta(System.String key, in float3 delta, System.Int32 frame = 0);

		float3 GetBlendShapeTangentDelta(System.String key, System.Int32 frame = 0);

		void SetBlendShapeTangentDelta(System.String key, in float3 delta, System.Int32 frame = 0);
	}
	public struct Vertex : IVertex, IMeshXElement, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Int32 index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "index", value);
			}
		}

		private System.Int32 version
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "version"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "version", value);
			}
		}

		private MeshX meshx
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "meshx"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "meshx", value);
			}
		}

		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
		}

		public static Vertex Null
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Vertex", ResoniteBridge.ResoniteBridgeValueType.Type), "Null"), typeof(Vertex)) is Vertex __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Vertex");
				}
			}
		}

		public System.Int32 IndexUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IndexUnsafe"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 Index
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Index"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public float3 PositionUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PositionUnsafe"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
		}

		public float3 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Position"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Position", value);
			}
		}

		public float3 NormalUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "NormalUnsafe"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
		}

		public float3 Normal
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Normal"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Normal", value);
			}
		}

		public float4 Tangent4Unsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tangent4Unsafe"), typeof(float4)) is float4 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float4");
				}
			}
		}

		public float3 Tangent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tangent"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tangent", value);
			}
		}

		public float4 Tangent4
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Tangent4"), typeof(float4)) is float4 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float4");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Tangent4", value);
			}
		}

		public color ColorUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ColorUnsafe"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
		}

		public color Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Color"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Color", value);
			}
		}

		public BoneBinding BoneBindingUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BoneBindingUnsafe"), typeof(BoneBinding)) is BoneBinding __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BoneBinding");
				}
			}
		}

		public BoneBinding BoneBinding
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BoneBinding"), typeof(BoneBinding)) is BoneBinding __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BoneBinding");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BoneBinding", value);
			}
		}

		public float2 UV0Unsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV0Unsafe"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
		}

		public float2 UV1Unsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV1Unsafe"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
		}

		public float2 UV2Unsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV2Unsafe"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
		}

		public float2 UV3Unsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV3Unsafe"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
		}

		public float2 UV0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV0"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV0", value);
			}
		}

		public float2 UV1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV1"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV1", value);
			}
		}

		public float2 UV2
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV2"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV2", value);
			}
		}

		public float2 UV3
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV3"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV3", value);
			}
		}

		public System.Boolean FlagUnsafe
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FlagUnsafe"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "FlagUnsafe", value);
			}
		}

		public System.Boolean Flag
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Flag"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Flag", value);
			}
		}

		internal Vertex(System.Int32 index, MeshX meshx)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Vertex", ResoniteBridge.ResoniteBridgeValueType.Type), index, meshx);
		}

		public void Copy(Vertex v)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Copy", v);
		}

		public float2 GetUV(System.Int32 uvChannel)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetUV", uvChannel), typeof(float2));
		}

		public float4 GetUV_Auto(System.Int32 uvChannel)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetUV_Auto", uvChannel), typeof(float4));
		}

		public void SetUV(System.Int32 uvChannel, in float2 uv)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetUV", uvChannel, uv);
		}

		public float3 GetBlendShapePositionDelta(System.String key, System.Int32 frame = 0)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBlendShapePositionDelta", key, frame), typeof(float3));
		}

		public void SetBlendShapePositionDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetBlendShapePositionDelta", key, delta, frame);
		}

		public float3 GetBlendShapeNormalDelta(System.String key, System.Int32 frame = 0)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBlendShapeNormalDelta", key, frame), typeof(float3));
		}

		public void SetBlendShapeNormalDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetBlendShapeNormalDelta", key, delta, frame);
		}

		public float3 GetBlendShapeTangentDelta(System.String key, System.Int32 frame = 0)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBlendShapeTangentDelta", key, frame), typeof(float3));
		}

		public void SetBlendShapeTangentDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetBlendShapeTangentDelta", key, delta, frame);
		}

		public void SetPosition(in float3 value)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPosition", value);
		}

		public void SetNormal(in float3 value)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetNormal", value);
		}

		public void SetTangent(in float3 value)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetTangent", value);
		}

		public void SetTangent4(in float4 value)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetTangent4", value);
		}

		public void SetColor(in color value)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetColor", value);
		}

		public void SetFlag(System.Boolean value)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetFlag", value);
		}

		internal System.Boolean UpdateIndex()
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateIndex"), typeof(System.Boolean));
		}

		void IVertex.SetUV(System.Int32 channel, in float2 uv)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IVertex.SetUV", channel, uv);
		}

		void IVertex.SetBlendShapePositionDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IVertex.SetBlendShapePositionDelta", key, delta, frame);
		}

		void IVertex.SetBlendShapeNormalDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IVertex.SetBlendShapeNormalDelta", key, delta, frame);
		}

		void IVertex.SetBlendShapeTangentDelta(System.String key, in float3 delta, System.Int32 frame = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IVertex.SetBlendShapeTangentDelta", key, delta, frame);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Vertex(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Vertex()
		{
		}
	}
	public class VertexCollection : IEnumerable<Vertex>, IEnumerable, IList<Vertex>, ICollection<Vertex>, IPoolable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		internal List<Vertex> _vertices
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_vertices"), typeof(List<Vertex>)) is List<Vertex> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Vertex>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_vertices", value);
			}
		}

		public Indexer<float3> Positions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Positions"), typeof(Indexer<float3>)) is Indexer<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Positions", value);
			}
		}

		public Indexer<float3> Normals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Normals"), typeof(Indexer<float3>)) is Indexer<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Normals", value);
			}
		}

		public Indexer<float3> Tangents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tangents"), typeof(Indexer<float3>)) is Indexer<float3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<float3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tangents", value);
			}
		}

		public Indexer<float4> Tangents4
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tangents4"), typeof(Indexer<float4>)) is Indexer<float4> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<float4>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tangents4", value);
			}
		}

		public Indexer<color> Colors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Colors"), typeof(Indexer<color>)) is Indexer<color> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<color>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Colors", value);
			}
		}

		public Indexer<float2> UV0s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UV0s"), typeof(Indexer<float2>)) is Indexer<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UV0s", value);
			}
		}

		public Indexer<float2> UV1s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UV1s"), typeof(Indexer<float2>)) is Indexer<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UV1s", value);
			}
		}

		public Indexer<float2> UV2s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UV2s"), typeof(Indexer<float2>)) is Indexer<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UV2s", value);
			}
		}

		public Indexer<float2> UV3s
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "UV3s"), typeof(Indexer<float2>)) is Indexer<float2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<float2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "UV3s", value);
			}
		}

		public Indexer<bool> Flags
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Flags"), typeof(Indexer<bool>)) is Indexer<bool> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Indexer<bool>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Flags", value);
			}
		}

		public System.Int32 Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 Capacity
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Capacity"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Capacity", value);
			}
		}

		public System.Boolean IsReadOnly
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsReadOnly"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public Vertex this[System.Int32 index]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(Vertex)) is Vertex __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Vertex");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Item", value);
			}
		}

		public void UpdateIndexes()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateIndexes");
		}

		public VertexCollection(System.Int32 capacity = 4)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VertexCollection", ResoniteBridge.ResoniteBridgeValueType.Type), capacity);
		}

		public void Add(Vertex v)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Add", v);
		}

		public void AddRange(IEnumerable<Vertex> collection)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddRange", collection);
		}

		public System.Boolean Remove(Vertex v)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Remove", v), typeof(System.Boolean));
		}

		public void RemoveAt(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveAt", index);
		}

		public void RemoveRange(System.Int32 index, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveRange", index, count);
		}

		public List<Vertex>.Enumerator GetEnumerator()
		{
			return (List<Vertex>.Enumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetEnumerator"), typeof(List<Vertex>.Enumerator));
		}

		IEnumerator<Vertex> IEnumerable<Vertex>.GetEnumerator()
		{
			return (IEnumerator<Vertex>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable<Vertex>.GetEnumerator"), typeof(IEnumerator<Vertex>));
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return (IEnumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable.GetEnumerator"), typeof(IEnumerator));
		}

		public System.Int32 IndexOf(Vertex item)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IndexOf", item), typeof(System.Int32));
		}

		public void Insert(System.Int32 index, Vertex item)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Insert", index, item);
		}

		public void Clear()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear");
		}

		public System.Boolean Contains(Vertex item)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Contains", item), typeof(System.Boolean));
		}

		public void CopyTo(Vertex[] array, System.Int32 arrayIndex)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyTo", array, arrayIndex);
		}

		void IPoolable.Clean()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IPoolable.Clean");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public VertexCollection(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public VertexCollection()
		{
		}
	}
	public static class BlenderInterface
	{
		private static string[] searchLocations
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "searchLocations"), typeof(string[])) is string[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "searchLocations", value);
			}
		}

		public static System.Boolean IsAvailable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "IsAvailable"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public static System.String RootDir
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "RootDir"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "RootDir", value);
			}
		}

		public static System.String Executable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "Executable"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "Executable", value);
			}
		}

		static BlenderInterface()
		{
		}

		public static void ExportToFBX(System.String input, System.String output)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "ExportToFBX", input, output);
		}

		public static void ExportToGLTF(System.String input, System.String output)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "ExportToGLTF", input, output);
		}

		private static void RunScript(System.String script, System.String arguments = "-b -P \"{0}\"")
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BlenderInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "RunScript", script, arguments);
		}
	}
	public static class FreeCADInterface
	{
		private static string[] searchLocations
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "searchLocations"), typeof(string[])) is string[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "searchLocations", value);
			}
		}

		public static string[] SupportedFormats
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "SupportedFormats"), typeof(string[])) is string[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "SupportedFormats", value);
			}
		}

		public static System.Boolean IsAvailable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "IsAvailable"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public static System.String RootDir
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "RootDir"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "RootDir", value);
			}
		}

		public static System.String Executable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "Executable"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		static FreeCADInterface()
		{
		}

		public static void Tesselate(System.String input, System.String output, System.Single tesselation)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "Tesselate", input, output, tesselation);
		}

		private static void RunScript(System.String script)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeCADInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "RunScript", script);
		}
	}
	public static class ModelPreimporter
	{
		public static System.Single DEFAULT_TESSELATION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ModelPreimporter", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_TESSELATION"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ModelPreimporter", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_TESSELATION", value);
			}
		}

		public static System.String Preimport(System.String model, System.String tempPath)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ModelPreimporter", ResoniteBridge.ResoniteBridgeValueType.Type), "Preimport", model, tempPath), typeof(System.String));
		}
	}
	public class ComputedConvexHull : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public float3 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(float3)) is float3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public floatQ Rotation
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Rotation"), typeof(floatQ)) is floatQ __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to floatQ");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Rotation", value);
			}
		}

		public MeshX Mesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Mesh"), typeof(MeshX)) is MeshX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Mesh", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ComputedConvexHull(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ComputedConvexHull()
		{
		}
	}
	public static class VHACDInterface
	{
		[DataModelType]
		public enum DecompositionMode
		{
			Voxel,
			Tetrahedron
		}

		public static System.Int32 MIN_RESOLUTION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_RESOLUTION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_RESOLUTION", value);
			}
		}

		public static System.Int32 MAX_RESOLUTION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_RESOLUTION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_RESOLUTION", value);
			}
		}

		public static System.Int32 DEFAULT_RESOLUTION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_RESOLUTION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_RESOLUTION", value);
			}
		}

		public static System.Int32 MIN_DEPTH
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_DEPTH"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_DEPTH", value);
			}
		}

		public static System.Int32 MAX_DEPTH
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_DEPTH"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_DEPTH", value);
			}
		}

		public static System.Int32 DEFAULT_DEPTH
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_DEPTH"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_DEPTH", value);
			}
		}

		public static System.Single DEFAULT_CONCAVITY
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_CONCAVITY"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_CONCAVITY", value);
			}
		}

		public static System.Int32 DEFAULT_DOWNSAMPLING
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_DOWNSAMPLING"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_DOWNSAMPLING", value);
			}
		}

		public static System.Int32 MIN_DOWNSAMPLING
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_DOWNSAMPLING"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_DOWNSAMPLING", value);
			}
		}

		public static System.Int32 MAX_DOWNSAMPLING
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_DOWNSAMPLING"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_DOWNSAMPLING", value);
			}
		}

		public static System.Single DEFAULT_ALPHA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_ALPHA"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_ALPHA", value);
			}
		}

		public static System.Single DEFAULT_BETA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_BETA"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_BETA", value);
			}
		}

		public static System.Single DEFAULT_GAMMA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_GAMMA"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_GAMMA", value);
			}
		}

		public static System.Single DEFAULT_DELTA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_DELTA"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_DELTA", value);
			}
		}

		public static System.Boolean DEFAULT_PCA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_PCA"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_PCA", value);
			}
		}

		public static DecompositionMode DEFAULT_MODE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_MODE"), typeof(DecompositionMode)) is DecompositionMode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to DecompositionMode");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_MODE", value);
			}
		}

		public static System.Int32 MIN_MAX_VERTICES
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_MAX_VERTICES"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_MAX_VERTICES", value);
			}
		}

		public static System.Int32 MAX_MAX_VERTICES
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_MAX_VERTICES"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_MAX_VERTICES", value);
			}
		}

		public static System.Int32 DEFAULT_MAX_VERTICES
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_MAX_VERTICES"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_MAX_VERTICES", value);
			}
		}

		public static System.Single MIN_MIN_VOLUME
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_MIN_VOLUME"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MIN_MIN_VOLUME", value);
			}
		}

		public static System.Single MAX_MIN_VOLUME
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_MIN_VOLUME"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "MAX_MIN_VOLUME", value);
			}
		}

		public static System.Single DEFAULT_MIN_VOLUME
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_MIN_VOLUME"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_MIN_VOLUME", value);
			}
		}

		public static System.Boolean DEFAULT_CONVEX_HULL_APPROXIMATION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_CONVEX_HULL_APPROXIMATION"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "DEFAULT_CONVEX_HULL_APPROXIMATION", value);
			}
		}

		public static System.Boolean IsAvailable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "IsAvailable"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public static System.String Executable
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "Executable"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "Executable", value);
			}
		}

		public static Task<List<ComputedConvexHull>> Decompose(MeshX mesh, System.Int32 resolution = 100000, System.Int32 depth = 20, System.Single concavity = 0.0025f, System.Int32 planeDownsampling = 4, System.Int32 convexHullDownsampling = 4, System.Single alpha = 0.05f, System.Single beta = 0.05f, System.Single gamma = 0.00125f, System.Single delta = 0.05f, System.Boolean pca = false, DecompositionMode mode = DecompositionMode.Voxel, System.Int32 maxVerticesPerHull = 64, System.Single minVolumePerHull = 0.0001f, System.Boolean convexHullApproximation = true)
		{
			return (Task<List<ComputedConvexHull>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "Decompose", mesh, resolution, depth, concavity, planeDownsampling, convexHullDownsampling, alpha, beta, gamma, delta, pca, mode, maxVerticesPerHull, minVolumePerHull, convexHullApproximation), typeof(Task<List<ComputedConvexHull>>));
		}

		private static void ExtractHulls(ResoniteBridge.ResoniteBridgeValue node, List<ComputedConvexHull> hulls)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VHACDInterface", ResoniteBridge.ResoniteBridgeValueType.Type), "ExtractHulls", node, hulls);
		}
	}
	public static class WavefrontExporter
	{
		public static void ExportAsOBJ(this MeshX meshx, System.String file)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "WavefrontExporter", ResoniteBridge.ResoniteBridgeValueType.Type), "ExportAsOBJ", meshx, file);
		}

		public static void ExportAsOBJ(this MeshX meshx, Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "WavefrontExporter", ResoniteBridge.ResoniteBridgeValueType.Type), "ExportAsOBJ", meshx, stream);
		}
	}
	public class RecordPackage : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.String ASSET_SCHEME
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ASSET_SCHEME"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ASSET_SCHEME", value);
			}
		}

		public System.String MAIN_RECORD_ID
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAIN_RECORD_ID"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAIN_RECORD_ID", value);
			}
		}

		public System.String ASSETS_FOLDER
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ASSETS_FOLDER"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ASSETS_FOLDER", value);
			}
		}

		public System.String VARIANTS_FOLDER
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "VARIANTS_FOLDER"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "VARIANTS_FOLDER", value);
			}
		}

		public System.String METADATA_FOLDER
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "METADATA_FOLDER"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "METADATA_FOLDER", value);
			}
		}

		public System.String RECORD_EXTENSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RECORD_EXTENSION"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RECORD_EXTENSION", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue _archive
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_archive"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ZipArchive");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_archive", value);
			}
		}

		private Dictionary<string, Record> _records
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_records"), typeof(Dictionary<string, Record>)) is Dictionary<string, Record> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, Record>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_records", value);
			}
		}

		private Dictionary<string, ResoniteBridge.ResoniteBridgeValue> _assets
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_assets"), typeof(Dictionary<string, ResoniteBridge.ResoniteBridgeValue>)) is Dictionary<string, ResoniteBridge.ResoniteBridgeValue> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, ZipArchiveEntry>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_assets", value);
			}
		}

		private Dictionary<string, Dictionary<string, ResoniteBridge.ResoniteBridgeValue>> _variants
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_variants"), typeof(Dictionary<string, Dictionary<string, ResoniteBridge.ResoniteBridgeValue>>)) is Dictionary<string, Dictionary<string, ResoniteBridge.ResoniteBridgeValue>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, Dictionary<string, ZipArchiveEntry>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_variants", value);
			}
		}

		private Dictionary<string, IAssetMetadata> _metadata
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_metadata"), typeof(Dictionary<string, IAssetMetadata>)) is Dictionary<string, IAssetMetadata> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, IAssetMetadata>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_metadata", value);
			}
		}

		public System.Int32 RecordCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RecordCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 AssetCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AssetCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public Record MainRecord
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MainRecord"), typeof(Record)) is Record __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Record");
				}
			}
		}

		public IEnumerable<Record> Records
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Records"), typeof(IEnumerable<Record>)) is IEnumerable<Record> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IEnumerable<Record>");
				}
			}
		}

		public IEnumerable<string> Assets
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Assets"), typeof(IEnumerable<string>)) is IEnumerable<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IEnumerable<string>");
				}
			}
		}

		public IEnumerable<IAssetMetadata> Metadata
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Metadata"), typeof(IEnumerable<IAssetMetadata>)) is IEnumerable<IAssetMetadata> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IEnumerable<IAssetMetadata>");
				}
			}
		}

		public static System.Uri GetAssetURL(System.String signature)
		{
			return (System.Uri)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "RecordPackage", ResoniteBridge.ResoniteBridgeValueType.Type), "GetAssetURL", signature), typeof(System.Uri));
		}

		public static System.String GetAssetSignature(System.Uri uri)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "RecordPackage", ResoniteBridge.ResoniteBridgeValueType.Type), "GetAssetSignature", uri), typeof(System.String));
		}

		public static RecordPackage Decode(System.String file)
		{
			return (RecordPackage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "RecordPackage", ResoniteBridge.ResoniteBridgeValueType.Type), "Decode", file), typeof(RecordPackage));
		}

		public static RecordPackage Decode(Stream stream)
		{
			return (RecordPackage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "RecordPackage", ResoniteBridge.ResoniteBridgeValueType.Type), "Decode", stream), typeof(RecordPackage));
		}

		public static RecordPackage Create(Stream writeStream)
		{
			return (RecordPackage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "RecordPackage", ResoniteBridge.ResoniteBridgeValueType.Type), "Create", writeStream), typeof(RecordPackage));
		}

		public System.Boolean HasAsset(System.String signature)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HasAsset", signature), typeof(System.Boolean));
		}

		public System.Boolean HasVariant(System.String signature, System.String variantIdentifier)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HasVariant", signature, variantIdentifier), typeof(System.Boolean));
		}

		public IEnumerable<string> EnumerateVariantsForAsset(System.String signature)
		{
			return (IEnumerable<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnumerateVariantsForAsset", signature), typeof(IEnumerable<string>));
		}

		public IAssetMetadata TryGetMetadata(System.String signature)
		{
			return (IAssetMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TryGetMetadata", signature), typeof(IAssetMetadata));
		}

		public void WriteRecord(Record record)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteRecord", record);
		}

		public void WriteMetadata(IAssetMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteMetadata", metadata);
		}

		private void WriteMetadata<M>(M metadata, System.String extension) where M : IAssetMetadata
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteMetadata", metadata, extension);
		}

		private void DecodeMetadata<M>(System.String signature, ResoniteBridge.ResoniteBridgeValue entry) where M : IAssetMetadata
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DecodeMetadata", signature, entry);
		}

		public void ExtractAsset(System.String signature, Stream targetStream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractAsset", signature, targetStream);
		}

		public void ExtractVariant(System.String signature, System.String variantIdentifier, Stream targetStream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractVariant", signature, variantIdentifier, targetStream);
		}

		public void WriteAsset(System.String signature, System.String file)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteAsset", signature, file);
		}

		public void WriteAsset(System.String signature, Stream assetData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteAsset", signature, assetData);
		}

		public Stream ReadAsset(System.String signature)
		{
			return (Stream)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReadAsset", signature), typeof(Stream));
		}

		public Stream ReadVariant(System.String signature, System.String variantIdentifier)
		{
			return (Stream)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReadVariant", signature, variantIdentifier), typeof(Stream));
		}

		public void WriteVariant(System.String signature, System.String variantIdentifier, System.String file)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteVariant", signature, variantIdentifier, file);
		}

		public void WriteVariant(System.String signature, System.String variantIdentifier, Stream assetData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteVariant", signature, variantIdentifier, assetData);
		}

		private void Extract(Dictionary<string, ResoniteBridge.ResoniteBridgeValue> entries, System.String identifier, Stream targetStream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Extract", entries, identifier, targetStream);
		}

		private Stream Read(Dictionary<string, ResoniteBridge.ResoniteBridgeValue> entries, System.String identifier)
		{
			return (Stream)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Read", entries, identifier), typeof(Stream));
		}

		private void Write(Dictionary<string, ResoniteBridge.ResoniteBridgeValue> entries, System.String folder, System.String identifier, Stream sourceData)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Write", entries, folder, identifier, sourceData);
		}

		private void Load(Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Load", stream);
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RecordPackage(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RecordPackage()
		{
		}
	}
	public static class PointCloudDecoder
	{
		public static MeshX Decode(System.String file)
		{
			return (MeshX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PointCloudDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "Decode", file), typeof(MeshX));
		}

		public static MeshX DecodeASCII_PTS(System.String file)
		{
			return (MeshX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PointCloudDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "DecodeASCII_PTS", file), typeof(MeshX));
		}

		public static MeshX DecodeLAZ(System.String file)
		{
			return (MeshX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PointCloudDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "DecodeLAZ", file), typeof(MeshX));
		}
	}
	public class ShaderPackage : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue _archive
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_archive"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ZipArchive");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_archive", value);
			}
		}

		private Dictionary<string, ShaderSource> _cachedSources
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_cachedSources"), typeof(Dictionary<string, ShaderSource>)) is Dictionary<string, ShaderSource> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, ShaderSource>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_cachedSources", value);
			}
		}

		public ShaderMetadata Metadata
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Metadata"), typeof(ShaderMetadata)) is ShaderMetadata __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ShaderMetadata");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Metadata", value);
			}
		}

		public static System.String MetadataPath
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderPackage", ResoniteBridge.ResoniteBridgeValueType.Type), "MetadataPath"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public static ShaderPackage CreateFromSource(System.String shaderSourceFile, Stream targetStream, System.String origin)
		{
			return (ShaderPackage)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderPackage", ResoniteBridge.ResoniteBridgeValueType.Type), "CreateFromSource", shaderSourceFile, targetStream, origin), typeof(ShaderPackage));
		}

		public ShaderPackage(System.String file)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderPackage", ResoniteBridge.ResoniteBridgeValueType.Type), file);
		}

		public ShaderPackage(ShaderMetadata metadata, Stream writeStream)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderPackage", ResoniteBridge.ResoniteBridgeValueType.Type), metadata, writeStream);
		}

		public ShaderPackage(Stream stream)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderPackage", ResoniteBridge.ResoniteBridgeValueType.Type), stream);
		}

		private void Decode(Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Decode", stream);
		}

		public void WriteSource(ShaderSource source)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteSource", source);
		}

		public ShaderSource ReadSource(System.String filename)
		{
			return (ShaderSource)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReadSource", filename), typeof(ShaderSource));
		}

		public void WriteVariant(System.String platform, System.UInt32 variant, Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteVariant", platform, variant, stream);
		}

		public byte[] ReadVariant(System.String platform, System.UInt32 variant)
		{
			return (byte[])ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReadVariant", platform, variant), typeof(byte[]));
		}

		public static System.String VariantPath(System.String platform, System.UInt32 variant)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderPackage", ResoniteBridge.ResoniteBridgeValueType.Type), "VariantPath", platform, variant), typeof(System.String));
		}

		public static System.String SourcePath(System.String sourceSubpath)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderPackage", ResoniteBridge.ResoniteBridgeValueType.Type), "SourcePath", sourceSubpath), typeof(System.String));
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ShaderPackage(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ShaderPackage()
		{
		}
	}
	public class ShaderSource : ResoniteBridge.ResoniteBridgeValueHolder
	{
		private static HashSet<string> IgnoredIncludes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSource", ResoniteBridge.ResoniteBridgeValueType.Type), "IgnoredIncludes"), typeof(HashSet<string>)) is HashSet<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to HashSet<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSource", ResoniteBridge.ResoniteBridgeValueType.Type), "IgnoredIncludes", value);
			}
		}

		public System.String File
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "File"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "File", value);
			}
		}

		public string[] Lines
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Lines"), typeof(string[])) is string[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Lines", value);
			}
		}

		public System.Boolean IsInclude
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsInclude"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "IsInclude", value);
			}
		}

		public System.String ShaderName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ShaderName"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ShaderName", value);
			}
		}

		public System.Int32 ShaderNameLine
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ShaderNameLine"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ShaderNameLine", value);
			}
		}

		public System.Int32 ShaderNameStartIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ShaderNameStartIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ShaderNameStartIndex", value);
			}
		}

		public System.Int32 ShaderNameEndIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ShaderNameEndIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ShaderNameEndIndex", value);
			}
		}

		public System.Int32 PropertiesStartLine
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PropertiesStartLine"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "PropertiesStartLine", value);
			}
		}

		public System.Int32 PropertiesStartIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PropertiesStartIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "PropertiesStartIndex", value);
			}
		}

		public System.Int32 PropertiesEndLine
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PropertiesEndLine"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "PropertiesEndLine", value);
			}
		}

		public System.Int32 PropertiesEndIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PropertiesEndIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "PropertiesEndIndex", value);
			}
		}

		public List<int> IncludeLines
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IncludeLines"), typeof(List<int>)) is List<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "IncludeLines", value);
			}
		}

		public List<int> MultiCompileLines
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MultiCompileLines"), typeof(List<int>)) is List<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MultiCompileLines", value);
			}
		}

		public List<int> OnlyRenderersLines
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OnlyRenderersLines"), typeof(List<int>)) is List<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "OnlyRenderersLines", value);
			}
		}

		public List<int> FallbackLines
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FallbackLines"), typeof(List<int>)) is List<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "FallbackLines", value);
			}
		}

		public List<string> Includes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Includes"), typeof(List<string>)) is List<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Includes", value);
			}
		}

		public List<List<string>> Variants
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Variants"), typeof(List<List<string>>)) is List<List<string>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<List<string>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Variants", value);
			}
		}

		public static List<ShaderSource> CollectSources(System.String file)
		{
			return (List<ShaderSource>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSource", ResoniteBridge.ResoniteBridgeValueType.Type), "CollectSources", file), typeof(List<ShaderSource>));
		}

		private static void ProcessIncludes(ShaderSource source, Dictionary<string, ShaderSource> dependencies)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSource", ResoniteBridge.ResoniteBridgeValueType.Type), "ProcessIncludes", source, dependencies);
		}

		public ShaderSource(System.String filename, System.Boolean isInclude)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSource", ResoniteBridge.ResoniteBridgeValueType.Type), filename, isInclude);
		}

		public ShaderSource(System.String filename, string[] lines, System.Boolean isInclude)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSource", ResoniteBridge.ResoniteBridgeValueType.Type), filename, lines, isInclude);
		}

		public System.String GetSource()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSource"), typeof(System.String));
		}

		public System.String GetVariantSource(List<string> keywords, System.UInt32 variantIndex, System.String renderers)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetVariantSource", keywords, variantIndex, renderers), typeof(System.String));
		}

		private static void InjectDefine(StringBuilder str, System.String keyword)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSource", ResoniteBridge.ResoniteBridgeValueType.Type), "InjectDefine", str, keyword);
		}

		public System.String ComputeSourceHash()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeSourceHash"), typeof(System.String));
		}

		internal void ResolveIncludes()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ResolveIncludes");
		}

		internal void FlattenPath(Dictionary<string, string> nameMapping)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FlattenPath", nameMapping);
		}

		internal void UpdateIncludes(Dictionary<string, string> nameMapping)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateIncludes", nameMapping);
		}

		private static System.String ProcessVariant(System.String variant)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSource", ResoniteBridge.ResoniteBridgeValueType.Type), "ProcessVariant", variant), typeof(System.String));
		}

		private static System.String GetRawLine(System.String line, ref System.Boolean insideComment)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSource", ResoniteBridge.ResoniteBridgeValueType.Type), "GetRawLine", line, insideComment), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ShaderSource(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ShaderSource()
		{
		}
	}
	[DataModelType]
	public enum GlyphRenderMethod
	{
		Raster,
		MSDF
	}
	public class FontX : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue glyphMetrics
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "glyphMetrics"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ConcurrentDictionary<uint, GlyphMetrics>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "glyphMetrics", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue glyphOutlines
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "glyphOutlines"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ConcurrentDictionary<uint, GlyphOutline>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "glyphOutlines", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue charMapping
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "charMapping"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ConcurrentDictionary<uint, GlyphMetrics>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "charMapping", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue kerningCache
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "kerningCache"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ConcurrentDictionary<uint, ConcurrentDictionary<uint, float2>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "kerningCache", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue namedGlyphs
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "namedGlyphs"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ConcurrentDictionary<string, uint>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "namedGlyphs", value);
			}
		}

		private List<GlyphAtlas> atlases
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "atlases"), typeof(List<GlyphAtlas>)) is List<GlyphAtlas> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<GlyphAtlas>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "atlases", value);
			}
		}

		private IFontDataSource fontDataSource
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "fontDataSource"), typeof(IFontDataSource)) is IFontDataSource __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IFontDataSource");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "fontDataSource", value);
			}
		}

		public System.String Name
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Name"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Name", value);
			}
		}

		public System.Single LineHeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LineHeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "LineHeight", value);
			}
		}

		public System.Int32 GlyphCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "GlyphCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "GlyphCount", value);
			}
		}

		public System.Int32 NamedGlyphCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "NamedGlyphCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public FontX(IFontDataSource dataSource)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FontX", ResoniteBridge.ResoniteBridgeValueType.Type), dataSource);
		}

		public int2 GetDefaultGlyphResolution(System.UInt32 glyphId)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDefaultGlyphResolution", glyphId), typeof(int2));
		}

		public GlyphMetrics GetGlyphMetrics(System.UInt32 glyphId)
		{
			return (GlyphMetrics)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetGlyphMetrics", glyphId), typeof(GlyphMetrics));
		}

		public System.Boolean GetGlyphTintable(System.UInt32 glyphId)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetGlyphTintable", glyphId), typeof(System.Boolean));
		}

		public GlyphMetrics GetCharMetrics(System.Char ch)
		{
			return (GlyphMetrics)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCharMetrics", ch), typeof(GlyphMetrics));
		}

		public GlyphMetrics GetCharMetrics(System.UInt32 charcode)
		{
			return (GlyphMetrics)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCharMetrics", charcode), typeof(GlyphMetrics));
		}

		public System.UInt32 GetGlyphIdFromName(System.String glyphName)
		{
			return (System.UInt32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetGlyphIdFromName", glyphName), typeof(System.UInt32));
		}

		public void ClearCachedCharMapping(System.UInt32 charcode)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ClearCachedCharMapping", charcode);
		}

		public float2 GetKerning(System.UInt32 leftGlyphId, System.UInt32 rightGlyphId)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetKerning", leftGlyphId, rightGlyphId), typeof(float2));
		}

		public System.UInt32 CharToGlyphId(System.Char ch)
		{
			return (System.UInt32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CharToGlyphId", ch), typeof(System.UInt32));
		}

		public GlyphOutline GetOutline(System.UInt32 glyphId)
		{
			return (GlyphOutline)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetOutline", glyphId), typeof(GlyphOutline));
		}

		public void AssignGlyphName(System.String name, System.UInt32 glyphId, System.Boolean replaceExisting)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AssignGlyphName", name, glyphId, replaceExisting);
		}

		public void RemoveGlyphName(System.String name, System.UInt32 glyphId)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveGlyphName", name, glyphId);
		}

		public static FontX Load(System.String file, System.String extension = null)
		{
			return (FontX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FontX", ResoniteBridge.ResoniteBridgeValueType.Type), "Load", file, extension), typeof(FontX));
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public unsafe System.Boolean RenderGlyphMSDF(System.UInt32 glyphId, Bitmap2D bitmap, Rect region, System.Int32 pixelRange, System.Boolean rotated)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RenderGlyphMSDF", glyphId, bitmap, region, pixelRange, rotated), typeof(System.Boolean));
		}

		public System.Boolean RenderGlyphRaster(System.UInt32 glyphId, Bitmap2D bitmap, Rect region, System.Boolean rotated)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RenderGlyphRaster", glyphId, bitmap, region, rotated), typeof(System.Boolean));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FontX(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FontX()
		{
		}
	}
	public struct GlyphPackData : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt32 glyphId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "glyphId"), typeof(System.UInt32)) is System.UInt32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to uint");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "glyphId", value);
			}
		}

		public float2 size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "size"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "size", value);
			}
		}

		public System.Single area
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "area"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "area", value);
			}
		}

		public System.Single longerSide
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "longerSide"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "longerSide", value);
			}
		}

		public GlyphPackData(System.UInt32 glyphId, in float2 size)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphPackData", ResoniteBridge.ResoniteBridgeValueType.Type), glyphId, size);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlyphPackData(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlyphPackData()
		{
		}
	}
	public class GlyphAtlas : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 DEFAULT_PACK_REGION_SIZE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DEFAULT_PACK_REGION_SIZE"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DEFAULT_PACK_REGION_SIZE", value);
			}
		}

		public System.Int32 DEFAULT_MAX_ATLAS_SIZE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "DEFAULT_MAX_ATLAS_SIZE"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "DEFAULT_MAX_ATLAS_SIZE", value);
			}
		}

		public FontX Font
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Font"), typeof(FontX)) is FontX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to FontX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Font", value);
			}
		}

		public System.Int32 PixelRange
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PixelRange"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PixelRange", value);
			}
		}

		public System.Int32 Padding
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Padding"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Padding", value);
			}
		}

		public System.Int32 PackRegionSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "PackRegionSize"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "PackRegionSize", value);
			}
		}

		public GlyphRenderMethod RenderMethod
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RenderMethod"), typeof(GlyphRenderMethod)) is GlyphRenderMethod __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphRenderMethod");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RenderMethod", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue _glyphs
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_glyphs"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ConcurrentDictionary<uint, GlyphAtlasData>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_glyphs", value);
			}
		}

		private RectPackNode _rootPackNode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_rootPackNode"), typeof(RectPackNode)) is RectPackNode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to RectPackNode");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_rootPackNode", value);
			}
		}

		private System.Int32 _maxAtlasSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_maxAtlasSize"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_maxAtlasSize", value);
			}
		}

		public System.Boolean BitmapAllocated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitmapAllocated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Boolean AllowsPacking
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AllowsPacking"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public int2 CurrentPackSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CurrentPackSize"), typeof(int2)) is int2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int2");
				}
			}
		}

		public Bitmap2D Atlas
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Atlas"), typeof(Bitmap2D)) is Bitmap2D __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Bitmap2D");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Atlas", value);
			}
		}

		public GlyphAtlas(FontX font, GlyphRenderMethod renderMethod, System.Int32 padding = 1, System.Int32 pixelRange = 2, System.Int32 packRegionSize = 512, System.Int32 maxAtlasSize = 8192)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphAtlas", ResoniteBridge.ResoniteBridgeValueType.Type), font, renderMethod, padding, pixelRange, packRegionSize, maxAtlasSize);
		}

		public GlyphAtlasData GetGlyphData(System.UInt32 glyphId)
		{
			return (GlyphAtlasData)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetGlyphData", glyphId), typeof(GlyphAtlasData));
		}

		public System.Boolean HasGlyphData(System.UInt32 glyphId)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HasGlyphData", glyphId), typeof(System.Boolean));
		}

		public System.Int32 Pack(List<GlyphPackData> glyphs, System.Int32 offset = 0, System.Boolean allowPartialPack = false)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Pack", glyphs, offset, allowPartialPack), typeof(System.Int32));
		}

		public System.Boolean Pack(in GlyphPackData glyph)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Pack", glyph), typeof(System.Boolean));
		}

		public void AllocateBitmap(System.Boolean mipmaps)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AllocateBitmap", mipmaps);
		}

		private void GrowAtlas()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GrowAtlas");
		}

		public void FinishPacking()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FinishPacking");
		}

		public void CopyGlyphBitmapFrom(System.UInt32 glyphId, GlyphAtlas sourceAtlas)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyGlyphBitmapFrom", glyphId, sourceAtlas);
		}

		public void CopyGlyphBitmapFrom(GlyphAtlasData targetGlyph, GlyphAtlas sourceAtlas)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyGlyphBitmapFrom", targetGlyph, sourceAtlas);
		}

		public void CopyGlyphBitmapFrom(GlyphAtlasData targetGlyph, GlyphAtlas sourceAtlas, GlyphAtlasData sourceGlyph)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyGlyphBitmapFrom", targetGlyph, sourceAtlas, sourceGlyph);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlyphAtlas(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlyphAtlas()
		{
		}
	}
	public class GlyphAtlasData : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt32 glyphId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "glyphId"), typeof(System.UInt32)) is System.UInt32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to uint");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "glyphId", value);
			}
		}

		public Rect region
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "region"), typeof(Rect)) is Rect __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Rect");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "region", value);
			}
		}

		public System.Boolean rotated
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "rotated"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "rotated", value);
			}
		}

		public float2 offset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "offset"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "offset", value);
			}
		}

		public Rect uv
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "uv"), typeof(Rect)) is Rect __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Rect");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "uv", value);
			}
		}

		public float2 rangeExtendRatio
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "rangeExtendRatio"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "rangeExtendRatio", value);
			}
		}

		public GlyphAtlasData(System.UInt32 glyphId, Rect region, System.Boolean rotated)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphAtlasData", ResoniteBridge.ResoniteBridgeValueType.Type), glyphId, region, rotated);
		}

		public void CalculateRenderParameters(GlyphAtlas atlas)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CalculateRenderParameters", atlas);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlyphAtlasData(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlyphAtlasData()
		{
		}
	}
	public class GlyphMetrics : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt32 glyphId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "glyphId"), typeof(System.UInt32)) is System.UInt32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to uint");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "glyphId", value);
			}
		}

		public System.Single width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "width"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "width", value);
			}
		}

		public System.Single height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "height"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "height", value);
			}
		}

		public System.Single horizontalAdvance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "horizontalAdvance"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "horizontalAdvance", value);
			}
		}

		public System.Single horizontalBearingX
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "horizontalBearingX"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "horizontalBearingX", value);
			}
		}

		public System.Single horizontalBearingY
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "horizontalBearingY"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "horizontalBearingY", value);
			}
		}

		public System.Single verticalAdvance
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "verticalAdvance"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "verticalAdvance", value);
			}
		}

		public System.Single verticalBearingX
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "verticalBearingX"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "verticalBearingX", value);
			}
		}

		public System.Single verticalBearingY
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "verticalBearingY"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "verticalBearingY", value);
			}
		}

		public GlyphMetrics(System.UInt32 glyphId, System.Single width, System.Single height, System.Single horizontalAdvance, System.Single horizontalBearingX, System.Single horizontalBearingY, System.Single verticalAdvance, System.Single verticalBearingX, System.Single verticalBearingY)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphMetrics", ResoniteBridge.ResoniteBridgeValueType.Type), glyphId, width, height, horizontalAdvance, horizontalBearingX, horizontalBearingY, verticalAdvance, verticalBearingX, verticalBearingY);
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlyphMetrics(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlyphMetrics()
		{
		}
	}
	public class GlyphContour : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public float2 origin
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "origin"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "origin", value);
			}
		}

		public List<GlyphSegment> segments
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "segments"), typeof(List<GlyphSegment>)) is List<GlyphSegment> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<GlyphSegment>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "segments", value);
			}
		}

		public System.Int32 SegmentCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SegmentCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public GlyphContour(in float2 origin)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphContour", ResoniteBridge.ResoniteBridgeValueType.Type), origin);
		}

		public float2 GetOriginPoint(System.Int32 segmentIndex)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetOriginPoint", segmentIndex), typeof(float2));
		}

		public void AddLine(in float2 point)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddLine", point);
		}

		public void AddConic(in float2 point, in float2 controlPoint)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddConic", point, controlPoint);
		}

		public void AddCubic(in float2 point, in float2 controlPoint0, in float2 controlPoint1)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddCubic", point, controlPoint0, controlPoint1);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlyphContour(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlyphContour()
		{
		}
	}
	public enum GlyphSegmentType
	{
		Line,
		Conic,
		Cubic
	}
	public struct GlyphSegment : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlyphSegmentType type
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "type"), typeof(GlyphSegmentType)) is GlyphSegmentType __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphSegmentType");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "type", value);
			}
		}

		public float2 point
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "point"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "point", value);
			}
		}

		public float2 controlPoint0
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "controlPoint0"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "controlPoint0", value);
			}
		}

		public float2 controlPoint1
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "controlPoint1"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "controlPoint1", value);
			}
		}

		private GlyphSegment(GlyphSegmentType type, in float2 point, in float2 controlPoint0, in float2 controlPoint1)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphSegment", ResoniteBridge.ResoniteBridgeValueType.Type), type, point, controlPoint0, controlPoint1);
		}

		public static GlyphSegment Line(in float2 point)
		{
			return (GlyphSegment)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphSegment", ResoniteBridge.ResoniteBridgeValueType.Type), "Line", point), typeof(GlyphSegment));
		}

		public static GlyphSegment Conic(in float2 point, in float2 controlPoint)
		{
			return (GlyphSegment)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphSegment", ResoniteBridge.ResoniteBridgeValueType.Type), "Conic", point, controlPoint), typeof(GlyphSegment));
		}

		public static GlyphSegment Cubic(in float2 point, in float2 controlPoint0, in float2 controlPoint1)
		{
			return (GlyphSegment)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphSegment", ResoniteBridge.ResoniteBridgeValueType.Type), "Cubic", point, controlPoint0, controlPoint1), typeof(GlyphSegment));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlyphSegment(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlyphSegment()
		{
		}
	}
	public class GlyphOutline : IEnumerable<GlyphContour>, IEnumerable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private List<GlyphContour> _contours
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_contours"), typeof(List<GlyphContour>)) is List<GlyphContour> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<GlyphContour>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_contours", value);
			}
		}

		public System.Int32 ContourCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ContourCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public GlyphContour LastContour
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LastContour"), typeof(GlyphContour)) is GlyphContour __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphContour");
				}
			}
		}

		public GlyphContour this[System.Int32 index] => _contours[index];

		public GlyphContour AddContour(in float2 origin)
		{
			return (GlyphContour)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddContour", origin), typeof(GlyphContour));
		}

		public void AddContour(GlyphContour contour)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddContour", contour);
		}

		public void RemoveContourAt(System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveContourAt", index);
		}

		public List<GlyphContour>.Enumerator GetEnumerator()
		{
			return (List<GlyphContour>.Enumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetEnumerator"), typeof(List<GlyphContour>.Enumerator));
		}

		IEnumerator<GlyphContour> IEnumerable<GlyphContour>.GetEnumerator()
		{
			return (IEnumerator<GlyphContour>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable<GlyphContour>.GetEnumerator"), typeof(IEnumerator<GlyphContour>));
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return (IEnumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable.GetEnumerator"), typeof(IEnumerator));
		}

		public void FixArtifacts()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FixArtifacts");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public GlyphOutline(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public GlyphOutline()
		{
		}
	}
	public class DynamicBitmapFileFont : IFontDataSource, IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public class SpriteGlyph : ResoniteBridge.ResoniteBridgeValueHolder
		{
			public System.String file
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "file"), typeof(System.String)) is System.String __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to string");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "file", value);
				}
			}

			public GlyphMetrics metrics
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "metrics"), typeof(GlyphMetrics)) is GlyphMetrics __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to GlyphMetrics");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "metrics", value);
				}
			}

			public System.Boolean tintable
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "tintable"), typeof(System.Boolean)) is System.Boolean __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to bool");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "tintable", value);
				}
			}

			private int2 _cachedSize
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_cachedSize"), typeof(int2)) is int2 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to int2");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_cachedSize", value);
				}
			}

			public Bitmap2D LoadedBitmap
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LoadedBitmap"), typeof(Bitmap2D)) is Bitmap2D __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to Bitmap2D");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "LoadedBitmap", value);
				}
			}

			public int2 SpriteResolution
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SpriteResolution"), typeof(int2)) is int2 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to int2");
					}
				}
			}

			public SpriteGlyph(System.String file, GlyphMetrics metrics, System.Boolean tintable, Bitmap2D loadedBitmap = null)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SpriteGlyph", ResoniteBridge.ResoniteBridgeValueType.Type), file, metrics, tintable, loadedBitmap);
			}

			public void EnsureLoadedBitmap()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureLoadedBitmap");
			}

			public void FreeBitmap()
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FreeBitmap");
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public SpriteGlyph(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public SpriteGlyph()
			{
			}
		}

		private System.Object _lock
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lock"), typeof(System.Object)) is System.Object __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to object");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lock", value);
			}
		}

		private Dictionary<uint, SpriteGlyph> _glyphs
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_glyphs"), typeof(Dictionary<uint, SpriteGlyph>)) is Dictionary<uint, SpriteGlyph> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<uint, SpriteGlyph>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_glyphs", value);
			}
		}

		private BiDictionary<uint, uint> _charToGlyphId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_charToGlyphId"), typeof(BiDictionary<uint, uint>)) is BiDictionary<uint, uint> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to BiDictionary<uint, uint>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_charToGlyphId", value);
			}
		}

		public System.String FontName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FontName"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "FontName", value);
			}
		}

		public System.Int32 GlyphCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "GlyphCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Single LineHeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LineHeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public System.UInt32 CharToGlyphId(System.UInt32 charcode)
		{
			return (System.UInt32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CharToGlyphId", charcode), typeof(System.UInt32));
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		public System.Boolean GetGlyphTintable(System.UInt32 glyphId)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetGlyphTintable", glyphId), typeof(System.Boolean));
		}

		public GlyphMetrics ExtractGlyphMetrics(System.UInt32 glyphId)
		{
			return (GlyphMetrics)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractGlyphMetrics", glyphId), typeof(GlyphMetrics));
		}

		public int2 GetDefaultGlyphResolution(System.UInt32 glyphId)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDefaultGlyphResolution", glyphId), typeof(int2));
		}

		public GlyphOutline ExtractGlyphOutline(System.UInt32 glyphId)
		{
			return (GlyphOutline)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractGlyphOutline", glyphId), typeof(GlyphOutline));
		}

		public void RenderRawGlyphBitmap(System.UInt32 glyphId, Bitmap2D target, IntRect rect, System.Boolean rotated)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RenderRawGlyphBitmap", glyphId, target, rect, rotated);
		}

		public System.Boolean SupportsRenderMethod(GlyphRenderMethod method)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SupportsRenderMethod", method), typeof(System.Boolean));
		}

		public float2 ExtractKerning(System.UInt32 leftGlyphId, System.UInt32 rightGlyphId)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractKerning", leftGlyphId, rightGlyphId), typeof(float2));
		}

		public System.Boolean LoadFrom(System.String file)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LoadFrom", file), typeof(System.Boolean));
		}

		public void AddSpriteGlyph(System.UInt32 glyphId, System.UInt32 unicodeCodepoint, SpriteGlyph spriteGlyph)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddSpriteGlyph", glyphId, unicodeCodepoint, spriteGlyph);
		}

		public void RemoveSpriteGlyph(System.UInt32 glyphId)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveSpriteGlyph", glyphId);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DynamicBitmapFileFont(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DynamicBitmapFileFont()
		{
		}
	}
	public class FreeTypeFont : IFontDataSource, IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private static ResoniteBridge.ResoniteBridgeValue SharpFontLibrary
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "SharpFontLibrary"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Library");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "SharpFontLibrary", value);
			}
		}

		public static System.Boolean UseStaticCallbacks
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "UseStaticCallbacks"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "UseStaticCallbacks", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue face
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "face"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to SharpFont.Face");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "face", value);
			}
		}

		private System.Single conversionRatio
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "conversionRatio"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "conversionRatio", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue outlineFuncs
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "outlineFuncs"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to OutlineFuncs");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "outlineFuncs", value);
			}
		}

		private GlyphOutline currentOutline
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "currentOutline"), typeof(GlyphOutline)) is GlyphOutline __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphOutline");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "currentOutline", value);
			}
		}

		private static ResoniteBridge.ResoniteBridgeValue staticOutlineFuncs
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "staticOutlineFuncs"), typeof(ResoniteBridge.ResoniteBridgeValue)) is ResoniteBridge.ResoniteBridgeValue __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to OutlineFuncs");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "staticOutlineFuncs", value);
			}
		}

		private static System.Single staticConversionRatio
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "staticConversionRatio"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "staticConversionRatio", value);
			}
		}

		private static GlyphOutline staticCurrentOutline
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "staticCurrentOutline"), typeof(GlyphOutline)) is GlyphOutline __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphOutline");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "staticCurrentOutline", value);
			}
		}

		public static System.String FreeTypeVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "FreeTypeVersion"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public System.String FontName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FontName"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "FontName", value);
			}
		}

		public System.Int32 GlyphCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "GlyphCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "GlyphCount", value);
			}
		}

		public System.Single LineHeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LineHeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "LineHeight", value);
			}
		}

		public FreeTypeFont(System.String file)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), file);
		}

		public void Dispose()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Dispose");
		}

		public int2 GetDefaultGlyphResolution(System.UInt32 glyphId)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetDefaultGlyphResolution", glyphId), typeof(int2));
		}

		public System.UInt32 CharToGlyphId(System.UInt32 charcode)
		{
			return (System.UInt32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CharToGlyphId", charcode), typeof(System.UInt32));
		}

		public System.Boolean GetGlyphTintable(System.UInt32 glyphId)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetGlyphTintable", glyphId), typeof(System.Boolean));
		}

		public float2 ExtractKerning(System.UInt32 leftGlyphId, System.UInt32 rightGlyphId)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractKerning", leftGlyphId, rightGlyphId), typeof(float2));
		}

		public GlyphMetrics ExtractGlyphMetrics(System.UInt32 glyphId)
		{
			return (GlyphMetrics)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractGlyphMetrics", glyphId), typeof(GlyphMetrics));
		}

		public GlyphOutline ExtractGlyphOutline(System.UInt32 glyphId)
		{
			return (GlyphOutline)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractGlyphOutline", glyphId), typeof(GlyphOutline));
		}

		public System.Boolean SupportsRenderMethod(GlyphRenderMethod method)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SupportsRenderMethod", method), typeof(System.Boolean));
		}

		public void RenderRawGlyphBitmap(System.UInt32 glyphId, Bitmap2D target, IntRect rect, System.Boolean rotated)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RenderRawGlyphBitmap", glyphId, target, rect, rotated);
		}

		private System.Int32 MoveTo(ref ResoniteBridge.ResoniteBridgeValue point, IntPtr userData)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MoveTo", point, userData), typeof(System.Int32));
		}

		private System.Int32 LineTo(ref ResoniteBridge.ResoniteBridgeValue point, IntPtr userData)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LineTo", point, userData), typeof(System.Int32));
		}

		private System.Int32 ConicTo(ref ResoniteBridge.ResoniteBridgeValue controlPoint, ref ResoniteBridge.ResoniteBridgeValue point, IntPtr userData)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ConicTo", controlPoint, point, userData), typeof(System.Int32));
		}

		private System.Int32 CubicTo(ref ResoniteBridge.ResoniteBridgeValue controlPoint0, ref ResoniteBridge.ResoniteBridgeValue controlPoint1, ref ResoniteBridge.ResoniteBridgeValue point, IntPtr userData)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CubicTo", controlPoint0, controlPoint1, point, userData), typeof(System.Int32));
		}

		private float2 ToEngine(ref ResoniteBridge.ResoniteBridgeValue vector)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToEngine", vector), typeof(float2));
		}

		[Elements.Core.MonoPInvokeCallback(typeof(ResoniteBridge.ResoniteBridgeValue))]
		private static System.Int32 MoveToStatic(ref ResoniteBridge.ResoniteBridgeValue point, IntPtr userData)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "MoveToStatic", point, userData), typeof(System.Int32));
		}

		[Elements.Core.MonoPInvokeCallback(typeof(ResoniteBridge.ResoniteBridgeValue))]
		private static System.Int32 LineToStatic(ref ResoniteBridge.ResoniteBridgeValue point, IntPtr userData)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "LineToStatic", point, userData), typeof(System.Int32));
		}

		[Elements.Core.MonoPInvokeCallback(typeof(ResoniteBridge.ResoniteBridgeValue))]
		private static System.Int32 ConicToStatic(ref ResoniteBridge.ResoniteBridgeValue controlPoint, ref ResoniteBridge.ResoniteBridgeValue point, IntPtr userData)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "ConicToStatic", controlPoint, point, userData), typeof(System.Int32));
		}

		[Elements.Core.MonoPInvokeCallback(typeof(ResoniteBridge.ResoniteBridgeValue))]
		private static System.Int32 CubicToStatic(ref ResoniteBridge.ResoniteBridgeValue controlPoint0, ref ResoniteBridge.ResoniteBridgeValue controlPoint1, ref ResoniteBridge.ResoniteBridgeValue point, IntPtr userData)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "CubicToStatic", controlPoint0, controlPoint1, point, userData), typeof(System.Int32));
		}

		private static float2 ToEngineStatic(ref ResoniteBridge.ResoniteBridgeValue vector)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FreeTypeFont", ResoniteBridge.ResoniteBridgeValueType.Type), "ToEngineStatic", vector), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FreeTypeFont(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FreeTypeFont()
		{
		}
	}
	public interface IFontDataSource : IDisposable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.String FontName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FontName"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		System.Int32 GlyphCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "GlyphCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		System.Single LineHeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LineHeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		System.UInt32 CharToGlyphId(System.UInt32 charcode);

		System.Boolean GetGlyphTintable(System.UInt32 glyphId);

		int2 GetDefaultGlyphResolution(System.UInt32 glyphId);

		float2 ExtractKerning(System.UInt32 leftGlyphId, System.UInt32 rightGlyphId);

		GlyphMetrics ExtractGlyphMetrics(System.UInt32 glyphId);

		GlyphOutline ExtractGlyphOutline(System.UInt32 glyphId);

		void RenderRawGlyphBitmap(System.UInt32 glyphId, Bitmap2D target, IntRect rect, System.Boolean rotated);

		System.Boolean SupportsRenderMethod(GlyphRenderMethod method);
	}
	internal interface ICharacterFilter : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.Char FilterCharacter(System.Char ch, System.Int32 index);
	}
	internal interface ISizeFilter : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.Single FilterSize(System.Single size, System.Int32 index);
	}
	public class CharSubstitutionNode : StringContainerNode, ICharacterFilter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Char Character
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Character"), typeof(System.Char)) is System.Char __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to char");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Character", value);
			}
		}

		public CharSubstitutionNode(System.Char character, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CharSubstitutionNode", ResoniteBridge.ResoniteBridgeValueType.Type), character, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public System.Char FilterCharacter(System.Char ch, System.Int32 index)
		{
			return (System.Char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FilterCharacter", ch, index), typeof(System.Char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CharSubstitutionNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CharSubstitutionNode()
		{
		}
	}
	[DataModelType]
	public enum TextHorizontalAlignment
	{
		Left,
		Center,
		Right,
		Justify
	}
	[DataModelType]
	public enum TextVerticalAlignment
	{
		Top,
		Middle,
		Bottom
	}
	public class StringAlignmentNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public TextHorizontalAlignment Alignment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Alignment"), typeof(TextHorizontalAlignment)) is TextHorizontalAlignment __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TextHorizontalAlignment");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Alignment", value);
			}
		}

		public StringAlignmentNode(TextHorizontalAlignment alignment, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringAlignmentNode", ResoniteBridge.ResoniteBridgeValueType.Type), alignment, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public static StringAlignmentNode Parse(ResoniteBridge.ResoniteBridgeValue parameter, System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringAlignmentNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringAlignmentNode", ResoniteBridge.ResoniteBridgeValueType.Type), "Parse", parameter, startIndex, parent), typeof(StringAlignmentNode));
		}

		private static System.Boolean IsParameter(ResoniteBridge.ResoniteBridgeValue parameter, System.String name)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringAlignmentNode", ResoniteBridge.ResoniteBridgeValueType.Type), "IsParameter", parameter, name), typeof(System.Boolean));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringAlignmentNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringAlignmentNode()
		{
		}
	}
	public static class StringAlignmentExtensions
	{
	}
	public enum CapitalizationMode
	{
		Lowercase,
		Uppercase,
		SmallCaps
	}
	public class StringCapitalizationNode : StringContainerNode, ICharacterFilter, ISizeFilter, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public CapitalizationMode Mode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Mode"), typeof(CapitalizationMode)) is CapitalizationMode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to CapitalizationMode");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Mode", value);
			}
		}

		public StringCapitalizationNode(CapitalizationMode mode, System.Int32 startIndex, StringContainerNode node)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringCapitalizationNode", ResoniteBridge.ResoniteBridgeValueType.Type), mode, startIndex, node);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public System.Char FilterCharacter(System.Char ch, System.Int32 index)
		{
			return (System.Char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FilterCharacter", ch, index), typeof(System.Char));
		}

		public System.Single FilterSize(System.Single size, System.Int32 index)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FilterSize", size, index), typeof(System.Single));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringCapitalizationNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringCapitalizationNode()
		{
		}
	}
	public class StringCloseallBlockNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public StringCloseallBlockNode(System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringCloseallBlockNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringCloseallBlockNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringCloseallBlockNode()
		{
		}
	}
	public class StringColorNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		[Flags]
		public enum MixMode
		{
			Color = 1,
			Alpha = 2
		}

		private static Dictionary<string, colorX> colors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringColorNode", ResoniteBridge.ResoniteBridgeValueType.Type), "colors"), typeof(Dictionary<string, colorX>)) is Dictionary<string, colorX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, colorX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringColorNode", ResoniteBridge.ResoniteBridgeValueType.Type), "colors", value);
			}
		}

		public colorX Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public MixMode Mode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Mode"), typeof(MixMode)) is MixMode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MixMode");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Mode", value);
			}
		}

		public static void RegisterColorConstant(System.String name, colorX color)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringColorNode", ResoniteBridge.ResoniteBridgeValueType.Type), "RegisterColorConstant", name, color);
		}

		public StringColorNode(colorX color, MixMode mode, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringColorNode", ResoniteBridge.ResoniteBridgeValueType.Type), color, mode, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public static StringColorNode Parse(ResoniteBridge.ResoniteBridgeValue parameter, System.Boolean alphaOnly, System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringColorNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringColorNode", ResoniteBridge.ResoniteBridgeValueType.Type), "Parse", parameter, alphaOnly, startIndex, parent), typeof(StringColorNode));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringColorNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringColorNode()
		{
		}
	}
	public static class StringColorExtensions
	{
		public static colorX GetFontColor(this StringNode node)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringColorExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetFontColor", node), typeof(colorX));
		}
	}
	public class StringFontNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public FontSet FontSet
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FontSet"), typeof(FontSet)) is FontSet __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to FontSet");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "FontSet", value);
			}
		}

		public System.String FontName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FontName"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "FontName", value);
			}
		}

		public System.Int32 FontIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FontIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "FontIndex", value);
			}
		}

		public StringFontNode(System.String fontName, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringFontNode", ResoniteBridge.ResoniteBridgeValueType.Type), fontName, startIndex, parent);
		}

		public StringFontNode(System.Int32 fontIndex, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringFontNode", ResoniteBridge.ResoniteBridgeValueType.Type), fontIndex, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public void ResolveFont()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ResolveFont");
		}

		public static StringFontNode Parse(ResoniteBridge.ResoniteBridgeValue parameter, System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringFontNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringFontNode", ResoniteBridge.ResoniteBridgeValueType.Type), "Parse", parameter, startIndex, parent), typeof(StringFontNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringFontNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringFontNode()
		{
		}
	}
	public static class StringFontExtensions
	{
		public static FontSet GetFontSet(this StringNode node, System.Boolean spriteFontSet = false)
		{
			return (FontSet)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringFontExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetFontSet", node, spriteFontSet), typeof(FontSet));
		}
	}
	public struct StringFormatting : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Boolean bold
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "bold"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "bold", value);
			}
		}

		public System.Boolean italics
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "italics"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "italics", value);
			}
		}

		public System.Boolean underline
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "underline"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "underline", value);
			}
		}

		public System.Boolean strikethrough
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "strikethrough"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "strikethrough", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringFormatting(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringFormatting()
		{
		}
	}
	public class StringFormatNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public enum FormatType
		{
			Bold,
			Italics,
			Underline,
			Strikethrough
		}

		public FormatType Type
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Type"), typeof(FormatType)) is FormatType __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to FormatType");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Type", value);
			}
		}

		public StringFormatNode(System.Int32 startIndex, FormatType type, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringFormatNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, type, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringFormatNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringFormatNode()
		{
		}
	}
	public static class StringFormatExtensions
	{
		public static StringFormatting GetFontFormatting(this StringNode node)
		{
			return (StringFormatting)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetFontFormatting", node), typeof(StringFormatting));
		}

		public static void GetFontFormatting(this StringNode node, ref StringFormatting formatting)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetFontFormatting", node, formatting);
		}
	}
	public class StringGlyphNode : StringRenderGlyphSegmentNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt32 GlyphId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlyphId"), typeof(System.UInt32)) is System.UInt32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to uint");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlyphId", value);
			}
		}

		public System.String GlyphName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlyphName"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlyphName", value);
			}
		}

		public System.Boolean Tint
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Tint"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Tint", value);
			}
		}

		public System.Boolean IsNamedSprite
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsNamedSprite"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "IsNamedSprite", value);
			}
		}

		public override System.Boolean HasCharacters
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasCharacters"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public override System.Char GetCharacter(System.Int32 index)
		{
			return (System.Char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCharacter", index), typeof(System.Char));
		}

		public StringGlyphNode(System.UInt32 glyphId, System.String glyphName, System.Int32 startIndex, bool? tint, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringGlyphNode", ResoniteBridge.ResoniteBridgeValueType.Type), glyphId, glyphName, startIndex, tint, parent);
		}

		public override void GetRawString(StringBuilder str)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawString", str);
		}

		internal override void Shape(System.Boolean kerning, ref uint? lastGlyphId, ref FontX lastFont, ref System.Single lastSize, List<ICharacterFilter> characterFilterCache, List<ISizeFilter> sizeFilterCache)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Shape", kerning, lastGlyphId, lastFont, lastSize, characterFilterCache, sizeFilterCache);
		}

		public static StringGlyphNode Parse(ResoniteBridge.ResoniteBridgeValue parameter, System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringGlyphNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringGlyphNode", ResoniteBridge.ResoniteBridgeValueType.Type), "Parse", parameter, startIndex, parent), typeof(StringGlyphNode));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringGlyphNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringGlyphNode()
		{
		}
	}
	public class StringHorizontalGradientNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private List<color> colors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "colors"), typeof(List<color>)) is List<color> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<color>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "colors", value);
			}
		}

		public color Sample(System.Single normalizedPosition)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Sample", normalizedPosition), typeof(color));
		}

		public StringHorizontalGradientNode(List<color> colors, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringHorizontalGradientNode", ResoniteBridge.ResoniteBridgeValueType.Type), colors, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public static StringHorizontalGradientNode Parse(ResoniteBridge.ResoniteBridgeValue parameters, System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringHorizontalGradientNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringHorizontalGradientNode", ResoniteBridge.ResoniteBridgeValueType.Type), "Parse", parameters, startIndex, parent), typeof(StringHorizontalGradientNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringHorizontalGradientNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringHorizontalGradientNode()
		{
		}
	}
	public class StringLineBreakNode : StringRenderGlyphSegmentNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public override System.Boolean HasCharacters
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasCharacters"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public StringLineBreakNode(System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringLineBreakNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, parent);
		}

		public override System.Char GetCharacter(System.Int32 index)
		{
			return (System.Char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCharacter", index), typeof(System.Char));
		}

		public override void GetRawString(StringBuilder str)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawString", str);
		}

		internal override void Shape(System.Boolean kerning, ref uint? lastGlyphId, ref FontX lastFont, ref System.Single lastSize, List<ICharacterFilter> characterFilterCache, List<ISizeFilter> sizeFilterCache)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Shape", kerning, lastGlyphId, lastFont, lastSize, characterFilterCache, sizeFilterCache);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringLineBreakNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringLineBreakNode()
		{
		}
	}
	public class StringLineHeightNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Single Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Height"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Height", value);
			}
		}

		public StringLineHeightNode(System.Single height, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringLineHeightNode", ResoniteBridge.ResoniteBridgeValueType.Type), height, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public static StringLineHeightNode Parse(ResoniteBridge.ResoniteBridgeValue parameter, System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringLineHeightNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringLineHeightNode", ResoniteBridge.ResoniteBridgeValueType.Type), "Parse", parameter, startIndex, parent), typeof(StringLineHeightNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringLineHeightNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringLineHeightNode()
		{
		}
	}
	public static class StringLineHeightExtensions
	{
		public static System.Single GetLineHeight(this StringNode node)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringLineHeightExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetLineHeight", node), typeof(System.Single));
		}
	}
	public class StringMarkNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public colorX MarkColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MarkColor"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MarkColor", value);
			}
		}

		public StringMarkNode(colorX markColor, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringMarkNode", ResoniteBridge.ResoniteBridgeValueType.Type), markColor, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public static StringMarkNode Parse(ResoniteBridge.ResoniteBridgeValue parameter, System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringMarkNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringMarkNode", ResoniteBridge.ResoniteBridgeValueType.Type), "Parse", parameter, startIndex, parent), typeof(StringMarkNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringMarkNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringMarkNode()
		{
		}
	}
	public static class StringMarkExtensions
	{
		public static colorX? GetMarkColor(this StringNode node)
		{
			return (colorX?)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringMarkExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetMarkColor", node), typeof(colorX));
		}
	}
	public class StringNoLineBreakNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public StringNoLineBreakNode(System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringNoLineBreakNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringNoLineBreakNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringNoLineBreakNode()
		{
		}
	}
	public static class StringNoLineBreakExtensions
	{
		public static System.Boolean DisableLineBreaking(this StringNode node)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringNoLineBreakExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "DisableLineBreaking", node), typeof(System.Boolean));
		}
	}
	public class StringNoParseNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public enum Mode
		{
			OpenClose,
			Length
		}

		public Mode NoParseMode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NoParseMode"), typeof(Mode)) is Mode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Mode");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NoParseMode", value);
			}
		}

		public System.Int32 NoParseLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "NoParseLength"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "NoParseLength", value);
			}
		}

		public override System.Boolean AllowOutOfOrderSplit
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AllowOutOfOrderSplit"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public StringNoParseNode(Mode noParseMode, System.Int32 noParseLength, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringNoParseNode", ResoniteBridge.ResoniteBridgeValueType.Type), noParseMode, noParseLength, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public override System.Boolean IsValidNestedNode(StringContainerNode node)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IsValidNestedNode", node), typeof(System.Boolean));
		}

		public static StringNoParseNode Parse(ResoniteBridge.ResoniteBridgeValue parameter, System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringNoParseNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringNoParseNode", ResoniteBridge.ResoniteBridgeValueType.Type), "Parse", parameter, startIndex, parent), typeof(StringNoParseNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringNoParseNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringNoParseNode()
		{
		}
	}
	public abstract class StringRenderGlyphSegmentNode : StringNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 GlyphSegmentOffset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "GlyphSegmentOffset"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "GlyphSegmentOffset", value);
			}
		}

		public System.Int32 GlyphSegmentLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "GlyphSegmentLength"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "GlyphSegmentLength", value);
			}
		}

		public float2 PenPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PenPosition"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "PenPosition", value);
			}
		}

		public abstract System.Boolean HasCharacters { get; }

		public abstract System.Char GetCharacter(System.Int32 index);

		public StringRenderGlyphSegmentNode(System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderGlyphSegmentNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, parent);
		}

		internal abstract void Shape(System.Boolean kerning, ref uint? lastGlyphId, ref FontX lastFont, ref System.Single lastSize, List<ICharacterFilter> characterFilterCache, List<ISizeFilter> sizeFilterCache);

		protected void AppendGlyph(System.Single glyphSize, System.Int32 stringIndex, in float2 offset, GlyphMetrics metrics, FontX font, uint? lastGlyphId)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AppendGlyph", glyphSize, stringIndex, offset, metrics, font, lastGlyphId);
		}

		internal void ClearRenderGlyphs()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ClearRenderGlyphs");
		}

		public System.Int32 AppendRenderGlyph(ref RenderGlyph glyph)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AppendRenderGlyph", glyph), typeof(System.Int32));
		}

		public RenderGlyph GetRenderGlyph(System.Int32 index)
		{
			return (RenderGlyph)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRenderGlyph", index), typeof(RenderGlyph));
		}

		public System.String GetStringBetween(System.Int32 startGlyph, System.Int32 endGlyph)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetStringBetween", startGlyph, endGlyph), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringRenderGlyphSegmentNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringRenderGlyphSegmentNode()
		{
		}
	}
	public enum TextScriptMode
	{
		Superscript,
		Subscript
	}
	public class StringScriptModeNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public TextScriptMode Mode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Mode"), typeof(TextScriptMode)) is TextScriptMode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TextScriptMode");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Mode", value);
			}
		}

		public StringScriptModeNode(TextScriptMode mode, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringScriptModeNode", ResoniteBridge.ResoniteBridgeValueType.Type), mode, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringScriptModeNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringScriptModeNode()
		{
		}
	}
	public static class StringSubSupScriptExtensions
	{
		public static void AdjustSizeAndBaseline(this StringNode node, ref System.Single size, ref System.Single baseLine)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringSubSupScriptExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "AdjustSizeAndBaseline", node, size, baseLine);
		}
	}
	public class StringSegmentNode : StringRenderGlyphSegmentNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 Length
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Length"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Length", value);
			}
		}

		public override System.Boolean HasCharacters
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasCharacters"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public char this[System.Int32 index]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(System.Char)) is System.Char __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to char");
				}
			}
		}

		public override System.Char GetCharacter(System.Int32 index)
		{
			return (System.Char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetCharacter", index), typeof(System.Char));
		}

		public StringSegmentNode(System.Int32 startIndex, System.Int32 length, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringSegmentNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, length, parent);
		}

		internal override void Shape(System.Boolean kerning, ref uint? lastGlyphId, ref FontX lastFont, ref System.Single lastSize, List<ICharacterFilter> characterFilterCache, List<ISizeFilter> sizeFilterCache)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Shape", kerning, lastGlyphId, lastFont, lastSize, characterFilterCache, sizeFilterCache);
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public override void GetRawString(StringBuilder str)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawString", str);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringSegmentNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringSegmentNode()
		{
		}
	}
	public class StringSizeNode : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public enum Mode
		{
			Relative,
			Absolute
		}

		public System.Single Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public Mode SizeMode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "SizeMode"), typeof(Mode)) is Mode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Mode");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "SizeMode", value);
			}
		}

		public StringSizeNode(System.Single size, Mode sizeMode, System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringSizeNode", ResoniteBridge.ResoniteBridgeValueType.Type), size, sizeMode, startIndex, parent);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public static StringSizeNode Parse(ResoniteBridge.ResoniteBridgeValue parameter, System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringSizeNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringSizeNode", ResoniteBridge.ResoniteBridgeValueType.Type), "Parse", parameter, startIndex, parent), typeof(StringSizeNode));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringSizeNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringSizeNode()
		{
		}
	}
	public static class StringSizeExtensions
	{
		public static System.Single GetFontSize(this StringNode node)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringSizeExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetFontSize", node), typeof(System.Single));
		}
	}
	public struct TextEditingVisuals : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 caretPosition
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "caretPosition"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "caretPosition", value);
			}
		}

		public System.Int32 selectionStart
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "selectionStart"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "selectionStart", value);
			}
		}

		public colorX caretColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "caretColor"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "caretColor", value);
			}
		}

		public colorX selectionColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "selectionColor"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "selectionColor", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TextEditingVisuals(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TextEditingVisuals()
		{
		}
	}
	public struct AtlasData : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlyphAtlas glyphAtlas
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "glyphAtlas"), typeof(GlyphAtlas)) is GlyphAtlas __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphAtlas");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "glyphAtlas", value);
			}
		}

		public System.Object customData
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "customData"), typeof(System.Object)) is System.Object __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to object");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "customData", value);
			}
		}

		public AtlasData(GlyphAtlas glyphAtlas, System.Object customData = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AtlasData", ResoniteBridge.ResoniteBridgeValueType.Type), glyphAtlas, customData);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AtlasData(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AtlasData()
		{
		}
	}
	public struct AtlasSubmesh : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public GlyphAtlas atlas
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "atlas"), typeof(GlyphAtlas)) is GlyphAtlas __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphAtlas");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "atlas", value);
			}
		}

		public TriangleSubmesh submesh
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "submesh"), typeof(TriangleSubmesh)) is TriangleSubmesh __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TriangleSubmesh");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "submesh", value);
			}
		}

		public AtlasSubmesh(GlyphAtlas atlas, TriangleSubmesh submesh)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AtlasSubmesh", ResoniteBridge.ResoniteBridgeValueType.Type), atlas, submesh);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AtlasSubmesh(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AtlasSubmesh()
		{
		}
	}
	public delegate TriangleSubmesh AtlasSubmeshMapper(AtlasData atlasData);
	public static class GlyphAtlasMeshGenerator
	{
		private struct LineSegment : ResoniteBridge.ResoniteBridgeValueHolder
		{
			public StringLine line
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "line"), typeof(StringLine)) is StringLine __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to StringLine");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "line", value);
				}
			}

			public System.Int32 startGlyphIndex
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "startGlyphIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to int");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "startGlyphIndex", value);
				}
			}

			public System.Int32 endGlyphIndex
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "endGlyphIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to int");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "endGlyphIndex", value);
				}
			}

			public RenderGlyph startGlyph
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "startGlyph"), typeof(RenderGlyph)) is RenderGlyph __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to RenderGlyph");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "startGlyph", value);
				}
			}

			public RenderGlyph endGlyph
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "endGlyph"), typeof(RenderGlyph)) is RenderGlyph __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to RenderGlyph");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "endGlyph", value);
				}
			}

			public LineSegment(StringLine line, System.Int32 startGlyphIndex, System.Int32 endGlyphIndex, RenderGlyph startGlyph, RenderGlyph endGlyph)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "LineSegment", ResoniteBridge.ResoniteBridgeValueType.Type), line, startGlyphIndex, endGlyphIndex, startGlyph, endGlyph);
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public LineSegment(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public LineSegment()
			{
			}
		}

		private static System.Int32 MatchStringPositionToGlyph(StringRenderTree renderTree, System.Int32 stringPosition)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphAtlasMeshGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "MatchStringPositionToGlyph", renderTree, stringPosition), typeof(System.Int32));
		}

		private static void Mark(StringRenderTree renderTree, MeshX mesh, TriangleSubmesh submesh, in LineSegment lineSegment, in color markColor, in float2 offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphAtlasMeshGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "Mark", renderTree, mesh, submesh, lineSegment, markColor, offset);
		}

		private static void ExtractLineSegments(StringRenderTree renderTree, System.Int32 startIndex, System.Int32 length, List<LineSegment> lineSegments)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphAtlasMeshGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "ExtractLineSegments", renderTree, startIndex, length, lineSegments);
		}

		private static void InsertLine(MeshX mesh, TriangleSubmesh submesh, in float2 startPoint, in float2 endPoint, in color color, System.Single thickness, in float2 offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphAtlasMeshGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "InsertLine", mesh, submesh, startPoint, endPoint, color, thickness, offset);
		}

		private static void InsertLine(StringRenderTree renderTree, MeshX mesh, TriangleSubmesh submesh, in LineSegment segment, in color color, System.Single heightOffset, System.Single thickness, in float2 offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "GlyphAtlasMeshGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "InsertLine", renderTree, mesh, submesh, segment, color, heightOffset, thickness, offset);
		}
	}
	public struct RenderGlyph : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 stringIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "stringIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "stringIndex", value);
			}
		}

		public System.UInt32 glyphId
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "glyphId"), typeof(System.UInt32)) is System.UInt32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to uint");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "glyphId", value);
			}
		}

		public FontX font
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "font"), typeof(FontX)) is FontX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to FontX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "font", value);
			}
		}

		public Rect rect
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "rect"), typeof(Rect)) is Rect __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Rect");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "rect", value);
			}
		}

		public float2 pen
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "pen"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "pen", value);
			}
		}

		public System.Int32 line
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "line"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "line", value);
			}
		}

		public void Translate(System.Single x, System.Single y)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Translate", x, y);
		}

		public void Translate(in float2 offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Translate", offset);
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public RenderGlyph(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public RenderGlyph()
		{
		}
	}
	public delegate void GlyphPositioner(ref RenderGlyph glyph, in float2 offset, System.Int32 lineIndex);
	public class StringRenderTree : StringContainerNode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private enum WithComputationMode
		{
			Word,
			Line
		}

		private struct RenestNode : ResoniteBridge.ResoniteBridgeValueHolder
		{
			public StringSegment tag
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "tag"), typeof(StringSegment)) is StringSegment __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to StringSegment");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "tag", value);
				}
			}

			public StringContainerNode node
			{
				get
				{
					if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "node"), typeof(StringContainerNode)) is StringContainerNode __retCasted)
					{
						return __retCasted;
					}
					else
					{
						throw new InvalidCastException("Cannot cast result to StringContainerNode");
					}
				}
				set
				{
					ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "node", value);
				}
			}

			public RenestNode(StringSegment tag, StringContainerNode node)
			{
				__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "RenestNode", ResoniteBridge.ResoniteBridgeValueType.Type), tag, node);
			}

			private ResoniteBridge.ResoniteBridgeValue __backing;

			public ResoniteBridge.ResoniteBridgeValue __Backing
			{
				get
				{
					return __backing;
				}
				set
				{
					__backing = value;
				}
			}

			public RenestNode(ResoniteBridge.ResoniteBridgeValue value)
			{
				__backing = value;
			}

			public RenestNode()
			{
			}
		}

		private enum TagScanState
		{
			ScanningBeginning,
			ScanningTag,
			ScanningParameter,
			ScanningForEnd,
			FinishedScanning,
			Invalid
		}

		public System.Int32 MAX_AUTO_SIZE_ITERATIONS
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAX_AUTO_SIZE_ITERATIONS"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAX_AUTO_SIZE_ITERATIONS", value);
			}
		}

		public static GlyphMetrics EMPTY_GLYPH
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "EMPTY_GLYPH"), typeof(GlyphMetrics)) is GlyphMetrics __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphMetrics");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "EMPTY_GLYPH", value);
			}
		}

		public static GlyphMetrics TINY_GLYPH
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "TINY_GLYPH"), typeof(GlyphMetrics)) is GlyphMetrics __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphMetrics");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "TINY_GLYPH", value);
			}
		}

		public static GlyphMetrics UNIT_GLYPH
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "UNIT_GLYPH"), typeof(GlyphMetrics)) is GlyphMetrics __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to GlyphMetrics");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "UNIT_GLYPH", value);
			}
		}

		public System.Int32 MAX_TAG_LENGTH
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAX_TAG_LENGTH"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAX_TAG_LENGTH", value);
			}
		}

		public System.String String
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "String"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "String", value);
			}
		}

		public System.Single TabSpaces
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "TabSpaces"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "TabSpaces", value);
			}
		}

		public System.Single Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Size"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Size", value);
			}
		}

		public System.Single AutoSizeRatio
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AutoSizeRatio"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AutoSizeRatio", value);
			}
		}

		public System.Single LineHeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LineHeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LineHeight", value);
			}
		}

		public colorX Color
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Color"), typeof(colorX)) is colorX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to colorX");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Color", value);
			}
		}

		public TextHorizontalAlignment HorizontalAlignment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "HorizontalAlignment"), typeof(TextHorizontalAlignment)) is TextHorizontalAlignment __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TextHorizontalAlignment");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "HorizontalAlignment", value);
			}
		}

		public TextVerticalAlignment VerticalAlignment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "VerticalAlignment"), typeof(TextVerticalAlignment)) is TextVerticalAlignment __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TextVerticalAlignment");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "VerticalAlignment", value);
			}
		}

		public System.Single JustificationThreshold
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "JustificationThreshold"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "JustificationThreshold", value);
			}
		}

		public AlignmentMode AlignmentMode
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "AlignmentMode"), typeof(AlignmentMode)) is AlignmentMode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AlignmentMode");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "AlignmentMode", value);
			}
		}

		public System.Boolean Bounded
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Bounded"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Bounded", value);
			}
		}

		public float2 BoundsSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BoundsSize"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BoundsSize", value);
			}
		}

		public Alignment BoundsAlignment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BoundsAlignment"), typeof(Alignment)) is Alignment __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Alignment");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BoundsAlignment", value);
			}
		}

		private List<FontSet> _fontSets
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_fontSets"), typeof(List<FontSet>)) is List<FontSet> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<FontSet>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_fontSets", value);
			}
		}

		internal System.Single _tabLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_tabLength"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_tabLength", value);
			}
		}

		internal System.Single _invTabLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_invTabLength"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_invTabLength", value);
			}
		}

		private List<StringLine> _lines
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_lines"), typeof(List<StringLine>)) is List<StringLine> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<StringLine>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_lines", value);
			}
		}

		private System.Int32 _glyphLayoutLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_glyphLayoutLength"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_glyphLayoutLength", value);
			}
		}

		private RenderGlyph[] _glyphLayout
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_glyphLayout"), typeof(RenderGlyph[])) is RenderGlyph[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to RenderGlyph[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_glyphLayout", value);
			}
		}

		private System.Boolean _isShaped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_isShaped"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_isShaped", value);
			}
		}

		public System.Single LastLayoutWidth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LastLayoutWidth"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "LastLayoutWidth", value);
			}
		}

		public System.Single LastLayoutHeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LastLayoutHeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "LastLayoutHeight", value);
			}
		}

		public System.Single ActualSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ActualSize"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		public FontSet MainFontSet
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MainFontSet"), typeof(FontSet)) is FontSet __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to FontSet");
				}
			}
		}

		public FontSet MainSpriteFontSet
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MainSpriteFontSet"), typeof(FontSet)) is FontSet __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to FontSet");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MainSpriteFontSet", value);
			}
		}

		public System.Int32 FontSetCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FontSetCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 GlyphLayoutLength
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "GlyphLayoutLength"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 LineCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LineCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean IsShaped
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsShaped"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public static System.Boolean AllowsLineBreak(System.Char ch)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "AllowsLineBreak", ch), typeof(System.Boolean));
		}

		public void HorizontalAutoSize()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HorizontalAutoSize");
		}

		public System.Boolean AutoSizeLayout(System.Single min = 0f, System.Single max = float.PositiveInfinity)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AutoSizeLayout", min, max), typeof(System.Boolean));
		}

		public void ComputeLines()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeLines");
		}

		public void Layout()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Layout");
		}

		public void OffsetLines(in float2 offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OffsetLines", offset);
		}

		private System.Boolean ExceedsHorizontalBounds(ref RenderGlyph glyph)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExceedsHorizontalBounds", glyph), typeof(System.Boolean));
		}

		private void GenerateLines(GlyphPositioner glyphPositionOverride = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateLines", glyphPositionOverride);
		}

		private void ComputeLineData()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeLineData");
		}

		private void LayOutLines()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "LayOutLines");
		}

		private void PerformHorizontalAlignment()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PerformHorizontalAlignment");
		}

		public System.Single ComputeMaxWordWidth()
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeMaxWordWidth"), typeof(System.Single));
		}

		public System.Single ComputeMaxLineWidth()
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeMaxLineWidth"), typeof(System.Single));
		}

		private void UpdateMaxWordWidth(StringRenderGlyphSegmentNode segment, ref System.Single maxLength, int? startGlyph, int? endGlyph)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateMaxWordWidth", segment, maxLength, startGlyph, endGlyph);
		}

		public System.Single ComputeTotalLineHeight(AlignmentMode alignmentMode)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ComputeTotalLineHeight", alignmentMode), typeof(System.Single));
		}

		private void PerformVerticalAlignment()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PerformVerticalAlignment");
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public void ClearShaping()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ClearShaping");
		}

		public void ShapeText(System.Boolean kerning = true)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShapeText", kerning);
		}

		public FontSet GetFontSet(System.String name)
		{
			return (FontSet)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetFontSet", name), typeof(FontSet));
		}

		public FontSet GetFontSet(System.Int32 index)
		{
			return (FontSet)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetFontSet", index), typeof(FontSet));
		}

		public StringRenderTree(System.String str, FontSet fontSet, Func<StringContainerNode, StringContainerNode> initRootNodes = null, System.Boolean parse = true)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), str, fontSet, initRootNodes, parse);
		}

		public StringRenderTree(System.String str, List<FontSet> fontSets = null, Func<StringContainerNode, StringContainerNode> initRootNodes = null, System.Boolean parse = true)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), str, fontSets, initRootNodes, parse);
		}

		public override StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent)
		{
			return (StringContainerNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone", startIndex, parent), typeof(StringContainerNode));
		}

		internal void AppendGlyph(System.Int32 index, ref RenderGlyph glyph)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AppendGlyph", index, glyph);
		}

		public RenderGlyph GetRenderGlyph(System.Int32 index)
		{
			return (RenderGlyph)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRenderGlyph", index), typeof(RenderGlyph));
		}

		public StringLine GetLine(System.Int32 index)
		{
			return (StringLine)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetLine", index), typeof(StringLine));
		}

		private void Parse(System.String str, Func<StringContainerNode, StringContainerNode> initRootNodes = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Parse", str, initRootNodes);
		}

		private static void FinishSegment(System.Int32 segmentStart, System.Int32 segmentEnd, StringContainerNode root)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "FinishSegment", segmentStart, segmentEnd, root);
		}

		private static StringNode CreateNode(System.Int32 startIndex, StringContainerNode parent, in StringSegment tag, in StringSegment parameter)
		{
			return (StringNode)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "CreateNode", startIndex, parent, tag, parameter), typeof(StringNode));
		}

		private static System.Boolean IsTag(in StringSegment tag, System.String name)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "IsTag", tag, name), typeof(System.Boolean));
		}

		private static System.Boolean IsTagCharacter(System.Char ch)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringRenderTree", ResoniteBridge.ResoniteBridgeValueType.Type), "IsTagCharacter", ch), typeof(System.Boolean));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringRenderTree(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringRenderTree()
		{
		}
	}
	public abstract class StringContainerNode : StringNode, IEnumerable<StringRenderGlyphSegmentNode>, IEnumerable, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public List<StringNode> Nodes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Nodes"), typeof(List<StringNode>)) is List<StringNode> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<StringNode>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Nodes", value);
			}
		}

		public virtual System.Boolean AllowOutOfOrderSplit
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AllowOutOfOrderSplit"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public StringContainerNode()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringContainerNode", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public StringContainerNode(System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringContainerNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, parent);
		}

		public StringContainerNode(System.Int32 startIndex, StringContainerNode parent, StringRenderTree root)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringContainerNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, parent, root);
		}

		public virtual System.Boolean IsValidNestedNode(StringContainerNode node)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IsValidNestedNode", node), typeof(System.Boolean));
		}

		public abstract StringContainerNode Clone(System.Int32 startIndex, StringContainerNode parent);

		public override void GetRawString(StringBuilder stringBuilder)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawString", stringBuilder);
		}

		public IEnumerator<StringRenderGlyphSegmentNode> GetEnumerator()
		{
			return (IEnumerator<StringRenderGlyphSegmentNode>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetEnumerator"), typeof(IEnumerator<StringRenderGlyphSegmentNode>));
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return (IEnumerator)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IEnumerable.GetEnumerator"), typeof(IEnumerator));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringContainerNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class StringLine : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public float2 Position
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Position"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Position", value);
			}
		}

		public System.Single Ascender
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Ascender"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Ascender", value);
			}
		}

		public System.Single Descender
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Descender"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Descender", value);
			}
		}

		public System.Single LineHeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LineHeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LineHeight", value);
			}
		}

		public System.Single LineHeightMultiplier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "LineHeightMultiplier"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "LineHeightMultiplier", value);
			}
		}

		public System.Int32 StartIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "StartIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "StartIndex", value);
			}
		}

		public System.Int32 GlyphCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GlyphCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GlyphCount", value);
			}
		}

		public TextHorizontalAlignment Alignment
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Alignment"), typeof(TextHorizontalAlignment)) is TextHorizontalAlignment __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TextHorizontalAlignment");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Alignment", value);
			}
		}

		public System.Single ActualHeight
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ActualHeight"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringLine(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public StringLine()
		{
		}
	}
	public abstract class StringNode : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public StringContainerNode Parent
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Parent"), typeof(StringContainerNode)) is StringContainerNode __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to StringContainerNode");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Parent", value);
			}
		}

		public StringRenderTree Root
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Root"), typeof(StringRenderTree)) is StringRenderTree __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to StringRenderTree");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Root", value);
			}
		}

		public System.Int32 StartIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "StartIndex"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "StartIndex", value);
			}
		}

		public StringNode()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringNode", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public StringNode(System.Int32 startIndex, StringContainerNode parent)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, parent);
		}

		public StringNode(System.Int32 startIndex, StringContainerNode parent, StringRenderTree root)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringNode", ResoniteBridge.ResoniteBridgeValueType.Type), startIndex, parent, root);
		}

		public abstract void GetRawString(StringBuilder str);

		public System.String GetRawString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRawString"), typeof(System.String));
		}

		public void GetParentNodes<T>(List<T> nodes) where T : class
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetParentNodes", nodes);
		}

		public T GetParentNode<T>() where T : class
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetParentNode"), typeof(T));
		}

		public static ResoniteBridge.ResoniteBridgeValue ExtractRawParameter(ResoniteBridge.ResoniteBridgeValue parameter)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringNode", ResoniteBridge.ResoniteBridgeValueType.Type), "ExtractRawParameter", parameter), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public StringNode(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public static class StringParsingHelper
	{
		public static System.String SanitizeFormatTags(System.String str)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "StringParsingHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "SanitizeFormatTags", str), typeof(System.String));
		}
	}
	public class FontSet : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public List<FontX> Fonts
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "Fonts"), typeof(List<FontX>)) is List<FontX> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<FontX>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "Fonts", value);
			}
		}

		public FontX MainFont
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MainFont"), typeof(FontX)) is FontX __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to FontX");
				}
			}
		}

		public FontSet(FontX mainFont)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "FontSet", ResoniteBridge.ResoniteBridgeValueType.Type), mainFont);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public FontSet(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public FontSet()
		{
		}
	}
	[DataModelType]
	public enum AlignmentMode
	{
		Geometric,
		LineBased
	}
	public static class TextRenderHelper
	{
		public static TextHorizontalAlignment GetHorizontalText(this Alignment align)
		{
			return (TextHorizontalAlignment)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextRenderHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "GetHorizontalText", align), typeof(TextHorizontalAlignment));
		}

		public static TextVerticalAlignment GetVerticalText(this Alignment align)
		{
			return (TextVerticalAlignment)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextRenderHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "GetVerticalText", align), typeof(TextVerticalAlignment));
		}
	}
	internal class AnimatedTexture : ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public AnimatedTexture(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public AnimatedTexture()
		{
		}
	}
	[DataModelType]
	public interface IBitmap : ResoniteBridge.ResoniteBridgeValueHolder
	{
	}
	public interface IBitmap<B> : IBitmap, ResoniteBridge.ResoniteBridgeValueHolder where B : IBitmap<B>
	{
		B ConvertTo(TextureFormat format);
	}
	[DataModelType]
	public abstract class Bitmap : ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Int32 _bytesPerPixel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_bytesPerPixel"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_bytesPerPixel", value);
			}
		}

		protected List<int> mipmapOrigins
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "mipmapOrigins"), typeof(List<int>)) is List<int> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<int>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "mipmapOrigins", value);
			}
		}

		private static float3x3 LOGLUV_ENCODE_MAT
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap", ResoniteBridge.ResoniteBridgeValueType.Type), "LOGLUV_ENCODE_MAT"), typeof(float3x3)) is float3x3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float3x3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap", ResoniteBridge.ResoniteBridgeValueType.Type), "LOGLUV_ENCODE_MAT", value);
			}
		}

		public TextureFormat Format
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Format"), typeof(TextureFormat)) is TextureFormat __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TextureFormat");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Format", value);
			}
		}

		public System.Double BitsPerPixel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsPerPixel"), typeof(System.Double)) is System.Double __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BitsPerPixel", value);
			}
		}

		public byte[] RawData
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "RawData"), typeof(byte[])) is byte[] __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte[]");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "RawData", value);
			}
		}

		public System.Int32 TotalPixels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TotalPixels"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "TotalPixels", value);
			}
		}

		public System.Int32 ElementTotalPixels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ElementTotalPixels"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ElementTotalPixels", value);
			}
		}

		public System.Int32 ElementTotalBytes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ElementTotalBytes"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ElementTotalBytes", value);
			}
		}

		public System.String OriginalFormat
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OriginalFormat"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "OriginalFormat", value);
			}
		}

		public ColorProfile Profile
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Profile"), typeof(ColorProfile)) is ColorProfile __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ColorProfile");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Profile", value);
			}
		}

		public System.Boolean PreferColor32
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PreferColor32"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Boolean SupportsAlpha
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsAlpha"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Boolean HasMipMaps
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasMipMaps"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Int32 MipMapLevels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MipMapLevels"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public virtual System.Int32 ElementCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ElementCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		protected void Init(byte[] data, TextureFormat format, System.Boolean mipmaps, System.String originalFormat, ColorProfile profile)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Init", data, format, mipmaps, originalFormat, profile);
		}

		protected abstract System.Int32 InitMipmapLevels();

		public abstract System.Int32 MipmapTotalPixels(System.Int32 mip);

		public abstract System.Int32 MipmapOrigin(System.Int32 mip);

		public void ReinterpretProfile(ColorProfile targetProfile)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReinterpretProfile", targetProfile);
		}

		public color32 DecodePixel32(System.Int32 index)
		{
			return (color32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DecodePixel32", index), typeof(color32));
		}

		public color DecodePixel(System.Int32 index)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DecodePixel", index), typeof(color));
		}

		public void EncodePixel(System.Int32 index, in color color)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EncodePixel", index, color);
		}

		public void EncodePixel32(System.Int32 index, in color32 color)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EncodePixel32", index, color);
		}

		public void ForEachPixel(Func<color, color> filter)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachPixel", filter);
		}

		public void ForEachPixelHSV(Func<ColorHSV, ColorHSV> filter)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachPixelHSV", filter);
		}

		public void ForEachPixel(System.Int32 mip, Func<color, color> filter)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachPixel", mip, filter);
		}

		private void ForEachPixel(System.Int32 from, System.Int32 to, Func<color, color> filter)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachPixel", from, to, filter);
		}

		private void WriteUint(System.UInt32 value, System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteUint", value, index);
		}

		private void WriteUshort(System.UInt16 value, System.Int32 index)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "WriteUshort", value, index);
		}

		private System.UInt32 ReadUint(System.Int32 index)
		{
			return (System.UInt32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReadUint", index), typeof(System.UInt32));
		}

		private System.UInt16 ReadUShort(System.Int32 index)
		{
			return (System.UInt16)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ReadUShort", index), typeof(System.UInt16));
		}

		public unsafe static System.UInt32 SingleToUint32(System.Single value)
		{
			return (System.UInt32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap", ResoniteBridge.ResoniteBridgeValueType.Type), "SingleToUint32", value), typeof(System.UInt32));
		}

		public unsafe static System.Single Uint32ToSingle(System.UInt32 value)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap", ResoniteBridge.ResoniteBridgeValueType.Type), "Uint32ToSingle", value), typeof(System.Single));
		}

		public void Clear(color color)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clear", color);
		}

		public void InvertColors()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InvertColors");
		}

		public void InvertAlpha()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InvertAlpha");
		}

		public void Normalize(System.Boolean rgbIndependently = false, System.Boolean normalizeAlpha = false, System.Boolean normalizeMinValue = false)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Normalize", rgbIndependently, normalizeAlpha, normalizeMinValue);
		}

		public System.Boolean HasTransparentPixels(System.Single threshold = 1f)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "HasTransparentPixels", threshold), typeof(System.Boolean));
		}

		public colorX AverageColor(System.Boolean inLinearSpace = true)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AverageColor", inLinearSpace), typeof(colorX));
		}

		public colorX AverageColor(Predicate<color> filter, System.Boolean inLinearSpace = true)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AverageColor", filter, inLinearSpace), typeof(colorX));
		}

		public void FillFrom(Bitmap source)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillFrom", source);
		}

		public void FillFromMipMap(Bitmap2D source, System.Int32 sourceMip, System.Int32 targetMip = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillFromMipMap", source, sourceMip, targetMip);
		}

		public void CopyPixelsFrom(Bitmap source, System.Int32 sourceStart, System.Int32 destStart, System.Int32 count)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyPixelsFrom", source, sourceStart, destStart, count);
		}

		public void InvertRGB()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InvertRGB");
		}

		public void InvertR()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InvertR");
		}

		public void InvertG()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InvertG");
		}

		public void InvertB()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InvertB");
		}

		public void InvertA()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InvertA");
		}

		public void ColorToAlpha(color fillColor)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ColorToAlpha", fillColor);
		}

		public void AlphaFromIntensity()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AlphaFromIntensity");
		}

		public void AlphaToMask()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AlphaToMask");
		}

		public void RemoveAlpha()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemoveAlpha");
		}

		public void GrayscaleAverage()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GrayscaleAverage");
		}

		public void GrayscaleLuminance()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GrayscaleLuminance");
		}

		public void SwapRG()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SwapRG");
		}

		public void SwapRB()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SwapRB");
		}

		public void SwapRA()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SwapRA");
		}

		public void SwapGB()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SwapGB");
		}

		public void SwapGA()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SwapGA");
		}

		public void SwapBA()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SwapBA");
		}

		public void AddBackground(color bgColor)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AddBackground", bgColor);
		}

		public void AdjustGamma(System.Single gamma)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AdjustGamma", gamma);
		}

		public void AdjustAlphaGamma(System.Single gamma)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AdjustAlphaGamma", gamma);
		}

		public void ShiftHue(System.Single offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ShiftHue", offset);
		}

		public void SetHue(System.Single hue)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetHue", hue);
		}

		public void SetSaturation(System.Single saturation)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetSaturation", saturation);
		}

		public void OffsetSaturation(System.Single offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OffsetSaturation", offset);
		}

		public void MulSaturation(System.Single ratio)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MulSaturation", ratio);
		}

		public void SetValue(System.Single value)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetValue", value);
		}

		public void MulValue(System.Single ratio)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MulValue", ratio);
		}

		public void OffsetValue(System.Single offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OffsetValue", offset);
		}

		public void OffsetAlpha(System.Single offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "OffsetAlpha", offset);
		}

		public virtual void ConvertToProfile(ColorProfile targetProfile)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ConvertToProfile", targetProfile);
		}

		public virtual void ConvertTosRGB()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ConvertTosRGB");
		}

		public virtual void ConvertHDRToHDRsRGB()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ConvertHDRToHDRsRGB");
		}

		public void PackNormalMap()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PackNormalMap");
		}

		public void EncodeLogLUV()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EncodeLogLUV");
		}

		public void EncodeRGBM()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EncodeRGBM");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Bitmap(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Bitmap()
		{
		}
	}
	[DataModelType]
	public enum WrapMode
	{
		Clamp,
		Repeat
	}
	[DataModelType]
	public enum TextureSize
	{
		NPOT,
		LowestPOT,
		NearestPOT,
		HighestPOT
	}
	public class Bitmap2D : Bitmap2DBase, IBitmap<Bitmap2D>, IBitmap, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 RAW_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "RAW_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "RAW_VERSION", value);
			}
		}

		public System.String MAGIC_STRING
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAGIC_STRING"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAGIC_STRING", value);
			}
		}

		public color this[System.Int32 x, System.Int32 y]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Item", value);
			}
		}

		public color this[System.Single x, System.Single y] => GetPixelBilinear(x, y);

		public color this[int2 point]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Item", value);
			}
		}

		public color this[float2 point] => GetPixelBilinear(point.x, point.y);

		public Bitmap2D(byte[] data, System.Int32 width, System.Int32 height, TextureFormat format, System.Boolean mipmaps, ColorProfile profile, System.Boolean flipY = true, System.String originalFormat = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), data, width, height, format, mipmaps, profile, flipY, originalFormat);
		}

		public Bitmap2D(System.Int32 width, System.Int32 height, TextureFormat format, System.Boolean mipmaps, ColorProfile profile, System.Boolean flipY = true, System.String originalFormat = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), width, height, format, mipmaps, profile, flipY, originalFormat);
		}

		public float2 PixelToUV(System.Int32 x, System.Int32 y)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PixelToUV", x, y), typeof(float2));
		}

		public float2 PixelToUV(in int2 point)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PixelToUV", point), typeof(float2));
		}

		public int2 UVToPixel(in float2 uv)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UVToPixel", uv), typeof(int2));
		}

		public color SampleUV(in float2 uv, WrapMode wrap = WrapMode.Clamp, System.Int32 mipLevel = 0)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SampleUV", uv, wrap, mipLevel), typeof(color));
		}

		public color GetPixelBilinear(System.Single x, System.Single y, WrapMode wrap = WrapMode.Clamp, System.Int32 mipLevel = 0)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixelBilinear", x, y, wrap, mipLevel), typeof(color));
		}

		public color GetPixel(System.Int32 x, System.Int32 y, System.Int32 mipLevel = 0)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixel", x, y, mipLevel), typeof(color));
		}

		public color32 GetPixel32(System.Int32 x, System.Int32 y, System.Int32 mipLevel = 0)
		{
			return (color32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixel32", x, y, mipLevel), typeof(color32));
		}

		public void SetPixel(System.Int32 x, System.Int32 y, in color color, System.Int32 mipLevel = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPixel", x, y, color, mipLevel);
		}

		public void SetPixel32(System.Int32 x, System.Int32 y, in color32 color, System.Int32 mipLevel = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPixel32", x, y, color, mipLevel);
		}

		public System.Boolean VerifyRegion(System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, System.Int32 mip = 0)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "VerifyRegion", x, y, width, height, mip), typeof(System.Boolean));
		}

		public void GetMipMapBuffers(List<Memory<byte>> mipbuffers)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetMipMapBuffers", mipbuffers);
		}

		public void GetMipMapBuffers(List<MipMapBuffer> mipbuffers)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetMipMapBuffers", mipbuffers);
		}

		private void CheckRegion(System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, System.Int32 mip)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CheckRegion", x, y, width, height, mip);
		}

		public static System.Int32 ComputeTotalPixels(in int2 size, System.Boolean mipmaps)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), "ComputeTotalPixels", size, mipmaps), typeof(System.Int32));
		}

		public Bitmap2D ExtractMipMap(System.Int32 mip, System.Boolean includeLowerMips = false)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractMipMap", mip, includeLowerMips), typeof(Bitmap2D));
		}

		public Bitmap2D ConvertTo(TextureFormat format)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ConvertTo", format), typeof(Bitmap2D));
		}

		public void FillFrom(BitmapCube cubemap, BitmapCube.Face face, System.Int32 miplevel = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillFrom", cubemap, face, miplevel);
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public void Fill(System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, color color, System.Int32 mip = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Fill", x, y, width, height, color, mip);
		}

		public static Bitmap2D Load(System.String file, bool? generateMipmaps, AlphaHandling alphaHandling = AlphaHandling.KeepOriginal, System.Int32 maxSize = int.MaxValue, System.Single sizeRatio = 1f)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), "Load", file, generateMipmaps, alphaHandling, maxSize, sizeRatio), typeof(Bitmap2D));
		}

		public static Bitmap2D Load(Stream stream, System.String extension, bool? generateMipmaps, AlphaHandling alphaHandling = AlphaHandling.KeepOriginal, System.Int32 maxSize = int.MaxValue, System.Single sizeRatio = 1f)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), "Load", stream, extension, generateMipmaps, alphaHandling, maxSize, sizeRatio), typeof(Bitmap2D));
		}

		public static Bitmap2D LoadRaw(System.String file)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), "LoadRaw", file), typeof(Bitmap2D));
		}

		public static Bitmap2D LoadRaw(Stream stream)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), "LoadRaw", stream), typeof(Bitmap2D));
		}

		public void SaveRaw(System.String file, RawBitmapEncoding encoding = RawBitmapEncoding.LZMA)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SaveRaw", file, encoding);
		}

		public void SaveRaw(Stream stream, RawBitmapEncoding encoding = RawBitmapEncoding.LZMA)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SaveRaw", stream, encoding);
		}

		public System.Boolean Save(System.String file, System.Int32 quality = 85, System.Boolean preserveColorInAlpha = true)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Save", file, quality, preserveColorInAlpha), typeof(System.Boolean));
		}

		public System.Boolean Save(Stream stream, System.String extension, System.Int32 quality = 85, System.Boolean preserveColorInAlpha = true)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Save", stream, extension, quality, preserveColorInAlpha), typeof(System.Boolean));
		}

		public ResoniteBridge.ResoniteBridgeValue ToFreeImage()
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToFreeImage"), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public ResoniteBridge.ResoniteBridgeValue ToFreeImage(IntRect region, System.Int32 sourceMip = 0)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToFreeImage", region, sourceMip), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public color GetPixelBoxClamp(System.Int32 x, System.Int32 y, System.Int32 mip = 0)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixelBoxClamp", x, y, mip), typeof(color));
		}

		public color GetPixelBoxRepeat(System.Int32 x, System.Int32 y, System.Int32 mip = 0)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixelBoxRepeat", x, y, mip), typeof(color));
		}

		public void GenerateMipmapsBox()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateMipmapsBox");
		}

		public void GenerateMipmapLevelBox(System.Int32 mip)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateMipmapLevelBox", mip);
		}

		public void GenerateMipMapForRegion(IntRect region, Filtering filtering)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateMipMapForRegion", region, filtering);
		}

		public Bitmap2D GetRescaled(System.Int32 longestSize, bool? mipmaps = null, System.Boolean forceRescale = false, Filtering filtering = Filtering.Box)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRescaled", longestSize, mipmaps, forceRescale, filtering), typeof(Bitmap2D));
		}

		public Bitmap2D GetRescaled(System.Int32 width, System.Int32 height, bool? mipmaps = null, System.Boolean forceRescale = false, Filtering filtering = Filtering.Box)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRescaled", width, height, mipmaps, forceRescale, filtering), typeof(Bitmap2D));
		}

		public Bitmap2D GetRescaled(int2 size, bool? mipmaps = null, System.Boolean forceRescale = false, Filtering filtering = Filtering.Box)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRescaled", size, mipmaps, forceRescale, filtering), typeof(Bitmap2D));
		}

		public Bitmap2D GetRescaled(IntRect region, System.Int32 sourceMip, int2 size, bool? mipmaps = null, System.Boolean forceRescale = false, Filtering filtering = Filtering.Box)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetRescaled", region, sourceMip, size, mipmaps, forceRescale, filtering), typeof(Bitmap2D));
		}

		public Bitmap2D Crop(Rect rect)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Crop", rect), typeof(Bitmap2D));
		}

		public Bitmap2D Crop(int2 position, int2 size)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Crop", position, size), typeof(Bitmap2D));
		}

		public Bitmap2D Crop(System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Crop", x, y, width, height), typeof(Bitmap2D));
		}

		public Bitmap2D CropCenter(int2 newSize)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CropCenter", newSize), typeof(Bitmap2D));
		}

		public Bitmap2D CropSquareCenter()
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CropSquareCenter"), typeof(Bitmap2D));
		}

		public Bitmap2D CropAspectRatioCenter(float2 ratio)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CropAspectRatioCenter", ratio), typeof(Bitmap2D));
		}

		public Bitmap2D CropAspectRatioCenter(System.Single ratio)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CropAspectRatioCenter", ratio), typeof(Bitmap2D));
		}

		public void CopyFrom(Bitmap2D source, System.Int32 sourceX, System.Int32 sourceY, System.Int32 destX, System.Int32 destY, System.Int32 width, System.Int32 height)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", source, sourceX, sourceY, destX, destY, width, height);
		}

		public Bitmap2D MakeSquare()
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MakeSquare"), typeof(Bitmap2D));
		}

		public Bitmap2D Trim(Pixel2DPredicate isForeground)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trim", isForeground), typeof(Bitmap2D));
		}

		public Bitmap2D Trim(color c)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trim", c), typeof(Bitmap2D));
		}

		public Bitmap2D Trim(color32 c)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Trim", c), typeof(Bitmap2D));
		}

		public Bitmap2D TrimTransparent()
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimTransparent"), typeof(Bitmap2D));
		}

		public Bitmap2D TrimByCornerColor()
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "TrimByCornerColor"), typeof(Bitmap2D));
		}

		public Bitmap2D Pad(int2 targetSize, bool? overrideMipmaps = null)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Pad", targetSize, overrideMipmaps), typeof(Bitmap2D));
		}

		public void AlphaBlend(Bitmap2D other)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AlphaBlend", other);
		}

		public void AdditiveBlend(Bitmap2D other)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AdditiveBlend", other);
		}

		public void MultiplyBlend(Bitmap2D other)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MultiplyBlend", other);
		}

		public void ApplyMask(Bitmap2D mask)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ApplyMask", mask);
		}

		public void CustomBlend(Bitmap2D other, Func<color, color, color> blendFunction)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CustomBlend", other, blendFunction);
		}

		public void FlipHorizontal()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FlipHorizontal");
		}

		public void FlipVertical()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FlipVertical");
		}

		public void FlipYInMemory()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FlipYInMemory");
		}

		public Bitmap2D Rotate90CW()
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Rotate90CW"), typeof(Bitmap2D));
		}

		public Bitmap2D Rotate90CCW()
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Rotate90CCW"), typeof(Bitmap2D));
		}

		public Bitmap2D Rotate180()
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Rotate180"), typeof(Bitmap2D));
		}

		public Bitmap2D RemapPositions(int2 newSize, Func<int2, int2, int2> remappingFunction)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "RemapPositions", newSize, remappingFunction), typeof(Bitmap2D));
		}

		public void ForEachPixel(Func<color, color> filter, IntRect rect, System.Int32 miplevel = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachPixel", filter, rect, miplevel);
		}

		public void ForEachPixelUV(Func<float2, color> generator)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachPixelUV", generator);
		}

		public Bitmap2D GenerateTileableLoop(float2 transitionRatio)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateTileableLoop", transitionRatio), typeof(Bitmap2D));
		}

		public Bitmap2D GenerateTileableMirrored(float2 transitionRatio)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateTileableMirrored", transitionRatio), typeof(Bitmap2D));
		}

		public void BleedColorToAlpha()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BleedColorToAlpha");
		}

		public color? AverageRGBFromVisibleSurroundings(System.Int32 x, System.Int32 y, Bit2DArray overrides = null)
		{
			return (color?)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "AverageRGBFromVisibleSurroundings", x, y, overrides), typeof(color));
		}

		public static System.Boolean SupportsBlockCompression(TextureFormat targetFormat)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), "SupportsBlockCompression", targetFormat), typeof(System.Boolean));
		}

		public Bitmap2D BlockCompress(TextureFormat targetFormat, System.Single quality = 0.5f, System.Int32 maxThreads = 0)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BlockCompress", targetFormat, quality, maxThreads), typeof(Bitmap2D));
		}

		public System.Boolean CrunchCompress(System.String file, TextureFormat targetFormat, System.Boolean normalMap, System.Boolean perceptual, System.Int32 maxThreads = -1)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CrunchCompress", file, targetFormat, normalMap, perceptual, maxThreads), typeof(System.Boolean));
		}

		public static Bitmap2D LoadCRN(System.String file)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), "LoadCRN", file), typeof(Bitmap2D));
		}

		public static Bitmap2D LoadCRN(Stream stream)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2D", ResoniteBridge.ResoniteBridgeValueType.Type), "LoadCRN", stream), typeof(Bitmap2D));
		}

		public void DrawPixelSquare(IntRect rect, color color, System.Boolean dotted = false)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "DrawPixelSquare", rect, color, dotted);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Bitmap2D(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Bitmap2D()
		{
		}
	}
	public abstract class Bitmap2DBase : Bitmap, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private int2 _size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_size"), typeof(int2)) is int2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_size", value);
			}
		}

		private float2 _pixelToUV
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_pixelToUV"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_pixelToUV", value);
			}
		}

		private float2 _uvToPixel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "_uvToPixel"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "_uvToPixel", value);
			}
		}

		protected List<int2> mipmapSizes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "mipmapSizes"), typeof(List<int2>)) is List<int2> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<int2>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "mipmapSizes", value);
			}
		}

		public int2 Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Size"), typeof(int2)) is int2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Size", value);
			}
		}

		public int2 AlignedSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AlignedSize"), typeof(int2)) is int2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AlignedSize", value);
			}
		}

		public System.Boolean FlipY
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FlipY"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "FlipY", value);
			}
		}

		public float2 PixelToUVRatio
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "PixelToUVRatio"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
		}

		public float2 UVToPixelRatio
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UVToPixelRatio"), typeof(float2)) is float2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float2");
				}
			}
		}

		protected void InitSize(int2 size, System.Boolean flipY, TextureFormat format)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitSize", size, flipY, format);
		}

		public System.Int32 PixelStart(System.Int32 x, System.Int32 y, System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PixelStart", x, y, mip), typeof(System.Int32));
		}

		public System.Int32 MipmapByteOrigin(System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipmapByteOrigin", mip), typeof(System.Int32));
		}

		public System.Int32 MipmapTotalBytes(System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipmapTotalBytes", mip), typeof(System.Int32));
		}

		public override System.Int32 MipmapOrigin(System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipmapOrigin", mip), typeof(System.Int32));
		}

		protected void GetMipMapBuffers(List<Memory<byte>> mipBuffers, System.Int32 offset)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetMipMapBuffers", mipBuffers, offset);
		}

		protected void GetMipMapBuffers(List<MipMapBuffer> mipBuffers, System.Int32 offset, System.Int32 face)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetMipMapBuffers", mipBuffers, offset, face);
		}

		protected override System.Int32 InitMipmapLevels()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitMipmapLevels"), typeof(System.Int32));
		}

		public override System.Int32 MipmapTotalPixels(System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipmapTotalPixels", mip), typeof(System.Int32));
		}

		public int2 MipMapSize(System.Int32 mip)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipMapSize", mip), typeof(int2));
		}

		public static System.Boolean IsSizeAligned(in int2 size, TextureFormat format)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2DBase", ResoniteBridge.ResoniteBridgeValueType.Type), "IsSizeAligned", size, format), typeof(System.Boolean));
		}

		public static int2 AlignSize(in int2 size, TextureFormat format)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2DBase", ResoniteBridge.ResoniteBridgeValueType.Type), "AlignSize", size, format), typeof(int2));
		}

		public static System.Int32 MipmapLevelCount(int2 size)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2DBase", ResoniteBridge.ResoniteBridgeValueType.Type), "MipmapLevelCount", size), typeof(System.Int32));
		}

		public static System.Int32 MipmapLevels(in int2 size, List<int2> sizes)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap2DBase", ResoniteBridge.ResoniteBridgeValueType.Type), "MipmapLevels", size, sizes), typeof(System.Int32));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Bitmap2DBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Bitmap2DBase()
		{
		}
	}
	public enum RawBitmapEncoding
	{
		Uncompressed,
		LZMA
	}
	public delegate bool Pixel2DPredicate(Bitmap2D bitmap, System.Int32 x, System.Int32 y);
	internal enum LegacyTextureFormat
	{
		Unknown,
		RGB24,
		ARGB32,
		RGBA32,
		BGRA32,
		RGBAHalf,
		RGBAFloat
	}
	internal static class LegacyHelper
	{
		public static TextureFormat ConvertLegacyFormat(this LegacyTextureFormat format)
		{
			return (TextureFormat)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "LegacyHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertLegacyFormat", format), typeof(TextureFormat));
		}
	}
	public class Bitmap3D : Bitmap, IBitmap<Bitmap3D>, IBitmap, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public enum Encoding
		{
			Raw,
			Quantized8Bit
		}

		public System.Int32 BITMAP3D_BINARY_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "BITMAP3D_BINARY_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "BITMAP3D_BINARY_VERSION", value);
			}
		}

		public System.String MAGIC_STRING
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAGIC_STRING"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAGIC_STRING", value);
			}
		}

		private List<int3> mipmapSizes
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "mipmapSizes"), typeof(List<int3>)) is List<int3> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<int3>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "mipmapSizes", value);
			}
		}

		public int3 Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Size"), typeof(int3)) is int3 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int3");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Size", value);
			}
		}

		public color this[int3 pos]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Item", value);
			}
		}

		public color this[System.Int32 x, System.Int32 y, System.Int32 z]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Item", value);
			}
		}

		public Bitmap3D(System.Int32 width, System.Int32 height, System.Int32 depth, TextureFormat format, System.Boolean mipmaps, ColorProfile profile, System.String originalFormat = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), width, height, depth, format, mipmaps, profile, originalFormat);
		}

		public Bitmap3D(byte[] data, System.Int32 width, System.Int32 height, System.Int32 depth, TextureFormat format, System.Boolean mipmaps, ColorProfile profile, System.String originalFormat = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), data, width, height, depth, format, mipmaps, profile, originalFormat);
		}

		public color GetPixel(System.Int32 x, System.Int32 y, System.Int32 z, System.Int32 mip = 0)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixel", x, y, z, mip), typeof(color));
		}

		public color GetPixel32(System.Int32 x, System.Int32 y, System.Int32 z, System.Int32 mip = 0)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixel32", x, y, z, mip), typeof(color));
		}

		public void SetPixel(System.Int32 x, System.Int32 y, System.Int32 z, in color color, System.Int32 mip = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPixel", x, y, z, color, mip);
		}

		public color SampleUVW(in float3 uvw)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SampleUVW", uvw), typeof(color));
		}

		public color GetPixelBilinear(System.Single x, System.Single y, System.Single z)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixelBilinear", x, y, z), typeof(color));
		}

		public color GetPixelBilinear(in float3 position)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixelBilinear", position), typeof(color));
		}

		private color SampleBilinearLayer(in int3 pos, in float2 ratio)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SampleBilinearLayer", pos, ratio), typeof(color));
		}

		protected override System.Int32 InitMipmapLevels()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitMipmapLevels"), typeof(System.Int32));
		}

		public override System.Int32 MipmapTotalPixels(System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipmapTotalPixels", mip), typeof(System.Int32));
		}

		public override System.Int32 MipmapOrigin(System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipmapOrigin", mip), typeof(System.Int32));
		}

		public int3 MipMapSize(System.Int32 mip)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipMapSize", mip), typeof(int3));
		}

		private System.Int32 PixelStart(System.Int32 x, System.Int32 y, System.Int32 z, System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PixelStart", x, y, z, mip), typeof(System.Int32));
		}

		public static System.Int32 MipmapLevels(in int3 size, List<int3> sizes)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), "MipmapLevels", size, sizes), typeof(System.Int32));
		}

		public static int3 AlignSize(in int3 size, TextureFormat format)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), "AlignSize", size, format), typeof(int3));
		}

		public Bitmap3D ConvertTo(TextureFormat format)
		{
			return (Bitmap3D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ConvertTo", format), typeof(Bitmap3D));
		}

		public void ForEachPixelUVW(Func<float3, color> filter)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ForEachPixelUVW", filter);
		}

		public void Encode(Stream stream)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Encode", stream);
		}

		private static Bitmap3D Decode(Stream stream)
		{
			return (Bitmap3D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), "Decode", stream), typeof(Bitmap3D));
		}

		public void Save(System.String file)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Save", file);
		}

		public static Bitmap3D Load(System.String file)
		{
			return (Bitmap3D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), "Load", file), typeof(Bitmap3D));
		}

		public static Bitmap3D LoadFromCUBE(System.String file)
		{
			return (Bitmap3D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), "LoadFromCUBE", file), typeof(Bitmap3D));
		}

		public void SaveToCUBE(System.String file, System.String title = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SaveToCUBE", file, title);
		}

		public static Bitmap3D CreateFromSlices(List<string> paths, TextureFormat format, TextureSize sizehandling)
		{
			return (Bitmap3D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), "CreateFromSlices", paths, format, sizehandling), typeof(Bitmap3D));
		}

		public static Bitmap3D CreateFromSlices(List<Bitmap2D> slices, TextureFormat format, TextureSize sizehandling)
		{
			return (Bitmap3D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), "CreateFromSlices", slices, format, sizehandling), typeof(Bitmap3D));
		}

		private static Bitmap3D CreateFromSlices(SliceAccessor slices, TextureFormat format, TextureSize sizeHandling)
		{
			return (Bitmap3D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), "CreateFromSlices", slices, format, sizeHandling), typeof(Bitmap3D));
		}

		public void FillFromSlices(List<Bitmap2D> slices, System.Boolean scale)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillFromSlices", slices, scale);
		}

		public void FillFromSlices(List<string> paths, System.Boolean scale)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillFromSlices", paths, scale);
		}

		private void FillFromSlices(SliceAccessor slices, System.Boolean scale)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillFromSlices", slices, scale);
		}

		private static color SampleSlices(SliceAccessor slices, float3 uvw)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Bitmap3D", ResoniteBridge.ResoniteBridgeValueType.Type), "SampleSlices", slices, uvw), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Bitmap3D(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public Bitmap3D()
		{
		}
	}
	public struct MipMapBuffer : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public int2 size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "size"), typeof(int2)) is int2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "size", value);
			}
		}

		public System.Int32 face
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "face"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "face", value);
			}
		}

		public Memory<byte> buffer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "buffer"), typeof(Memory<byte>)) is Memory<byte> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Memory<byte>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "buffer", value);
			}
		}

		public MipMapBuffer(int2 size, System.Int32 face, Memory<byte> buffer)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MipMapBuffer", ResoniteBridge.ResoniteBridgeValueType.Type), size, face, buffer);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MipMapBuffer(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MipMapBuffer()
		{
		}
	}
	public static class BitmapBlockCompression
	{
		public static System.Boolean SupportsBlockCompression(TextureFormat targetFormat)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapBlockCompression", ResoniteBridge.ResoniteBridgeValueType.Type), "SupportsBlockCompression", targetFormat), typeof(System.Boolean));
		}

		public static System.Boolean NeedsToConvertForBlockCompression(ref TextureFormat sourceFormat, TextureFormat targetFormat)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapBlockCompression", ResoniteBridge.ResoniteBridgeValueType.Type), "NeedsToConvertForBlockCompression", sourceFormat, targetFormat), typeof(System.Boolean));
		}

		public unsafe static void BlockCompress(List<MipMapBuffer> sourceBuffers, List<MipMapBuffer> targetBuffers, TextureFormat sourceFormat, TextureFormat targetFormat, System.Single quality = 0.5f, System.Int32 maxThreads = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapBlockCompression", ResoniteBridge.ResoniteBridgeValueType.Type), "BlockCompress", sourceBuffers, targetBuffers, sourceFormat, targetFormat, quality, maxThreads);
		}

		private static ResoniteBridge.ResoniteBridgeValue ToCompressonator(TextureFormat format)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapBlockCompression", ResoniteBridge.ResoniteBridgeValueType.Type), "ToCompressonator", format), typeof(ResoniteBridge.ResoniteBridgeValue));
		}
	}
	public class BitmapCube : Bitmap2DBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public enum Face
		{
			PosX,
			NegX,
			PosY,
			NegY,
			PosZ,
			NegZ
		}

		public System.Int32 CUBEMAP_BINARY_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CUBEMAP_BINARY_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CUBEMAP_BINARY_VERSION", value);
			}
		}

		public System.String MAGIC_STRING
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAGIC_STRING"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAGIC_STRING", value);
			}
		}

		public override System.Int32 ElementCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ElementCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public color this[System.Int32 x, System.Int32 y, Face face]
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Item"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Item", value);
			}
		}

		public color this[int2 point, Face face] => this[point.x, point.y, face];

		public BitmapCube(byte[] data, System.Int32 width, System.Int32 height, TextureFormat format, System.Boolean mipmaps, ColorProfile profile, System.String originalFormat = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapCube", ResoniteBridge.ResoniteBridgeValueType.Type), data, width, height, format, mipmaps, profile, originalFormat);
		}

		public BitmapCube(System.Int32 width, System.Int32 height, TextureFormat format, System.Boolean mipmaps, ColorProfile profile, System.String originalFormat = null)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapCube", ResoniteBridge.ResoniteBridgeValueType.Type), width, height, format, mipmaps, profile, originalFormat);
		}

		public BitmapCube(Bitmap2D posX, Bitmap2D negX, Bitmap2D posY, Bitmap2D negY, Bitmap2D posZ, Bitmap2D negZ)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapCube", ResoniteBridge.ResoniteBridgeValueType.Type), posX, negX, posY, negY, posZ, negZ);
		}

		protected override System.Int32 InitMipmapLevels()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitMipmapLevels"), typeof(System.Int32));
		}

		public override System.Int32 MipmapOrigin(System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipmapOrigin", mip), typeof(System.Int32));
		}

		public System.Int32 FaceByteOrigin(Face face)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FaceByteOrigin", face), typeof(System.Int32));
		}

		public System.Int32 FaceStart(Face face)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FaceStart", face), typeof(System.Int32));
		}

		public System.Int32 PixelStart(System.Int32 x, System.Int32 y, Face face, System.Int32 mip)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "PixelStart", x, y, face, mip), typeof(System.Int32));
		}

		public System.Int32 MipmapByteOrigin(System.Int32 mip, Face face)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipmapByteOrigin", mip, face), typeof(System.Int32));
		}

		public System.Int32 MipmapTotalBytes(System.Int32 mip, Face face)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "MipmapTotalBytes", mip, face), typeof(System.Int32));
		}

		public void GetMipMapBuffers(List<Memory<byte>> mipbuffers)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetMipMapBuffers", mipbuffers);
		}

		public void GetMipMapBuffers(List<MipMapBuffer> mipbuffers)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetMipMapBuffers", mipbuffers);
		}

		public color GetPixel(System.Int32 x, System.Int32 y, Face face, System.Int32 mipLevel = 0)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixel", x, y, face, mipLevel), typeof(color));
		}

		public color32 GetPixel32(System.Int32 x, System.Int32 y, Face face, System.Int32 mipLevel = 0)
		{
			return (color32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetPixel32", x, y, face, mipLevel), typeof(color32));
		}

		public void SetPixel(System.Int32 x, System.Int32 y, Face face, color color, System.Int32 mipLevel = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPixel", x, y, face, color, mipLevel);
		}

		public void SetPixel32(System.Int32 x, System.Int32 y, Face face, color32 color, System.Int32 mipLevel = 0)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "SetPixel32", x, y, face, color, mipLevel);
		}

		public static System.Int32 MipmapLevels(int2 size, List<int2> sizes)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapCube", ResoniteBridge.ResoniteBridgeValueType.Type), "MipmapLevels", size, sizes), typeof(System.Int32));
		}

		public static System.Int32 ComputeTotalPixels(int2 size, System.Boolean mipmaps)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapCube", ResoniteBridge.ResoniteBridgeValueType.Type), "ComputeTotalPixels", size, mipmaps), typeof(System.Int32));
		}

		public BitmapCube ExtractMipMap(System.Int32 mip, System.Boolean includeChildMips)
		{
			return (BitmapCube)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ExtractMipMap", mip, includeChildMips), typeof(BitmapCube));
		}

		public BitmapCube ConvertTo(TextureFormat format)
		{
			return (BitmapCube)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ConvertTo", format), typeof(BitmapCube));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public Bitmap2D GetFaceAsBitmap2D(Face face, System.Boolean mipmaps = true)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetFaceAsBitmap2D", face, mipmaps), typeof(Bitmap2D));
		}

		public void FillFrom(Bitmap2D bitmap, Face face, System.Boolean mipmaps = true)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillFrom", bitmap, face, mipmaps);
		}

		public void FillFrom(Bitmap2D bitmap, Face face, System.Int32 miplevel)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "FillFrom", bitmap, face, miplevel);
		}

		public void Save(System.String file, RawBitmapEncoding encoding = RawBitmapEncoding.LZMA)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Save", file, encoding);
		}

		public static BitmapCube Load(System.String file)
		{
			return (BitmapCube)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapCube", ResoniteBridge.ResoniteBridgeValueType.Type), "Load", file), typeof(BitmapCube));
		}

		public void Encode(Stream stream, RawBitmapEncoding encoding = RawBitmapEncoding.LZMA)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Encode", stream, encoding);
		}

		public static BitmapCube Decode(Stream stream)
		{
			return (BitmapCube)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapCube", ResoniteBridge.ResoniteBridgeValueType.Type), "Decode", stream), typeof(BitmapCube));
		}

		public static System.Boolean SupportsBlockCompression(TextureFormat targetFormat)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapCube", ResoniteBridge.ResoniteBridgeValueType.Type), "SupportsBlockCompression", targetFormat), typeof(System.Boolean));
		}

		public BitmapCube BlockCompress(TextureFormat targetFormat, System.Single quality = 0.5f, System.Int32 maxThreads = 0)
		{
			return (BitmapCube)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "BlockCompress", targetFormat, quality, maxThreads), typeof(BitmapCube));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BitmapCube(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BitmapCube()
		{
		}
	}
	public static class BitmapQRCodeGenerator
	{
		public static Bitmap2D Generate(System.String payload, QRCodeGenerator.ECCLevel eccLevel = QRCodeGenerator.ECCLevel.Q, TextureFormat format = TextureFormat.RGBA32, color? trueColor = null, color? falseColor = null)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapQRCodeGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "Generate", payload, eccLevel, format, trueColor, falseColor), typeof(Bitmap2D));
		}

		public static void Generate(ref Bitmap2D bitmap, System.String payload, QRCodeGenerator.ECCLevel eccLevel = QRCodeGenerator.ECCLevel.Q, TextureFormat format = TextureFormat.RGBA32, color? trueColor = null, color? falseColor = null)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapQRCodeGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "Generate", bitmap, payload, eccLevel, format, trueColor, falseColor);
		}
	}
	[StructLayout(LayoutKind.Sequential, Size = 1)]
	public struct MP_Header : ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MP_Header(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MP_Header()
		{
		}
	}
	public static class DocumentRasterizer
	{
	}
	public class TextureSizeException : Exception, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public int2 Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Size"), typeof(int2)) is int2 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int2");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Size", value);
			}
		}

		public System.Int32 MaxPixels
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MaxPixels"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MaxPixels", value);
			}
		}

		public override System.String Message
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Message"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public TextureSizeException(int2 size, System.Int32 maxPixels)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureSizeException", ResoniteBridge.ResoniteBridgeValueType.Type), size, maxPixels);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TextureSizeException(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TextureSizeException()
		{
		}
	}
	internal class SliceAccessor : ResoniteBridge.ResoniteBridgeValueHolder
	{
		private List<string> paths
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "paths"), typeof(List<string>)) is List<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "paths", value);
			}
		}

		private List<Bitmap2D> slices
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "slices"), typeof(List<Bitmap2D>)) is List<Bitmap2D> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<Bitmap2D>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "slices", value);
			}
		}

		private System.Int32 slice0layer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "slice0layer"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "slice0layer", value);
			}
		}

		private System.Int32 slice1layer
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "slice1layer"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "slice1layer", value);
			}
		}

		public System.Int32 Count
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Count"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public SliceAccessor(List<string> paths)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SliceAccessor", ResoniteBridge.ResoniteBridgeValueType.Type), paths);
		}

		public SliceAccessor(List<Bitmap2D> slices)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "SliceAccessor", ResoniteBridge.ResoniteBridgeValueType.Type), slices);
		}

		public Bitmap2D GetSlice(System.Int32 layer)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetSlice", layer), typeof(Bitmap2D));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public SliceAccessor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public SliceAccessor()
		{
		}
	}
	public interface IPixel : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}
	}
	public struct PixelABGR1555 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt16 data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelABGR1555(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelABGR1555()
		{
		}
	}
	public struct PixelAlpha8 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Byte a
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "a"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "a", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelAlpha8(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelAlpha8()
		{
		}
	}
	public struct PixelARGB1555 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt16 data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelARGB1555(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelARGB1555()
		{
		}
	}
	public struct PixelARGB32 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Byte a
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "a"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "a", value);
			}
		}

		public System.Byte r
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "r"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "r", value);
			}
		}

		public System.Byte g
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "g"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "g", value);
			}
		}

		public System.Byte b
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "b"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "b", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelARGB32(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelARGB32()
		{
		}
	}
	public struct PixelBGR24 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Byte b
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "b"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "b", value);
			}
		}

		public System.Byte g
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "g"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "g", value);
			}
		}

		public System.Byte r
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "r"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "r", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelBGR24(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelBGR24()
		{
		}
	}
	public struct PixelBGR555 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt16 data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelBGR555(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelBGR555()
		{
		}
	}
	public struct PixelBGR565 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt16 data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelBGR565(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelBGR565()
		{
		}
	}
	public struct PixelBGRA32 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Byte b
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "b"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "b", value);
			}
		}

		public System.Byte g
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "g"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "g", value);
			}
		}

		public System.Byte r
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "r"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "r", value);
			}
		}

		public System.Byte a
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "a"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "a", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelBGRA32(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelBGRA32()
		{
		}
	}
	public struct PixelBGRA4444 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Byte bg
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "bg"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "bg", value);
			}
		}

		public System.Byte ra
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ra"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ra", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelBGRA4444(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelBGRA4444()
		{
		}
	}
	public struct PixelGR32 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt16 g
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "g"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "g", value);
			}
		}

		public System.UInt16 r
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "r"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "r", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelGR32(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelGR32()
		{
		}
	}
	public static class PixelHelper
	{
		public static System.Single USHORT_MUL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "USHORT_MUL"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "USHORT_MUL", value);
			}
		}

		public static System.Single BYTE_MUL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "BYTE_MUL"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "BYTE_MUL", value);
			}
		}

		public static System.Single BIT6_MUL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "BIT6_MUL"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "BIT6_MUL", value);
			}
		}

		public static System.Single BIT5_MUL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "BIT5_MUL"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "BIT5_MUL", value);
			}
		}

		public static System.Single BIT4_MUL
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "BIT4_MUL"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "BIT4_MUL", value);
			}
		}

		public static color ToColor<P>(this P pixel) where P : IPixel
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "ToColor", pixel), typeof(color));
		}

		public static System.UInt16 ToUshort(System.Single value)
		{
			return (System.UInt16)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "ToUshort", value), typeof(System.UInt16));
		}

		public static System.Byte ToByte(System.Single value)
		{
			return (System.Byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "ToByte", value), typeof(System.Byte));
		}

		public static System.Byte To4Bits(System.Single value)
		{
			return (System.Byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "To4Bits", value), typeof(System.Byte));
		}

		public static System.Byte To5Bits(System.Single value)
		{
			return (System.Byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "To5Bits", value), typeof(System.Byte));
		}

		public static System.Byte To6Bits(System.Single value)
		{
			return (System.Byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "To6Bits", value), typeof(System.Byte));
		}

		public static System.UInt16 ToHalf(System.Single value)
		{
			return (System.UInt16)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "ToHalf", value), typeof(System.UInt16));
		}

		public static System.Single FromUshort(System.UInt16 value)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "FromUshort", value), typeof(System.Single));
		}

		public static System.Single FromByte(System.Byte value)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "FromByte", value), typeof(System.Single));
		}

		public static System.Single From6Bits(System.Byte value)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "From6Bits", value), typeof(System.Single));
		}

		public static System.Single From5Bits(System.Byte value)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "From5Bits", value), typeof(System.Single));
		}

		public static System.Single From4Bits(System.Byte value)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "PixelHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "From4Bits", value), typeof(System.Single));
		}
	}
	public struct PixelRA16 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Byte r
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "r"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "r", value);
			}
		}

		public System.Byte a
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "a"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "a", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelRA16(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelRA16()
		{
		}
	}
	public struct PixelRG32 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt16 r
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "r"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "r", value);
			}
		}

		public System.UInt16 g
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "g"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "g", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelRG32(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelRG32()
		{
		}
	}
	public struct PixelRGB24 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Byte r
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "r"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "r", value);
			}
		}

		public System.Byte g
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "g"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "g", value);
			}
		}

		public System.Byte b
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "b"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "b", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelRGB24(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelRGB24()
		{
		}
	}
	public struct PixelRGB555 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt16 data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelRGB555(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelRGB555()
		{
		}
	}
	public struct PixelRGB565 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt16 data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelRGB565(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelRGB565()
		{
		}
	}
	public struct PixelRGBA32 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Byte r
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "r"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "r", value);
			}
		}

		public System.Byte g
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "g"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "g", value);
			}
		}

		public System.Byte b
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "b"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "b", value);
			}
		}

		public System.Byte a
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "a"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "a", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelRGBA32(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelRGBA32()
		{
		}
	}
	public struct PixelRGBA4444 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Byte rg
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "rg"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "rg", value);
			}
		}

		public System.Byte ba
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "ba"), typeof(System.Byte)) is System.Byte __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to byte");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "ba", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelRGBA4444(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelRGBA4444()
		{
		}
	}
	public struct PixelRGBA5551 : IPixel, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.UInt16 data
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "data"), typeof(System.UInt16)) is System.UInt16 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ushort");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "data", value);
			}
		}

		public System.Int32 BitsR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsR"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsG
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsG"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsB
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsB"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Int32 BitsA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsA"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public System.Boolean SupportsHDR
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SupportsHDR"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Single R
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "R"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "R", value);
			}
		}

		public System.Single G
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "G"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "G", value);
			}
		}

		public System.Single B
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "B"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "B", value);
			}
		}

		public System.Single A
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "A"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "A", value);
			}
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public PixelRGBA5551(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public PixelRGBA5551()
		{
		}
	}
	[DataModelType]
	public enum AlphaHandling
	{
		KeepOriginal,
		ForceRGB,
		ForceRGBA
	}
	public class TextureDecoder : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 MAX_PIXELS
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAX_PIXELS"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAX_PIXELS", value);
			}
		}

		public System.Single GAMMA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "GAMMA"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "GAMMA", value);
			}
		}

		public System.Single INV_GAMMA
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "INV_GAMMA"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "INV_GAMMA", value);
			}
		}

		public System.Int32 MIN_DOWNSCALE_SIZE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MIN_DOWNSCALE_SIZE"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MIN_DOWNSCALE_SIZE", value);
			}
		}

		public static Bitmap2D ERRORTEXTURE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ERRORTEXTURE"), typeof(Bitmap2D)) is Bitmap2D __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Bitmap2D");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ERRORTEXTURE", value);
			}
		}

		public static Bitmap3D ERRORTEXTURE3D
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ERRORTEXTURE3D"), typeof(Bitmap3D)) is Bitmap3D __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Bitmap3D");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ERRORTEXTURE3D", value);
			}
		}

		private static Dictionary<string, ResoniteBridge.ResoniteBridgeValue> extensions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "extensions"), typeof(Dictionary<string, ResoniteBridge.ResoniteBridgeValue>)) is Dictionary<string, ResoniteBridge.ResoniteBridgeValue> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Dictionary<string, FREE_IMAGE_FORMAT>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "extensions", value);
			}
		}

		public static IEnumerable<string> SupportedExtensions
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "SupportedExtensions"), typeof(IEnumerable<string>)) is IEnumerable<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IEnumerable<string>");
				}
			}
		}

		public static event Action<string> OnErrorMessage;

		static TextureDecoder()
		{
		}

		public static Bitmap2D GenerateErrorTexture(System.Int32 width, System.Int32 height, TextureFormat format)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateErrorTexture", width, height, format), typeof(Bitmap2D));
		}

		public static Bitmap3D GenerateErrorTexture(System.Int32 width, System.Int32 height, System.Int32 depth, TextureFormat format)
		{
			return (Bitmap3D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateErrorTexture", width, height, depth, format), typeof(Bitmap3D));
		}

		public static void FillErrorTexture(Bitmap2D bitmap)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "FillErrorTexture", bitmap);
		}

		public static void FillErrorTexture(BitmapCube cube)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "FillErrorTexture", cube);
		}

		public static void FillErrorTexture(Bitmap3D bitmap)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "FillErrorTexture", bitmap);
		}

		public static void PrintInitInfo()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "PrintInitInfo");
		}

		private static void FreeImageEngine_Message(ResoniteBridge.ResoniteBridgeValue fif, System.String message)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "FreeImageEngine_Message", fif, message);
		}

		public static ResoniteBridge.ResoniteBridgeValue DetectFormat(System.String extension)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "DetectFormat", extension), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static void DibLoaded(ResoniteBridge.ResoniteBridgeValue dib)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "DibLoaded", dib);
		}

		public static void UnloadDib(ResoniteBridge.ResoniteBridgeValue dib)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "UnloadDib", dib);
		}

		public static Bitmap2D FromDDS(Stream stream, bool? generateMipMaps)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "FromDDS", stream, generateMipMaps), typeof(Bitmap2D));
		}

		public static void ConvertDDSData(ResoniteBridge.ResoniteBridgeValue dds, ResoniteBridge.ResoniteBridgeValue data, System.Int32 mip, Bitmap2D bitmap)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertDDSData", dds, data, mip, bitmap);
		}

		public static void ConvertImageData<P>(ResoniteBridge.ResoniteBridgeValue data, int2 mipSize, System.Int32 mip, Bitmap2D bitmap) where P : struct, IPixel
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertImageData", data, mipSize, mip, bitmap);
		}

		public static TextureFormat GetFormat(ResoniteBridge.ResoniteBridgeValue format)
		{
			return (TextureFormat)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "GetFormat", format), typeof(TextureFormat));
		}

		public static Bitmap2D FromFreeImage(ref ResoniteBridge.ResoniteBridgeValue dib, System.Boolean generateMipMaps, AlphaHandling alphaHandling, System.Int32 maxSize = int.MaxValue, System.Single sizeRatio = 1f, System.String originalFormat = null)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "FromFreeImage", dib, generateMipMaps, alphaHandling, maxSize, sizeRatio, originalFormat), typeof(Bitmap2D));
		}

		public static Bitmap2D Decode(System.String file, bool? generateMipMaps, AlphaHandling alphaHandling = AlphaHandling.KeepOriginal, System.Int32 maxSize = int.MaxValue, System.Single sizeRatio = 1f)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "Decode", file, generateMipMaps, alphaHandling, maxSize, sizeRatio), typeof(Bitmap2D));
		}

		public static Bitmap2D Decode(Stream fStream, System.String extension, bool? generateMipMaps, AlphaHandling alphaHandling = AlphaHandling.KeepOriginal, System.Int32 maxSize = int.MaxValue, System.Single sizeRatio = 1f)
		{
			return (Bitmap2D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "Decode", fStream, extension, generateMipMaps, alphaHandling, maxSize, sizeRatio), typeof(Bitmap2D));
		}

		public static System.String FreeImageFormatToMIME(ResoniteBridge.ResoniteBridgeValue format)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureDecoder", ResoniteBridge.ResoniteBridgeValueType.Type), "FreeImageFormatToMIME", format), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TextureDecoder(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public static class TextureEncoder
	{
		public static System.Boolean Encode(ResoniteBridge.ResoniteBridgeValue dib, System.String file, System.Int32 quality = 85, System.Boolean preserveColorInAlpha = true)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "Encode", dib, file, quality, preserveColorInAlpha), typeof(System.Boolean));
		}

		public static System.Boolean Encode(ResoniteBridge.ResoniteBridgeValue dib, Stream stream, System.String extension, System.Int32 quality = 85, System.Boolean preserveColorInAlpha = true)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "Encode", dib, stream, extension, quality, preserveColorInAlpha), typeof(System.Boolean));
		}

		public static System.Boolean Encode(byte[] data, System.Int32 width, System.Int32 height, System.Int32 channels, System.String outputFile, System.Int32 quality = 75, System.Boolean preserveColorInAlpha = true)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "Encode", data, width, height, channels, outputFile, quality, preserveColorInAlpha), typeof(System.Boolean));
		}

		public static void ConvertToPNG(System.String inputFile, System.String outputFile, System.Int32 maxSize = -1)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertToPNG", inputFile, outputFile, maxSize);
		}

		public static void ConvertToJPG(System.String inputFile, System.String outputFile, System.Int32 maxSize = -1)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertToJPG", inputFile, outputFile, maxSize);
		}

		public static void ConvertToWEBP(System.String inputFile, System.String outputFile, System.Int32 maxSize = -1, System.Int32 quality = 80)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertToWEBP", inputFile, outputFile, maxSize, quality);
		}

		public static void ConvertToEXR(System.String inputFile, System.String outputFile, System.Int32 maxSize = -1)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertToEXR", inputFile, outputFile, maxSize);
		}

		public static void ConvertToPNG(Stream data, System.String outputFile, System.Int32 maxSize = -1)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertToPNG", data, outputFile, maxSize);
		}

		public static System.Boolean ClearMetadata(System.String inputFile, System.String outputFile)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ClearMetadata", inputFile, outputFile), typeof(System.Boolean));
		}

		public static System.Boolean ClearMetadata(Stream data, System.String outputFile)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ClearMetadata", data, outputFile), typeof(System.Boolean));
		}

		private static System.Boolean ClearMetadata(ResoniteBridge.ResoniteBridgeValue dib)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ClearMetadata", dib), typeof(System.Boolean));
		}

		public static void ConvertToEXR(Stream data, System.String outputFile, System.Int32 maxSize = -1)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertToEXR", data, outputFile, maxSize);
		}

		public static ResoniteBridge.ResoniteBridgeValue EnsureNonHDR(ResoniteBridge.ResoniteBridgeValue dib, System.Boolean unloadOld = true)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "EnsureNonHDR", dib, unloadOld), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue Ensure24BPP(ResoniteBridge.ResoniteBridgeValue dib, System.Boolean unloadOld = true)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "Ensure24BPP", dib, unloadOld), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static ResoniteBridge.ResoniteBridgeValue Rescale(ResoniteBridge.ResoniteBridgeValue dib, System.Int32 maxSize = -1)
		{
			return (ResoniteBridge.ResoniteBridgeValue)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "Rescale", dib, maxSize), typeof(ResoniteBridge.ResoniteBridgeValue));
		}

		public static void ConvertToJPG(Stream data, System.String outputFile, System.Int32 maxSize = -1)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertToJPG", data, outputFile, maxSize);
		}

		public static void ConvertToWEBP(Stream data, System.String outputFile, System.Int32 maxSize = -1, System.Int32 quality = 80)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureEncoder", ResoniteBridge.ResoniteBridgeValueType.Type), "ConvertToWEBP", data, outputFile, maxSize, quality);
		}
	}
	[DataModelType]
	public enum TextureFormat
	{
		Unknown = 0,
		Alpha8 = 1,
		R8 = 2,
		RGB24 = 16,
		ARGB32 = 17,
		RGBA32 = 18,
		BGRA32 = 19,
		RGB565 = 24,
		RGBAHalf = 32,
		ARGBHalf = 33,
		RHalf = 34,
		RGHalf = 35,
		RGBAFloat = 48,
		ARGBFloat = 49,
		RFloat = 50,
		RGFloat = 51,
		BC1 = 64,
		BC2 = 65,
		BC3 = 66,
		BC4 = 67,
		BC5 = 68,
		BC6H = 69,
		BC7 = 70,
		ETC2_RGB = 96,
		ETC2_RGBA1 = 97,
		ETC2_RGBA8 = 98,
		ASTC_4x4 = 128,
		ASTC_5x5 = 129,
		ASTC_6x6 = 130,
		ASTC_8x8 = 131,
		ASTC_10x10 = 132,
		ASTC_12x12 = 133
	}
	public static class TextureFormatExtensions
	{
		public static System.Boolean SupportsRead(this TextureFormat format)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SupportsRead", format), typeof(System.Boolean));
		}

		public static System.Boolean SupportsWrite(this TextureFormat format)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SupportsWrite", format), typeof(System.Boolean));
		}

		public static System.Boolean IsBlockCompressed(this TextureFormat format)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "IsBlockCompressed", format), typeof(System.Boolean));
		}

		public static int2 BlockSize(this TextureFormat format)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "BlockSize", format), typeof(int2));
		}

		public static int3 BlockSize3D(this TextureFormat format)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "BlockSize3D", format), typeof(int3));
		}

		public static System.Boolean IsHDR(this TextureFormat format)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "IsHDR", format), typeof(System.Boolean));
		}

		public static System.Double GetBitsPerPixel(this TextureFormat format)
		{
			return (System.Double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetBitsPerPixel", format), typeof(System.Double));
		}

		public static System.Int32 GetBytesPerPixel(this TextureFormat format)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetBytesPerPixel", format), typeof(System.Int32));
		}

		public static System.Int32 GetBytesPerChannel(this TextureFormat format)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetBytesPerChannel", format), typeof(System.Int32));
		}

		public static System.Int32 GetChannels(this TextureFormat format)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "GetChannels", format), typeof(System.Int32));
		}

		public static System.Boolean SupportsAlpha(this TextureFormat format)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureFormatExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "SupportsAlpha", format), typeof(System.Boolean));
		}
	}
	public enum VersionComparison
	{
		Exact,
		AllowNewer,
		Ignore
	}
	public class ComputedVariantResult : ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.String identifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "identifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "identifier", value);
			}
		}

		public System.String file
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "file"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "file", value);
			}
		}

		public ComputedVariantResult(System.String identifier, System.String file)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ComputedVariantResult", ResoniteBridge.ResoniteBridgeValueType.Type), identifier, file);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ComputedVariantResult(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ComputedVariantResult()
		{
		}
	}
	public enum AssetVariantType
	{
		Texture,
		Cubemap,
		Volume,
		Mesh,
		Shader
	}
	public delegate void VariantGeneratedHandler(ComputedVariantResult result);
	public static class AssetVariantHelper
	{
		public static System.String TempFolder
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetVariantHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TempFolder"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetVariantHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "TempFolder", value);
			}
		}

		public static List<ComputedVariantResult> GenerateVariants(System.String file, IAssetVariantDescriptor variantDescriptor, System.Int32 maxThreads = -1, VariantGeneratedHandler variantGenerated = null, Predicate<string> variantFilter = null)
		{
			return (List<ComputedVariantResult>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetVariantHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateVariants", file, variantDescriptor, maxThreads, variantGenerated, variantFilter), typeof(List<ComputedVariantResult>));
		}

		public static D FromIdentifier<D>(System.String identifier) where D : class, IAssetVariantDescriptor
		{
			return (D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetVariantHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "FromIdentifier", identifier), typeof(D));
		}

		public static AssetVariantType DescriptorToVariantType(Type type)
		{
			return (AssetVariantType)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetVariantHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "DescriptorToVariantType", type), typeof(AssetVariantType));
		}

		public static IAssetVariantDescriptor FromIdentifier(Type type, System.String identifier)
		{
			return (IAssetVariantDescriptor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetVariantHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "FromIdentifier", type, identifier), typeof(IAssetVariantDescriptor));
		}

		public static IAssetVariantDescriptor FromIdentifier(AssetVariantType type, System.String identifier)
		{
			return (IAssetVariantDescriptor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetVariantHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "FromIdentifier", type, identifier), typeof(IAssetVariantDescriptor));
		}

		public static System.Boolean VersionEquals(IAssetVariantDescriptor a, IAssetVariantDescriptor b, VersionComparison versionComparison)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetVariantHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "VersionEquals", a, b, versionComparison), typeof(System.Boolean));
		}
	}
	public class CubemapVariantDescriptor : TextureVariantDescriptor<CubemapVariantDescriptor, CubemapMetadata>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private delegate void ChainSegmentGenerator(System.Int32 size, System.Boolean mips);

		public System.Int32 CURRENT_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CURRENT_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CURRENT_VERSION", value);
			}
		}

		[JsonProperty(PropertyName = "size")]
		[JsonPropertyName("size")]
		public System.Int32 Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Size"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Size", value);
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public System.Int32 MipMapCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MipMapCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		public override System.String ValidationError
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValidationError"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public override System.String VariantIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public override System.String ValidateCloudVariant(CubemapMetadata metadata)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ValidateCloudVariant", metadata), typeof(System.String));
		}

		public override System.Boolean IsPotentialAlternative(CubemapVariantDescriptor other, TextureCompression? requireCompression)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IsPotentialAlternative", other, requireCompression), typeof(System.Boolean));
		}

		public CubemapVariantDescriptor()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CubemapVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public CubemapVariantDescriptor(TextureCompression compression, System.Int32 compressionQuality, System.Int32 size, System.Boolean mipmaps, ColorPreprocess colorPreprocess, AlphaPreprocess alphaPreprocess, System.Int32 version = 1)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CubemapVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), compression, compressionQuality, size, mipmaps, colorPreprocess, alphaPreprocess, version);
		}

		private System.String GenerateVariantIdentifier(System.Int32 size, System.Boolean mips)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateVariantIdentifier", size, mips), typeof(System.String));
		}

		public override void EnsureCurrentVersion()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureCurrentVersion");
		}

		public static CubemapVariantDescriptor FromIdentifier(System.String identifier)
		{
			return (CubemapVariantDescriptor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CubemapVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "FromIdentifier", identifier), typeof(CubemapVariantDescriptor));
		}

		public override System.Boolean Equals(CubemapVariantDescriptor other, VersionComparison versionComparison)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other, versionComparison), typeof(System.Boolean));
		}

		public override System.Boolean Equals(System.Object obj)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", obj), typeof(System.Boolean));
		}

		public static bool operator ==(CubemapVariantDescriptor left, CubemapVariantDescriptor right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CubemapVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Equality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public static bool operator !=(CubemapVariantDescriptor left, CubemapVariantDescriptor right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CubemapVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Inequality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public override System.Int32 GetHashCode()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
		}

		public override List<CubemapVariantDescriptor> GenerateCloudChain()
		{
			return (List<CubemapVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateCloudChain"), typeof(List<CubemapVariantDescriptor>));
		}

		public override void GenerateLoadChain(List<string> chain)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateLoadChain", chain);
		}

		private void GenerateChain(ChainSegmentGenerator onGeneratedSegment)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateChain", onGeneratedSegment);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CubemapVariantDescriptor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public enum MeshDataType
	{
		Mesh,
		MeshCollider,
		DualSidedMeshCollider,
		ConvexHullCollider
	}
	public enum MeshCompression
	{
		None,
		LZ4,
		LZMA
	}
	public class MeshVariantDescriptor : IAssetVariantDescriptor<MeshVariantDescriptor, MeshMetadata>, IAssetVariantDescriptor, IEquatable<MeshVariantDescriptor>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 CURRENT_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CURRENT_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CURRENT_VERSION", value);
			}
		}

		public System.Boolean OriginalAsset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OriginalAsset"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Boolean IsValid
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsValid"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.String ValidationError
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValidationError"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public System.String VariantIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		[JsonProperty(PropertyName = "variantVersion")]
		[JsonPropertyName("variantVersion")]
		public System.Int32 VariantVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VariantVersion", value);
			}
		}

		[JsonProperty(PropertyName = "dataType")]
		[JsonPropertyName("dataType")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public MeshDataType? DataType
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "DataType"), typeof(MeshDataType)) is MeshDataType __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshDataType");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "DataType", value);
			}
		}

		[JsonProperty(PropertyName = "compression")]
		[JsonPropertyName("compression")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public MeshCompression Compression
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Compression"), typeof(MeshCompression)) is MeshCompression __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to MeshCompression");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Compression", value);
			}
		}

		public MeshVariantDescriptor(MeshDataType? dataType, MeshCompression compression, System.Int32 version = 2)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), dataType, compression, version);
		}

		public static MeshVariantDescriptor FromIdentifier(System.String query)
		{
			return (MeshVariantDescriptor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "FromIdentifier", query), typeof(MeshVariantDescriptor));
		}

		public void EnsureCurrentVersion()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureCurrentVersion");
		}

		public System.Boolean Equals(MeshVariantDescriptor other, VersionComparison versionComparison)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other, versionComparison), typeof(System.Boolean));
		}

		public System.Boolean Equals(MeshVariantDescriptor other)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other), typeof(System.Boolean));
		}

		public List<IAssetVariantDescriptor> GenerateCloudChainNonGeneric()
		{
			return (List<IAssetVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateCloudChainNonGeneric"), typeof(List<IAssetVariantDescriptor>));
		}

		public List<MeshVariantDescriptor> GenerateCloudChain()
		{
			return (List<MeshVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateCloudChain"), typeof(List<MeshVariantDescriptor>));
		}

		public void GenerateLoadChain(List<string> chain)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateLoadChain", chain);
		}

		public List<MeshVariantDescriptor> GetBestAlternateChain(List<MeshVariantDescriptor> availableDescriptors, Predicate<MeshVariantDescriptor> variantFilter = null)
		{
			return (List<MeshVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBestAlternateChain", availableDescriptors, variantFilter), typeof(List<MeshVariantDescriptor>));
		}

		public System.String ValidateCloudVariant(MeshMetadata metadata)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ValidateCloudVariant", metadata), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MeshVariantDescriptor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MeshVariantDescriptor()
		{
		}
	}
	public enum ShaderTargetPlatform
	{
		WindowsDX11,
		LinuxOpenGL,
		AndroidOpenGL
	}
	public static class ShaderTargetPlatformHelper
	{
		public static System.String PackageName(this ShaderTargetPlatform targetPlatform)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderTargetPlatformHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "PackageName", targetPlatform), typeof(System.String));
		}
	}
	public class ShaderVariantDescriptor : IAssetVariantDescriptor<ShaderVariantDescriptor, ShaderMetadata>, IAssetVariantDescriptor, IEquatable<ShaderVariantDescriptor>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 CURRENT_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CURRENT_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CURRENT_VERSION", value);
			}
		}

		public System.Boolean OriginalAsset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OriginalAsset"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		[JsonProperty(PropertyName = "variantVersion")]
		[JsonPropertyName("variantVersion")]
		public System.Int32 VariantVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VariantVersion", value);
			}
		}

		[JsonProperty(PropertyName = "variantIndex")]
		[JsonPropertyName("variantIndex")]
		public System.UInt32 VariantIndex
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantIndex"), typeof(System.UInt32)) is System.UInt32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to uint");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VariantIndex", value);
			}
		}

		[JsonProperty(PropertyName = "targetPlatform")]
		[JsonPropertyName("targetPlatform")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public ShaderTargetPlatform TargetPlatform
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TargetPlatform"), typeof(ShaderTargetPlatform)) is ShaderTargetPlatform __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ShaderTargetPlatform");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "TargetPlatform", value);
			}
		}

		public System.Boolean IsValid
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsValid"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.String ValidationError
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValidationError"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public System.String VariantIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public ShaderVariantDescriptor(System.UInt32 variantIndex, ShaderTargetPlatform targetPlatform)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), variantIndex, targetPlatform);
		}

		public void EnsureCurrentVersion()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureCurrentVersion");
		}

		public static ShaderVariantDescriptor FromIdentifier(System.String query)
		{
			return (ShaderVariantDescriptor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "FromIdentifier", query), typeof(ShaderVariantDescriptor));
		}

		public System.Boolean Equals(ShaderVariantDescriptor other, VersionComparison versionComparison)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other, versionComparison), typeof(System.Boolean));
		}

		public System.Boolean Equals(ShaderVariantDescriptor other)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other), typeof(System.Boolean));
		}

		public List<IAssetVariantDescriptor> GenerateCloudChainNonGeneric()
		{
			return (List<IAssetVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateCloudChainNonGeneric"), typeof(List<IAssetVariantDescriptor>));
		}

		public List<ShaderVariantDescriptor> GenerateCloudChain()
		{
			return (List<ShaderVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateCloudChain"), typeof(List<ShaderVariantDescriptor>));
		}

		public void GenerateLoadChain(List<string> chain)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateLoadChain", chain);
		}

		public List<ShaderVariantDescriptor> GetBestAlternateChain(List<ShaderVariantDescriptor> availableDescriptors, Predicate<ShaderVariantDescriptor> variantFilter = null)
		{
			return (List<ShaderVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBestAlternateChain", availableDescriptors, variantFilter), typeof(List<ShaderVariantDescriptor>));
		}

		public System.String ValidateCloudVariant(ShaderMetadata metadata)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ValidateCloudVariant", metadata), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ShaderVariantDescriptor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ShaderVariantDescriptor()
		{
		}
	}
	public class Texture2DVariantDescriptor : TextureVariantDescriptor<Texture2DVariantDescriptor, BitmapMetadata>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private delegate void ChainSegmentGenerator(System.Int32 width, System.Int32 height, System.Boolean mips);

		public System.Int32 CURRENT_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CURRENT_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CURRENT_VERSION", value);
			}
		}

		[JsonProperty(PropertyName = "width")]
		[JsonPropertyName("width")]
		public System.Int32 Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Width"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Width", value);
			}
		}

		[JsonProperty(PropertyName = "height")]
		[JsonPropertyName("height")]
		public System.Int32 Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Height"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Height", value);
			}
		}

		[JsonProperty(PropertyName = "mipMapFiltering")]
		[JsonPropertyName("mipMapFiltering")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public Filtering? Filtering
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Filtering"), typeof(Filtering)) is Filtering __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Filtering");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Filtering", value);
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public System.Int32 MipMapCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MipMapCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public override System.String ValidationError
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValidationError"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public override System.String VariantIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public override System.String ValidateCloudVariant(BitmapMetadata metadata)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ValidateCloudVariant", metadata), typeof(System.String));
		}

		public System.Boolean IsValidCloudSize(BitmapMetadata metadata)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IsValidCloudSize", metadata), typeof(System.Boolean));
		}

		public Texture2DVariantDescriptor()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture2DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public Texture2DVariantDescriptor(TextureCompression compression, System.Int32 compressionQuality, System.Int32 width, System.Int32 height, System.Boolean mipMaps, Filtering? filtering, ColorPreprocess colorPreprocess, AlphaPreprocess alphaPreprocess, System.Int32 version = 3)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture2DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), compression, compressionQuality, width, height, mipMaps, filtering, colorPreprocess, alphaPreprocess, version);
		}

		public override void EnsureCurrentVersion()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureCurrentVersion");
		}

		public static Texture2DVariantDescriptor FromIdentifier(System.String identifier)
		{
			return (Texture2DVariantDescriptor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture2DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "FromIdentifier", identifier), typeof(Texture2DVariantDescriptor));
		}

		private System.String GenerateVariantIdentifier(System.Int32 width, System.Int32 height, System.Boolean mips)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateVariantIdentifier", width, height, mips), typeof(System.String));
		}

		public override System.Boolean Equals(System.Object obj)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", obj), typeof(System.Boolean));
		}

		public override System.Boolean Equals(Texture2DVariantDescriptor other, VersionComparison versionComparison)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other, versionComparison), typeof(System.Boolean));
		}

		public override System.Int32 GetHashCode()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public static bool operator ==(Texture2DVariantDescriptor left, Texture2DVariantDescriptor right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture2DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Equality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public static bool operator !=(Texture2DVariantDescriptor left, Texture2DVariantDescriptor right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture2DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Inequality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public override void GenerateLoadChain(List<string> chain)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateLoadChain", chain);
		}

		public override System.Single GetAlternativeScore(Texture2DVariantDescriptor other)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetAlternativeScore", other), typeof(System.Single));
		}

		public override List<Texture2DVariantDescriptor> GenerateCloudChain()
		{
			return (List<Texture2DVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateCloudChain"), typeof(List<Texture2DVariantDescriptor>));
		}

		private void GenerateChain(ChainSegmentGenerator onGeneratedSegment)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateChain", onGeneratedSegment);
		}

		public override System.Boolean IsPotentialAlternative(Texture2DVariantDescriptor other, TextureCompression? requireCompression = null)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IsPotentialAlternative", other, requireCompression), typeof(System.Boolean));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Texture2DVariantDescriptor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class Texture3DVariantDescriptor : TextureVariantDescriptor<Texture3DVariantDescriptor, VolumeMetadata>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private delegate void ChainSegmentGenerator(System.Int32 width, System.Int32 height, System.Int32 depth, System.Boolean mips);

		public System.Int32 CURRENT_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CURRENT_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CURRENT_VERSION", value);
			}
		}

		[JsonProperty(PropertyName = "width")]
		[JsonPropertyName("width")]
		public System.Int32 Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Width"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Width", value);
			}
		}

		[JsonProperty(PropertyName = "height")]
		[JsonPropertyName("height")]
		public System.Int32 Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Height"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Height", value);
			}
		}

		[JsonProperty(PropertyName = "depth")]
		[JsonPropertyName("depth")]
		public System.Int32 Depth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Depth"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Depth", value);
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public System.Int32 MipMapCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MipMapCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public override System.String ValidationError
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValidationError"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public override System.String VariantIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		public override System.String ValidateCloudVariant(VolumeMetadata metadata)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ValidateCloudVariant", metadata), typeof(System.String));
		}

		public System.Boolean IsValidCloudSize(VolumeMetadata metadata)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IsValidCloudSize", metadata), typeof(System.Boolean));
		}

		public Texture3DVariantDescriptor()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture3DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public Texture3DVariantDescriptor(TextureCompression compression, System.Int32 compressionQuality, System.Int32 width, System.Int32 height, System.Int32 depth, System.Boolean mipMaps, ColorPreprocess colorPreprocess, AlphaPreprocess alphaPreprocess, System.Int32 version = 0)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture3DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), compression, compressionQuality, width, height, depth, mipMaps, colorPreprocess, alphaPreprocess, version);
		}

		public override void EnsureCurrentVersion()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnsureCurrentVersion");
		}

		public static Texture3DVariantDescriptor FromIdentifier(System.String identifier)
		{
			return (Texture3DVariantDescriptor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture3DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "FromIdentifier", identifier), typeof(Texture3DVariantDescriptor));
		}

		private System.String GenerateVariantIdentifier(System.Int32 width, System.Int32 height, System.Int32 depth, System.Boolean mips)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateVariantIdentifier", width, height, depth, mips), typeof(System.String));
		}

		public override System.Boolean Equals(System.Object obj)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", obj), typeof(System.Boolean));
		}

		public override System.Boolean Equals(Texture3DVariantDescriptor other, VersionComparison versionComparison)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other, versionComparison), typeof(System.Boolean));
		}

		public override System.Int32 GetHashCode()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		public static bool operator ==(Texture3DVariantDescriptor left, Texture3DVariantDescriptor right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture3DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Equality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public static bool operator !=(Texture3DVariantDescriptor left, Texture3DVariantDescriptor right)
		{
			if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture3DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "op_Inequality", left, right), typeof(System.Boolean)) is System.Boolean __retCasted)
			{
				return __retCasted;
			}
			else
			{
				throw new InvalidCastException("Cannot cast result to bool");
			}
		}

		public override void GenerateLoadChain(List<string> chain)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateLoadChain", chain);
		}

		public override System.Single GetAlternativeScore(Texture3DVariantDescriptor other)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetAlternativeScore", other), typeof(System.Single));
		}

		public override List<Texture3DVariantDescriptor> GenerateCloudChain()
		{
			return (List<Texture3DVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateCloudChain"), typeof(List<Texture3DVariantDescriptor>));
		}

		private void GenerateChain(ChainSegmentGenerator onGeneratedSegment)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateChain", onGeneratedSegment);
		}

		public override System.Boolean IsPotentialAlternative(Texture3DVariantDescriptor other, TextureCompression? requireCompression = null)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IsPotentialAlternative", other, requireCompression), typeof(System.Boolean));
		}

		public static int3 GetMaxLimitedSize(in int3 originalSize, System.Int32 maxSize = 16384)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture3DVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "GetMaxLimitedSize", originalSize, maxSize), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public Texture3DVariantDescriptor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[DataModelType]
	public enum TextureCompression
	{
		RawRGBA,
		RawRGBAHalf,
		BC1_Crunched,
		BC3_Crunched,
		BC3nm_Crunched,
		BC1_Crunched_Non_Perceptual,
		BC3_Crunched_Non_Perceptual,
		BC1_LZMA,
		BC3_LZMA,
		BC3nm_LZMA,
		BC4_LZMA,
		BC6H_LZMA,
		BC7_LZMA,
		ETC2_RGB_Crunched,
		ETC2_RGBA8_Crunched,
		ETC2_RGB_LZMA,
		ETC2_RGBA8_LZMA,
		ASTC_4x4_LZMA,
		ASTC_5x5_LZMA,
		ASTC_6x6_LZMA,
		ASTC_8x8_LZMA,
		ASTC_10x10_LZMA,
		ASTC_12x12_LZMA
	}
	[DataModelType]
	public enum ColorPreprocess
	{
		None,
		sRGB,
		HDRsRGB,
		LogLUV,
		RGBM
	}
	[DataModelType]
	public enum AlphaPreprocess
	{
		None,
		sRGB,
		LogLUV,
		RGBM
	}
	[DataModelType]
	public enum Filtering
	{
		Bilinear,
		Box,
		Lanczos3
	}
	[DataModelType]
	public enum PowerOfTwoSize
	{
		NonPowerOfTwo,
		Smaller,
		Nearest,
		Larger
	}
	[DataModelType]
	public enum SizeMode
	{
		Maximum,
		Exact
	}
	public static class TextureCompressionExtensions
	{
		public static System.Boolean IsRaw(this TextureCompression compression)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureCompressionExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "IsRaw", compression), typeof(System.Boolean));
		}

		public static System.Boolean IsHDR(this TextureCompression compression)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureCompressionExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "IsHDR", compression), typeof(System.Boolean));
		}

		public static TextureFormat ToFormat(this TextureCompression compression, ImageMetadataBase metadata = null, System.Boolean threeChannelSupported = false, ColorProfile profile = ColorProfile.sRGB)
		{
			return (TextureFormat)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureCompressionExtensions", ResoniteBridge.ResoniteBridgeValueType.Type), "ToFormat", compression, metadata, threeChannelSupported, profile), typeof(TextureFormat));
		}
	}
	public abstract class TextureVariantDescriptor : IAssetVariantDescriptor, ResoniteBridge.ResoniteBridgeValueHolder
	{
		[JsonProperty(PropertyName = "originalAsset")]
		[JsonPropertyName("originalAsset")]
		public System.Boolean OriginalAsset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OriginalAsset"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "OriginalAsset", value);
			}
		}

		[JsonProperty(PropertyName = "variantVersion")]
		[JsonPropertyName("variantVersion")]
		public System.Int32 VariantVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VariantVersion", value);
			}
		}

		public System.Boolean IsValid
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsValid"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public abstract System.String ValidationError { get; }

		public abstract System.String VariantIdentifier { get; }

		public abstract void EnsureCurrentVersion();

		public abstract List<IAssetVariantDescriptor> GenerateCloudChainNonGeneric();

		public abstract void GenerateLoadChain(List<string> chain);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TextureVariantDescriptor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public TextureVariantDescriptor()
		{
		}
	}
	public abstract class TextureVariantDescriptor<D, M> : TextureVariantDescriptor, IAssetVariantDescriptor<D, M>, IAssetVariantDescriptor, IEquatable<D>, ResoniteBridge.ResoniteBridgeValueHolder where D : TextureVariantDescriptor<D, M> where M : ImageMetadataBase
	{
		public System.Int32 CLOUD_MIPS_MAX_PIXELS
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "CLOUD_MIPS_MAX_PIXELS"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "CLOUD_MIPS_MAX_PIXELS", value);
			}
		}

		public System.Int32 MAX_SIZE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAX_SIZE"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAX_SIZE", value);
			}
		}

		[System.Text.Json.Serialization.JsonIgnore]
		public override System.String ValidationError
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValidationError"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		[JsonProperty(PropertyName = "textureCompression")]
		[JsonPropertyName("textureCompression")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public TextureCompression TextureCompression
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TextureCompression"), typeof(TextureCompression)) is TextureCompression __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to TextureCompression");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "TextureCompression", value);
			}
		}

		[JsonProperty(PropertyName = "compressionQuality")]
		[JsonPropertyName("compressionQuality")]
		public System.Int32 CompressionQuality
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "CompressionQuality"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "CompressionQuality", value);
			}
		}

		[JsonProperty(PropertyName = "mipMaps")]
		[JsonPropertyName("mipMaps")]
		public System.Boolean MipMaps
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MipMaps"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MipMaps", value);
			}
		}

		[JsonProperty(PropertyName = "colorPreprocess")]
		[JsonPropertyName("colorPreprocess")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public ColorPreprocess ColorPreprocess
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ColorPreprocess"), typeof(ColorPreprocess)) is ColorPreprocess __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ColorPreprocess");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ColorPreprocess", value);
			}
		}

		[JsonProperty(PropertyName = "colorPreprocess")]
		[JsonPropertyName("colorPreprocess")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public AlphaPreprocess AlphaPreprocess
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AlphaPreprocess"), typeof(AlphaPreprocess)) is AlphaPreprocess __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AlphaPreprocess");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AlphaPreprocess", value);
			}
		}

		public static int2 GetMaxLimitedSize(in int2 originalSize, System.Int32 maxSize = 16384)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "GetMaxLimitedSize", originalSize, maxSize), typeof(int2));
		}

		public static int2 GetMinLimitedSize(in int2 currentSize, in int2 maxSize, System.Int32 minSize)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), "GetMinLimitedSize", currentSize, maxSize, minSize), typeof(int2));
		}

		public TextureVariantDescriptor()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public TextureVariantDescriptor(TextureCompression compression, System.Int32 compressionQuality, System.Boolean mipMaps, ColorPreprocess colorPreprocess, AlphaPreprocess alphaPreprocess, System.Int32 version)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureVariantDescriptor", ResoniteBridge.ResoniteBridgeValueType.Type), compression, compressionQuality, mipMaps, colorPreprocess, alphaPreprocess, version);
		}

		public virtual System.Boolean IsPotentialAlternative(D other, TextureCompression? requireCompression)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IsPotentialAlternative", other, requireCompression), typeof(System.Boolean));
		}

		public List<D> GetBestAlternateChain(List<D> availableDescriptors, Predicate<D> variantFilter = null)
		{
			return (List<D>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBestAlternateChain", availableDescriptors, variantFilter), typeof(List<D>));
		}

		public D GetBestAlternateDescriptor(List<D> availableDescriptors, TextureCompression? requireCompression = null, Predicate<D> variantFilter = null)
		{
			return (D)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetBestAlternateDescriptor", availableDescriptors, requireCompression, variantFilter), typeof(D));
		}

		public virtual System.Single GetAlternativeScore(D other)
		{
			return (System.Single)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetAlternativeScore", other), typeof(System.Single));
		}

		public System.Boolean Equals(D other)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other), typeof(System.Boolean));
		}

		public virtual System.Boolean Equals(D other, VersionComparison versionComparison)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Equals", other, versionComparison), typeof(System.Boolean));
		}

		public virtual System.String ValidateCloudVariant(M metadata)
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ValidateCloudVariant", metadata), typeof(System.String));
		}

		public override List<IAssetVariantDescriptor> GenerateCloudChainNonGeneric()
		{
			return (List<IAssetVariantDescriptor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateCloudChainNonGeneric"), typeof(List<IAssetVariantDescriptor>));
		}

		public abstract List<D> GenerateCloudChain();

		public override System.Int32 GetHashCode()
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetHashCode"), typeof(System.Int32));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public TextureVariantDescriptor(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	public class InvalidVariantException : Exception, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public InvalidVariantException(System.String message)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "InvalidVariantException", ResoniteBridge.ResoniteBridgeValueType.Type), message);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public InvalidVariantException(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public InvalidVariantException()
		{
		}
	}
	public static class CubemapVariantGenerator
	{
		public static List<ComputedVariantResult> GenerateVariants(System.String file, CubemapVariantDescriptor variantDescriptor, System.Int32 maxThreads = -1, VariantGeneratedHandler variantGenerated = null, Predicate<string> variantFilter = null)
		{
			return (List<ComputedVariantResult>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CubemapVariantGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateVariants", file, variantDescriptor, maxThreads, variantGenerated, variantFilter), typeof(List<ComputedVariantResult>));
		}
	}
	public static class MeshVariantGenerator
	{
		public static List<ComputedVariantResult> GenerateVariants(System.String file, MeshVariantDescriptor variantDescriptor, System.Int32 maxThreads = -1, VariantGeneratedHandler variantGenerated = null, Predicate<string> variantFilter = null)
		{
			return (List<ComputedVariantResult>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshVariantGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateVariants", file, variantDescriptor, maxThreads, variantGenerated, variantFilter), typeof(List<ComputedVariantResult>));
		}

		private static void ComputeMeshCollider(System.String file, MeshX meshx, MeshCompression compression, System.Boolean dualSided)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshVariantGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "ComputeMeshCollider", file, meshx, compression, dualSided);
		}

		private static void ComputeColliderData(System.String file, MeshCompression compression, Action<Stream, ResoniteBridge.ResoniteBridgeValue> compute)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshVariantGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "ComputeColliderData", file, compression, compute);
		}

		private static void ComputeColliderData(System.String file, MeshCompression compression, Action<Stream> compute)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshVariantGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "ComputeColliderData", file, compression, compute);
		}
	}
	public static class ShaderVariantGenerator
	{
		public static List<ComputedVariantResult> GenerateVariants(System.String file, ShaderVariantDescriptor variantDescriptor, System.Int32 maxThreads = -1, VariantGeneratedHandler variantGenerated = null, Predicate<string> variantFilter = null)
		{
			return (List<ComputedVariantResult>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderVariantGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateVariants", file, variantDescriptor, maxThreads, variantGenerated, variantFilter), typeof(List<ComputedVariantResult>));
		}
	}
	public static class Texture2DVariantGenerator
	{
		public static List<ComputedVariantResult> GenerateVariants(System.String file, Texture2DVariantDescriptor variantDescriptor, System.Int32 maxThreads = -1, VariantGeneratedHandler variantGenerated = null, Predicate<string> variantFilter = null)
		{
			return (List<ComputedVariantResult>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture2DVariantGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateVariants", file, variantDescriptor, maxThreads, variantGenerated, variantFilter), typeof(List<ComputedVariantResult>));
		}
	}
	public static class Texture3DVariantGenerator
	{
		public static List<ComputedVariantResult> GenerateVariants(System.String file, Texture3DVariantDescriptor variantDescriptor, System.Int32 maxThreads = -1, VariantGeneratedHandler variantGenerated = null, Predicate<string> variantFilter = null)
		{
			return (List<ComputedVariantResult>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "Texture3DVariantGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateVariants", file, variantDescriptor, maxThreads, variantGenerated, variantFilter), typeof(List<ComputedVariantResult>));
		}
	}
	internal static class TextureVariantGenerator
	{
		public static B Preprocess<B>(B bitmap, TextureCompression compression, ColorPreprocess colorPreprocess, AlphaPreprocess alphaPreprocess, System.Boolean allowARGB) where B : Bitmap, IBitmap<B>
		{
			return (B)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "TextureVariantGenerator", ResoniteBridge.ResoniteBridgeValueType.Type), "Preprocess", bitmap, compression, colorPreprocess, alphaPreprocess, allowARGB), typeof(B));
		}
	}
	[DataModelType]
	public interface IAssetVariantDescriptor : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.Boolean OriginalAsset
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "OriginalAsset"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		System.Boolean IsValid
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsValid"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		System.String ValidationError
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ValidationError"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		System.String VariantIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
		}

		System.Int32 VariantVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		void EnsureCurrentVersion();

		void GenerateLoadChain(List<string> chain);

		List<IAssetVariantDescriptor> GenerateCloudChainNonGeneric();
	}
	public interface IAssetVariantDescriptor<D, M> : IAssetVariantDescriptor, IEquatable<D>, ResoniteBridge.ResoniteBridgeValueHolder where D : IAssetVariantDescriptor<D, M> where M : IAssetMetadata
	{
		List<D> GenerateCloudChain();

		List<D> GetBestAlternateChain(List<D> availableDescriptors, Predicate<D> variantFilter = null);

		System.Boolean Equals(D other, VersionComparison versionComparison);

		System.String ValidateCloudVariant(M metadata);
	}
	public static class AssetMetadataHelper
	{
		public static AssetVariantType MetadataToAssetType(Type metadataType)
		{
			return (AssetVariantType)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetMetadataHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "MetadataToAssetType", metadataType), typeof(AssetVariantType));
		}

		public static T ComputeMetadata<T>(System.String file) where T : class, IAssetMetadata
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "AssetMetadataHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "ComputeMetadata", file), typeof(T));
		}
	}
	[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
	public class BitmapMetadata : ImageMetadataBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 METADATA_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "METADATA_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "METADATA_VERSION", value);
			}
		}

		[Newtonsoft.Json.JsonIgnore]
		[System.Text.Json.Serialization.JsonIgnore]
		public override System.Int32 LatestVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LatestVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		[JsonProperty(PropertyName = "width")]
		[JsonPropertyName("width")]
		public System.Int32 Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Width"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Width", value);
			}
		}

		[JsonProperty(PropertyName = "height")]
		[JsonPropertyName("height")]
		public System.Int32 Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Height"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Height", value);
			}
		}

		[JsonProperty(PropertyName = "mipMapCount")]
		[JsonPropertyName("mipMapCount")]
		public System.Int32 MipMapCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MipMapCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MipMapCount", value);
			}
		}

		[JsonProperty(PropertyName = "baseFormat")]
		[JsonPropertyName("baseFormat")]
		public System.String BaseFormat
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BaseFormat"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BaseFormat", value);
			}
		}

		public override void CopyFrom(IAssetMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		public void CopyFrom(BitmapMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		public static BitmapMetadata GenerateMetadata(System.String file)
		{
			return (BitmapMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadata", file), typeof(BitmapMetadata));
		}

		public static BitmapMetadata GenerateMetadata(Bitmap2D bitmap)
		{
			return (BitmapMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadata", bitmap), typeof(BitmapMetadata));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public BitmapMetadata(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public BitmapMetadata()
		{
		}
	}
	public static class BitmapMetadataHelper
	{
		public static void GenerateMetadataShared(Bitmap bitmap, ImageMetadataBase data)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "BitmapMetadataHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadataShared", bitmap, data);
		}
	}
	[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
	public class CubemapMetadata : ImageMetadataBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 METADATA_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "METADATA_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "METADATA_VERSION", value);
			}
		}

		[Newtonsoft.Json.JsonIgnore]
		[System.Text.Json.Serialization.JsonIgnore]
		public override System.Int32 LatestVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LatestVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		[JsonProperty(PropertyName = "size")]
		[JsonPropertyName("size")]
		public System.Int32 Size
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Size"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Size", value);
			}
		}

		[JsonProperty(PropertyName = "mipmaps")]
		[JsonPropertyName("mipmaps")]
		public System.Boolean MipMaps
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MipMaps"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MipMaps", value);
			}
		}

		public override void CopyFrom(IAssetMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		public void CopyFrom(CubemapMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		public static CubemapMetadata GenerateMetadata(System.String file)
		{
			return (CubemapMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CubemapMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadata", file), typeof(CubemapMetadata));
		}

		public static CubemapMetadata GenerateMetadata(BitmapCube cube)
		{
			return (CubemapMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "CubemapMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadata", cube), typeof(CubemapMetadata));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public CubemapMetadata(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public CubemapMetadata()
		{
		}
	}
	public class DummyMetadata : IAssetMetadata, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public static DummyMetadata Dummy
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "DummyMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "Dummy"), typeof(DummyMetadata)) is DummyMetadata __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to DummyMetadata");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "DummyMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "Dummy", value);
			}
		}

		public System.String AssetIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AssetIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AssetIdentifier", value);
			}
		}

		public System.Int32 MetadataVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MetadataVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MetadataVersion", value);
			}
		}

		public System.Boolean IsLatestVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsLatestVersion"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public System.Boolean IsCorrupted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsCorrupted"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		public void CopyFrom(IAssetMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public DummyMetadata(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public DummyMetadata()
		{
		}
	}
	[DataModelType]
	public interface IAssetMetadata : ResoniteBridge.ResoniteBridgeValueHolder
	{
		System.String AssetIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AssetIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AssetIdentifier", value);
			}
		}

		System.Int32 MetadataVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MetadataVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MetadataVersion", value);
			}
		}

		System.Boolean IsLatestVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsLatestVersion"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		System.Boolean IsCorrupted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsCorrupted"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		void CopyFrom(IAssetMetadata other);
	}
	[DataModelType]
	public enum ColorChannelData
	{
		UNKNOWN = 0,
		Black = 1,
		White = 2,
		OneBitColor = 3,
		Grayscale = 4,
		Color = 5,
		GrayscaleHDR = 6,
		ColorHDR = 7,
		HDR = 7,
		NoColor = 1
	}
	[DataModelType]
	public enum AlphaChannelData
	{
		UNKNOWN = 0,
		FullyOpaque = 1,
		FullyTransparent = 2,
		OneBitAlpha = 3,
		Alpha = 4,
		AlphaHDR = 5,
		NoAlpha = 1
	}
	public static class ImageMetadataHelper
	{
		public static System.Boolean HasColors(this ColorChannelData data)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ImageMetadataHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "HasColors", data), typeof(System.Boolean));
		}

		public static System.Boolean IsGrayscaleOnly(this ColorChannelData data)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ImageMetadataHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "IsGrayscaleOnly", data), typeof(System.Boolean));
		}

		public static System.Boolean IsHDR(this ColorChannelData data)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ImageMetadataHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "IsHDR", data), typeof(System.Boolean));
		}

		public static System.Boolean CanUseOneBitAlpha(this AlphaChannelData data)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ImageMetadataHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "CanUseOneBitAlpha", data), typeof(System.Boolean));
		}

		public static System.Boolean HasTransparency(this AlphaChannelData data)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ImageMetadataHelper", ResoniteBridge.ResoniteBridgeValueType.Type), "HasTransparency", data), typeof(System.Boolean));
		}
	}
	public abstract class ImageMetadataBase : IAssetMetadata, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private System.Single MAX_COLOR_DISTANCE
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "MAX_COLOR_DISTANCE"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "MAX_COLOR_DISTANCE", value);
			}
		}

		[Newtonsoft.Json.JsonIgnore]
		[System.Text.Json.Serialization.JsonIgnore]
		public abstract System.Int32 LatestVersion { get; }

		[JsonProperty(PropertyName = "isCorrupted")]
		[JsonPropertyName("isCorrupted")]
		public System.Boolean IsCorrupted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsCorrupted"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "IsCorrupted", value);
			}
		}

		[JsonProperty(PropertyName = "metadataVersion")]
		[JsonPropertyName("metadataVersion")]
		public System.Int32 MetadataVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MetadataVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MetadataVersion", value);
			}
		}

		[Newtonsoft.Json.JsonIgnore]
		[System.Text.Json.Serialization.JsonIgnore]
		public System.Boolean IsLatestVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsLatestVersion"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		[JsonProperty(PropertyName = "assetIdenfitier")]
		[JsonPropertyName("assetIdenfitier")]
		public System.String AssetIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AssetIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AssetIdentifier", value);
			}
		}

		[JsonProperty(PropertyName = "bitsPerPixel")]
		[JsonPropertyName("bitsPerPixel")]
		public System.Double BitsPerPixel
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BitsPerPixel"), typeof(System.Double)) is System.Double __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to double");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BitsPerPixel", value);
			}
		}

		[JsonProperty(PropertyName = "channelCount")]
		[JsonPropertyName("channelCount")]
		public System.Int32 ChannelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ChannelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ChannelCount", value);
			}
		}

		[JsonProperty(PropertyName = "colorData")]
		[JsonPropertyName("colorData")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public ColorChannelData ColorData
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ColorData"), typeof(ColorChannelData)) is ColorChannelData __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ColorChannelData");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ColorData", value);
			}
		}

		[JsonProperty(PropertyName = "alphaData")]
		[JsonPropertyName("alphaData")]
		[Newtonsoft.Json.JsonConverter(typeof(StringEnumConverter))]
		[System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverter))]
		public AlphaChannelData AlphaData
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AlphaData"), typeof(AlphaChannelData)) is AlphaChannelData __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to AlphaChannelData");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AlphaData", value);
			}
		}

		[JsonProperty(PropertyName = "averageColor")]
		[JsonPropertyName("averageColor")]
		public color AverageColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageColor"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AverageColor", value);
			}
		}

		[JsonProperty(PropertyName = "averageVisibleColor")]
		[JsonPropertyName("averageVisibleColor")]
		public color AverageVisibleColor
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageVisibleColor"), typeof(color)) is color __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to color");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AverageVisibleColor", value);
			}
		}

		[JsonProperty(PropertyName = "averageHSV")]
		[JsonPropertyName("averageHSV")]
		public ColorHSV AverageHSV
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageHSV"), typeof(ColorHSV)) is ColorHSV __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ColorHSV");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AverageHSV", value);
			}
		}

		[JsonProperty(PropertyName = "averageVisibleHSV")]
		[JsonPropertyName("averageVisibleHSV")]
		public ColorHSV AverageVisibleHSV
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageVisibleHSV"), typeof(ColorHSV)) is ColorHSV __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ColorHSV");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AverageVisibleHSV", value);
			}
		}

		[JsonProperty(PropertyName = "invalidPixelCount")]
		[JsonPropertyName("invalidPixelCount")]
		public System.Int32 InvalidPixelCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "InvalidPixelCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "InvalidPixelCount", value);
			}
		}

		public abstract void CopyFrom(IAssetMetadata metadata);

		public void CopyFrom(ImageMetadataBase metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		protected void InitGeneration()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "InitGeneration");
		}

		internal System.Boolean UpdateColorData(in color c, TextureFormat format)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "UpdateColorData", c, format), typeof(System.Boolean));
		}

		protected static ColorChannelData GetColorDataType(in color c)
		{
			return (ColorChannelData)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ImageMetadataBase", ResoniteBridge.ResoniteBridgeValueType.Type), "GetColorDataType", c), typeof(ColorChannelData));
		}

		protected static AlphaChannelData GetAlphaDataType(in color c)
		{
			return (AlphaChannelData)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ImageMetadataBase", ResoniteBridge.ResoniteBridgeValueType.Type), "GetAlphaDataType", c), typeof(AlphaChannelData));
		}

		protected static System.Boolean IsMaxDataLevel(TextureFormat format, ColorChannelData data)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ImageMetadataBase", ResoniteBridge.ResoniteBridgeValueType.Type), "IsMaxDataLevel", format, data), typeof(System.Boolean));
		}

		protected static System.Boolean IsMaxDataLevel(TextureFormat format, AlphaChannelData data)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ImageMetadataBase", ResoniteBridge.ResoniteBridgeValueType.Type), "IsMaxDataLevel", format, data), typeof(System.Boolean));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ImageMetadataBase(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public ImageMetadataBase()
		{
		}
	}
	[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
	public class MeshMetadata : IAssetMetadata, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 METADATA_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "METADATA_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "METADATA_VERSION", value);
			}
		}

		[JsonProperty(PropertyName = "metadataVersion")]
		[JsonPropertyName("metadataVersion")]
		public System.Int32 MetadataVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MetadataVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MetadataVersion", value);
			}
		}

		[Newtonsoft.Json.JsonIgnore]
		[System.Text.Json.Serialization.JsonIgnore]
		public System.Boolean IsLatestVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsLatestVersion"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		[JsonProperty(PropertyName = "isCorrupted")]
		[JsonPropertyName("isCorrupted")]
		public System.Boolean IsCorrupted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsCorrupted"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "IsCorrupted", value);
			}
		}

		[JsonProperty(PropertyName = "assetIdenfitier")]
		[JsonPropertyName("assetIdenfitier")]
		public System.String AssetIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AssetIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AssetIdentifier", value);
			}
		}

		[JsonProperty(PropertyName = "vertexCount")]
		[JsonPropertyName("vertexCount")]
		public System.Int32 VertexCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VertexCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VertexCount", value);
			}
		}

		[JsonProperty(PropertyName = "invalidVertexCount")]
		[JsonPropertyName("invalidVertexCount")]
		public System.Int32 InvalidVertexCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "InvalidVertexCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "InvalidVertexCount", value);
			}
		}

		[JsonProperty(PropertyName = "totalTriangleCount")]
		[JsonPropertyName("totalTriangleCount")]
		public System.Int32 TotalTriangleCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TotalTriangleCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "TotalTriangleCount", value);
			}
		}

		[JsonProperty(PropertyName = "totalPointCount")]
		[JsonPropertyName("totalPointCount")]
		public System.Int32 TotalPointCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "TotalPointCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "TotalPointCount", value);
			}
		}

		[JsonProperty(PropertyName = "submeshCount")]
		[JsonPropertyName("submeshCount")]
		public System.Int32 SubmeshCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SubmeshCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SubmeshCount", value);
			}
		}

		[JsonProperty(PropertyName = "boneCount")]
		[JsonPropertyName("boneCount")]
		public System.Int32 BoneCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BoneCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BoneCount", value);
			}
		}

		[JsonProperty(PropertyName = "blendshapeCount")]
		[JsonPropertyName("blendshapeCount")]
		public System.Int32 BlendshapeCount
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BlendshapeCount"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BlendshapeCount", value);
			}
		}

		[JsonProperty(PropertyName = "hasNormals")]
		[JsonPropertyName("hasNormals")]
		public System.Boolean HasNormals
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasNormals"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasNormals", value);
			}
		}

		[JsonProperty(PropertyName = "hasTangents")]
		[JsonPropertyName("hasTangents")]
		public System.Boolean HasTangents
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasTangents"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasTangents", value);
			}
		}

		[JsonProperty(PropertyName = "hasColors")]
		[JsonPropertyName("hasColors")]
		public System.Boolean HasColors
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasColors"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasColors", value);
			}
		}

		[JsonProperty(PropertyName = "hasBoneBindings")]
		[JsonPropertyName("hasBoneBindings")]
		public System.Boolean HasBoneBindings
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "HasBoneBindings"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "HasBoneBindings", value);
			}
		}

		[JsonProperty(PropertyName = "UV0dimension")]
		[JsonPropertyName("UV0dimension")]
		public System.Int32 UV0dimension
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV0dimension"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV0dimension", value);
			}
		}

		[JsonProperty(PropertyName = "UV1dimension")]
		[JsonPropertyName("UV1dimension")]
		public System.Int32 UV1dimension
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV1dimension"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV1dimension", value);
			}
		}

		[JsonProperty(PropertyName = "UV2dimension")]
		[JsonPropertyName("UV2dimension")]
		public System.Int32 UV2dimension
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV2dimension"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV2dimension", value);
			}
		}

		[JsonProperty(PropertyName = "UV3dimension")]
		[JsonPropertyName("UV3dimension")]
		public System.Int32 UV3dimension
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UV3dimension"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UV3dimension", value);
			}
		}

		[JsonProperty(PropertyName = "bounds")]
		[JsonPropertyName("bounds")]
		public Elements.Core.BoundingBox Bounds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Bounds"), typeof(Elements.Core.BoundingBox)) is Elements.Core.BoundingBox __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to Elements.Core.BoundingBox");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Bounds", value);
			}
		}

		[JsonProperty(PropertyName = "smallestTriangleSize")]
		[JsonPropertyName("smallestTriangleSize")]
		public System.Single SmallestTriangleSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SmallestTriangleSize"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SmallestTriangleSize", value);
			}
		}

		[JsonProperty(PropertyName = "largestTriangleSize")]
		[JsonPropertyName("largestTriangleSize")]
		public System.Single LargestTriangleSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LargestTriangleSize"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "LargestTriangleSize", value);
			}
		}

		[JsonProperty(PropertyName = "averageTriangleSize")]
		[JsonPropertyName("averageTriangleSize")]
		public System.Single AverageTriangleSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageTriangleSize"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AverageTriangleSize", value);
			}
		}

		[JsonProperty(PropertyName = "medianTriangleSize")]
		[JsonPropertyName("medianTriangleSize")]
		public System.Single MedianTriangleSize
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MedianTriangleSize"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MedianTriangleSize", value);
			}
		}

		[JsonProperty(PropertyName = "smallestTriangleArea")]
		[JsonPropertyName("smallestTriangleArea")]
		public System.Single SmallestTriangleArea
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SmallestTriangleArea"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SmallestTriangleArea", value);
			}
		}

		[JsonProperty(PropertyName = "largestTriangleArea")]
		[JsonPropertyName("largestTriangleArea")]
		public System.Single LargestTriangleArea
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LargestTriangleArea"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "LargestTriangleArea", value);
			}
		}

		[JsonProperty(PropertyName = "averageTriangleArea")]
		[JsonPropertyName("averageTriangleArea")]
		public System.Single AverageTriangleArea
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AverageTriangleArea"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AverageTriangleArea", value);
			}
		}

		[JsonProperty(PropertyName = "medianTriangleArea")]
		[JsonPropertyName("medianTriangleArea")]
		public System.Single MedianTriangleArea
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MedianTriangleArea"), typeof(System.Single)) is System.Single __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to float");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MedianTriangleArea", value);
			}
		}

		[JsonProperty(PropertyName = "submeshMetadata")]
		[JsonPropertyName("submeshMetadata")]
		public List<SubmeshMetadata> SubmeshMetadata
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SubmeshMetadata"), typeof(List<SubmeshMetadata>)) is List<SubmeshMetadata> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<SubmeshMetadata>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SubmeshMetadata", value);
			}
		}

		[JsonProperty(PropertyName = "boneMetadata")]
		[JsonPropertyName("boneMetadata")]
		public List<BoneMetadata> BoneMetadata
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BoneMetadata"), typeof(List<BoneMetadata>)) is List<BoneMetadata> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<BoneMetadata>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BoneMetadata", value);
			}
		}

		[JsonProperty(PropertyName = "approximateBoneBounds")]
		[JsonPropertyName("approximateBoneBounds")]
		public List<ApproximateBoneBounds> ApproximateBoneBounds
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "ApproximateBoneBounds"), typeof(List<ApproximateBoneBounds>)) is List<ApproximateBoneBounds> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<ApproximateBoneBounds>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "ApproximateBoneBounds", value);
			}
		}

		public void CopyFrom(IAssetMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		public void CopyFrom(MeshMetadata mesh)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", mesh);
		}

		public static MeshMetadata GenerateMetadata(System.String file)
		{
			return (MeshMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadata", file), typeof(MeshMetadata));
		}

		public static MeshMetadata GenerateMetadata(MeshX mesh)
		{
			return (MeshMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "MeshMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadata", mesh), typeof(MeshMetadata));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public MeshMetadata(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public MeshMetadata()
		{
		}
	}
	[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
	public class ShaderSourceFile : ResoniteBridge.ResoniteBridgeValueHolder
	{
		[JsonProperty(PropertyName = "filename")]
		[JsonPropertyName("filename")]
		public System.String FileName
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "FileName"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "FileName", value);
			}
		}

		[JsonProperty(PropertyName = "hash")]
		[JsonPropertyName("hash")]
		public System.String Hash
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Hash"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Hash", value);
			}
		}

		public ShaderSourceFile()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSourceFile", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public ShaderSourceFile(System.String filename, System.String hash)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderSourceFile", ResoniteBridge.ResoniteBridgeValueType.Type), filename, hash);
		}

		public ShaderSourceFile Clone()
		{
			return (ShaderSourceFile)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "Clone"), typeof(ShaderSourceFile));
		}

		public override System.String ToString()
		{
			return (System.String)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "ToString"), typeof(System.String));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ShaderSourceFile(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
	public class ShaderMetadata : IAssetMetadata, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 METADATA_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "METADATA_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "METADATA_VERSION", value);
			}
		}

		[JsonProperty(PropertyName = "metadataVersion")]
		[JsonPropertyName("metadataVersion")]
		public System.Int32 MetadataVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "MetadataVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "MetadataVersion", value);
			}
		}

		[JsonProperty(PropertyName = "isCorrupted")]
		[JsonPropertyName("isCorrupted")]
		public System.Boolean IsCorrupted
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsCorrupted"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "IsCorrupted", value);
			}
		}

		[Newtonsoft.Json.JsonIgnore]
		[System.Text.Json.Serialization.JsonIgnore]
		public System.Boolean IsLatestVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IsLatestVersion"), typeof(System.Boolean)) is System.Boolean __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to bool");
				}
			}
		}

		[JsonProperty(PropertyName = "assetIdenfitier")]
		[JsonPropertyName("assetIdenfitier")]
		public System.String AssetIdentifier
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AssetIdentifier"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "AssetIdentifier", value);
			}
		}

		[JsonProperty(PropertyName = "origin")]
		[JsonPropertyName("origin")]
		public System.String Origin
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Origin"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Origin", value);
			}
		}

		[JsonProperty(PropertyName = "sourceFile")]
		[JsonPropertyName("sourceFile")]
		public ShaderSourceFile SourceFile
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "SourceFile"), typeof(ShaderSourceFile)) is ShaderSourceFile __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to ShaderSourceFile");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "SourceFile", value);
			}
		}

		[JsonProperty(PropertyName = "includeFiles")]
		[JsonPropertyName("includeFiles")]
		public List<ShaderSourceFile> IncludeFiles
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "IncludeFiles"), typeof(List<ShaderSourceFile>)) is List<ShaderSourceFile> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<ShaderSourceFile>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "IncludeFiles", value);
			}
		}

		[JsonProperty(PropertyName = "variantGroups")]
		[JsonPropertyName("variantGroups")]
		public List<List<string>> VariantGroups
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "VariantGroups"), typeof(List<List<string>>)) is List<List<string>> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<List<string>>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "VariantGroups", value);
			}
		}

		[JsonProperty(PropertyName = "uniqueKeywords")]
		[JsonPropertyName("uniqueKeywords")]
		public List<string> UniqueKeywords
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "UniqueKeywords"), typeof(List<string>)) is List<string> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to List<string>");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "UniqueKeywords", value);
			}
		}

		public IEnumerable<ShaderSourceFile> AllSourceFiles
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "AllSourceFiles"), typeof(IEnumerable<ShaderSourceFile>)) is IEnumerable<ShaderSourceFile> __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to IEnumerable<ShaderSourceFile>");
				}
			}
		}

		public ShaderMetadata()
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderMetadata", ResoniteBridge.ResoniteBridgeValueType.Type));
		}

		public static ShaderMetadata LoadFromJSON(System.String json)
		{
			return (ShaderMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "LoadFromJSON", json), typeof(ShaderMetadata));
		}

		public ShaderMetadata(System.String origin, ShaderSourceFile sourceFile, List<List<string>> variantGroups, List<ShaderSourceFile> includes)
		{
			__backing = ResoniteBridge.ResoniteBridgeClientWrappers.CallConstructor(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), origin, sourceFile, variantGroups, includes);
		}

		public static ShaderMetadata GenerateMetadata(System.String file)
		{
			return (ShaderMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "ShaderMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadata", file), typeof(ShaderMetadata));
		}

		public void CopyFrom(IAssetMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		public void CopyFrom(ShaderMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		public IEnumerable<List<string>> EnumerateAllVariants(System.Boolean returnCopy = true)
		{
			return (IEnumerable<List<string>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnumerateAllVariants", returnCopy), typeof(IEnumerable<List<string>>));
		}

		private IEnumerable<List<string>> EnumerateVariants(List<string> baseVariants, System.Int32 groupIndex, System.Boolean returnCopy = true)
		{
			return (IEnumerable<List<string>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "EnumerateVariants", baseVariants, groupIndex, returnCopy), typeof(IEnumerable<List<string>>));
		}

		public System.UInt32 GetVariantIndex(List<string> keywords)
		{
			return (System.UInt32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetVariantIndex", keywords), typeof(System.UInt32));
		}

		public System.Int32 GetKeywordIndex(System.String keyword)
		{
			return (System.Int32)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GetKeywordIndex", keyword), typeof(System.Int32));
		}

		public System.Boolean IsValidIndex(System.UInt32 index)
		{
			return (System.Boolean)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "IsValidIndex", index), typeof(System.Boolean));
		}

		public void GenerateUniqueKeywords()
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "GenerateUniqueKeywords");
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public ShaderMetadata(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}
	}
	[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
	public class VolumeMetadata : ImageMetadataBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public System.Int32 METADATA_VERSION
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(__Backing, "METADATA_VERSION"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(__Backing, "METADATA_VERSION", value);
			}
		}

		[Newtonsoft.Json.JsonIgnore]
		[System.Text.Json.Serialization.JsonIgnore]
		public override System.Int32 LatestVersion
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "LatestVersion"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
		}

		[JsonProperty(PropertyName = "width")]
		[JsonPropertyName("width")]
		public System.Int32 Width
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Width"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Width", value);
			}
		}

		[JsonProperty(PropertyName = "height")]
		[JsonPropertyName("height")]
		public System.Int32 Height
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Height"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Height", value);
			}
		}

		[JsonProperty(PropertyName = "depth")]
		[JsonPropertyName("depth")]
		public System.Int32 Depth
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "Depth"), typeof(System.Int32)) is System.Int32 __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to int");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "Depth", value);
			}
		}

		[JsonProperty(PropertyName = "baseFormat")]
		[JsonPropertyName("baseFormat")]
		public System.String BaseFormat
		{
			get
			{
				if (ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(__Backing, "BaseFormat"), typeof(System.String)) is System.String __retCasted)
				{
					return __retCasted;
				}
				else
				{
					throw new InvalidCastException("Cannot cast result to string");
				}
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(__Backing, "BaseFormat", value);
			}
		}

		public override void CopyFrom(IAssetMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		public void CopyFrom(VolumeMetadata metadata)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(__Backing, "CopyFrom", metadata);
		}

		public static VolumeMetadata GenerateMetadata(System.String file)
		{
			return (VolumeMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VolumeMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadata", file), typeof(VolumeMetadata));
		}

		public static VolumeMetadata GenerateMetadata(Bitmap3D bitmap)
		{
			return (VolumeMetadata)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "Elements.Assets", "VolumeMetadata", ResoniteBridge.ResoniteBridgeValueType.Type), "GenerateMetadata", bitmap), typeof(VolumeMetadata));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return __backing;
			}
			set
			{
				__backing = value;
			}
		}

		public VolumeMetadata(ResoniteBridge.ResoniteBridgeValue value)
		{
			__backing = value;
		}

		public VolumeMetadata()
		{
		}
	}
}
