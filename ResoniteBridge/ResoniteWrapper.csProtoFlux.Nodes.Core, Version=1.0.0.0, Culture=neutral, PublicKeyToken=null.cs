using System;

using System.Collections.Generic;

using System.Diagnostics;

using System.Globalization;

using System.Reflection;

using System.Runtime.CompilerServices;

using System.Runtime.InteropServices;

using System.Runtime.Versioning;

using System.Security;

using System.Security.Permissions;

using System.Text;

using System.Text.RegularExpressions;

using Elements.Assets;

using Elements.Core;

using Elements.Quantity;

using Microsoft.CodeAnalysis;

using ProtoFlux.Core;

using ProtoFlux.Nodes.Core;


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
namespace Microsoft.CodeAnalysis
{
}
namespace System.Runtime.CompilerServices
{
}
namespace ProtoFlux.Nodes.Core
{
	public interface IToStringWrapper : ResoniteBridge.ResoniteBridgeValueHolder
	{
		object WrapToString<T>(T value);
	}
	public interface ICultureProvider : ResoniteBridge.ResoniteBridgeValueHolder
	{
		CultureInfo GetActiveCulture { get; }
	}
	public static class Configuration
	{
		public static IToStringWrapper ToStringWrapper
		{
			get
			{
				return (IToStringWrapper)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "Configuration", ResoniteBridge.ResoniteBridgeValueType.Type), "ToStringWrapper"), typeof(IToStringWrapper));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "Configuration", ResoniteBridge.ResoniteBridgeValueType.Type), "ToStringWrapper", value);
			}
		}

		public static ICultureProvider ActiveCultureProvider
		{
			get
			{
				return (ICultureProvider)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "Configuration", ResoniteBridge.ResoniteBridgeValueType.Type), "ActiveCultureProvider"), typeof(ICultureProvider));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "Configuration", ResoniteBridge.ResoniteBridgeValueType.Type), "ActiveCultureProvider", value);
			}
		}

		public static CultureInfo ActiveCulture => ActiveCultureProvider?.GetActiveCulture ?? CultureInfo.CurrentCulture;

		public static object WrapToString<T>(T value)
		{
			return (object)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "Configuration", ResoniteBridge.ResoniteBridgeValueType.Type), "WrapToString", value), typeof(object));
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.ParsingFormatting
{
	[NodeCategory("Strings")]
	[NodeName("To String", false)]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_object : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<object> Object
		{
			get
			{
				return (ObjectArgument<object>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Object"), typeof(ObjectArgument<object>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Object", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_object(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Bool : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> V
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Bool", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Bool : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<bool> Value
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Bool()
		{
			Value = new ValueOutput<bool>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Byte : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<byte> V
		{
			get
			{
				return (ValueArgument<byte>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<byte>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Byte", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Byte : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<byte> Value
		{
			get
			{
				return (ValueOutput<byte>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<byte>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Byte()
		{
			Value = new ValueOutput<byte>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Ushort : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ushort> V
		{
			get
			{
				return (ValueArgument<ushort>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<ushort>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Ushort", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Ushort : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<ushort> Value
		{
			get
			{
				return (ValueOutput<ushort>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<ushort>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Ushort()
		{
			Value = new ValueOutput<ushort>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Uint : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> V
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Uint", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Uint : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<uint> Value
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Uint()
		{
			Value = new ValueOutput<uint>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Ulong : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> V
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Ulong", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Ulong : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<ulong> Value
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Ulong()
		{
			Value = new ValueOutput<ulong>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Sbyte : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<sbyte> V
		{
			get
			{
				return (ValueArgument<sbyte>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<sbyte>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Sbyte", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Sbyte : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<sbyte> Value
		{
			get
			{
				return (ValueOutput<sbyte>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<sbyte>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Sbyte()
		{
			Value = new ValueOutput<sbyte>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Short : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<short> V
		{
			get
			{
				return (ValueArgument<short>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<short>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Short", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Short : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<short> Value
		{
			get
			{
				return (ValueOutput<short>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<short>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Short()
		{
			Value = new ValueOutput<short>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Int : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> V
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Int", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Int : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<int> Value
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Int()
		{
			Value = new ValueOutput<int>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Long : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> V
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Long", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Long : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<long> Value
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Long()
		{
			Value = new ValueOutput<long>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Float : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> V
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Float", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Float : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<float> Value
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Float()
		{
			Value = new ValueOutput<float>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Double : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> V
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Double", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Double : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<double> Value
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Double()
		{
			Value = new ValueOutput<double>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Decimal : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<decimal> V
		{
			get
			{
				return (ValueArgument<decimal>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<decimal>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Decimal", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Decimal : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<decimal> Value
		{
			get
			{
				return (ValueOutput<decimal>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<decimal>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Decimal()
		{
			Value = new ValueOutput<decimal>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Char : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<char> V
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Char", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Char : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<char> Value
		{
			get
			{
				return (ValueOutput<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Char()
		{
			Value = new ValueOutput<char>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Bool2 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> V
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Bool2", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Bool2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<bool2> Value
		{
			get
			{
				return (ValueOutput<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Bool2()
		{
			Value = new ValueOutput<bool2>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Uint2 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> V
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Uint2", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Uint2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<uint2> Value
		{
			get
			{
				return (ValueOutput<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Uint2()
		{
			Value = new ValueOutput<uint2>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Ulong2 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> V
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Ulong2", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Ulong2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<ulong2> Value
		{
			get
			{
				return (ValueOutput<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Ulong2()
		{
			Value = new ValueOutput<ulong2>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Int2 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> V
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Int2", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Int2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<int2> Value
		{
			get
			{
				return (ValueOutput<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Int2()
		{
			Value = new ValueOutput<int2>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Long2 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> V
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Long2", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Long2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<long2> Value
		{
			get
			{
				return (ValueOutput<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Long2()
		{
			Value = new ValueOutput<long2>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Float2 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> V
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Float2", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Float2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<float2> Value
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Float2()
		{
			Value = new ValueOutput<float2>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Double2 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> V
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Double2", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Double2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<double2> Value
		{
			get
			{
				return (ValueOutput<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Double2()
		{
			Value = new ValueOutput<double2>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Bool3 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> V
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Bool3", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Bool3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<bool3> Value
		{
			get
			{
				return (ValueOutput<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Bool3()
		{
			Value = new ValueOutput<bool3>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Uint3 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> V
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Uint3", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Uint3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<uint3> Value
		{
			get
			{
				return (ValueOutput<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Uint3()
		{
			Value = new ValueOutput<uint3>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Ulong3 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> V
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Ulong3", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Ulong3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<ulong3> Value
		{
			get
			{
				return (ValueOutput<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Ulong3()
		{
			Value = new ValueOutput<ulong3>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Int3 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> V
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Int3", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Int3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<int3> Value
		{
			get
			{
				return (ValueOutput<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Int3()
		{
			Value = new ValueOutput<int3>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Long3 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> V
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Long3", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Long3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<long3> Value
		{
			get
			{
				return (ValueOutput<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Long3()
		{
			Value = new ValueOutput<long3>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Float3 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> V
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Float3", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Float3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<float3> Value
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Float3()
		{
			Value = new ValueOutput<float3>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Double3 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> V
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Double3", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Double3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<double3> Value
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Double3()
		{
			Value = new ValueOutput<double3>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Bool4 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> V
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Bool4", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Bool4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<bool4> Value
		{
			get
			{
				return (ValueOutput<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Bool4()
		{
			Value = new ValueOutput<bool4>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Uint4 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> V
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Uint4", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Uint4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<uint4> Value
		{
			get
			{
				return (ValueOutput<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Uint4()
		{
			Value = new ValueOutput<uint4>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Ulong4 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> V
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Ulong4", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Ulong4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<ulong4> Value
		{
			get
			{
				return (ValueOutput<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Ulong4()
		{
			Value = new ValueOutput<ulong4>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Int4 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> V
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Int4", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Int4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<int4> Value
		{
			get
			{
				return (ValueOutput<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Int4()
		{
			Value = new ValueOutput<int4>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Long4 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> V
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Long4", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Long4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<long4> Value
		{
			get
			{
				return (ValueOutput<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Long4()
		{
			Value = new ValueOutput<long4>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Float4 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> V
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Float4", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Float4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<float4> Value
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Float4()
		{
			Value = new ValueOutput<float4>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Double4 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> V
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Double4", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Double4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<double4> Value
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Double4()
		{
			Value = new ValueOutput<double4>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Float2x2 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2x2> V
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Float2x2", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Float2x2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<float2x2> Value
		{
			get
			{
				return (ValueOutput<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Float2x2()
		{
			Value = new ValueOutput<float2x2>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Double2x2 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2x2> V
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Double2x2", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Double2x2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<double2x2> Value
		{
			get
			{
				return (ValueOutput<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Double2x2()
		{
			Value = new ValueOutput<double2x2>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Float3x3 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> V
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Float3x3", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Float3x3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<float3x3> Value
		{
			get
			{
				return (ValueOutput<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Float3x3()
		{
			Value = new ValueOutput<float3x3>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Double3x3 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> V
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Double3x3", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Double3x3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<double3x3> Value
		{
			get
			{
				return (ValueOutput<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Double3x3()
		{
			Value = new ValueOutput<double3x3>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Float4x4 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> V
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Float4x4", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Float4x4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<float4x4> Value
		{
			get
			{
				return (ValueOutput<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Float4x4()
		{
			Value = new ValueOutput<float4x4>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Double4x4 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> V
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Double4x4", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Double4x4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<double4x4> Value
		{
			get
			{
				return (ValueOutput<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Double4x4()
		{
			Value = new ValueOutput<double4x4>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_FloatQ : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> V
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_FloatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse FloatQ", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_FloatQ : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<floatQ> Value
		{
			get
			{
				return (ValueOutput<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_FloatQ()
		{
			Value = new ValueOutput<floatQ>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_FloatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_DoubleQ : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> V
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_DoubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse DoubleQ", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_DoubleQ : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<NumberStyles> NumberStyle
		{
			get
			{
				return (ValueArgument<NumberStyles>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NumberStyle"), typeof(ValueArgument<NumberStyles>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NumberStyle", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public ValueOutput<doubleQ> Value
		{
			get
			{
				return (ValueOutput<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_DoubleQ()
		{
			Value = new ValueOutput<doubleQ>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_DoubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_DateTime : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<DateTime> V
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_DateTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse DateTime", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_DateTime : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<DateTime> Value
		{
			get
			{
				return (ValueOutput<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_DateTime()
		{
			Value = new ValueOutput<DateTime>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_DateTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_TimeSpan : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TimeSpan> V
		{
			get
			{
				return (ValueArgument<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_TimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse TimeSpan", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_TimeSpan : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<TimeSpan> Value
		{
			get
			{
				return (ValueOutput<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_TimeSpan()
		{
			Value = new ValueOutput<TimeSpan>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_TimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_Color : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> V
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse Color", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_Color : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<color> Value
		{
			get
			{
				return (ValueOutput<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_Color()
		{
			Value = new ValueOutput<color>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.ToString")]
	public class ToString_ColorX : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> V
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.InvariantCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToString_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Parsing")]
	[NodeName("Parse ColorX", false)]
	[NodeOverload("Core.Operators.Parse")]
	public class Parse_ColorX : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<colorX> Value
		{
			get
			{
				return (ValueOutput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Parse_ColorX()
		{
			Value = new ValueOutput<colorX>(this);
			IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Parse_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Utility
{
	[NodeCategory("Strings/Localization")]
	public class InvariantCulture : ObjectFunctionNode<ExecutionContext, CultureInfo>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override CultureInfo Compute(ExecutionContext context)
		{
			return (CultureInfo)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(CultureInfo));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InvariantCulture(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Localization")]
	public class CurrentCulture : ObjectFunctionNode<ExecutionContext, CultureInfo>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override CultureInfo Compute(ExecutionContext context)
		{
			return (CultureInfo)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(CultureInfo));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CurrentCulture(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/GUIDs")]
	public class EmptyGUID : ValueFunctionNode<ExecutionContext, Guid>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override Guid Compute(ExecutionContext context)
		{
			return (Guid)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Guid));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EmptyGUID(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/GUIDs")]
	[ContinuouslyChanging]
	public class RandomGUID : ValueFunctionNode<ExecutionContext, Guid>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override Guid Compute(ExecutionContext context)
		{
			return (Guid)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Guid));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomGUID(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/GUIDs")]
	public class ParseGUID : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueOutput<Guid> Value
		{
			get
			{
				return (ValueOutput<Guid>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<Guid>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> Parsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Parsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Parsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ParseGUID()
		{
			Value = new ValueOutput<Guid>(this);
			Parsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ParseGUID(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility")]
	[NodeName("Index of First Match", false)]
	[NodeOverload("Core.Utility.IndexOfFirstMatch")]
	public class IndexOfFirstValueMatch<T> : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> Match
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Match"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Match", value);
			}
		}

		public ValueInputList<T> Values
		{
			get
			{
				return (ValueInputList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Values"), typeof(ValueInputList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Values", value);
			}
		}

		public ValueOutput<int> Index
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Index"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Index", value);
			}
		}

		public ValueOutput<bool> FoundMatch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FoundMatch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FoundMatch", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public IndexOfFirstValueMatch()
		{
			((IndexOfFirstValueMatch<>)(object)this).Values = new ValueInputList<T>();
			((IndexOfFirstValueMatch<>)(object)this).Index = new ValueOutput<int>(this);
			((IndexOfFirstValueMatch<>)(object)this).FoundMatch = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IndexOfFirstValueMatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility")]
	[NodeName("Index of First Match", false)]
	[NodeOverload("Core.Utility.IndexOfFirstMatch")]
	public class IndexOfFirstObjectMatch<T> : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<T> Match
		{
			get
			{
				return (ObjectArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Match"), typeof(ObjectArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Match", value);
			}
		}

		public ObjectInputList<T> Values
		{
			get
			{
				return (ObjectInputList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Values"), typeof(ObjectInputList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Values", value);
			}
		}

		public ValueOutput<int> Index
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Index"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Index", value);
			}
		}

		public ValueOutput<bool> FoundMatch
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FoundMatch"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FoundMatch", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public IndexOfFirstObjectMatch()
		{
			((IndexOfFirstObjectMatch<>)(object)this).Values = new ObjectInputList<T>();
			((IndexOfFirstObjectMatch<>)(object)this).Index = new ValueOutput<int>(this);
			((IndexOfFirstObjectMatch<>)(object)this).FoundMatch = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IndexOfFirstObjectMatch(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility")]
	[NodeName("Pick Random", false)]
	[ContinuouslyChanging]
	public class PickRandomValue<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInputList<T> Operands
		{
			get
			{
				return (ValueInputList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public PickRandomValue()
		{
			((PickRandomValue<>)(object)this).Operands = new ValueInputList<T>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PickRandomValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility")]
	[NodeName("Pick Random", false)]
	[ContinuouslyChanging]
	public class PickRandomObject<T> : ObjectFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectInputList<T> Operands
		{
			get
			{
				return (ObjectInputList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ObjectInputList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public PickRandomObject()
		{
			((PickRandomObject<>)(object)this).Operands = new ObjectInputList<T>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PickRandomObject(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility")]
	public class NiceTypeName : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<Type> Type
		{
			get
			{
				return (ObjectArgument<Type>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Type"), typeof(ObjectArgument<Type>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Type", value);
			}
		}

		public ObjectArgument<string> OpenSymbol
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OpenSymbol"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OpenSymbol", value);
			}
		}

		public ObjectArgument<string> CloseSymbol
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CloseSymbol"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CloseSymbol", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NiceTypeName(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Utility.Uris
{
	[NodeCategory("Network")]
	public class StringToAbsoluteURI : ObjectFunctionNode<ExecutionContext, Uri>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Input
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Input"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Input", value);
			}
		}

		protected override Uri Compute(ExecutionContext context)
		{
			return (Uri)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Uri));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StringToAbsoluteURI(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Network")]
	public class EscapeUriDataString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> String
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "String"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "String", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EscapeUriDataString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Network")]
	public class UnescapeUriDataString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> String
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "String"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "String", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnescapeUriDataString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Strings
{
	[NodeCategory("Strings")]
	public abstract class StringComparer<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ObjectArgument<string> A;

		public ObjectArgument<string> B;

		public ValueArgument<StringComparison> ComparisonType;

		public static StringComparison ComparisonTypeDefault => StringComparison.InvariantCulture;

		protected override T Compute(ExecutionContext context)
		{
			0.ReadObject<string>(context);
			1.ReadObject<string>(context);
			int order = string.Compare(0.ReadObject<string>(context), 1.ReadObject<string>(context), 2.ReadValue<StringComparison>(context));
			return Compute(order);
		}

		protected abstract T Compute(int order);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Compare", false)]
	public class CompareStrings : StringComparer<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(int order)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", order), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CompareStrings(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("<", false)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_String : StringComparer<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Compute(int order)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", order), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_String(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName(">", false)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_String : StringComparer<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Compute(int order)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", order), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_String(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Strings.SmallerOrEqual_String", null)]
	[NodeName("≤", false)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_String : StringComparer<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Compute(int order)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", order), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_String(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("≥", false)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_String : StringComparer<bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Compute(int order)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", order), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_String(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Formatting")]
	public class FormatAsTime : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<int> DecimalPlaces
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DecimalPlaces"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DecimalPlaces", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.CurrentCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FormatAsTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Formatting")]
	public class FormatDateTimeAsTime : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<DateTime> Date
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Date"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Date", value);
			}
		}

		public ValueArgument<bool> Use24HourClock
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Use24HourClock"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Use24HourClock", value);
			}
		}

		public ValueArgument<bool> ShowSeconds
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ShowSeconds"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ShowSeconds", value);
			}
		}

		public ValueArgument<bool> ShowMilliseconds
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ShowMilliseconds"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ShowMilliseconds", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.CurrentCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FormatDateTimeAsTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Formatting")]
	public class FormatDateTimeAsDate : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<DateTime> Date
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Date"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Date", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.CurrentCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FormatDateTimeAsDate(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Formatting")]
	public class FormatTimespan : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TimeSpan> TimeSpan
		{
			get
			{
				return (ValueArgument<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TimeSpan"), typeof(ValueArgument<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TimeSpan", value);
			}
		}

		public ValueArgument<bool> ShowSeconds
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ShowSeconds"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ShowSeconds", value);
			}
		}

		public ValueArgument<bool> ShowMilliseconds
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ShowMilliseconds"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ShowMilliseconds", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.CurrentCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FormatTimespan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Formatting")]
	[NodeName("Format", false)]
	public class FormatString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Format
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Format"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Format", value);
			}
		}

		public ObjectArgumentList<object> Parameters
		{
			get
			{
				return (ObjectArgumentList<object>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Parameters"), typeof(ObjectArgumentList<object>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Parameters", value);
			}
		}

		public ObjectArgument<IFormatProvider> FormatProvider
		{
			get
			{
				return (ObjectArgument<IFormatProvider>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatProvider"), typeof(ObjectArgument<IFormatProvider>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatProvider", value);
			}
		}

		public static IFormatProvider FormatProviderDefault => CultureInfo.CurrentCulture;

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		public FormatString()
		{
			Parameters = new ObjectArgumentList<object>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FormatString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeName("Join", false)]
	public class StringJoin : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgumentList<string> Inputs
		{
			get
			{
				return (ObjectArgumentList<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Inputs"), typeof(ObjectArgumentList<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Inputs", value);
			}
		}

		public ObjectArgument<string> Separator
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Separator"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Separator", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		public StringJoin()
		{
			Inputs = new ObjectArgumentList<string>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StringJoin(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeName("Strip RTF", false)]
	public class StripRTF_Tags : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> String
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "String"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "String", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StripRTF_Tags(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeName("Escape String", false)]
	public class EscapeString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> String
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "String"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "String", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EscapeString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeName("Unescape String", false)]
	public class UnescapeString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> String
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "String"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "String", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnescapeString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Constants")]
	public class NewLine : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NewLine(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class EmptyString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EmptyString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class NullString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NullString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class StringLength : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> A
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StringLength(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class IsStringEmpty : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> A
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsStringEmpty(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeOverload("Core.Operators.Add")]
	public class ConcatenateString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> A
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ObjectArgument<string> B
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ConcatenateString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeName("+", false)]
	[NodeOverload("Core.Operators.Add")]
	public class ConcatenateStringChar : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> A
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<char> B
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ConcatenateStringChar(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeName("+", false)]
	[NodeOverload("Core.Operators.Add")]
	public class ConcatenateCharString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> B
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<char> A
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ConcatenateCharString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeName("+", false)]
	[NodeOverload("Core.Operators.AddMulti")]
	public class ConcatenateMultiString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgumentList<string> Inputs
		{
			get
			{
				return (ObjectArgumentList<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Inputs"), typeof(ObjectArgumentList<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Inputs", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		public ConcatenateMultiString()
		{
			Inputs = new ObjectArgumentList<string>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ConcatenateMultiString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	[NodeName("×", false)]
	[NodeOverload("Core.Operators.Mul")]
	public class MultiplyString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> A
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiplyString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class TrimString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> A
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TrimString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class ReverseString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> A
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReverseString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class IndexOfString : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ObjectArgument<string> Part
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Part"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Part", value);
			}
		}

		public ValueArgument<int> StartIndex
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "StartIndex"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "StartIndex", value);
			}
		}

		public ValueArgument<bool> SearchFromEnd
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SearchFromEnd"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SearchFromEnd", value);
			}
		}

		public ValueArgument<StringComparison> ComparisonMode
		{
			get
			{
				return (ValueArgument<StringComparison>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ComparisonMode"), typeof(ValueArgument<StringComparison>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ComparisonMode", value);
			}
		}

		public static StringComparison ComparisonModeDefault => StringComparison.CurrentCulture;

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IndexOfString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class Contains : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ObjectArgument<string> Substring
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Substring"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Substring", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Contains(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class StartsWith : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ObjectArgument<string> Substring
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Substring"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Substring", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StartsWith(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class EndsWith : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ObjectArgument<string> Substring
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Substring"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Substring", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EndsWith(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class Substring : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<int> StartIndex
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "StartIndex"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "StartIndex", value);
			}
		}

		public ValueArgument<int> Length
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Substring(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class ReplaceSubstring : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ObjectArgument<string> SearchFor
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SearchFor"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SearchFor", value);
			}
		}

		public ObjectArgument<string> ReplaceWith
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ReplaceWith"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ReplaceWith", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReplaceSubstring(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class ReplaceFirstSubstring : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ObjectArgument<string> SearchFor
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SearchFor"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SearchFor", value);
			}
		}

		public ObjectArgument<string> ReplaceWith
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ReplaceWith"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ReplaceWith", value);
			}
		}

		public ValueArgument<int> StartIndex
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "StartIndex"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "StartIndex", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ReplaceFirstSubstring(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class StringInsert : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ObjectArgument<string> Value
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<int> StartIndex
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "StartIndex"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "StartIndex", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StringInsert(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class StringRemove : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<int> StartIndex
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "StartIndex"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "StartIndex", value);
			}
		}

		public ValueArgument<int> Length
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StringRemove(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings")]
	public class CountOccurrences : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ObjectArgument<string> Search
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Search"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Search", value);
			}
		}

		public ValueArgument<StringComparison> ComparisonMode
		{
			get
			{
				return (ValueArgument<StringComparison>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ComparisonMode"), typeof(ValueArgument<StringComparison>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ComparisonMode", value);
			}
		}

		public static StringComparison ComparisonModeDefault => StringComparison.Ordinal;

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CountOccurrences(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Formatting")]
	public class ToUpper : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToUpper(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Formatting")]
	public class ToLower : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToLower(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Formatting")]
	public class Capitalize : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Capitalize(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Strings.Characters
{
	[NodeCategory("Strings/Characters")]
	public abstract class CharacterClassifier : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<char> Character;

		protected override bool Compute(ExecutionContext context)
		{
			return Classify(0.ReadValue<char>(context));
		}

		protected abstract bool Classify(char ch);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class IsControl : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsControl(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsDigit : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsDigit(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsLetter : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsLetter(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsLetterOrDigit : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsLetterOrDigit(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsLower : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsLower(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsNumber : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNumber(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsPunctuation : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsPunctuation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsSeparator : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsSeparator(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsSurrogate : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsSurrogate(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsSymbol : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsSymbol(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsUpper : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsUpper(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class IsWhiteSpace : CharacterClassifier, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool Classify(char ch)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Classify", ch), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsWhiteSpace(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	[NodeName("+", false)]
	public class ConcatenateChars : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<char> A
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<char> B
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ConcatenateChars(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	public class GetCharacter : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ValueArgument<int> Index
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Index"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Index", value);
			}
		}

		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetCharacter(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	public class ToUTF16 : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<char> Character
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToUTF16(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	public class FromUTF16 : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> UTF16
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UTF16"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UTF16", value);
			}
		}

		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromUTF16(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	public class SurrogatePairToUTF32 : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<char> HighSurrogate
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HighSurrogate"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HighSurrogate", value);
			}
		}

		public ValueArgument<char> LowSurrogate
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LowSurrogate"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LowSurrogate", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SurrogatePairToUTF32(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	public class StringToUTF32 : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> String
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "String"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "String", value);
			}
		}

		public ValueArgument<int> Index
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Index"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Index", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public StringToUTF32(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	public class FromUTF32 : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> UTF32
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UTF32"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UTF32", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromUTF32(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	public class ToLower : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<char> Character
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToLower(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	public class ToUpper : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<char> Character
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Character"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Character", value);
			}
		}

		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToUpper(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Constants")]
	public class NewLine : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NewLine(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("\\b", false)]
	[NodeCategory("Strings/Constants")]
	public class Backspace : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Backspace(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("\\a", false)]
	[NodeCategory("Strings/Constants")]
	public class Bell : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Bell(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("\\t", false)]
	[NodeCategory("Strings/Constants")]
	public class Tab : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tab(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("\\r", false)]
	[NodeCategory("Strings/Constants")]
	public class CarriageReturn : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CarriageReturn(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("\\v", false)]
	[NodeCategory("Strings/Constants")]
	public class VerticalTab : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public VerticalTab(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("\\f", false)]
	[NodeCategory("Strings/Constants")]
	public class FormFeed : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FormFeed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("' '<size=25%>(Space)", false)]
	[NodeCategory("Strings/Constants")]
	public class Space : ValueFunctionNode<ExecutionContext, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Space(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Operators
{
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> A
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool> B
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool ADefault => true;

		public static bool BDefault => true;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<bool> Operands
		{
			get
			{
				return (ValueInputList<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static bool OperandsDefault => true;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		public AND_Multi_Bool()
		{
			Operands = new ValueInputList<bool>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> A
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool> B
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<bool> Operands
		{
			get
			{
				return (ValueInputList<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		public OR_Multi_Bool()
		{
			Operands = new ValueInputList<bool>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> A
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool> B
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool> Operands
		{
			get
			{
				return (ValueArgumentList<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		public XOR_Multi_Bool()
		{
			Operands = new ValueArgumentList<bool>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> A
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> A
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool> B
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool ADefault => true;

		public static bool BDefault => true;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<bool> Operands
		{
			get
			{
				return (ValueInputList<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		public NAND_Multi_Bool()
		{
			Operands = new ValueInputList<bool>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> A
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool> B
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<bool> Operands
		{
			get
			{
				return (ValueInputList<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		public NOR_Multi_Bool()
		{
			Operands = new ValueInputList<bool>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> A
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool> B
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Bool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool> Operands
		{
			get
			{
				return (ValueArgumentList<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		public XNOR_Multi_Bool()
		{
			Operands = new ValueArgumentList<bool>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Bool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint ADefault => uint.MaxValue;

		public static uint BDefault => uint.MaxValue;

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint> Operands
		{
			get
			{
				return (ValueArgumentList<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static uint OperandsDefault => uint.MaxValue;

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		public AND_Multi_Uint()
		{
			Operands = new ValueArgumentList<uint>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint> Operands
		{
			get
			{
				return (ValueArgumentList<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		public OR_Multi_Uint()
		{
			Operands = new ValueArgumentList<uint>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint> Operands
		{
			get
			{
				return (ValueArgumentList<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		public XOR_Multi_Uint()
		{
			Operands = new ValueArgumentList<uint>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint ADefault => uint.MaxValue;

		public static uint BDefault => uint.MaxValue;

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint> Operands
		{
			get
			{
				return (ValueArgumentList<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		public NAND_Multi_Uint()
		{
			Operands = new ValueArgumentList<uint>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint> Operands
		{
			get
			{
				return (ValueArgumentList<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		public NOR_Multi_Uint()
		{
			Operands = new ValueArgumentList<uint>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint> Operands
		{
			get
			{
				return (ValueArgumentList<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		public XNOR_Multi_Uint()
		{
			Operands = new ValueArgumentList<uint>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("<<", true)]
	[NodeOverload("Core.Operators.ShiftLeft")]
	public class ShiftLeft_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftLeft_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName(">>", true)]
	[NodeOverload("Core.Operators.ShiftRight")]
	public class ShiftRight_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftRight_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROL", true)]
	[NodeOverload("Core.Operators.RotateLeft")]
	public class RotateLeft_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateLeft_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROR", true)]
	[NodeOverload("Core.Operators.RotateRight")]
	public class RotateRight_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateRight_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong ADefault => ulong.MaxValue;

		public static ulong BDefault => ulong.MaxValue;

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong> Operands
		{
			get
			{
				return (ValueArgumentList<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static ulong OperandsDefault => ulong.MaxValue;

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		public AND_Multi_Ulong()
		{
			Operands = new ValueArgumentList<ulong>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong> Operands
		{
			get
			{
				return (ValueArgumentList<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		public OR_Multi_Ulong()
		{
			Operands = new ValueArgumentList<ulong>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong> Operands
		{
			get
			{
				return (ValueArgumentList<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		public XOR_Multi_Ulong()
		{
			Operands = new ValueArgumentList<ulong>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong ADefault => ulong.MaxValue;

		public static ulong BDefault => ulong.MaxValue;

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong> Operands
		{
			get
			{
				return (ValueArgumentList<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		public NAND_Multi_Ulong()
		{
			Operands = new ValueArgumentList<ulong>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong> Operands
		{
			get
			{
				return (ValueArgumentList<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		public NOR_Multi_Ulong()
		{
			Operands = new ValueArgumentList<ulong>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong> Operands
		{
			get
			{
				return (ValueArgumentList<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		public XNOR_Multi_Ulong()
		{
			Operands = new ValueArgumentList<ulong>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("<<", true)]
	[NodeOverload("Core.Operators.ShiftLeft")]
	public class ShiftLeft_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftLeft_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName(">>", true)]
	[NodeOverload("Core.Operators.ShiftRight")]
	public class ShiftRight_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftRight_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROL", true)]
	[NodeOverload("Core.Operators.RotateLeft")]
	public class RotateLeft_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateLeft_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROR", true)]
	[NodeOverload("Core.Operators.RotateRight")]
	public class RotateRight_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateRight_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int ADefault => int.MaxValue;

		public static int BDefault => int.MaxValue;

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int> Operands
		{
			get
			{
				return (ValueArgumentList<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static int OperandsDefault => int.MaxValue;

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		public AND_Multi_Int()
		{
			Operands = new ValueArgumentList<int>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int> Operands
		{
			get
			{
				return (ValueArgumentList<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		public OR_Multi_Int()
		{
			Operands = new ValueArgumentList<int>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int> Operands
		{
			get
			{
				return (ValueArgumentList<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		public XOR_Multi_Int()
		{
			Operands = new ValueArgumentList<int>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int ADefault => int.MaxValue;

		public static int BDefault => int.MaxValue;

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int> Operands
		{
			get
			{
				return (ValueArgumentList<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		public NAND_Multi_Int()
		{
			Operands = new ValueArgumentList<int>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int> Operands
		{
			get
			{
				return (ValueArgumentList<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		public NOR_Multi_Int()
		{
			Operands = new ValueArgumentList<int>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int> Operands
		{
			get
			{
				return (ValueArgumentList<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		public XNOR_Multi_Int()
		{
			Operands = new ValueArgumentList<int>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("<<", true)]
	[NodeOverload("Core.Operators.ShiftLeft")]
	public class ShiftLeft_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftLeft_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName(">>", true)]
	[NodeOverload("Core.Operators.ShiftRight")]
	public class ShiftRight_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftRight_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROL", true)]
	[NodeOverload("Core.Operators.RotateLeft")]
	public class RotateLeft_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateLeft_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROR", true)]
	[NodeOverload("Core.Operators.RotateRight")]
	public class RotateRight_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateRight_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long ADefault => long.MaxValue;

		public static long BDefault => long.MaxValue;

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long> Operands
		{
			get
			{
				return (ValueArgumentList<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static long OperandsDefault => long.MaxValue;

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		public AND_Multi_Long()
		{
			Operands = new ValueArgumentList<long>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long> Operands
		{
			get
			{
				return (ValueArgumentList<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		public OR_Multi_Long()
		{
			Operands = new ValueArgumentList<long>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long> Operands
		{
			get
			{
				return (ValueArgumentList<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		public XOR_Multi_Long()
		{
			Operands = new ValueArgumentList<long>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long ADefault => long.MaxValue;

		public static long BDefault => long.MaxValue;

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long> Operands
		{
			get
			{
				return (ValueArgumentList<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		public NAND_Multi_Long()
		{
			Operands = new ValueArgumentList<long>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long> Operands
		{
			get
			{
				return (ValueArgumentList<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		public NOR_Multi_Long()
		{
			Operands = new ValueArgumentList<long>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long> Operands
		{
			get
			{
				return (ValueArgumentList<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		public XNOR_Multi_Long()
		{
			Operands = new ValueArgumentList<long>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("<<", true)]
	[NodeOverload("Core.Operators.ShiftLeft")]
	public class ShiftLeft_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftLeft_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName(">>", true)]
	[NodeOverload("Core.Operators.ShiftRight")]
	public class ShiftRight_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftRight_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROL", true)]
	[NodeOverload("Core.Operators.RotateLeft")]
	public class RotateLeft_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateLeft_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROR", true)]
	[NodeOverload("Core.Operators.RotateRight")]
	public class RotateRight_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateRight_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Float : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Float : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Shaping")]
	[NodeName("Smooth Step", false)]
	[NodeOverload("Core.Math.Shaping.SmoothStep")]
	public class SmoothStep_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SmoothStep_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Shaping")]
	[NodeName("Smoother Step", false)]
	[NodeOverload("Core.Math.Shaping.SmootherStep")]
	public class SmootherStep_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SmootherStep_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Shaping")]
	[NodeName("Sin Shape", false)]
	[NodeOverload("Core.Math.Shaping.SinShape")]
	public class SinShape_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SinShape_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Shaping")]
	[NodeName("Mirrored Pow Shape", false)]
	[NodeOverload("Core.Math.Shaping.SymmetricPowShape")]
	public class SymmetricPowShape_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> Power
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		public static float PowerDefault => 1f;

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SymmetricPowShape_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeOverload("Core.Math.Distance")]
	public class Distance_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Distance_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_Float : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_Float : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Double : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Double : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Shaping")]
	[NodeName("Smooth Step", false)]
	[NodeOverload("Core.Math.Shaping.SmoothStep")]
	public class SmoothStep_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SmoothStep_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Shaping")]
	[NodeName("Smoother Step", false)]
	[NodeOverload("Core.Math.Shaping.SmootherStep")]
	public class SmootherStep_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SmootherStep_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Shaping")]
	[NodeName("Sin Shape", false)]
	[NodeOverload("Core.Math.Shaping.SinShape")]
	public class SinShape_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SinShape_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Shaping")]
	[NodeName("Mirrored Pow Shape", false)]
	[NodeOverload("Core.Math.Shaping.SymmetricPowShape")]
	public class SymmetricPowShape_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<double> Power
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		public static double PowerDefault => 1.0;

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SymmetricPowShape_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeOverload("Core.Math.Distance")]
	public class Distance_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Distance_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_Double : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_Double : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack2")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xy", false)]
	public class Pack_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> X
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<bool> Y
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xy", false)]
	[NodeOverload("Core.Operators.Unpack2")]
	public class Unpack_Bool2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> V
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<bool> X
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<bool> Y
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Bool2()
		{
			X = new ValueOutput<bool>(this);
			Y = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("All", true)]
	[NodeOverload("Core.Operators.Bool.All")]
	public class All_Bool2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> V
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public All_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("Any", true)]
	[NodeOverload("Core.Operators.Bool.Any")]
	public class Any_Bool2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> V
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Any_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("None", true)]
	[NodeOverload("Core.Operators.Bool.None")]
	public class None_Bool2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> V
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public None_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("Xor", true)]
	[NodeOverload("Core.Operators.Bool.XorElements")]
	public class XorElements_Bool2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> V
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XorElements_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool2> B
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool2 ADefault => bool2.True;

		public static bool2 BDefault => bool2.True;

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool2> Operands
		{
			get
			{
				return (ValueArgumentList<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static bool2 OperandsDefault => bool2.True;

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		public AND_Multi_Bool2()
		{
			Operands = new ValueArgumentList<bool2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool2> B
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool2> Operands
		{
			get
			{
				return (ValueArgumentList<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		public OR_Multi_Bool2()
		{
			Operands = new ValueArgumentList<bool2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool2> B
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool2> Operands
		{
			get
			{
				return (ValueArgumentList<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		public XOR_Multi_Bool2()
		{
			Operands = new ValueArgumentList<bool2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool2> B
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool2 ADefault => bool2.True;

		public static bool2 BDefault => bool2.True;

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool2> Operands
		{
			get
			{
				return (ValueArgumentList<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		public NAND_Multi_Bool2()
		{
			Operands = new ValueArgumentList<bool2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool2> B
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool2> Operands
		{
			get
			{
				return (ValueArgumentList<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		public NOR_Multi_Bool2()
		{
			Operands = new ValueArgumentList<bool2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool2> B
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool2> Operands
		{
			get
			{
				return (ValueArgumentList<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		public XNOR_Multi_Bool2()
		{
			Operands = new ValueArgumentList<bool2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("<<", true)]
	[NodeOverload("Core.Operators.ShiftLeft")]
	public class ShiftLeft_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftLeft_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName(">>", true)]
	[NodeOverload("Core.Operators.ShiftRight")]
	public class ShiftRight_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftRight_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROL", true)]
	[NodeOverload("Core.Operators.RotateLeft")]
	public class RotateLeft_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateLeft_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROR", true)]
	[NodeOverload("Core.Operators.RotateRight")]
	public class RotateRight_Bool2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool2> A
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateRight_Bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack2")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xy", false)]
	public class Pack_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> X
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<uint> Y
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xy", false)]
	[NodeOverload("Core.Operators.Unpack2")]
	public class Unpack_Uint2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> V
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<uint> X
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<uint> Y
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Uint2()
		{
			X = new ValueOutput<uint>(this);
			Y = new ValueOutput<uint>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Uint2_Uint : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Uint2_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Uint_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Uint_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Uint2_Uint : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Uint2_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Uint_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Uint_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Uint2_Uint : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint2 ADefault => uint2.One;

		public static uint BDefault => 1u;

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Uint2_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Uint_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint ADefault => 1u;

		public static uint2 BDefault => uint2.One;

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Uint_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Uint2_Uint : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint2 ADefault => uint2.One;

		public static uint BDefault => 1u;

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Uint2_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Uint_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint ADefault => 1u;

		public static uint2 BDefault => uint2.One;

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Uint_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Uint2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Uint2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Uint2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Uint2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> OnTrue
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<uint2> OnFalse
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool2> Mask
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Uint2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Uint2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Uint2", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Uint2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Uint2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint2 ADefault => uint2.MaxValue;

		public static uint2 BDefault => uint2.MaxValue;

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint2> Operands
		{
			get
			{
				return (ValueArgumentList<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static uint2 OperandsDefault => uint2.MaxValue;

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		public AND_Multi_Uint2()
		{
			Operands = new ValueArgumentList<uint2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint2> Operands
		{
			get
			{
				return (ValueArgumentList<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		public OR_Multi_Uint2()
		{
			Operands = new ValueArgumentList<uint2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint2> Operands
		{
			get
			{
				return (ValueArgumentList<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		public XOR_Multi_Uint2()
		{
			Operands = new ValueArgumentList<uint2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint2 ADefault => uint2.MaxValue;

		public static uint2 BDefault => uint2.MaxValue;

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint2> Operands
		{
			get
			{
				return (ValueArgumentList<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		public NAND_Multi_Uint2()
		{
			Operands = new ValueArgumentList<uint2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint2> Operands
		{
			get
			{
				return (ValueArgumentList<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		public NOR_Multi_Uint2()
		{
			Operands = new ValueArgumentList<uint2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> A
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint2> B
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint2> Operands
		{
			get
			{
				return (ValueArgumentList<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		public XNOR_Multi_Uint2()
		{
			Operands = new ValueArgumentList<uint2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack2")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xy", false)]
	public class Pack_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> X
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<ulong> Y
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xy", false)]
	[NodeOverload("Core.Operators.Unpack2")]
	public class Unpack_Ulong2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> V
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<ulong> X
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<ulong> Y
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Ulong2()
		{
			X = new ValueOutput<ulong>(this);
			Y = new ValueOutput<ulong>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Ulong2_Ulong : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Ulong2_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Ulong_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Ulong_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Ulong2_Ulong : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Ulong2_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Ulong_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Ulong_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Ulong2_Ulong : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong2 ADefault => ulong2.One;

		public static ulong BDefault => 1uL;

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Ulong2_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Ulong_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong ADefault => 1uL;

		public static ulong2 BDefault => ulong2.One;

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Ulong_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Ulong2_Ulong : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong2 ADefault => ulong2.One;

		public static ulong BDefault => 1uL;

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Ulong2_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Ulong_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong ADefault => 1uL;

		public static ulong2 BDefault => ulong2.One;

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Ulong_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Ulong2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Ulong2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Ulong2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Ulong2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> OnTrue
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<ulong2> OnFalse
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool2> Mask
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Ulong2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Ulong2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Ulong2", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Ulong2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Ulong2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong2 ADefault => ulong2.MaxValue;

		public static ulong2 BDefault => ulong2.MaxValue;

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong2> Operands
		{
			get
			{
				return (ValueArgumentList<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static ulong2 OperandsDefault => ulong2.MaxValue;

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		public AND_Multi_Ulong2()
		{
			Operands = new ValueArgumentList<ulong2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong2> Operands
		{
			get
			{
				return (ValueArgumentList<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		public OR_Multi_Ulong2()
		{
			Operands = new ValueArgumentList<ulong2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong2> Operands
		{
			get
			{
				return (ValueArgumentList<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		public XOR_Multi_Ulong2()
		{
			Operands = new ValueArgumentList<ulong2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong2 ADefault => ulong2.MaxValue;

		public static ulong2 BDefault => ulong2.MaxValue;

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong2> Operands
		{
			get
			{
				return (ValueArgumentList<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		public NAND_Multi_Ulong2()
		{
			Operands = new ValueArgumentList<ulong2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong2> Operands
		{
			get
			{
				return (ValueArgumentList<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		public NOR_Multi_Ulong2()
		{
			Operands = new ValueArgumentList<ulong2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> A
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong2> B
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong2> Operands
		{
			get
			{
				return (ValueArgumentList<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		public XNOR_Multi_Ulong2()
		{
			Operands = new ValueArgumentList<ulong2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack2")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xy", false)]
	public class Pack_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> X
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<int> Y
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xy", false)]
	[NodeOverload("Core.Operators.Unpack2")]
	public class Unpack_Int2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> V
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<int> X
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<int> Y
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Int2()
		{
			X = new ValueOutput<int>(this);
			Y = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Int2_Int : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Int2_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Int_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Int_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Int2_Int : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Int2_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Int_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Int_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Int2_Int : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int2 ADefault => int2.One;

		public static int BDefault => 1;

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Int2_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Int_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int ADefault => 1;

		public static int2 BDefault => int2.One;

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Int_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Int2_Int : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int2 ADefault => int2.One;

		public static int BDefault => 1;

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Int2_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Int_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int ADefault => 1;

		public static int2 BDefault => int2.One;

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Int_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Int2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Int2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Int2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Int2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> OnTrue
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<int2> OnFalse
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool2> Mask
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Int2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Int2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Int2", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Int2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Int2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int2 ADefault => int2.MaxValue;

		public static int2 BDefault => int2.MaxValue;

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int2> Operands
		{
			get
			{
				return (ValueArgumentList<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static int2 OperandsDefault => int2.MaxValue;

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		public AND_Multi_Int2()
		{
			Operands = new ValueArgumentList<int2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int2> Operands
		{
			get
			{
				return (ValueArgumentList<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		public OR_Multi_Int2()
		{
			Operands = new ValueArgumentList<int2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int2> Operands
		{
			get
			{
				return (ValueArgumentList<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		public XOR_Multi_Int2()
		{
			Operands = new ValueArgumentList<int2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int2 ADefault => int2.MaxValue;

		public static int2 BDefault => int2.MaxValue;

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int2> Operands
		{
			get
			{
				return (ValueArgumentList<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		public NAND_Multi_Int2()
		{
			Operands = new ValueArgumentList<int2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int2> Operands
		{
			get
			{
				return (ValueArgumentList<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		public NOR_Multi_Int2()
		{
			Operands = new ValueArgumentList<int2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> A
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int2> B
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int2> Operands
		{
			get
			{
				return (ValueArgumentList<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		public XNOR_Multi_Int2()
		{
			Operands = new ValueArgumentList<int2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack2")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xy", false)]
	public class Pack_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> X
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<long> Y
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xy", false)]
	[NodeOverload("Core.Operators.Unpack2")]
	public class Unpack_Long2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> V
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<long> X
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<long> Y
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Long2()
		{
			X = new ValueOutput<long>(this);
			Y = new ValueOutput<long>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Long2_Long : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Long2_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Long_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Long_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Long2_Long : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Long2_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Long_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Long_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Long2_Long : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long2 ADefault => long2.One;

		public static long BDefault => 1L;

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Long2_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Long_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long ADefault => 1L;

		public static long2 BDefault => long2.One;

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Long_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Long2_Long : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long2 ADefault => long2.One;

		public static long BDefault => 1L;

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Long2_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Long_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long ADefault => 1L;

		public static long2 BDefault => long2.One;

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Long_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Long2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Long2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Long2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Long2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> OnTrue
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<long2> OnFalse
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool2> Mask
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Long2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Long2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Long2", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Long2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Long2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long2 ADefault => long2.MaxValue;

		public static long2 BDefault => long2.MaxValue;

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long2> Operands
		{
			get
			{
				return (ValueArgumentList<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static long2 OperandsDefault => long2.MaxValue;

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		public AND_Multi_Long2()
		{
			Operands = new ValueArgumentList<long2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long2> Operands
		{
			get
			{
				return (ValueArgumentList<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		public OR_Multi_Long2()
		{
			Operands = new ValueArgumentList<long2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long2> Operands
		{
			get
			{
				return (ValueArgumentList<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		public XOR_Multi_Long2()
		{
			Operands = new ValueArgumentList<long2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long2 ADefault => long2.MaxValue;

		public static long2 BDefault => long2.MaxValue;

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long2> Operands
		{
			get
			{
				return (ValueArgumentList<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		public NAND_Multi_Long2()
		{
			Operands = new ValueArgumentList<long2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long2> Operands
		{
			get
			{
				return (ValueArgumentList<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		public NOR_Multi_Long2()
		{
			Operands = new ValueArgumentList<long2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> A
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long2> B
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long2> Operands
		{
			get
			{
				return (ValueArgumentList<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		public XNOR_Multi_Long2()
		{
			Operands = new ValueArgumentList<long2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack2")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xy", false)]
	public class Pack_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xy", false)]
	[NodeOverload("Core.Operators.Unpack2")]
	public class Unpack_Float2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> V
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<float> X
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<float> Y
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Float2()
		{
			X = new ValueOutput<float>(this);
			Y = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Float2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Float2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_Float2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Value
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_Float2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Value
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Float2_Float : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Float2_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Float_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Float_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Float2_Float : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Float2_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Float_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Float_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float2_Float : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float2 ADefault => float2.One;

		public static float BDefault => 1f;

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float2_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static float2 BDefault => float2.One;

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Float2_Float : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float2 ADefault => float2.One;

		public static float BDefault => 1f;

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Float2_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Float_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static float2 BDefault => float2.One;

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Float_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Float2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Float2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Math.Distance")]
	public class Distance_Float2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Distance_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Float2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Float2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> OnTrue
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<float2> OnFalse
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool2> Mask
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("Normalize", true)]
	[NodeOverload("Core.Operators.Normalized")]
	public class Normalized_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Normalized_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Operators.Project")]
	public class Project_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Project_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Float2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Float2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Float2", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Float2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Float2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack2")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xy", false)]
	public class Pack_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> X
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<double> Y
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xy", false)]
	[NodeOverload("Core.Operators.Unpack2")]
	public class Unpack_Double2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> V
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<double> X
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<double> Y
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Double2()
		{
			X = new ValueOutput<double>(this);
			Y = new ValueOutput<double>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Double2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Double2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_Double2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Value
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_Double2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Value
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Double2_Double : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Double2_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Double_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Double_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Double2_Double : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Double2_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Double_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Double_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Double2_Double : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double2 ADefault => double2.One;

		public static double BDefault => 1.0;

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Double2_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Double_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double ADefault => 1.0;

		public static double2 BDefault => double2.One;

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Double_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Double2_Double : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double2 ADefault => double2.One;

		public static double BDefault => 1.0;

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Double2_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Double_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double ADefault => 1.0;

		public static double2 BDefault => double2.One;

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Double_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Double2 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Double2 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Math.Distance")]
	public class Distance_Double2 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Distance_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Double2 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Double2 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> OnTrue
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<double2> OnFalse
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool2> Mask
		{
			get
			{
				return (ValueArgument<bool2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("Normalize", true)]
	[NodeOverload("Core.Operators.Normalized")]
	public class Normalized_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Normalized_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Operators.Project")]
	public class Project_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Project_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Double2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Double2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Double2", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Double2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Double2 : ValueFunctionNode<ExecutionContext, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack3")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyz", false)]
	public class Pack_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> X
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<bool> Y
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<bool> Z
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyz", false)]
	[NodeOverload("Core.Operators.Unpack3")]
	public class Unpack_Bool3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> V
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<bool> X
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<bool> Y
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<bool> Z
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Bool3()
		{
			X = new ValueOutput<bool>(this);
			Y = new ValueOutput<bool>(this);
			Z = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("All", true)]
	[NodeOverload("Core.Operators.Bool.All")]
	public class All_Bool3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> V
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public All_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("Any", true)]
	[NodeOverload("Core.Operators.Bool.Any")]
	public class Any_Bool3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> V
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Any_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("None", true)]
	[NodeOverload("Core.Operators.Bool.None")]
	public class None_Bool3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> V
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public None_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("Xor", true)]
	[NodeOverload("Core.Operators.Bool.XorElements")]
	public class XorElements_Bool3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> V
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XorElements_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool3> B
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool3 ADefault => bool3.True;

		public static bool3 BDefault => bool3.True;

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool3> Operands
		{
			get
			{
				return (ValueArgumentList<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static bool3 OperandsDefault => bool3.True;

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		public AND_Multi_Bool3()
		{
			Operands = new ValueArgumentList<bool3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool3> B
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool3> Operands
		{
			get
			{
				return (ValueArgumentList<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		public OR_Multi_Bool3()
		{
			Operands = new ValueArgumentList<bool3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool3> B
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool3> Operands
		{
			get
			{
				return (ValueArgumentList<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		public XOR_Multi_Bool3()
		{
			Operands = new ValueArgumentList<bool3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool3> B
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool3 ADefault => bool3.True;

		public static bool3 BDefault => bool3.True;

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool3> Operands
		{
			get
			{
				return (ValueArgumentList<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		public NAND_Multi_Bool3()
		{
			Operands = new ValueArgumentList<bool3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool3> B
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool3> Operands
		{
			get
			{
				return (ValueArgumentList<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		public NOR_Multi_Bool3()
		{
			Operands = new ValueArgumentList<bool3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool3> B
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool3> Operands
		{
			get
			{
				return (ValueArgumentList<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		public XNOR_Multi_Bool3()
		{
			Operands = new ValueArgumentList<bool3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("<<", true)]
	[NodeOverload("Core.Operators.ShiftLeft")]
	public class ShiftLeft_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftLeft_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName(">>", true)]
	[NodeOverload("Core.Operators.ShiftRight")]
	public class ShiftRight_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftRight_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROL", true)]
	[NodeOverload("Core.Operators.RotateLeft")]
	public class RotateLeft_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateLeft_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROR", true)]
	[NodeOverload("Core.Operators.RotateRight")]
	public class RotateRight_Bool3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool3> A
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateRight_Bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack3")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyz", false)]
	public class Pack_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> X
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<uint> Y
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<uint> Z
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyz", false)]
	[NodeOverload("Core.Operators.Unpack3")]
	public class Unpack_Uint3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> V
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<uint> X
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<uint> Y
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<uint> Z
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Uint3()
		{
			X = new ValueOutput<uint>(this);
			Y = new ValueOutput<uint>(this);
			Z = new ValueOutput<uint>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Uint3_Uint : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Uint3_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Uint_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Uint_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Uint3_Uint : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Uint3_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Uint_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Uint_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Uint3_Uint : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint3 ADefault => uint3.One;

		public static uint BDefault => 1u;

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Uint3_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Uint_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint ADefault => 1u;

		public static uint3 BDefault => uint3.One;

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Uint_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Uint3_Uint : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint3 ADefault => uint3.One;

		public static uint BDefault => 1u;

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Uint3_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Uint_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint ADefault => 1u;

		public static uint3 BDefault => uint3.One;

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Uint_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Uint3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Uint3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Uint3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Uint3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> OnTrue
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<uint3> OnFalse
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool3> Mask
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Uint3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Uint3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Uint3", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Uint3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Uint3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint3 ADefault => uint3.MaxValue;

		public static uint3 BDefault => uint3.MaxValue;

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint3> Operands
		{
			get
			{
				return (ValueArgumentList<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static uint3 OperandsDefault => uint3.MaxValue;

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		public AND_Multi_Uint3()
		{
			Operands = new ValueArgumentList<uint3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint3> Operands
		{
			get
			{
				return (ValueArgumentList<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		public OR_Multi_Uint3()
		{
			Operands = new ValueArgumentList<uint3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint3> Operands
		{
			get
			{
				return (ValueArgumentList<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		public XOR_Multi_Uint3()
		{
			Operands = new ValueArgumentList<uint3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint3 ADefault => uint3.MaxValue;

		public static uint3 BDefault => uint3.MaxValue;

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint3> Operands
		{
			get
			{
				return (ValueArgumentList<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		public NAND_Multi_Uint3()
		{
			Operands = new ValueArgumentList<uint3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint3> Operands
		{
			get
			{
				return (ValueArgumentList<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		public NOR_Multi_Uint3()
		{
			Operands = new ValueArgumentList<uint3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> A
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint3> B
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint3> Operands
		{
			get
			{
				return (ValueArgumentList<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		public XNOR_Multi_Uint3()
		{
			Operands = new ValueArgumentList<uint3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack3")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyz", false)]
	public class Pack_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> X
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<ulong> Y
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<ulong> Z
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyz", false)]
	[NodeOverload("Core.Operators.Unpack3")]
	public class Unpack_Ulong3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> V
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<ulong> X
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<ulong> Y
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<ulong> Z
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Ulong3()
		{
			X = new ValueOutput<ulong>(this);
			Y = new ValueOutput<ulong>(this);
			Z = new ValueOutput<ulong>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Ulong3_Ulong : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Ulong3_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Ulong_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Ulong_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Ulong3_Ulong : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Ulong3_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Ulong_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Ulong_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Ulong3_Ulong : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong3 ADefault => ulong3.One;

		public static ulong BDefault => 1uL;

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Ulong3_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Ulong_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong ADefault => 1uL;

		public static ulong3 BDefault => ulong3.One;

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Ulong_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Ulong3_Ulong : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong3 ADefault => ulong3.One;

		public static ulong BDefault => 1uL;

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Ulong3_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Ulong_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong ADefault => 1uL;

		public static ulong3 BDefault => ulong3.One;

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Ulong_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Ulong3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Ulong3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Ulong3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Ulong3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> OnTrue
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<ulong3> OnFalse
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool3> Mask
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Ulong3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Ulong3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Ulong3", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Ulong3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Ulong3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong3 ADefault => ulong3.MaxValue;

		public static ulong3 BDefault => ulong3.MaxValue;

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong3> Operands
		{
			get
			{
				return (ValueArgumentList<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static ulong3 OperandsDefault => ulong3.MaxValue;

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		public AND_Multi_Ulong3()
		{
			Operands = new ValueArgumentList<ulong3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong3> Operands
		{
			get
			{
				return (ValueArgumentList<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		public OR_Multi_Ulong3()
		{
			Operands = new ValueArgumentList<ulong3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong3> Operands
		{
			get
			{
				return (ValueArgumentList<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		public XOR_Multi_Ulong3()
		{
			Operands = new ValueArgumentList<ulong3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong3 ADefault => ulong3.MaxValue;

		public static ulong3 BDefault => ulong3.MaxValue;

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong3> Operands
		{
			get
			{
				return (ValueArgumentList<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		public NAND_Multi_Ulong3()
		{
			Operands = new ValueArgumentList<ulong3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong3> Operands
		{
			get
			{
				return (ValueArgumentList<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		public NOR_Multi_Ulong3()
		{
			Operands = new ValueArgumentList<ulong3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> A
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong3> B
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong3> Operands
		{
			get
			{
				return (ValueArgumentList<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		public XNOR_Multi_Ulong3()
		{
			Operands = new ValueArgumentList<ulong3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack3")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyz", false)]
	public class Pack_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> X
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<int> Y
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<int> Z
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyz", false)]
	[NodeOverload("Core.Operators.Unpack3")]
	public class Unpack_Int3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> V
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<int> X
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<int> Y
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<int> Z
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Int3()
		{
			X = new ValueOutput<int>(this);
			Y = new ValueOutput<int>(this);
			Z = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Int3_Int : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Int3_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Int_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Int_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Int3_Int : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Int3_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Int_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Int_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Int3_Int : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int3 ADefault => int3.One;

		public static int BDefault => 1;

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Int3_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Int_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int ADefault => 1;

		public static int3 BDefault => int3.One;

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Int_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Int3_Int : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int3 ADefault => int3.One;

		public static int BDefault => 1;

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Int3_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Int_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int ADefault => 1;

		public static int3 BDefault => int3.One;

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Int_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Int3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Int3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Int3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Int3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> OnTrue
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<int3> OnFalse
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool3> Mask
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Int3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Int3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Int3", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Int3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Int3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int3 ADefault => int3.MaxValue;

		public static int3 BDefault => int3.MaxValue;

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int3> Operands
		{
			get
			{
				return (ValueArgumentList<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static int3 OperandsDefault => int3.MaxValue;

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		public AND_Multi_Int3()
		{
			Operands = new ValueArgumentList<int3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int3> Operands
		{
			get
			{
				return (ValueArgumentList<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		public OR_Multi_Int3()
		{
			Operands = new ValueArgumentList<int3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int3> Operands
		{
			get
			{
				return (ValueArgumentList<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		public XOR_Multi_Int3()
		{
			Operands = new ValueArgumentList<int3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int3 ADefault => int3.MaxValue;

		public static int3 BDefault => int3.MaxValue;

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int3> Operands
		{
			get
			{
				return (ValueArgumentList<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		public NAND_Multi_Int3()
		{
			Operands = new ValueArgumentList<int3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int3> Operands
		{
			get
			{
				return (ValueArgumentList<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		public NOR_Multi_Int3()
		{
			Operands = new ValueArgumentList<int3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> A
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int3> B
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int3> Operands
		{
			get
			{
				return (ValueArgumentList<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		public XNOR_Multi_Int3()
		{
			Operands = new ValueArgumentList<int3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack3")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyz", false)]
	public class Pack_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> X
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<long> Y
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<long> Z
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyz", false)]
	[NodeOverload("Core.Operators.Unpack3")]
	public class Unpack_Long3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> V
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<long> X
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<long> Y
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<long> Z
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Long3()
		{
			X = new ValueOutput<long>(this);
			Y = new ValueOutput<long>(this);
			Z = new ValueOutput<long>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Long3_Long : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Long3_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Long_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Long_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Long3_Long : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Long3_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Long_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Long_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Long3_Long : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long3 ADefault => long3.One;

		public static long BDefault => 1L;

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Long3_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Long_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long ADefault => 1L;

		public static long3 BDefault => long3.One;

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Long_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Long3_Long : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long3 ADefault => long3.One;

		public static long BDefault => 1L;

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Long3_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Long_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long ADefault => 1L;

		public static long3 BDefault => long3.One;

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Long_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Long3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Long3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Long3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Long3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> OnTrue
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<long3> OnFalse
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool3> Mask
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Long3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Long3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Long3", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Long3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Long3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long3 ADefault => long3.MaxValue;

		public static long3 BDefault => long3.MaxValue;

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long3> Operands
		{
			get
			{
				return (ValueArgumentList<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static long3 OperandsDefault => long3.MaxValue;

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		public AND_Multi_Long3()
		{
			Operands = new ValueArgumentList<long3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long3> Operands
		{
			get
			{
				return (ValueArgumentList<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		public OR_Multi_Long3()
		{
			Operands = new ValueArgumentList<long3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long3> Operands
		{
			get
			{
				return (ValueArgumentList<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		public XOR_Multi_Long3()
		{
			Operands = new ValueArgumentList<long3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long3 ADefault => long3.MaxValue;

		public static long3 BDefault => long3.MaxValue;

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long3> Operands
		{
			get
			{
				return (ValueArgumentList<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		public NAND_Multi_Long3()
		{
			Operands = new ValueArgumentList<long3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long3> Operands
		{
			get
			{
				return (ValueArgumentList<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		public NOR_Multi_Long3()
		{
			Operands = new ValueArgumentList<long3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> A
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long3> B
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long3> Operands
		{
			get
			{
				return (ValueArgumentList<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		public XNOR_Multi_Long3()
		{
			Operands = new ValueArgumentList<long3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack3")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyz", false)]
	public class Pack_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> Z
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyz", false)]
	[NodeOverload("Core.Operators.Unpack3")]
	public class Unpack_Float3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> V
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<float> X
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<float> Y
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<float> Z
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Float3()
		{
			X = new ValueOutput<float>(this);
			Y = new ValueOutput<float>(this);
			Z = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Float3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Float3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_Float3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Value
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_Float3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Value
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Float3_Float : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Float3_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Float_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Float_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Float3_Float : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Float3_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Float_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Float_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float3_Float : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float3 ADefault => float3.One;

		public static float BDefault => 1f;

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float3_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static float3 BDefault => float3.One;

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Float3_Float : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float3 ADefault => float3.One;

		public static float BDefault => 1f;

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Float3_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Float_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static float3 BDefault => float3.One;

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Float_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Float3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Float3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Math.Distance")]
	public class Distance_Float3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Distance_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Float3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Float3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> OnTrue
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<float3> OnFalse
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool3> Mask
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("Normalize", true)]
	[NodeOverload("Core.Operators.Normalized")]
	public class Normalized_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Normalized_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Operators.Project")]
	public class Project_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Project_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("×<br><size=25%>(cross product)", true)]
	[NodeOverload("Core.Operators.Cross")]
	public class Cross_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cross_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("Reflect", true)]
	[NodeOverload("Core.Operators.Reflect")]
	public class Reflect_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Reflect_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Float3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Float3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Float3", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Float3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Float3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack3")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyz", false)]
	public class Pack_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> X
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<double> Y
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double> Z
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyz", false)]
	[NodeOverload("Core.Operators.Unpack3")]
	public class Unpack_Double3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> V
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<double> X
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<double> Y
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<double> Z
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Double3()
		{
			X = new ValueOutput<double>(this);
			Y = new ValueOutput<double>(this);
			Z = new ValueOutput<double>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Double3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Double3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_Double3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Value
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_Double3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Value
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Double3_Double : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Double3_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Double_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Double_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Double3_Double : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Double3_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Double_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Double_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Double3_Double : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double3 ADefault => double3.One;

		public static double BDefault => 1.0;

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Double3_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Double_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double ADefault => 1.0;

		public static double3 BDefault => double3.One;

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Double_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Double3_Double : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double3 ADefault => double3.One;

		public static double BDefault => 1.0;

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Double3_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Double_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double ADefault => 1.0;

		public static double3 BDefault => double3.One;

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Double_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Double3 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Double3 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Math.Distance")]
	public class Distance_Double3 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Distance_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Double3 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Double3 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> OnTrue
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<double3> OnFalse
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool3> Mask
		{
			get
			{
				return (ValueArgument<bool3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("Normalize", true)]
	[NodeOverload("Core.Operators.Normalized")]
	public class Normalized_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Normalized_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Operators.Project")]
	public class Project_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Project_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("×<br><size=25%>(cross product)", true)]
	[NodeOverload("Core.Operators.Cross")]
	public class Cross_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cross_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("Reflect", true)]
	[NodeOverload("Core.Operators.Reflect")]
	public class Reflect_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Reflect_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Double3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Double3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Double3", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Double3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Double3 : ValueFunctionNode<ExecutionContext, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack4")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyzw", false)]
	public class Pack_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> X
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<bool> Y
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<bool> Z
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueArgument<bool> W
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyzw", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_Bool4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> V
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<bool> X
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<bool> Y
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<bool> Z
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueOutput<bool> W
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Bool4()
		{
			X = new ValueOutput<bool>(this);
			Y = new ValueOutput<bool>(this);
			Z = new ValueOutput<bool>(this);
			W = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("All", true)]
	[NodeOverload("Core.Operators.Bool.All")]
	public class All_Bool4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> V
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public All_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("Any", true)]
	[NodeOverload("Core.Operators.Bool.Any")]
	public class Any_Bool4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> V
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Any_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("None", true)]
	[NodeOverload("Core.Operators.Bool.None")]
	public class None_Bool4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> V
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public None_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Bool Vectors")]
	[NodeName("Xor", true)]
	[NodeOverload("Core.Operators.Bool.XorElements")]
	public class XorElements_Bool4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> V
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XorElements_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool4> B
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool4 ADefault => bool4.True;

		public static bool4 BDefault => bool4.True;

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool4> Operands
		{
			get
			{
				return (ValueArgumentList<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static bool4 OperandsDefault => bool4.True;

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		public AND_Multi_Bool4()
		{
			Operands = new ValueArgumentList<bool4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool4> B
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool4> Operands
		{
			get
			{
				return (ValueArgumentList<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		public OR_Multi_Bool4()
		{
			Operands = new ValueArgumentList<bool4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool4> B
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool4> Operands
		{
			get
			{
				return (ValueArgumentList<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		public XOR_Multi_Bool4()
		{
			Operands = new ValueArgumentList<bool4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool4> B
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool4 ADefault => bool4.True;

		public static bool4 BDefault => bool4.True;

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool4> Operands
		{
			get
			{
				return (ValueArgumentList<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		public NAND_Multi_Bool4()
		{
			Operands = new ValueArgumentList<bool4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool4> B
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool4> Operands
		{
			get
			{
				return (ValueArgumentList<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		public NOR_Multi_Bool4()
		{
			Operands = new ValueArgumentList<bool4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool4> B
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool4> Operands
		{
			get
			{
				return (ValueArgumentList<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		public XNOR_Multi_Bool4()
		{
			Operands = new ValueArgumentList<bool4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("<<", true)]
	[NodeOverload("Core.Operators.ShiftLeft")]
	public class ShiftLeft_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftLeft_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName(">>", true)]
	[NodeOverload("Core.Operators.ShiftRight")]
	public class ShiftRight_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Shift
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Shift"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Shift", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftRight_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROL", true)]
	[NodeOverload("Core.Operators.RotateLeft")]
	public class RotateLeft_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateLeft_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("ROR", true)]
	[NodeOverload("Core.Operators.RotateRight")]
	public class RotateRight_Bool4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool4> A
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> Rotate
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotate"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotate", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotateRight_Bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack4")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyzw", false)]
	public class Pack_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> X
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<uint> Y
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<uint> Z
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueArgument<uint> W
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyzw", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_Uint4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> V
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<uint> X
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<uint> Y
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<uint> Z
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueOutput<uint> W
		{
			get
			{
				return (ValueOutput<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueOutput<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Uint4()
		{
			X = new ValueOutput<uint>(this);
			Y = new ValueOutput<uint>(this);
			Z = new ValueOutput<uint>(this);
			W = new ValueOutput<uint>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Uint4_Uint : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Uint4_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Uint_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Uint_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Uint4_Uint : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Uint4_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Uint_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Uint_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Uint4_Uint : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint4 ADefault => uint4.One;

		public static uint BDefault => 1u;

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Uint4_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Uint_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint ADefault => 1u;

		public static uint4 BDefault => uint4.One;

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Uint_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Uint4_Uint : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint4 ADefault => uint4.One;

		public static uint BDefault => 1u;

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Uint4_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Uint_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint ADefault => 1u;

		public static uint4 BDefault => uint4.One;

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Uint_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Uint4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Uint4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Uint4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Uint4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> OnTrue
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<uint4> OnFalse
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool4> Mask
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Uint4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Uint4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Uint4", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Uint4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Uint4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint4 ADefault => uint4.MaxValue;

		public static uint4 BDefault => uint4.MaxValue;

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint4> Operands
		{
			get
			{
				return (ValueArgumentList<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static uint4 OperandsDefault => uint4.MaxValue;

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		public AND_Multi_Uint4()
		{
			Operands = new ValueArgumentList<uint4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint4> Operands
		{
			get
			{
				return (ValueArgumentList<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		public OR_Multi_Uint4()
		{
			Operands = new ValueArgumentList<uint4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint4> Operands
		{
			get
			{
				return (ValueArgumentList<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		public XOR_Multi_Uint4()
		{
			Operands = new ValueArgumentList<uint4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static uint4 ADefault => uint4.MaxValue;

		public static uint4 BDefault => uint4.MaxValue;

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint4> Operands
		{
			get
			{
				return (ValueArgumentList<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		public NAND_Multi_Uint4()
		{
			Operands = new ValueArgumentList<uint4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint4> Operands
		{
			get
			{
				return (ValueArgumentList<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		public NOR_Multi_Uint4()
		{
			Operands = new ValueArgumentList<uint4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> A
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint4> B
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<uint4> Operands
		{
			get
			{
				return (ValueArgumentList<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		public XNOR_Multi_Uint4()
		{
			Operands = new ValueArgumentList<uint4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack4")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyzw", false)]
	public class Pack_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> X
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<ulong> Y
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<ulong> Z
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueArgument<ulong> W
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyzw", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_Ulong4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> V
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<ulong> X
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<ulong> Y
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<ulong> Z
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueOutput<ulong> W
		{
			get
			{
				return (ValueOutput<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueOutput<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Ulong4()
		{
			X = new ValueOutput<ulong>(this);
			Y = new ValueOutput<ulong>(this);
			Z = new ValueOutput<ulong>(this);
			W = new ValueOutput<ulong>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Ulong4_Ulong : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Ulong4_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Ulong_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Ulong_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Ulong4_Ulong : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Ulong4_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Ulong_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Ulong_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Ulong4_Ulong : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong4 ADefault => ulong4.One;

		public static ulong BDefault => 1uL;

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Ulong4_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Ulong_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong ADefault => 1uL;

		public static ulong4 BDefault => ulong4.One;

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Ulong_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Ulong4_Ulong : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong4 ADefault => ulong4.One;

		public static ulong BDefault => 1uL;

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Ulong4_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Ulong_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong ADefault => 1uL;

		public static ulong4 BDefault => ulong4.One;

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Ulong_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Ulong4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Ulong4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Ulong4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Ulong4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> OnTrue
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<ulong4> OnFalse
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool4> Mask
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Ulong4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Ulong4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Ulong4", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Ulong4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Ulong4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong4 ADefault => ulong4.MaxValue;

		public static ulong4 BDefault => ulong4.MaxValue;

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong4> Operands
		{
			get
			{
				return (ValueArgumentList<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static ulong4 OperandsDefault => ulong4.MaxValue;

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		public AND_Multi_Ulong4()
		{
			Operands = new ValueArgumentList<ulong4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong4> Operands
		{
			get
			{
				return (ValueArgumentList<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		public OR_Multi_Ulong4()
		{
			Operands = new ValueArgumentList<ulong4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong4> Operands
		{
			get
			{
				return (ValueArgumentList<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		public XOR_Multi_Ulong4()
		{
			Operands = new ValueArgumentList<ulong4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static ulong4 ADefault => ulong4.MaxValue;

		public static ulong4 BDefault => ulong4.MaxValue;

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong4> Operands
		{
			get
			{
				return (ValueArgumentList<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		public NAND_Multi_Ulong4()
		{
			Operands = new ValueArgumentList<ulong4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong4> Operands
		{
			get
			{
				return (ValueArgumentList<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		public NOR_Multi_Ulong4()
		{
			Operands = new ValueArgumentList<ulong4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> A
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong4> B
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<ulong4> Operands
		{
			get
			{
				return (ValueArgumentList<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		public XNOR_Multi_Ulong4()
		{
			Operands = new ValueArgumentList<ulong4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack4")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyzw", false)]
	public class Pack_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> X
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<int> Y
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<int> Z
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueArgument<int> W
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyzw", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_Int4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> V
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<int> X
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<int> Y
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<int> Z
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueOutput<int> W
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Int4()
		{
			X = new ValueOutput<int>(this);
			Y = new ValueOutput<int>(this);
			Z = new ValueOutput<int>(this);
			W = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Int4_Int : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Int4_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Int_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Int_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Int4_Int : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Int4_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Int_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Int_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Int4_Int : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int4 ADefault => int4.One;

		public static int BDefault => 1;

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Int4_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Int_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int ADefault => 1;

		public static int4 BDefault => int4.One;

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Int_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Int4_Int : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int4 ADefault => int4.One;

		public static int BDefault => 1;

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Int4_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Int_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int ADefault => 1;

		public static int4 BDefault => int4.One;

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Int_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Int4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Int4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Int4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Int4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> OnTrue
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<int4> OnFalse
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool4> Mask
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Int4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Int4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Int4", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Int4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Int4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int4 ADefault => int4.MaxValue;

		public static int4 BDefault => int4.MaxValue;

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int4> Operands
		{
			get
			{
				return (ValueArgumentList<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static int4 OperandsDefault => int4.MaxValue;

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		public AND_Multi_Int4()
		{
			Operands = new ValueArgumentList<int4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int4> Operands
		{
			get
			{
				return (ValueArgumentList<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		public OR_Multi_Int4()
		{
			Operands = new ValueArgumentList<int4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int4> Operands
		{
			get
			{
				return (ValueArgumentList<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		public XOR_Multi_Int4()
		{
			Operands = new ValueArgumentList<int4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static int4 ADefault => int4.MaxValue;

		public static int4 BDefault => int4.MaxValue;

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int4> Operands
		{
			get
			{
				return (ValueArgumentList<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		public NAND_Multi_Int4()
		{
			Operands = new ValueArgumentList<int4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int4> Operands
		{
			get
			{
				return (ValueArgumentList<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		public NOR_Multi_Int4()
		{
			Operands = new ValueArgumentList<int4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> A
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int4> B
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<int4> Operands
		{
			get
			{
				return (ValueArgumentList<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		public XNOR_Multi_Int4()
		{
			Operands = new ValueArgumentList<int4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack4")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyzw", false)]
	public class Pack_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> X
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<long> Y
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<long> Z
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueArgument<long> W
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyzw", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_Long4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> V
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<long> X
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<long> Y
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<long> Z
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueOutput<long> W
		{
			get
			{
				return (ValueOutput<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueOutput<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Long4()
		{
			X = new ValueOutput<long>(this);
			Y = new ValueOutput<long>(this);
			Z = new ValueOutput<long>(this);
			W = new ValueOutput<long>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Long4_Long : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Long4_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Long_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Long_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Long4_Long : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Long4_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Long_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Long_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Long4_Long : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long4 ADefault => long4.One;

		public static long BDefault => 1L;

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Long4_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Long_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long ADefault => 1L;

		public static long4 BDefault => long4.One;

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Long_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Long4_Long : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long4 ADefault => long4.One;

		public static long BDefault => 1L;

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Long4_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Long_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long ADefault => 1L;

		public static long4 BDefault => long4.One;

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Long_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Long4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Long4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Long4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Long4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> OnTrue
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<long4> OnFalse
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool4> Mask
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Long4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Long4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Long4", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Long4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Long4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", true)]
	[NodeOverload("Core.Operators.AND")]
	public class AND_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long4 ADefault => long4.MaxValue;

		public static long4 BDefault => long4.MaxValue;

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("AND", false)]
	[NodeOverload("Core.Operators.MultiAND")]
	public class AND_Multi_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long4> Operands
		{
			get
			{
				return (ValueArgumentList<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static long4 OperandsDefault => long4.MaxValue;

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		public AND_Multi_Long4()
		{
			Operands = new ValueArgumentList<long4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AND_Multi_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", true)]
	[NodeOverload("Core.Operators.OR")]
	public class OR_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("OR", false)]
	[NodeOverload("Core.Operators.MultiOR")]
	public class OR_Multi_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long4> Operands
		{
			get
			{
				return (ValueArgumentList<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		public OR_Multi_Long4()
		{
			Operands = new ValueArgumentList<long4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OR_Multi_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XOR", true)]
	[NodeOverload("Core.Operators.XOR")]
	public class XOR_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("XOR", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiXOR")]
	public class XOR_Multi_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long4> Operands
		{
			get
			{
				return (ValueArgumentList<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		public XOR_Multi_Long4()
		{
			Operands = new ValueArgumentList<long4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XOR_Multi_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOT", true)]
	[NodeOverload("Core.Operators.NOT")]
	public class NOT_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOT_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NAND", true)]
	[NodeOverload("Core.Operators.NAND")]
	public class NAND_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static long4 ADefault => long4.MaxValue;

		public static long4 BDefault => long4.MaxValue;

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("NAND", false)]
	[NodeCategory("Operators/Boolean")]
	[NodeOverload("Core.Operators.MultiNAND")]
	public class NAND_Multi_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long4> Operands
		{
			get
			{
				return (ValueArgumentList<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		public NAND_Multi_Long4()
		{
			Operands = new ValueArgumentList<long4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NAND_Multi_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", true)]
	[NodeOverload("Core.Operators.NOR")]
	public class NOR_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("NOR", false)]
	[NodeOverload("Core.Operators.MultiNOR")]
	public class NOR_Multi_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long4> Operands
		{
			get
			{
				return (ValueArgumentList<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		public NOR_Multi_Long4()
		{
			Operands = new ValueArgumentList<long4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NOR_Multi_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", true)]
	[NodeOverload("Core.Operators.XNOR")]
	public class XNOR_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> A
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long4> B
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Boolean")]
	[NodeName("XNOR", false)]
	[NodeOverload("Core.Operators.MultiXNOR")]
	public class XNOR_Multi_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<long4> Operands
		{
			get
			{
				return (ValueArgumentList<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		public XNOR_Multi_Long4()
		{
			Operands = new ValueArgumentList<long4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public XNOR_Multi_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack4")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyzw", false)]
	public class Pack_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> Z
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueArgument<float> W
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyzw", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_Float4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> V
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<float> X
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<float> Y
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<float> Z
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueOutput<float> W
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Float4()
		{
			X = new ValueOutput<float>(this);
			Y = new ValueOutput<float>(this);
			Z = new ValueOutput<float>(this);
			W = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Float4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Float4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_Float4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Value
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_Float4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Value
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Float4_Float : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Float4_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Float_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Float_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Float4_Float : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Float4_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Float_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Float_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float4_Float : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float4 ADefault => float4.One;

		public static float BDefault => 1f;

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float4_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static float4 BDefault => float4.One;

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Float4_Float : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float4 ADefault => float4.One;

		public static float BDefault => 1f;

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Float4_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Float_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static float4 BDefault => float4.One;

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Float_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Float4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Float4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Math.Distance")]
	public class Distance_Float4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Distance_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Float4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Float4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> OnTrue
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<float4> OnFalse
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool4> Mask
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("Normalize", true)]
	[NodeOverload("Core.Operators.Normalized")]
	public class Normalized_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Normalized_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Operators.Project")]
	public class Project_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Project_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Float4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Float4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Float4", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Float4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Float4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack4")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyzw", false)]
	public class Pack_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> X
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<double> Y
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double> Z
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueArgument<double> W
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyzw", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_Double4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> V
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<double> X
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<double> Y
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<double> Z
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueOutput<double> W
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Double4()
		{
			X = new ValueOutput<double>(this);
			Y = new ValueOutput<double>(this);
			Z = new ValueOutput<double>(this);
			W = new ValueOutput<double>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Double4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Double4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_Double4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Value
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_Double4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Value
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Double4_Double : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Double4_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Double_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Double_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Double4_Double : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Double4_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Double_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Double_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Double4_Double : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double4 ADefault => double4.One;

		public static double BDefault => 1.0;

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Double4_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Double_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double ADefault => 1.0;

		public static double4 BDefault => double4.One;

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Double_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Double4_Double : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double4 ADefault => double4.One;

		public static double BDefault => 1.0;

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Double4_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Double_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static double ADefault => 1.0;

		public static double4 BDefault => double4.One;

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Double_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|", true)]
	[NodeOverload("Core.Operators.Magnitude")]
	public class Magnitude_Double4 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Magnitude_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("|V|<sup>2</sup>", true)]
	[NodeOverload("Core.Operators.SqrMagnitude")]
	public class SqrMagnitude_Double4 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SqrMagnitude_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Math.Distance")]
	public class Distance_Double4 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Distance_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("⋅<br><size=25%>(dot product)", true)]
	[NodeOverload("Core.Operators.Dot")]
	public class Dot_Double4 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Dot_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_Double4 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> OnTrue
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<double4> OnFalse
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool4> Mask
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("Normalize", true)]
	[NodeOverload("Core.Operators.Normalized")]
	public class Normalized_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Normalized_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeOverload("Core.Operators.Project")]
	public class Project_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Project_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_Double4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_Double4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Double4", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_Double4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_Double4 : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Float2x2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2x2> A
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2x2> B
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Float2x2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2x2> A
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2x2> B
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Rows", false)]
	[NodeOverload("Core.Operators.PackRows")]
	public class PackRows_Float2x2 : ValueFunctionNode<ExecutionContext, float2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Row0
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueArgument<float2> Row1
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		protected override float2x2 Compute(ExecutionContext context)
		{
			return (float2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackRows_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Columns", false)]
	[NodeOverload("Core.Operators.PackColumns")]
	public class PackColumns_Float2x2 : ValueFunctionNode<ExecutionContext, float2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Column0
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueArgument<float2> Column1
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		protected override float2x2 Compute(ExecutionContext context)
		{
			return (float2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackColumns_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Rows", false)]
	[NodeOverload("Core.Operators.UnpackRows")]
	public class UnpackRows_Float2x2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2x2> Matrix
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<float2> Row0
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueOutput<float2> Row1
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackRows_Float2x2()
		{
			Row0 = new ValueOutput<float2>(this);
			Row1 = new ValueOutput<float2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackRows_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Columns", false)]
	[NodeOverload("Core.Operators.UnpackColumns")]
	public class UnpackColumns_Float2x2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2x2> Matrix
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<float2> Column0
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueOutput<float2> Column1
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackColumns_Float2x2()
		{
			Column0 = new ValueOutput<float2>(this);
			Column1 = new ValueOutput<float2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackColumns_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Get Matrix Element", false)]
	[NodeOverload("Core.Operators.MatrixElement")]
	public class MatrixElement_Float2x2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2x2> Matrix
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueArgument<int> Row
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row", value);
			}
		}

		public ValueArgument<int> Column
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MatrixElement_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Determinant", false)]
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Operators.Determinant")]
	public class Determinant_Float2x2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2x2> A
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Determinant_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>-1</sup><br><size=25%>(inverse)", true)]
	[NodeOverload("Core.Operators.Inverse")]
	public class Inverse_Float2x2 : ValueFunctionNode<ExecutionContext, float2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2x2> A
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float2x2 Compute(ExecutionContext context)
		{
			return (float2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Inverse_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>T</sup><br><size=25%>(transpose)", true)]
	[NodeOverload("Core.Operators.Transpose")]
	public class Transpose_Float2x2 : ValueFunctionNode<ExecutionContext, float2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2x2> A
		{
			get
			{
				return (ValueArgument<float2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float2x2 Compute(ExecutionContext context)
		{
			return (float2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Transpose_Float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Double2x2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2x2> A
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2x2> B
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Double2x2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2x2> A
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2x2> B
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Rows", false)]
	[NodeOverload("Core.Operators.PackRows")]
	public class PackRows_Double2x2 : ValueFunctionNode<ExecutionContext, double2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Row0
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueArgument<double2> Row1
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		protected override double2x2 Compute(ExecutionContext context)
		{
			return (double2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackRows_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Columns", false)]
	[NodeOverload("Core.Operators.PackColumns")]
	public class PackColumns_Double2x2 : ValueFunctionNode<ExecutionContext, double2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Column0
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueArgument<double2> Column1
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		protected override double2x2 Compute(ExecutionContext context)
		{
			return (double2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackColumns_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Rows", false)]
	[NodeOverload("Core.Operators.UnpackRows")]
	public class UnpackRows_Double2x2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2x2> Matrix
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<double2> Row0
		{
			get
			{
				return (ValueOutput<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueOutput<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueOutput<double2> Row1
		{
			get
			{
				return (ValueOutput<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueOutput<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackRows_Double2x2()
		{
			Row0 = new ValueOutput<double2>(this);
			Row1 = new ValueOutput<double2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackRows_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Columns", false)]
	[NodeOverload("Core.Operators.UnpackColumns")]
	public class UnpackColumns_Double2x2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2x2> Matrix
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<double2> Column0
		{
			get
			{
				return (ValueOutput<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueOutput<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueOutput<double2> Column1
		{
			get
			{
				return (ValueOutput<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueOutput<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackColumns_Double2x2()
		{
			Column0 = new ValueOutput<double2>(this);
			Column1 = new ValueOutput<double2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackColumns_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Get Matrix Element", false)]
	[NodeOverload("Core.Operators.MatrixElement")]
	public class MatrixElement_Double2x2 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2x2> Matrix
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueArgument<int> Row
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row", value);
			}
		}

		public ValueArgument<int> Column
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MatrixElement_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Determinant", false)]
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Operators.Determinant")]
	public class Determinant_Double2x2 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2x2> A
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Determinant_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>-1</sup><br><size=25%>(inverse)", true)]
	[NodeOverload("Core.Operators.Inverse")]
	public class Inverse_Double2x2 : ValueFunctionNode<ExecutionContext, double2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2x2> A
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double2x2 Compute(ExecutionContext context)
		{
			return (double2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Inverse_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>T</sup><br><size=25%>(transpose)", true)]
	[NodeOverload("Core.Operators.Transpose")]
	public class Transpose_Double2x2 : ValueFunctionNode<ExecutionContext, double2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2x2> A
		{
			get
			{
				return (ValueArgument<double2x2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2x2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double2x2 Compute(ExecutionContext context)
		{
			return (double2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Transpose_Double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Float3x3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> A
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3x3> B
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Float3x3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> A
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3x3> B
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Rows", false)]
	[NodeOverload("Core.Operators.PackRows")]
	public class PackRows_Float3x3 : ValueFunctionNode<ExecutionContext, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Row0
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueArgument<float3> Row1
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		public ValueArgument<float3> Row2
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row2"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row2", value);
			}
		}

		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackRows_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Columns", false)]
	[NodeOverload("Core.Operators.PackColumns")]
	public class PackColumns_Float3x3 : ValueFunctionNode<ExecutionContext, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Column0
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueArgument<float3> Column1
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		public ValueArgument<float3> Column2
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column2"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column2", value);
			}
		}

		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackColumns_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Rows", false)]
	[NodeOverload("Core.Operators.UnpackRows")]
	public class UnpackRows_Float3x3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> Matrix
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<float3> Row0
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueOutput<float3> Row1
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		public ValueOutput<float3> Row2
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row2"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row2", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackRows_Float3x3()
		{
			Row0 = new ValueOutput<float3>(this);
			Row1 = new ValueOutput<float3>(this);
			Row2 = new ValueOutput<float3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackRows_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Columns", false)]
	[NodeOverload("Core.Operators.UnpackColumns")]
	public class UnpackColumns_Float3x3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> Matrix
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<float3> Column0
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueOutput<float3> Column1
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		public ValueOutput<float3> Column2
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column2"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column2", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackColumns_Float3x3()
		{
			Column0 = new ValueOutput<float3>(this);
			Column1 = new ValueOutput<float3>(this);
			Column2 = new ValueOutput<float3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackColumns_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Get Matrix Element", false)]
	[NodeOverload("Core.Operators.MatrixElement")]
	public class MatrixElement_Float3x3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> Matrix
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueArgument<int> Row
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row", value);
			}
		}

		public ValueArgument<int> Column
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MatrixElement_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Determinant", false)]
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Operators.Determinant")]
	public class Determinant_Float3x3 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> A
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Determinant_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>-1</sup><br><size=25%>(inverse)", true)]
	[NodeOverload("Core.Operators.Inverse")]
	public class Inverse_Float3x3 : ValueFunctionNode<ExecutionContext, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> A
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Inverse_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>T</sup><br><size=25%>(transpose)", true)]
	[NodeOverload("Core.Operators.Transpose")]
	public class Transpose_Float3x3 : ValueFunctionNode<ExecutionContext, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> A
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Transpose_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedScale")]
	public class Decomposed_Scale_Float3x3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> A
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Scale_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedRotation")]
	public class Decomposed_Rotation_Float3x3 : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> A
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Rotation_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeScale")]
	public class Compose_ScaleFloat3x3 : ValueFunctionNode<ExecutionContext, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Scale
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public static float3 ScaleDefault => float3.One;

		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_ScaleFloat3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeRotation")]
	public class Compose_Rotation_Float3x3 : ValueFunctionNode<ExecutionContext, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> Rotation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public static floatQ RotationDefault => floatQ.Identity;

		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_Rotation_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeScaleRotation")]
	public class Compose_ScaleRotation_Float3x3 : ValueFunctionNode<ExecutionContext, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Scale
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public ValueArgument<floatQ> Rotation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public static float3 ScaleDefault => float3.One;

		public static floatQ RotationDefault => floatQ.Identity;

		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_ScaleRotation_Float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("x", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float3x3_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3x3> A
		{
			get
			{
				return (ValueArgument<float3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float3x3_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Double3x3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> A
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3x3> B
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Double3x3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> A
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3x3> B
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Rows", false)]
	[NodeOverload("Core.Operators.PackRows")]
	public class PackRows_Double3x3 : ValueFunctionNode<ExecutionContext, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Row0
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueArgument<double3> Row1
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		public ValueArgument<double3> Row2
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row2"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row2", value);
			}
		}

		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackRows_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Columns", false)]
	[NodeOverload("Core.Operators.PackColumns")]
	public class PackColumns_Double3x3 : ValueFunctionNode<ExecutionContext, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Column0
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueArgument<double3> Column1
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		public ValueArgument<double3> Column2
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column2"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column2", value);
			}
		}

		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackColumns_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Rows", false)]
	[NodeOverload("Core.Operators.UnpackRows")]
	public class UnpackRows_Double3x3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> Matrix
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<double3> Row0
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueOutput<double3> Row1
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		public ValueOutput<double3> Row2
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row2"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row2", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackRows_Double3x3()
		{
			Row0 = new ValueOutput<double3>(this);
			Row1 = new ValueOutput<double3>(this);
			Row2 = new ValueOutput<double3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackRows_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Columns", false)]
	[NodeOverload("Core.Operators.UnpackColumns")]
	public class UnpackColumns_Double3x3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> Matrix
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<double3> Column0
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueOutput<double3> Column1
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		public ValueOutput<double3> Column2
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column2"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column2", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackColumns_Double3x3()
		{
			Column0 = new ValueOutput<double3>(this);
			Column1 = new ValueOutput<double3>(this);
			Column2 = new ValueOutput<double3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackColumns_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Get Matrix Element", false)]
	[NodeOverload("Core.Operators.MatrixElement")]
	public class MatrixElement_Double3x3 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> Matrix
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueArgument<int> Row
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row", value);
			}
		}

		public ValueArgument<int> Column
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MatrixElement_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Determinant", false)]
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Operators.Determinant")]
	public class Determinant_Double3x3 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> A
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Determinant_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>-1</sup><br><size=25%>(inverse)", true)]
	[NodeOverload("Core.Operators.Inverse")]
	public class Inverse_Double3x3 : ValueFunctionNode<ExecutionContext, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> A
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Inverse_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>T</sup><br><size=25%>(transpose)", true)]
	[NodeOverload("Core.Operators.Transpose")]
	public class Transpose_Double3x3 : ValueFunctionNode<ExecutionContext, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> A
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Transpose_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedScale")]
	public class Decomposed_Scale_Double3x3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> A
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Scale_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedRotation")]
	public class Decomposed_Rotation_Double3x3 : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> A
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Rotation_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeScale")]
	public class Compose_ScaleDouble3x3 : ValueFunctionNode<ExecutionContext, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Scale
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public static double3 ScaleDefault => double3.One;

		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_ScaleDouble3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeRotation")]
	public class Compose_Rotation_Double3x3 : ValueFunctionNode<ExecutionContext, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> Rotation
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public static doubleQ RotationDefault => doubleQ.Identity;

		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_Rotation_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeScaleRotation")]
	public class Compose_ScaleRotation_Double3x3 : ValueFunctionNode<ExecutionContext, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Scale
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public ValueArgument<doubleQ> Rotation
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public static double3 ScaleDefault => double3.One;

		public static doubleQ RotationDefault => doubleQ.Identity;

		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_ScaleRotation_Double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("x", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Double3x3_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3x3> A
		{
			get
			{
				return (ValueArgument<double3x3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3x3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Double3x3_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Float4x4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4x4> B
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Float4x4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4x4> B
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Rows", false)]
	[NodeOverload("Core.Operators.PackRows")]
	public class PackRows_Float4x4 : ValueFunctionNode<ExecutionContext, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Row0
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueArgument<float4> Row1
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		public ValueArgument<float4> Row2
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row2"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row2", value);
			}
		}

		public ValueArgument<float4> Row3
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row3"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row3", value);
			}
		}

		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackRows_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Columns", false)]
	[NodeOverload("Core.Operators.PackColumns")]
	public class PackColumns_Float4x4 : ValueFunctionNode<ExecutionContext, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Column0
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueArgument<float4> Column1
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		public ValueArgument<float4> Column2
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column2"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column2", value);
			}
		}

		public ValueArgument<float4> Column3
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column3"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column3", value);
			}
		}

		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackColumns_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Rows", false)]
	[NodeOverload("Core.Operators.UnpackRows")]
	public class UnpackRows_Float4x4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> Matrix
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<float4> Row0
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueOutput<float4> Row1
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		public ValueOutput<float4> Row2
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row2"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row2", value);
			}
		}

		public ValueOutput<float4> Row3
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row3"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row3", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackRows_Float4x4()
		{
			Row0 = new ValueOutput<float4>(this);
			Row1 = new ValueOutput<float4>(this);
			Row2 = new ValueOutput<float4>(this);
			Row3 = new ValueOutput<float4>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackRows_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Columns", false)]
	[NodeOverload("Core.Operators.UnpackColumns")]
	public class UnpackColumns_Float4x4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> Matrix
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<float4> Column0
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueOutput<float4> Column1
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		public ValueOutput<float4> Column2
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column2"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column2", value);
			}
		}

		public ValueOutput<float4> Column3
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column3"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column3", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackColumns_Float4x4()
		{
			Column0 = new ValueOutput<float4>(this);
			Column1 = new ValueOutput<float4>(this);
			Column2 = new ValueOutput<float4>(this);
			Column3 = new ValueOutput<float4>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackColumns_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Get Matrix Element", false)]
	[NodeOverload("Core.Operators.MatrixElement")]
	public class MatrixElement_Float4x4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> Matrix
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueArgument<int> Row
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row", value);
			}
		}

		public ValueArgument<int> Column
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MatrixElement_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Determinant", false)]
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Operators.Determinant")]
	public class Determinant_Float4x4 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Determinant_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>-1</sup><br><size=25%>(inverse)", true)]
	[NodeOverload("Core.Operators.Inverse")]
	public class Inverse_Float4x4 : ValueFunctionNode<ExecutionContext, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Inverse_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>T</sup><br><size=25%>(transpose)", true)]
	[NodeOverload("Core.Operators.Transpose")]
	public class Transpose_Float4x4 : ValueFunctionNode<ExecutionContext, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Transpose_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedScale")]
	public class Decomposed_Scale_Float4x4 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Scale_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedRotation")]
	public class Decomposed_Rotation_Float4x4 : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Rotation_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeScale")]
	public class Compose_ScaleFloat4x4 : ValueFunctionNode<ExecutionContext, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Scale
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public static float3 ScaleDefault => float3.One;

		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_ScaleFloat4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeRotation")]
	public class Compose_Rotation_Float4x4 : ValueFunctionNode<ExecutionContext, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> Rotation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public static floatQ RotationDefault => floatQ.Identity;

		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_Rotation_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeScaleRotation")]
	public class Compose_ScaleRotation_Float4x4 : ValueFunctionNode<ExecutionContext, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Scale
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public ValueArgument<floatQ> Rotation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public static float3 ScaleDefault => float3.One;

		public static floatQ RotationDefault => floatQ.Identity;

		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_ScaleRotation_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedPosition")]
	public class Decomposed_Position_Float4x4 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Position_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Marix.ComposeTRS")]
	public class ComposeTRS_Float4x4 : ValueFunctionNode<ExecutionContext, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Position
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueArgument<floatQ> Rotation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public ValueArgument<float3> Scale
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public static float3 ScaleDefault => float3.One;

		public static floatQ RotationDefault => floatQ.Identity;

		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeTRS_Float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("x", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float4x4_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float4x4_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("x", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float4x4_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4x4> A
		{
			get
			{
				return (ValueArgument<float4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float4x4_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_Double4x4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4x4> B
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_Double4x4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4x4> B
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Rows", false)]
	[NodeOverload("Core.Operators.PackRows")]
	public class PackRows_Double4x4 : ValueFunctionNode<ExecutionContext, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Row0
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueArgument<double4> Row1
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		public ValueArgument<double4> Row2
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row2"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row2", value);
			}
		}

		public ValueArgument<double4> Row3
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row3"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row3", value);
			}
		}

		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackRows_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Pack Columns", false)]
	[NodeOverload("Core.Operators.PackColumns")]
	public class PackColumns_Double4x4 : ValueFunctionNode<ExecutionContext, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Column0
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueArgument<double4> Column1
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		public ValueArgument<double4> Column2
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column2"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column2", value);
			}
		}

		public ValueArgument<double4> Column3
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column3"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column3", value);
			}
		}

		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackColumns_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Rows", false)]
	[NodeOverload("Core.Operators.UnpackRows")]
	public class UnpackRows_Double4x4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> Matrix
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<double4> Row0
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row0"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row0", value);
			}
		}

		public ValueOutput<double4> Row1
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row1"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row1", value);
			}
		}

		public ValueOutput<double4> Row2
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row2"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row2", value);
			}
		}

		public ValueOutput<double4> Row3
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row3"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row3", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackRows_Double4x4()
		{
			Row0 = new ValueOutput<double4>(this);
			Row1 = new ValueOutput<double4>(this);
			Row2 = new ValueOutput<double4>(this);
			Row3 = new ValueOutput<double4>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackRows_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Unpack Columns", false)]
	[NodeOverload("Core.Operators.UnpackColumns")]
	public class UnpackColumns_Double4x4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> Matrix
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueOutput<double4> Column0
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column0"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column0", value);
			}
		}

		public ValueOutput<double4> Column1
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column1"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column1", value);
			}
		}

		public ValueOutput<double4> Column2
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column2"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column2", value);
			}
		}

		public ValueOutput<double4> Column3
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column3"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column3", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public UnpackColumns_Double4x4()
		{
			Column0 = new ValueOutput<double4>(this);
			Column1 = new ValueOutput<double4>(this);
			Column2 = new ValueOutput<double4>(this);
			Column3 = new ValueOutput<double4>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UnpackColumns_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("Get Matrix Element", false)]
	[NodeOverload("Core.Operators.MatrixElement")]
	public class MatrixElement_Double4x4 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> Matrix
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Matrix"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Matrix", value);
			}
		}

		public ValueArgument<int> Row
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Row"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Row", value);
			}
		}

		public ValueArgument<int> Column
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Column"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Column", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MatrixElement_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Determinant", false)]
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Operators.Determinant")]
	public class Determinant_Double4x4 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Determinant_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>-1</sup><br><size=25%>(inverse)", true)]
	[NodeOverload("Core.Operators.Inverse")]
	public class Inverse_Double4x4 : ValueFunctionNode<ExecutionContext, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Inverse_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeName("M<sup>T</sup><br><size=25%>(transpose)", true)]
	[NodeOverload("Core.Operators.Transpose")]
	public class Transpose_Double4x4 : ValueFunctionNode<ExecutionContext, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Transpose_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedScale")]
	public class Decomposed_Scale_Double4x4 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Scale_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedRotation")]
	public class Decomposed_Rotation_Double4x4 : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Rotation_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeScale")]
	public class Compose_ScaleDouble4x4 : ValueFunctionNode<ExecutionContext, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Scale
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public static double3 ScaleDefault => double3.One;

		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_ScaleDouble4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeRotation")]
	public class Compose_Rotation_Double4x4 : ValueFunctionNode<ExecutionContext, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> Rotation
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public static doubleQ RotationDefault => doubleQ.Identity;

		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_Rotation_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.ComposeScaleRotation")]
	public class Compose_ScaleRotation_Double4x4 : ValueFunctionNode<ExecutionContext, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Scale
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public ValueArgument<doubleQ> Rotation
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public static double3 ScaleDefault => double3.One;

		public static doubleQ RotationDefault => doubleQ.Identity;

		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Compose_ScaleRotation_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Matrix.DecomposedPosition")]
	public class Decomposed_Position_Double4x4 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Decomposed_Position_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Matrix")]
	[NodeOverload("Core.Math.Marix.ComposeTRS")]
	public class ComposeTRS_Double4x4 : ValueFunctionNode<ExecutionContext, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Position
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueArgument<doubleQ> Rotation
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rotation"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rotation", value);
			}
		}

		public ValueArgument<double3> Scale
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Scale"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Scale", value);
			}
		}

		public static double3 ScaleDefault => double3.One;

		public static doubleQ RotationDefault => doubleQ.Identity;

		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeTRS_Double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("x", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Double4x4_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Double4x4_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("x", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Double4x4_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4x4> A
		{
			get
			{
				return (ValueArgument<double4x4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4x4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Double4x4_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack4")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyzw", false)]
	public class Pack_FloatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> Z
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueArgument<float> W
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_FloatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyzw", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_FloatQ : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> V
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<float> X
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<float> Y
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<float> Z
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueOutput<float> W
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_FloatQ()
		{
			X = new ValueOutput<float>(this);
			Y = new ValueOutput<float>(this);
			Z = new ValueOutput<float>(this);
			W = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_FloatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_FloatQ : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> A
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<floatQ> B
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_FloatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_FloatQ : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> A
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<floatQ> B
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Epsilon
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static float EpsilonDefault => 9.403955E-38f;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_FloatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_FloatQ : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> Value
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_FloatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_FloatQ : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> Value
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_FloatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_FloatQ_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> A
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static floatQ ADefault => floatQ.Identity;

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_FloatQ_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_floatQ : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> A
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<floatQ> B
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static floatQ ADefault => floatQ.Identity;

		public static floatQ BDefault => floatQ.Identity;

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.Pack4")]
	[NodeCategory("Operators/Packing")]
	[NodeName("Pack xyzw", false)]
	public class Pack_DoubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> X
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<double> Y
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double> Z
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueArgument<double> W
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_DoubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Packing")]
	[NodeName("Unpack xyzw", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_DoubleQ : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> V
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<double> X
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<double> Y
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<double> Z
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Z"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Z", value);
			}
		}

		public ValueOutput<double> W
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "W"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "W", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_DoubleQ()
		{
			X = new ValueOutput<double>(this);
			Y = new ValueOutput<double>(this);
			Z = new ValueOutput<double>(this);
			W = new ValueOutput<double>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_DoubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≈", false)]
	[NodeOverload("Core.Operators.Approximately")]
	public class Approximately_DoubleQ : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> A
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<doubleQ> B
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Approximately_DoubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("!≈", false)]
	[NodeOverload("Core.Operators.ApproximatelyNot")]
	public class ApproximatelyNot_DoubleQ : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> A
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<doubleQ> B
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<double> Epsilon
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Epsilon"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Epsilon", value);
			}
		}

		public static double EpsilonDefault => 1.7800590868057611E-307;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApproximatelyNot_DoubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is NaN", true)]
	[NodeOverload("Core.Operators.IsNaN")]
	public class IsNaN_DoubleQ : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> Value
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsNaN_DoubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("Is ∞", true)]
	[NodeOverload("Core.Operators.IsInfinity")]
	public class IsInfinity_DoubleQ : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> Value
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsInfinity_DoubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_DoubleQ_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> A
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static doubleQ ADefault => doubleQ.Identity;

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_DoubleQ_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators/Vectors")]
	[NodeName("°<br><size=25%>(angle)", true)]
	[NodeOverload("Core.Operators.Angle")]
	public class Angle_doubleQ : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> A
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<doubleQ> B
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static doubleQ ADefault => doubleQ.Identity;

		public static doubleQ BDefault => doubleQ.Identity;

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Angle_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.PackColor")]
	[NodeCategory("Colors/Packing")]
	[NodeName("Pack rgba", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Pack_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> R
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "R"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "R", value);
			}
		}

		public ValueArgument<float> G
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "G"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "G", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Packing")]
	[NodeName("Unpack rgba", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Unpack_Color : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> V
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<float> R
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "R"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "R", value);
			}
		}

		public ValueOutput<float> G
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "G"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "G", value);
			}
		}

		public ValueOutput<float> B
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueOutput<float> A
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_Color()
		{
			R = new ValueOutput<float>(this);
			G = new ValueOutput<float>(this);
			B = new ValueOutput<float>(this);
			A = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Add_Color_Float : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Color_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Add_Float_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Float_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Sub_Color_Float : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Color_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Sub_Float_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Float_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Mul_Color_Float : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static color ADefault => color.White;

		public static float BDefault => 1f;

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Color_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Mul_Float_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static color BDefault => color.White;

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Div_Color_Float : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static color ADefault => color.White;

		public static float BDefault => 1f;

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Color_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Div_Float_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static color BDefault => color.White;

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Float_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Mask_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> OnTrue
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<color> OnFalse
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool4> Mask
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class LessThan_Color : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class GreaterThan_Color : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Color", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class LessOrEqual_Color : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class GreaterOrEqual_Color : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeOverload("Core.Operators.PackColorX")]
	[NodeCategory("Colors/Packing")]
	[NodeName("Pack rgba", false)]
	public class Pack_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> R
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "R"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "R", value);
			}
		}

		public ValueArgument<float> G
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "G"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "G", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ColorProfile> Profile
		{
			get
			{
				return (ValueArgument<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Profile"), typeof(ValueArgument<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Profile", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pack_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Packing")]
	[NodeName("Unpack rgba", false)]
	[NodeOverload("Core.Operators.Unpack4")]
	public class Unpack_ColorX : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> V
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueOutput<float> R
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "R"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "R", value);
			}
		}

		public ValueOutput<float> G
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "G"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "G", value);
			}
		}

		public ValueOutput<float> B
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueOutput<float> A
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueOutput<ColorProfile> Profile
		{
			get
			{
				return (ValueOutput<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Profile"), typeof(ValueOutput<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Profile", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Unpack_ColorX()
		{
			R = new ValueOutput<float>(this);
			G = new ValueOutput<float>(this);
			B = new ValueOutput<float>(this);
			A = new ValueOutput<float>(this);
			Profile = new ValueOutput<ColorProfile>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Unpack_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_ColorX_Float : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_ColorX_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_Float_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_Float_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_ColorX_Float : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_ColorX_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_Float_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_Float_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_ColorX_Float : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static colorX ADefault => colorX.White;

		public static float BDefault => 1f;

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_ColorX_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("×", true)]
	[NodeOverload("Core.Operators.Mul")]
	public class Mul_Float_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static colorX BDefault => colorX.White;

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mul_Float_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_ColorX_Float : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static colorX ADefault => colorX.White;

		public static float BDefault => 1f;

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_ColorX_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("÷", true)]
	[NodeOverload("Core.Operators.Div")]
	public class Div_Float_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static float ADefault => 1f;

		public static colorX BDefault => colorX.White;

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Div_Float_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mask", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mask")]
	public class Mask_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> OnTrue
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnTrue"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnTrue", value);
			}
		}

		public ValueArgument<colorX> OnFalse
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OnFalse"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OnFalse", value);
			}
		}

		public ValueArgument<bool4> Mask
		{
			get
			{
				return (ValueArgument<bool4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<bool4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Mask_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("<", true)]
	[NodeOverload("Core.Operators.LessThan")]
	public class LessThan_ColorX : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessThan_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName(">", true)]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class GreaterThan_ColorX : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterThan_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_ColorX", null)]
	[NodeName("≤", true)]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class LessOrEqual_ColorX : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LessOrEqual_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("≥", true)]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class GreaterOrEqual_ColorX : ValueFunctionNode<ExecutionContext, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreaterOrEqual_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Add")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueAdd<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsAddSub;

		public static T ADefault => Coder<T>.Default;

		public static T BDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueAdd(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("-", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Sub")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueSub<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsAddSub;

		public static T ADefault => Coder<T>.Default;

		public static T BDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueSub(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("×", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mul")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueMul<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMul;

		public static T ADefault => Coder<T>.Identity;

		public static T BDefault => Coder<T>.Identity;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueMul(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("÷", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Div")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueDiv<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsDiv;

		public static T ADefault => Coder<T>.Identity;

		public static T BDefault => Coder<T>.Identity;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueDiv(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("%", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Mod")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueMod<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMod;

		public static T ADefault => Coder<T>.Default;

		public static T BDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueMod(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.AddMulti")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueAddMulti<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgumentList<T> Inputs
		{
			get
			{
				return (ValueArgumentList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Inputs"), typeof(ValueArgumentList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Inputs", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsAddSub;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public ValueAddMulti()
		{
			((ValueAddMulti<>)(object)this).Inputs = new ValueArgumentList<T>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueAddMulti(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("-", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.SubMulti")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueSubMulti<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgumentList<T> Inputs
		{
			get
			{
				return (ValueArgumentList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Inputs"), typeof(ValueArgumentList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Inputs", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsAddSub;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public ValueSubMulti()
		{
			((ValueSubMulti<>)(object)this).Inputs = new ValueArgumentList<T>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueSubMulti(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("×", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.MulMulti")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueMulMulti<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgumentList<T> Inputs
		{
			get
			{
				return (ValueArgumentList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Inputs"), typeof(ValueArgumentList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Inputs", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMul;

		public static T InputsDefault => Coder<T>.Identity;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public ValueMulMulti()
		{
			((ValueMulMulti<>)(object)this).Inputs = new ValueArgumentList<T>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueMulMulti(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("÷", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.DivMulti")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueDivMulti<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgumentList<T> Inputs
		{
			get
			{
				return (ValueArgumentList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Inputs"), typeof(ValueArgumentList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Inputs", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsDiv;

		public static T InputsDefault => Coder<T>.Identity;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public ValueDivMulti()
		{
			((ValueDivMulti<>)(object)this).Inputs = new ValueArgumentList<T>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueDivMulti(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+1", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Inc")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueInc<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> N
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsAddSub;

		public static T NDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueInc(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("-1", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Dec")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueDec<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> N
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsAddSub;

		public static T NDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueDec(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("-n", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Negate")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueNegate<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> N
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsNegate;

		public static T NDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueNegate(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("1-n", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.OneMinus")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueOneMinus<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> X
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsAddSub;

		public static T XDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueOneMinus(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("1/n", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Reciprocal")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueReciprocal<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> N
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ValueReciprocal", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ValueReciprocal", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		public static T NDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueReciprocal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>2</sup>", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Square")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueSquare<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> N
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMul;

		public static T NDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueSquare(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>3</sup>", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.Cube")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueCube<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> N
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMul;

		public static T NDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueCube(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("±", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.PlusMinus")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValuePlusMinus<T> : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> Value
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<T> Offset
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Offset"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Offset", value);
			}
		}

		public ValueOutput<T> Plus
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Plus"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Plus", value);
			}
		}

		public ValueOutput<T> Minus
		{
			get
			{
				return (ValueOutput<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Minus"), typeof(ValueOutput<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Minus", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsAddSub;

		public static T PlusDefault => Coder<T>.Default;

		public static T MinusDefault => Coder<T>.Default;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ValuePlusMinus()
		{
			((ValuePlusMinus<>)(object)this).Plus = new ValueOutput<T>(this);
			((ValuePlusMinus<>)(object)this).Minus = new ValueOutput<T>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValuePlusMinus(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.LessThan_Uint", new Type[] { typeof(uint) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.LessThan_Ulong", new Type[] { typeof(ulong) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.LessThan_Int", new Type[] { typeof(int) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.LessThan_Long", new Type[] { typeof(long) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.LessThan_Float", new Type[] { typeof(float) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.LessThan_Double", new Type[] { typeof(double) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.LessThan_Decimal", new Type[] { typeof(decimal) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.LessThan_DateTime", new Type[] { typeof(DateTime) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.LessThan_TimeSpan", new Type[] { typeof(TimeSpan) })]
	[NodeName("<", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.LessThan")]
	public class ValueLessThan<T> : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsComparison;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueLessThan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Uint", new Type[] { typeof(uint) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Ulong", new Type[] { typeof(ulong) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Int", new Type[] { typeof(int) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Long", new Type[] { typeof(long) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Float", new Type[] { typeof(float) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Double", new Type[] { typeof(double) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_Decimal", new Type[] { typeof(decimal) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_DateTime", new Type[] { typeof(DateTime) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.SmallerOrEqual_TimeSpan", new Type[] { typeof(TimeSpan) })]
	[NodeName("≤", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class ValueLessOrEqual<T> : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsComparison;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueLessOrEqual(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterThan_Uint", new Type[] { typeof(uint) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterThan_Ulong", new Type[] { typeof(ulong) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterThan_Int", new Type[] { typeof(int) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterThan_Long", new Type[] { typeof(long) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterThan_Float", new Type[] { typeof(float) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterThan_Double", new Type[] { typeof(double) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterThan_Decimal", new Type[] { typeof(decimal) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterThan_DateTime", new Type[] { typeof(DateTime) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterThan_TimeSpan", new Type[] { typeof(TimeSpan) })]
	[NodeName(">", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class ValueGreaterThan<T> : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsComparison;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueGreaterThan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterOrEqual_Uint", new Type[] { typeof(uint) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterOrEqual_Ulong", new Type[] { typeof(ulong) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterOrEqual_Int", new Type[] { typeof(int) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterOrEqual_Long", new Type[] { typeof(long) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterOrEqual_Float", new Type[] { typeof(float) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterOrEqual_Double", new Type[] { typeof(double) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterOrEqual_Decimal", new Type[] { typeof(decimal) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterOrEqual_DateTime", new Type[] { typeof(DateTime) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.GreaterOrEqual_TimeSpan", new Type[] { typeof(TimeSpan) })]
	[NodeName("≥", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class ValueGreaterOrEqual<T> : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsComparison;

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueGreaterOrEqual(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("<", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.LessThan")]
	public class ObjectLessThan<T> : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<T> A
		{
			get
			{
				return (ObjectArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ObjectArgument<T> B
		{
			get
			{
				return (ObjectArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ObjectArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ObjectLessThan", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ObjectLessThan", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ObjectLessThan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("≤", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.LessOrEqual")]
	public class ObjectLessOrEqual<T> : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<T> A
		{
			get
			{
				return (ObjectArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ObjectArgument<T> B
		{
			get
			{
				return (ObjectArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ObjectArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ObjectLessOrEqual", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ObjectLessOrEqual", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ObjectLessOrEqual(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName(">", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.GreaterThan")]
	public class ObjectGreaterThan<T> : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<T> A
		{
			get
			{
				return (ObjectArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ObjectArgument<T> B
		{
			get
			{
				return (ObjectArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ObjectArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ObjectGreaterThan", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ObjectGreaterThan", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ObjectGreaterThan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("≥", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.GreaterOrEqual")]
	public class ObjectGreaterOrEqual<T> : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<T> A
		{
			get
			{
				return (ObjectArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ObjectArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ObjectArgument<T> B
		{
			get
			{
				return (ObjectArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ObjectArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ObjectGreaterOrEqual", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ObjectGreaterOrEqual", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ObjectGreaterOrEqual(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("0/1 (int)", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.ZeroOne")]
	public class ZeroOneInt : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Boolean
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Boolean"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Boolean", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ZeroOneInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("0/1 (int2)", true)]
	[NodeOverload("Core.Operators.ZeroOne")]
	public class ZeroOneInt2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Boolean
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Boolean"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Boolean", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ZeroOneInt2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("0/1 (int3)", true)]
	[NodeOverload("Core.Operators.ZeroOne")]
	public class ZeroOneInt3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Boolean
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Boolean"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Boolean", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ZeroOneInt3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("0/1 (int4)", true)]
	[NodeOverload("Core.Operators.ZeroOne")]
	public class ZeroOneInt4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Boolean
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Boolean"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Boolean", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ZeroOneInt4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("0/1 (float)", true)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.ZeroOne")]
	public class ZeroOneFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Boolean
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Boolean"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Boolean", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ZeroOneFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("0/1 (float2)", true)]
	[NodeOverload("Core.Operators.ZeroOne")]
	public class ZeroOneFloat2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Boolean
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Boolean"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Boolean", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ZeroOneFloat2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("0/1 (float3)", true)]
	[NodeOverload("Core.Operators.ZeroOne")]
	public class ZeroOneFloat3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Boolean
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Boolean"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Boolean", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ZeroOneFloat3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Operators")]
	[NodeName("0/1 (float4)", true)]
	[NodeOverload("Core.Operators.ZeroOne")]
	public class ZeroOneFloat4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Boolean
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Boolean"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Boolean", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ZeroOneFloat4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_Float", new Type[] { typeof(float) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_Double", new Type[] { typeof(double) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_Float2", new Type[] { typeof(float2) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_Double2", new Type[] { typeof(double2) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_Float3", new Type[] { typeof(float3) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_Double3", new Type[] { typeof(double3) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_Float4", new Type[] { typeof(float4) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_Double4", new Type[] { typeof(double4) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_FloatQ", new Type[] { typeof(floatQ) })]
	[OldTypeSpecialization("ProtoFlux.Runtimes.Execution.Nodes.Operators.FilterInvalid_DoubleQ", new Type[] { typeof(doubleQ) })]
	[NodeName("Filter Invalid", false)]
	[NodeCategory("Operators")]
	[NodeOverload("Core.Operators.FilterInvalid")]
	public class ValueFilterInvalid<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> Value
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<T> Fallback
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Fallback"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Fallback", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsFilterInvalid;

		public static T FallbackDefault => Coder<T>.Default;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueFilterInvalid(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math
{
	[NodeCategory("Math")]
	[NodeName("Abs", true)]
	[NodeOverload("Core.Math.Abs")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueAbs<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> N
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsAbs;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueAbs(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueClamp<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> Value
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<T> Min
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<T> Max
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMinMax;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueClamp(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Lerp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueLerp<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> From
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<T> To
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsLerp;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueLerp(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiLerp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueMultiLerp<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueInputList<T> Operands
		{
			get
			{
				return (ValueInputList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsLerp;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public ValueMultiLerp()
		{
			((ValueMultiLerp<>)(object)this).Operands = new ValueInputList<T>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueMultiLerp(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Lerp (unclamped)", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.LerpUnclamped")]
	public class ValueLerpUnclamped<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> From
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<T> To
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsLerp;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueLerpUnclamped(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Inverse Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.InverseLerp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueInverseLerp<T> : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> From
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<T> To
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<T> Value
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsInverseLerp;

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueInverseLerp(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeName("Repeat", false)]
	[NodeOverload("Core.Math.Repeat")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueRepeat<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> N
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<T> Length
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsRepeat;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueRepeat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeName("Min", true)]
	[NodeOverload("Core.Math.Min")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueMin<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMinMax;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueMin(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeName("Max", true)]
	[NodeOverload("Core.Math.Max")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueMax<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<T> A
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<T> B
		{
			get
			{
				return (ValueArgument<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMinMax;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueMax(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeName("Min", false)]
	[NodeOverload("Core.Math.MultiMin")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueMinMulti<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgumentList<T> Operands
		{
			get
			{
				return (ValueArgumentList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMinMax;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public ValueMinMulti()
		{
			((ValueMinMulti<>)(object)this).Operands = new ValueArgumentList<T>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueMinMulti(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeName("Max", false)]
	[NodeOverload("Core.Math.MultiMax")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "color", "colorX")]
	public class ValueMaxMulti<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgumentList<T> Operands
		{
			get
			{
				return (ValueArgumentList<T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<T>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public static bool IsValidGenericType => Coder<T>.SupportsMinMax;

		protected override T Compute(ExecutionContext context)
		{
			return (T)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(T));
		}

		public ValueMaxMulti()
		{
			((ValueMaxMulti<>)(object)this).Operands = new ValueArgumentList<T>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueMaxMulti(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeName("Sigmoid", false)]
	[NodeOverload("Core.Math.Sigmoid")]
	public class SigmoidFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<float> E
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "E"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "E", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SigmoidFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sigmoid", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sigmoid")]
	public class SigmoidDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> X
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<double> E
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "E"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "E", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SigmoidDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Factorial", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Factorial")]
	public class FactorialDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> N
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FactorialDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Factorial", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Factorial")]
	public class FactorialFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> N
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FactorialFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> N
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint> Length
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Uint : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> Value
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<uint> Min
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<uint> Max
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LeastCommonMultiple")]
	public class LeastCommonMultiple_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LeastCommonMultiple_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.GreatestCommonDivisor")]
	public class GreatestCommonDivisor_Uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> A
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<uint> B
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreatestCommonDivisor_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> N
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong> Length
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Ulong : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> Value
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<ulong> Min
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<ulong> Max
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LeastCommonMultiple")]
	public class LeastCommonMultiple_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LeastCommonMultiple_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.GreatestCommonDivisor")]
	public class GreatestCommonDivisor_Ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> A
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<ulong> B
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreatestCommonDivisor_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> N
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> N
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int> Length
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Int : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> Value
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<int> Min
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<int> Max
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LeastCommonMultiple")]
	public class LeastCommonMultiple_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LeastCommonMultiple_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.GreatestCommonDivisor")]
	public class GreatestCommonDivisor_Int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> A
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<int> B
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreatestCommonDivisor_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> N
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> N
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long> Length
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Long : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> Value
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<long> Min
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<long> Max
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LeastCommonMultiple")]
	public class LeastCommonMultiple_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LeastCommonMultiple_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.GreatestCommonDivisor")]
	public class GreatestCommonDivisor_Long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> A
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<long> B
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GreatestCommonDivisor_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	public class Sin_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	public class Cos_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	public class Tan_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	public class Asin_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	public class Acos_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	public class Atan_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	public class Sqrt_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	public class Exp_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	public class Log_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	public class Log10_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	public class Clamp01_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	public class Round_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	public class Ceil_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	public class Floor_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round To Int", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.RoundToInt")]
	public class RoundToInt_Float : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RoundToInt_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("CeilToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.CeilToInt")]
	public class CeilToInt_Float : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CeilToInt_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("FloorToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.FloorToInt")]
	public class FloorToInt_Float : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FloorToInt_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Power
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Base
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Length
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Float : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> Min
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float> Max
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointFloat : IEquatable<TangentPointFloat>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public float value
		{
			get
			{
				return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(float));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public float tangent
		{
			get
			{
				return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(float));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointFloat(float value, float tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointFloat other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	public class PackTangentPointFloat : ValueFunctionNode<ExecutionContext, TangentPointFloat>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> Tangent
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointFloat Compute(ExecutionContext context)
		{
			return (TangentPointFloat)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointFloat));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	public class CubicLerp_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointFloat> From
		{
			get
			{
				return (ValueArgument<TangentPointFloat>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointFloat>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointFloat> To
		{
			get
			{
				return (ValueArgument<TangentPointFloat>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointFloat>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	public class MultiCubicLerp_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointFloat> Operands
		{
			get
			{
				return (ValueInputList<TangentPointFloat>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointFloat>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		public MultiCubicLerp_Float()
		{
			Operands = new ValueInputList<TangentPointFloat>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	public class CosineLerp_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	public class MultiCosineLerp_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float> Operands
		{
			get
			{
				return (ValueInputList<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		public MultiCosineLerp_Float()
		{
			Operands = new ValueInputList<float>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	public class BezierCurve_Float : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointFloat> From
		{
			get
			{
				return (ValueArgument<TangentPointFloat>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointFloat>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointFloat> To
		{
			get
			{
				return (ValueArgument<TangentPointFloat>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointFloat>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<float> Interpolated
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<float> Tangent
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_Float()
		{
			Interpolated = new ValueOutput<float>(this);
			Tangent = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	public class MultiBezierCurve_Float : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointFloat> Operands
		{
			get
			{
				return (ValueInputList<TangentPointFloat>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointFloat>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<float> Interpolated
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<float> Tangent
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_Float()
		{
			Operands = new ValueInputList<TangentPointFloat>();
			Interpolated = new ValueOutput<float>(this);
			Tangent = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	public class NthRoot_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Remap", false)]
	[NodeOverload("Core.Math.Remap")]
	[NodeCategory("Math")]
	public class Remap_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> InMin
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "InMin"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "InMin", value);
			}
		}

		public ValueArgument<float> InMax
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "InMax"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "InMax", value);
			}
		}

		public ValueArgument<float> OutMin
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OutMin"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OutMin", value);
			}
		}

		public ValueArgument<float> OutMax
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OutMax"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OutMax", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Remap_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Remap11_01")]
	public class Remap11_01_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Remap11_01_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	public class Avg_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> A
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float> B
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	public class AvgMulti_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<float> Operands
		{
			get
			{
				return (ValueArgumentList<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		public AvgMulti_Float()
		{
			Operands = new ValueArgumentList<float>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	public class Repeat01_Float : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	public class Sin_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	public class Cos_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	public class Tan_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	public class Asin_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	public class Acos_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	public class Atan_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	public class Sqrt_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	public class Exp_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	public class Log_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	public class Log10_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	public class Clamp01_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	public class Round_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	public class Ceil_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	public class Floor_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round To Int", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.RoundToInt")]
	public class RoundToInt_Double : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RoundToInt_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("CeilToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.CeilToInt")]
	public class CeilToInt_Double : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CeilToInt_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("FloorToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.FloorToInt")]
	public class FloorToInt_Double : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FloorToInt_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Y
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double> X
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Power
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Base
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Length
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Double : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<double> Min
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<double> Max
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointDouble : IEquatable<TangentPointDouble>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public double value
		{
			get
			{
				return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(double));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public double tangent
		{
			get
			{
				return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(double));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointDouble(double value, double tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointDouble other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	public class PackTangentPointDouble : ValueFunctionNode<ExecutionContext, TangentPointDouble>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<double> Tangent
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointDouble Compute(ExecutionContext context)
		{
			return (TangentPointDouble)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointDouble));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	public class CubicLerp_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointDouble> From
		{
			get
			{
				return (ValueArgument<TangentPointDouble>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointDouble>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointDouble> To
		{
			get
			{
				return (ValueArgument<TangentPointDouble>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointDouble>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	public class MultiCubicLerp_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointDouble> Operands
		{
			get
			{
				return (ValueInputList<TangentPointDouble>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointDouble>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		public MultiCubicLerp_Double()
		{
			Operands = new ValueInputList<TangentPointDouble>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	public class CosineLerp_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	public class MultiCosineLerp_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double> Operands
		{
			get
			{
				return (ValueInputList<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		public MultiCosineLerp_Double()
		{
			Operands = new ValueInputList<double>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	public class BezierCurve_Double : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointDouble> From
		{
			get
			{
				return (ValueArgument<TangentPointDouble>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointDouble>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointDouble> To
		{
			get
			{
				return (ValueArgument<TangentPointDouble>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointDouble>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<double> Interpolated
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<double> Tangent
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_Double()
		{
			Interpolated = new ValueOutput<double>(this);
			Tangent = new ValueOutput<double>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	public class MultiBezierCurve_Double : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointDouble> Operands
		{
			get
			{
				return (ValueInputList<TangentPointDouble>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointDouble>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<double> Interpolated
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<double> Tangent
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_Double()
		{
			Operands = new ValueInputList<TangentPointDouble>();
			Interpolated = new ValueOutput<double>(this);
			Tangent = new ValueOutput<double>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	public class NthRoot_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Remap", false)]
	[NodeOverload("Core.Math.Remap")]
	[NodeCategory("Math")]
	public class Remap_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> InMin
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "InMin"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "InMin", value);
			}
		}

		public ValueArgument<double> InMax
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "InMax"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "InMax", value);
			}
		}

		public ValueArgument<double> OutMin
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OutMin"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OutMin", value);
			}
		}

		public ValueArgument<double> OutMax
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OutMax"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OutMax", value);
			}
		}

		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Remap_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Remap11_01")]
	public class Remap11_01_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Remap11_01_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	public class Avg_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> A
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double> B
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	public class AvgMulti_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<double> Operands
		{
			get
			{
				return (ValueArgumentList<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		public AvgMulti_Double()
		{
			Operands = new ValueArgumentList<double>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	public class Repeat01_Double : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> N
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint2> Length
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint2_Uint : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> N
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint> Length
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint2_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint_Uint2 : ValueFunctionNode<ExecutionContext, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> N
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint2> Length
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Uint2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint2> Value
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<uint2> Min
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<uint2> Max
		{
			get
			{
				return (ValueArgument<uint2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<uint2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> N
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong2> Length
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong2_Ulong : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> N
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong> Length
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong2_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong_Ulong2 : ValueFunctionNode<ExecutionContext, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> N
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong2> Length
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Ulong2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong2> Value
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<ulong2> Min
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<ulong2> Max
		{
			get
			{
				return (ValueArgument<ulong2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<ulong2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> N
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> N
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int2> Length
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int2_Int : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> N
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int> Length
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int2_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int_Int2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> N
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int2> Length
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Int2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int2> Value
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<int2> Min
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<int2> Max
		{
			get
			{
				return (ValueArgument<int2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<int2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> N
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> N
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long2> Length
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long2_Long : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> N
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long> Length
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long2_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long_Long2 : ValueFunctionNode<ExecutionContext, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> N
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long2> Length
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Long2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long2> Value
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<long2> Min
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<long2> Max
		{
			get
			{
				return (ValueArgument<long2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<long2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	public class Sin_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	public class Cos_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	public class Tan_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	public class Asin_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	public class Acos_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	public class Atan_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	public class Sqrt_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	public class Exp_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	public class Log_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	public class Log10_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	public class Clamp01_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	public class Round_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	public class Ceil_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	public class Floor_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round To Int", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.RoundToInt")]
	public class RoundToInt_Float2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RoundToInt_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("CeilToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.CeilToInt")]
	public class CeilToInt_Float2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CeilToInt_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("FloorToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.FloorToInt")]
	public class FloorToInt_Float2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FloorToInt_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Y
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float2> X
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float2_Float : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Y
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float2_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float2> X
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float2> Power
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float2_Float : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Power
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float2_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float2> Power
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float2> Base
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float2_Float : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Base
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float2_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float2> Base
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float2> Length
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float2_Float : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> N
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Length
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float2_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float2> Length
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Float2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Value
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float2> Min
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float2> Max
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Interpolation")]
	[NodeName("Inverse Lerp", false)]
	[NodeOverload("Core.Math.InverseLerp")]
	public class InverseLerp_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> From
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float2> To
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float2> Value
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseLerp_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Vectors")]
	[NodeName("Delta Angle", false)]
	[NodeOverload("Core.Math.VectorDeltaAngle")]
	public class VectorDeltaAngle_Float2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> From
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float2> To
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public VectorDeltaAngle_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Vectors")]
	[NodeName("Delta Angle Rad", false)]
	[NodeOverload("Core.Math.VectorDeltaAngle")]
	public class VectorDeltaAngleRad_Float2 : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> From
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float2> To
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public VectorDeltaAngleRad_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointFloat2 : IEquatable<TangentPointFloat2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public float2 value
		{
			get
			{
				return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(float2));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public float2 tangent
		{
			get
			{
				return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(float2));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointFloat2(float2 value, float2 tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointFloat2 other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointFloat2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	public class PackTangentPointFloat2 : ValueFunctionNode<ExecutionContext, TangentPointFloat2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Value
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float2> Tangent
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointFloat2 Compute(ExecutionContext context)
		{
			return (TangentPointFloat2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointFloat2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointFloat2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	public class CubicLerp_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointFloat2> From
		{
			get
			{
				return (ValueArgument<TangentPointFloat2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointFloat2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointFloat2> To
		{
			get
			{
				return (ValueArgument<TangentPointFloat2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointFloat2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	public class MultiCubicLerp_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointFloat2> Operands
		{
			get
			{
				return (ValueInputList<TangentPointFloat2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointFloat2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		public MultiCubicLerp_Float2()
		{
			Operands = new ValueInputList<TangentPointFloat2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	public class CosineLerp_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	public class MultiCosineLerp_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float2> Operands
		{
			get
			{
				return (ValueInputList<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		public MultiCosineLerp_Float2()
		{
			Operands = new ValueInputList<float2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	public class BezierCurve_Float2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointFloat2> From
		{
			get
			{
				return (ValueArgument<TangentPointFloat2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointFloat2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointFloat2> To
		{
			get
			{
				return (ValueArgument<TangentPointFloat2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointFloat2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<float2> Interpolated
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<float2> Tangent
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_Float2()
		{
			Interpolated = new ValueOutput<float2>(this);
			Tangent = new ValueOutput<float2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	public class MultiBezierCurve_Float2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointFloat2> Operands
		{
			get
			{
				return (ValueInputList<TangentPointFloat2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointFloat2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<float2> Interpolated
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<float2> Tangent
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_Float2()
		{
			Operands = new ValueInputList<TangentPointFloat2>();
			Interpolated = new ValueOutput<float2>(this);
			Tangent = new ValueOutput<float2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	public class Slerp_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> From
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float2> To
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	public class MultiSlerp_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float2> Operands
		{
			get
			{
				return (ValueInputList<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		public MultiSlerp_Float2()
		{
			Operands = new ValueInputList<float2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.SlerpWithMagnitude")]
	public class SlerpWithMagnitude_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> From
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float2> To
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SlerpWithMagnitude_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerpWithMagnitude")]
	public class MultiSlerpWithMagnitude_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float2> Operands
		{
			get
			{
				return (ValueInputList<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		public MultiSlerpWithMagnitude_Float2()
		{
			Operands = new ValueInputList<float2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerpWithMagnitude_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	public class NthRoot_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Value
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	public class Avg_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> A
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float2> B
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	public class AvgMulti_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<float2> Operands
		{
			get
			{
				return (ValueArgumentList<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		public AvgMulti_Float2()
		{
			Operands = new ValueArgumentList<float2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	public class Repeat01_Float2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Value
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_Float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	public class Sin_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	public class Cos_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	public class Tan_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	public class Asin_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	public class Acos_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	public class Atan_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	public class Sqrt_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	public class Exp_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	public class Log_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	public class Log10_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	public class Clamp01_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	public class Round_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	public class Ceil_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	public class Floor_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round To Int", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.RoundToInt")]
	public class RoundToInt_Double2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RoundToInt_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("CeilToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.CeilToInt")]
	public class CeilToInt_Double2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CeilToInt_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("FloorToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.FloorToInt")]
	public class FloorToInt_Double2 : ValueFunctionNode<ExecutionContext, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FloorToInt_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Y
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double2> X
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double2_Double : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Y
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double> X
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double2_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Y
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double2> X
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double2> Power
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double2_Double : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Power
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double2_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double2> Power
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double2> Base
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double2_Double : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Base
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double2_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double2> Base
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double2> Length
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double2_Double : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> N
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Length
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double2_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double2> Length
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Double2 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Value
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<double2> Min
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<double2> Max
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Interpolation")]
	[NodeName("Inverse Lerp", false)]
	[NodeOverload("Core.Math.InverseLerp")]
	public class InverseLerp_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> From
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double2> To
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<double2> Value
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseLerp_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Vectors")]
	[NodeName("Delta Angle", false)]
	[NodeOverload("Core.Math.VectorDeltaAngle")]
	public class VectorDeltaAngle_Double2 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> From
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double2> To
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public VectorDeltaAngle_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Vectors")]
	[NodeName("Delta Angle Rad", false)]
	[NodeOverload("Core.Math.VectorDeltaAngle")]
	public class VectorDeltaAngleRad_Double2 : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> From
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double2> To
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public VectorDeltaAngleRad_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointDouble2 : IEquatable<TangentPointDouble2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public double2 value
		{
			get
			{
				return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(double2));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public double2 tangent
		{
			get
			{
				return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(double2));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointDouble2(double2 value, double2 tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointDouble2 other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointDouble2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	public class PackTangentPointDouble2 : ValueFunctionNode<ExecutionContext, TangentPointDouble2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Value
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<double2> Tangent
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointDouble2 Compute(ExecutionContext context)
		{
			return (TangentPointDouble2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointDouble2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointDouble2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	public class CubicLerp_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointDouble2> From
		{
			get
			{
				return (ValueArgument<TangentPointDouble2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointDouble2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointDouble2> To
		{
			get
			{
				return (ValueArgument<TangentPointDouble2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointDouble2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	public class MultiCubicLerp_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointDouble2> Operands
		{
			get
			{
				return (ValueInputList<TangentPointDouble2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointDouble2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		public MultiCubicLerp_Double2()
		{
			Operands = new ValueInputList<TangentPointDouble2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	public class CosineLerp_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	public class MultiCosineLerp_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double2> Operands
		{
			get
			{
				return (ValueInputList<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		public MultiCosineLerp_Double2()
		{
			Operands = new ValueInputList<double2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	public class BezierCurve_Double2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointDouble2> From
		{
			get
			{
				return (ValueArgument<TangentPointDouble2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointDouble2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointDouble2> To
		{
			get
			{
				return (ValueArgument<TangentPointDouble2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointDouble2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<double2> Interpolated
		{
			get
			{
				return (ValueOutput<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<double2> Tangent
		{
			get
			{
				return (ValueOutput<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_Double2()
		{
			Interpolated = new ValueOutput<double2>(this);
			Tangent = new ValueOutput<double2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	public class MultiBezierCurve_Double2 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointDouble2> Operands
		{
			get
			{
				return (ValueInputList<TangentPointDouble2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointDouble2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<double2> Interpolated
		{
			get
			{
				return (ValueOutput<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<double2> Tangent
		{
			get
			{
				return (ValueOutput<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_Double2()
		{
			Operands = new ValueInputList<TangentPointDouble2>();
			Interpolated = new ValueOutput<double2>(this);
			Tangent = new ValueOutput<double2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	public class Slerp_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> From
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double2> To
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	public class MultiSlerp_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double2> Operands
		{
			get
			{
				return (ValueInputList<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		public MultiSlerp_Double2()
		{
			Operands = new ValueInputList<double2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.SlerpWithMagnitude")]
	public class SlerpWithMagnitude_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> From
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double2> To
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SlerpWithMagnitude_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerpWithMagnitude")]
	public class MultiSlerpWithMagnitude_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double2> Operands
		{
			get
			{
				return (ValueInputList<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		public MultiSlerpWithMagnitude_Double2()
		{
			Operands = new ValueInputList<double2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerpWithMagnitude_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	public class NthRoot_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Value
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	public class Avg_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> A
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double2> B
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	public class AvgMulti_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<double2> Operands
		{
			get
			{
				return (ValueArgumentList<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		public AvgMulti_Double2()
		{
			Operands = new ValueArgumentList<double2>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	public class Repeat01_Double2 : ValueFunctionNode<ExecutionContext, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double2> Value
		{
			get
			{
				return (ValueArgument<double2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_Double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> N
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint3> Length
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint3_Uint : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> N
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint> Length
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint3_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint_Uint3 : ValueFunctionNode<ExecutionContext, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> N
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint3> Length
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Uint3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint3> Value
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<uint3> Min
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<uint3> Max
		{
			get
			{
				return (ValueArgument<uint3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<uint3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> N
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong3> Length
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong3_Ulong : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> N
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong> Length
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong3_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong_Ulong3 : ValueFunctionNode<ExecutionContext, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> N
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong3> Length
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Ulong3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong3> Value
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<ulong3> Min
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<ulong3> Max
		{
			get
			{
				return (ValueArgument<ulong3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<ulong3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> N
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> N
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int3> Length
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int3_Int : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> N
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int> Length
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int3_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int_Int3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> N
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int3> Length
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Int3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int3> Value
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<int3> Min
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<int3> Max
		{
			get
			{
				return (ValueArgument<int3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<int3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> N
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> N
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long3> Length
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long3_Long : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> N
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long> Length
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long3_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long_Long3 : ValueFunctionNode<ExecutionContext, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> N
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long3> Length
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Long3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long3> Value
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<long3> Min
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<long3> Max
		{
			get
			{
				return (ValueArgument<long3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<long3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	public class Sin_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	public class Cos_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	public class Tan_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	public class Asin_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	public class Acos_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	public class Atan_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	public class Sqrt_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	public class Exp_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	public class Log_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	public class Log10_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	public class Clamp01_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	public class Round_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	public class Ceil_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	public class Floor_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round To Int", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.RoundToInt")]
	public class RoundToInt_Float3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RoundToInt_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("CeilToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.CeilToInt")]
	public class CeilToInt_Float3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CeilToInt_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("FloorToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.FloorToInt")]
	public class FloorToInt_Float3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FloorToInt_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Y
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float3> X
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float3_Float : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Y
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float3_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float3> X
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float3> Power
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float3_Float : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Power
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float3_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float3> Power
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float3> Base
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float3_Float : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Base
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float3_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float3> Base
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float3> Length
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float3_Float : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> N
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Length
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float3_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float3> Length
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Float3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Value
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float3> Min
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float3> Max
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Interpolation")]
	[NodeName("Inverse Lerp", false)]
	[NodeOverload("Core.Math.InverseLerp")]
	public class InverseLerp_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> From
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float3> To
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float3> Value
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseLerp_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointFloat3 : IEquatable<TangentPointFloat3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public float3 value
		{
			get
			{
				return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(float3));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public float3 tangent
		{
			get
			{
				return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(float3));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointFloat3(float3 value, float3 tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointFloat3 other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointFloat3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	public class PackTangentPointFloat3 : ValueFunctionNode<ExecutionContext, TangentPointFloat3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Value
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float3> Tangent
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointFloat3 Compute(ExecutionContext context)
		{
			return (TangentPointFloat3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointFloat3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointFloat3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	public class CubicLerp_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointFloat3> From
		{
			get
			{
				return (ValueArgument<TangentPointFloat3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointFloat3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointFloat3> To
		{
			get
			{
				return (ValueArgument<TangentPointFloat3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointFloat3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	public class MultiCubicLerp_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointFloat3> Operands
		{
			get
			{
				return (ValueInputList<TangentPointFloat3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointFloat3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		public MultiCubicLerp_Float3()
		{
			Operands = new ValueInputList<TangentPointFloat3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	public class CosineLerp_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	public class MultiCosineLerp_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float3> Operands
		{
			get
			{
				return (ValueInputList<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		public MultiCosineLerp_Float3()
		{
			Operands = new ValueInputList<float3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	public class BezierCurve_Float3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointFloat3> From
		{
			get
			{
				return (ValueArgument<TangentPointFloat3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointFloat3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointFloat3> To
		{
			get
			{
				return (ValueArgument<TangentPointFloat3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointFloat3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<float3> Interpolated
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<float3> Tangent
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_Float3()
		{
			Interpolated = new ValueOutput<float3>(this);
			Tangent = new ValueOutput<float3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	public class MultiBezierCurve_Float3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointFloat3> Operands
		{
			get
			{
				return (ValueInputList<TangentPointFloat3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointFloat3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<float3> Interpolated
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<float3> Tangent
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_Float3()
		{
			Operands = new ValueInputList<TangentPointFloat3>();
			Interpolated = new ValueOutput<float3>(this);
			Tangent = new ValueOutput<float3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	public class Slerp_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> From
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float3> To
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	public class MultiSlerp_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float3> Operands
		{
			get
			{
				return (ValueInputList<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		public MultiSlerp_Float3()
		{
			Operands = new ValueInputList<float3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.SlerpWithMagnitude")]
	public class SlerpWithMagnitude_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> From
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float3> To
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SlerpWithMagnitude_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerpWithMagnitude")]
	public class MultiSlerpWithMagnitude_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float3> Operands
		{
			get
			{
				return (ValueInputList<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		public MultiSlerpWithMagnitude_Float3()
		{
			Operands = new ValueInputList<float3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerpWithMagnitude_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	public class NthRoot_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Value
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	public class Avg_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> A
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float3> B
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	public class AvgMulti_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<float3> Operands
		{
			get
			{
				return (ValueArgumentList<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		public AvgMulti_Float3()
		{
			Operands = new ValueArgumentList<float3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	public class Repeat01_Float3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Value
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_Float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	public class Sin_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	public class Cos_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	public class Tan_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	public class Asin_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	public class Acos_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	public class Atan_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	public class Sqrt_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	public class Exp_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	public class Log_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	public class Log10_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	public class Clamp01_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	public class Round_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	public class Ceil_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	public class Floor_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round To Int", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.RoundToInt")]
	public class RoundToInt_Double3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RoundToInt_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("CeilToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.CeilToInt")]
	public class CeilToInt_Double3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CeilToInt_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("FloorToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.FloorToInt")]
	public class FloorToInt_Double3 : ValueFunctionNode<ExecutionContext, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FloorToInt_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Y
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double3> X
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double3_Double : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Y
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double> X
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double3_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Y
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double3> X
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double3> Power
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double3_Double : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Power
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double3_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double3> Power
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double3> Base
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double3_Double : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Base
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double3_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double3> Base
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double3> Length
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double3_Double : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> N
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Length
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double3_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double3> Length
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Double3 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Value
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<double3> Min
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<double3> Max
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Interpolation")]
	[NodeName("Inverse Lerp", false)]
	[NodeOverload("Core.Math.InverseLerp")]
	public class InverseLerp_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> From
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double3> To
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<double3> Value
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseLerp_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointDouble3 : IEquatable<TangentPointDouble3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public double3 value
		{
			get
			{
				return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(double3));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public double3 tangent
		{
			get
			{
				return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(double3));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointDouble3(double3 value, double3 tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointDouble3 other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointDouble3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	public class PackTangentPointDouble3 : ValueFunctionNode<ExecutionContext, TangentPointDouble3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Value
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<double3> Tangent
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointDouble3 Compute(ExecutionContext context)
		{
			return (TangentPointDouble3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointDouble3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointDouble3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	public class CubicLerp_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointDouble3> From
		{
			get
			{
				return (ValueArgument<TangentPointDouble3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointDouble3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointDouble3> To
		{
			get
			{
				return (ValueArgument<TangentPointDouble3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointDouble3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	public class MultiCubicLerp_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointDouble3> Operands
		{
			get
			{
				return (ValueInputList<TangentPointDouble3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointDouble3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		public MultiCubicLerp_Double3()
		{
			Operands = new ValueInputList<TangentPointDouble3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	public class CosineLerp_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	public class MultiCosineLerp_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double3> Operands
		{
			get
			{
				return (ValueInputList<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		public MultiCosineLerp_Double3()
		{
			Operands = new ValueInputList<double3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	public class BezierCurve_Double3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointDouble3> From
		{
			get
			{
				return (ValueArgument<TangentPointDouble3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointDouble3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointDouble3> To
		{
			get
			{
				return (ValueArgument<TangentPointDouble3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointDouble3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<double3> Interpolated
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<double3> Tangent
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_Double3()
		{
			Interpolated = new ValueOutput<double3>(this);
			Tangent = new ValueOutput<double3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	public class MultiBezierCurve_Double3 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointDouble3> Operands
		{
			get
			{
				return (ValueInputList<TangentPointDouble3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointDouble3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<double3> Interpolated
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<double3> Tangent
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_Double3()
		{
			Operands = new ValueInputList<TangentPointDouble3>();
			Interpolated = new ValueOutput<double3>(this);
			Tangent = new ValueOutput<double3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	public class Slerp_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> From
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double3> To
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	public class MultiSlerp_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double3> Operands
		{
			get
			{
				return (ValueInputList<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		public MultiSlerp_Double3()
		{
			Operands = new ValueInputList<double3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.SlerpWithMagnitude")]
	public class SlerpWithMagnitude_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> From
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double3> To
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SlerpWithMagnitude_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerpWithMagnitude")]
	public class MultiSlerpWithMagnitude_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double3> Operands
		{
			get
			{
				return (ValueInputList<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		public MultiSlerpWithMagnitude_Double3()
		{
			Operands = new ValueInputList<double3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerpWithMagnitude_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	public class NthRoot_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Value
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	public class Avg_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> A
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double3> B
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	public class AvgMulti_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<double3> Operands
		{
			get
			{
				return (ValueArgumentList<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		public AvgMulti_Double3()
		{
			Operands = new ValueArgumentList<double3>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	public class Repeat01_Double3 : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Value
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_Double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> N
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint4> Length
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint4_Uint : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> N
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint> Length
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint4_Uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Uint_Uint4 : ValueFunctionNode<ExecutionContext, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> N
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<uint4> Length
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Uint_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Uint4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint4> Value
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<uint4> Min
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<uint4> Max
		{
			get
			{
				return (ValueArgument<uint4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<uint4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> N
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong4> Length
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong4_Ulong : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> N
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong> Length
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong4_Ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Ulong_Ulong4 : ValueFunctionNode<ExecutionContext, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> N
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<ulong4> Length
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Ulong_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Ulong4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong4> Value
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<ulong4> Min
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<ulong4> Max
		{
			get
			{
				return (ValueArgument<ulong4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<ulong4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> N
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> N
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int4> Length
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int4_Int : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> N
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int> Length
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int4_Int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Int_Int4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> N
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<int4> Length
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Int_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Int4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int4> Value
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<int4> Min
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<int4> Max
		{
			get
			{
				return (ValueArgument<int4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<int4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> N
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> N
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long4> Length
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long4_Long : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> N
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long> Length
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long4_Long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Long_Long4 : ValueFunctionNode<ExecutionContext, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> N
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<long4> Length
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Long_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Long4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long4> Value
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<long4> Min
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<long4> Max
		{
			get
			{
				return (ValueArgument<long4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<long4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	public class Sin_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	public class Cos_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	public class Tan_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	public class Asin_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	public class Acos_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	public class Atan_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	public class Sqrt_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	public class Exp_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	public class Log_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	public class Log10_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	public class Clamp01_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	public class Round_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	public class Ceil_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	public class Floor_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round To Int", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.RoundToInt")]
	public class RoundToInt_Float4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RoundToInt_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("CeilToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.CeilToInt")]
	public class CeilToInt_Float4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CeilToInt_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("FloorToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.FloorToInt")]
	public class FloorToInt_Float4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FloorToInt_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Y
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float4> X
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float4_Float : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Y
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float4_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float4> X
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float4> Power
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float4_Float : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Power
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float4_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float4> Power
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float4> Base
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float4_Float : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Base
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float4_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float4> Base
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float4> Length
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float4_Float : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> N
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Length
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float4_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float4> Length
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Float4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Value
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float4> Min
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float4> Max
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Interpolation")]
	[NodeName("Inverse Lerp", false)]
	[NodeOverload("Core.Math.InverseLerp")]
	public class InverseLerp_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> From
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float4> To
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float4> Value
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseLerp_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointFloat4 : IEquatable<TangentPointFloat4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public float4 value
		{
			get
			{
				return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(float4));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public float4 tangent
		{
			get
			{
				return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(float4));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointFloat4(float4 value, float4 tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointFloat4 other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointFloat4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	public class PackTangentPointFloat4 : ValueFunctionNode<ExecutionContext, TangentPointFloat4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Value
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float4> Tangent
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointFloat4 Compute(ExecutionContext context)
		{
			return (TangentPointFloat4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointFloat4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointFloat4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	public class CubicLerp_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointFloat4> From
		{
			get
			{
				return (ValueArgument<TangentPointFloat4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointFloat4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointFloat4> To
		{
			get
			{
				return (ValueArgument<TangentPointFloat4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointFloat4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	public class MultiCubicLerp_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointFloat4> Operands
		{
			get
			{
				return (ValueInputList<TangentPointFloat4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointFloat4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		public MultiCubicLerp_Float4()
		{
			Operands = new ValueInputList<TangentPointFloat4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	public class CosineLerp_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	public class MultiCosineLerp_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float4> Operands
		{
			get
			{
				return (ValueInputList<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		public MultiCosineLerp_Float4()
		{
			Operands = new ValueInputList<float4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	public class BezierCurve_Float4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointFloat4> From
		{
			get
			{
				return (ValueArgument<TangentPointFloat4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointFloat4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointFloat4> To
		{
			get
			{
				return (ValueArgument<TangentPointFloat4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointFloat4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<float4> Interpolated
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<float4> Tangent
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_Float4()
		{
			Interpolated = new ValueOutput<float4>(this);
			Tangent = new ValueOutput<float4>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	public class MultiBezierCurve_Float4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointFloat4> Operands
		{
			get
			{
				return (ValueInputList<TangentPointFloat4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointFloat4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<float4> Interpolated
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<float4> Tangent
		{
			get
			{
				return (ValueOutput<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_Float4()
		{
			Operands = new ValueInputList<TangentPointFloat4>();
			Interpolated = new ValueOutput<float4>(this);
			Tangent = new ValueOutput<float4>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	public class Slerp_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> From
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float4> To
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	public class MultiSlerp_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float4> Operands
		{
			get
			{
				return (ValueInputList<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		public MultiSlerp_Float4()
		{
			Operands = new ValueInputList<float4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.SlerpWithMagnitude")]
	public class SlerpWithMagnitude_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> From
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float4> To
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SlerpWithMagnitude_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerpWithMagnitude")]
	public class MultiSlerpWithMagnitude_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<float4> Operands
		{
			get
			{
				return (ValueInputList<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		public MultiSlerpWithMagnitude_Float4()
		{
			Operands = new ValueInputList<float4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerpWithMagnitude_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	public class NthRoot_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Value
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	public class Avg_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> A
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<float4> B
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	public class AvgMulti_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<float4> Operands
		{
			get
			{
				return (ValueArgumentList<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		public AvgMulti_Float4()
		{
			Operands = new ValueArgumentList<float4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	public class Repeat01_Float4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Value
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_Float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	public class Sin_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	public class Cos_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	public class Tan_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	public class Asin_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	public class Acos_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	public class Atan_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	public class Sqrt_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	public class Exp_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	public class Log_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	public class Log10_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	public class Clamp01_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	public class Round_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	public class Ceil_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	public class Floor_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round To Int", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.RoundToInt")]
	public class RoundToInt_Double4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RoundToInt_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("CeilToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.CeilToInt")]
	public class CeilToInt_Double4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CeilToInt_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("FloorToInt", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.FloorToInt")]
	public class FloorToInt_Double4 : ValueFunctionNode<ExecutionContext, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FloorToInt_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Y
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double4> X
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double4_Double : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Y
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double> X
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double4_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Double_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Y
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<double4> X
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Double_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double4> Power
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double4_Double : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Power
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double4_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Double_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double4> Power
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Double_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double4> Base
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double4_Double : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Base
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double4_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Double_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double4> Base
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Double_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double4> Length
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double4_Double : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> N
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double> Length
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double4_Double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Double_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> N
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<double4> Length
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Double_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_Double4 : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Value
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<double4> Min
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<double4> Max
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Interpolation")]
	[NodeName("Inverse Lerp", false)]
	[NodeOverload("Core.Math.InverseLerp")]
	public class InverseLerp_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> From
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double4> To
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<double4> Value
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseLerp_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointDouble4 : IEquatable<TangentPointDouble4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public double4 value
		{
			get
			{
				return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(double4));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public double4 tangent
		{
			get
			{
				return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(double4));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointDouble4(double4 value, double4 tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointDouble4 other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointDouble4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	public class PackTangentPointDouble4 : ValueFunctionNode<ExecutionContext, TangentPointDouble4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Value
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<double4> Tangent
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointDouble4 Compute(ExecutionContext context)
		{
			return (TangentPointDouble4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointDouble4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointDouble4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	public class CubicLerp_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointDouble4> From
		{
			get
			{
				return (ValueArgument<TangentPointDouble4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointDouble4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointDouble4> To
		{
			get
			{
				return (ValueArgument<TangentPointDouble4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointDouble4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	public class MultiCubicLerp_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointDouble4> Operands
		{
			get
			{
				return (ValueInputList<TangentPointDouble4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointDouble4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		public MultiCubicLerp_Double4()
		{
			Operands = new ValueInputList<TangentPointDouble4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	public class CosineLerp_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	public class MultiCosineLerp_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double4> Operands
		{
			get
			{
				return (ValueInputList<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		public MultiCosineLerp_Double4()
		{
			Operands = new ValueInputList<double4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	public class BezierCurve_Double4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointDouble4> From
		{
			get
			{
				return (ValueArgument<TangentPointDouble4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointDouble4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointDouble4> To
		{
			get
			{
				return (ValueArgument<TangentPointDouble4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointDouble4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<double4> Interpolated
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<double4> Tangent
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_Double4()
		{
			Interpolated = new ValueOutput<double4>(this);
			Tangent = new ValueOutput<double4>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	public class MultiBezierCurve_Double4 : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointDouble4> Operands
		{
			get
			{
				return (ValueInputList<TangentPointDouble4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointDouble4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<double4> Interpolated
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<double4> Tangent
		{
			get
			{
				return (ValueOutput<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_Double4()
		{
			Operands = new ValueInputList<TangentPointDouble4>();
			Interpolated = new ValueOutput<double4>(this);
			Tangent = new ValueOutput<double4>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	public class Slerp_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> From
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double4> To
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	public class MultiSlerp_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double4> Operands
		{
			get
			{
				return (ValueInputList<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		public MultiSlerp_Double4()
		{
			Operands = new ValueInputList<double4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.SlerpWithMagnitude")]
	public class SlerpWithMagnitude_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> From
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double4> To
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SlerpWithMagnitude_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerpWithMagnitude")]
	public class MultiSlerpWithMagnitude_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<double4> Operands
		{
			get
			{
				return (ValueInputList<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		public MultiSlerpWithMagnitude_Double4()
		{
			Operands = new ValueInputList<double4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerpWithMagnitude_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	public class NthRoot_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Value
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	public class Avg_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> A
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<double4> B
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	public class AvgMulti_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<double4> Operands
		{
			get
			{
				return (ValueArgumentList<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		public AvgMulti_Double4()
		{
			Operands = new ValueArgumentList<double4>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	public class Repeat01_Double4 : ValueFunctionNode<ExecutionContext, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double4> Value
		{
			get
			{
				return (ValueArgument<double4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<double4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_Double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Sin_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Cos_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Tan_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Asin_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Acos_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Atan_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Sqrt_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Exp_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Log_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Log10_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Clamp01_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Round_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Ceil_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Floor_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Sign_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Atan2_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Y
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<color> X
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Atan2_Color_Float : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Y
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Color_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Atan2_Float_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<color> X
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Pow_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<color> Power
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Pow_Color_Float : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Power
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Color_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Pow_Float_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<color> Power
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class LogN_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<color> Base
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class LogN_Color_Float : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Base
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Color_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class LogN_Float_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<color> Base
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class PingPong_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<color> Length
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class PingPong_Color_Float : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> N
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Length
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Color_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class PingPong_Float_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<color> Length
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class IsBetween_Color : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Value
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<color> Min
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<color> Max
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Interpolation")]
	[NodeName("Inverse Lerp", false)]
	[NodeOverload("Core.Math.InverseLerp")]
	public class InverseLerp_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> From
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<color> To
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<color> Value
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseLerp_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointColor : IEquatable<TangentPointColor>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public color value
		{
			get
			{
				return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(color));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public color tangent
		{
			get
			{
				return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(color));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointColor(color value, color tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointColor other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class PackTangentPointColor : ValueFunctionNode<ExecutionContext, TangentPointColor>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Value
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<color> Tangent
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointColor Compute(ExecutionContext context)
		{
			return (TangentPointColor)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointColor));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class CubicLerp_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointColor> From
		{
			get
			{
				return (ValueArgument<TangentPointColor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointColor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointColor> To
		{
			get
			{
				return (ValueArgument<TangentPointColor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointColor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class MultiCubicLerp_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointColor> Operands
		{
			get
			{
				return (ValueInputList<TangentPointColor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointColor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		public MultiCubicLerp_Color()
		{
			Operands = new ValueInputList<TangentPointColor>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class CosineLerp_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class MultiCosineLerp_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<color> Operands
		{
			get
			{
				return (ValueInputList<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		public MultiCosineLerp_Color()
		{
			Operands = new ValueInputList<color>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class BezierCurve_Color : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointColor> From
		{
			get
			{
				return (ValueArgument<TangentPointColor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointColor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointColor> To
		{
			get
			{
				return (ValueArgument<TangentPointColor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointColor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<color> Interpolated
		{
			get
			{
				return (ValueOutput<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<color> Tangent
		{
			get
			{
				return (ValueOutput<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_Color()
		{
			Interpolated = new ValueOutput<color>(this);
			Tangent = new ValueOutput<color>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class MultiBezierCurve_Color : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointColor> Operands
		{
			get
			{
				return (ValueInputList<TangentPointColor>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointColor>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<color> Interpolated
		{
			get
			{
				return (ValueOutput<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<color> Tangent
		{
			get
			{
				return (ValueOutput<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_Color()
		{
			Operands = new ValueInputList<TangentPointColor>();
			Interpolated = new ValueOutput<color>(this);
			Tangent = new ValueOutput<color>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Slerp_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> From
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<color> To
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class MultiSlerp_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<color> Operands
		{
			get
			{
				return (ValueInputList<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		public MultiSlerp_Color()
		{
			Operands = new ValueInputList<color>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.SlerpWithMagnitude")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class SlerpWithMagnitude_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> From
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<color> To
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SlerpWithMagnitude_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerpWithMagnitude")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class MultiSlerpWithMagnitude_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<color> Operands
		{
			get
			{
				return (ValueInputList<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		public MultiSlerpWithMagnitude_Color()
		{
			Operands = new ValueInputList<color>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerpWithMagnitude_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class NthRoot_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Value
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Avg_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> A
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<color> B
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class AvgMulti_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<color> Operands
		{
			get
			{
				return (ValueArgumentList<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		public AvgMulti_Color()
		{
			Operands = new ValueArgumentList<color>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class Repeat01_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Value
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Sin")]
	public class Sin_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sin_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Cos")]
	public class Cos_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cos_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Tan")]
	public class Tan_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tan_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sin<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Asin")]
	public class Asin_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Asin_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cos<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Acos")]
	public class Acos_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Acos_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Tan<sup>-1", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan")]
	public class Atan_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("√n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sqrt")]
	public class Sqrt_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sqrt_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("e<sup>n", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Exp")]
	public class Exp_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Exp_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log")]
	public class Log_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>e10", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Log10")]
	public class Log10_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Log10_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Clamp01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Clamp01")]
	public class Clamp01_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Clamp01_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Round", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Round")]
	public class Round_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Round_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ceil", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Ceil")]
	public class Ceil_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Ceil_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Floor", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Floor")]
	public class Floor_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Floor_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Sign", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Sign")]
	public class Sign_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sign_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Atan2", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Y
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<colorX> X
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_ColorX_Float : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Y
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_ColorX_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.Atan2")]
	public class Atan2_Float_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<colorX> X
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Atan2_Float_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n<sup>y", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<colorX> Power
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_ColorX_Float : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Power
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_ColorX_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_Float_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<colorX> Power
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Power"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Power", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_Float_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Log<sub>N", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<colorX> Base
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_ColorX_Float : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Base
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_ColorX_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.LogN")]
	public class LogN_Float_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<colorX> Base
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Base"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Base", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LogN_Float_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ping Pong", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<colorX> Length
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_ColorX_Float : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> N
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<float> Length
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_ColorX_Float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.PingPong")]
	public class PingPong_Float_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		public ValueArgument<colorX> Length
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PingPong_Float_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Is Between", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_ColorX : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Value
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<colorX> Min
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<colorX> Max
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Interpolation")]
	[NodeName("Inverse Lerp", false)]
	[NodeOverload("Core.Math.InverseLerp")]
	public class InverseLerp_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> From
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<colorX> To
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<colorX> Value
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseLerp_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[DataModelType]
	public struct TangentPointColorX : IEquatable<TangentPointColorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public colorX value
		{
			get
			{
				return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "value"), typeof(colorX));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "value", value);
			}
		}

		public colorX tangent
		{
			get
			{
				return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "tangent"), typeof(colorX));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "tangent", value);
			}
		}

		public TangentPointColorX(colorX value, colorX tangent)
		{
			this.value = value;
			this.tangent = tangent;
		}

		public bool Equals(TangentPointColorX other)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Equals", other), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TangentPointColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pack Tangent Point", false)]
	[NodeCategory("Math/Trigonometry")]
	[NodeOverload("Core.Math.PackTangentPoint")]
	public class PackTangentPointColorX : ValueFunctionNode<ExecutionContext, TangentPointColorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Value
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<colorX> Tangent
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override TangentPointColorX Compute(ExecutionContext context)
		{
			return (TangentPointColorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TangentPointColorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PackTangentPointColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CubicLerp")]
	public class CubicLerp_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointColorX> From
		{
			get
			{
				return (ValueArgument<TangentPointColorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointColorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointColorX> To
		{
			get
			{
				return (ValueArgument<TangentPointColorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointColorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CubicLerp_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cubic Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCubicLerp")]
	public class MultiCubicLerp_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointColorX> Operands
		{
			get
			{
				return (ValueInputList<TangentPointColorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointColorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		public MultiCubicLerp_ColorX()
		{
			Operands = new ValueInputList<TangentPointColorX>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCubicLerp_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.CosineLerp")]
	public class CosineLerp_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CosineLerp_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Cosine Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiCosineLerp")]
	public class MultiCosineLerp_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<colorX> Operands
		{
			get
			{
				return (ValueInputList<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		public MultiCosineLerp_ColorX()
		{
			Operands = new ValueInputList<colorX>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiCosineLerp_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.BezierCurve")]
	public class BezierCurve_ColorX : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TangentPointColorX> From
		{
			get
			{
				return (ValueArgument<TangentPointColorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<TangentPointColorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<TangentPointColorX> To
		{
			get
			{
				return (ValueArgument<TangentPointColorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<TangentPointColorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<colorX> Interpolated
		{
			get
			{
				return (ValueOutput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<colorX> Tangent
		{
			get
			{
				return (ValueOutput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BezierCurve_ColorX()
		{
			Interpolated = new ValueOutput<colorX>(this);
			Tangent = new ValueOutput<colorX>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BezierCurve_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Bezier Curve", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiBezierCurve")]
	public class MultiBezierCurve_ColorX : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<TangentPointColorX> Operands
		{
			get
			{
				return (ValueInputList<TangentPointColorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<TangentPointColorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public ValueOutput<colorX> Interpolated
		{
			get
			{
				return (ValueOutput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Interpolated"), typeof(ValueOutput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Interpolated", value);
			}
		}

		public ValueOutput<colorX> Tangent
		{
			get
			{
				return (ValueOutput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Tangent"), typeof(ValueOutput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Tangent", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public MultiBezierCurve_ColorX()
		{
			Operands = new ValueInputList<TangentPointColorX>();
			Interpolated = new ValueOutput<colorX>(this);
			Tangent = new ValueOutput<colorX>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiBezierCurve_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	public class Slerp_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> From
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<colorX> To
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	public class MultiSlerp_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<colorX> Operands
		{
			get
			{
				return (ValueInputList<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		public MultiSlerp_ColorX()
		{
			Operands = new ValueInputList<colorX>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.SlerpWithMagnitude")]
	public class SlerpWithMagnitude_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> From
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<colorX> To
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SlerpWithMagnitude_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("SlerpWithMagnitude", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerpWithMagnitude")]
	public class MultiSlerpWithMagnitude_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<colorX> Operands
		{
			get
			{
				return (ValueInputList<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		public MultiSlerpWithMagnitude_ColorX()
		{
			Operands = new ValueInputList<colorX>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerpWithMagnitude_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("n√x", false)]
	[NodeOverload("Core.Math.NthRoot")]
	[NodeCategory("Math")]
	public class NthRoot_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Value
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<float> N
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "N"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "N", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NthRoot_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Avg")]
	public class Avg_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> A
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<colorX> B
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Avg_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Avg", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.AvgMulti")]
	public class AvgMulti_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<colorX> Operands
		{
			get
			{
				return (ValueArgumentList<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueArgumentList<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		public AvgMulti_ColorX()
		{
			Operands = new ValueArgumentList<colorX>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AvgMulti_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Repeat 01", false)]
	[NodeCategory("Math")]
	[NodeOverload("Core.Math.Repeat01")]
	public class Repeat01_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Value
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Repeat01_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Quantity
{
	[NodeCategory("Math/Quantity")]
	public class FormatQuantity<U> : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder where U : struct, IQuantity<U>
	{
		public ValueArgument<U> Value
		{
			get
			{
				return (ValueArgument<U>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<U>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ObjectArgument<string> FormatUnit
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatUnit"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatUnit", value);
			}
		}

		public ObjectArgument<string> FormatNumber
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FormatNumber"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FormatNumber", value);
			}
		}

		public ValueArgument<bool> UseLongNames
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UseLongNames"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UseLongNames", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FormatQuantity(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Quantity")]
	public class ParseQuantity<U> : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder where U : struct, IQuantity<U>
	{
		public ObjectArgument<string> Str
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Str"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Str", value);
			}
		}

		public ObjectArgument<string> DefaultUnit
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DefaultUnit"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DefaultUnit", value);
			}
		}

		public ValueOutput<U> Value
		{
			get
			{
				return (ValueOutput<U>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueOutput<U>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueOutput<bool> IsParsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsParsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsParsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ParseQuantity()
		{
			((ParseQuantity<>)(object)this).Value = new ValueOutput<U>(this);
			((ParseQuantity<>)(object)this).IsParsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ParseQuantity(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Quantity")]
	public class BaseValue<U> : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder where U : struct, IQuantity<U>
	{
		public ValueArgument<U> Value
		{
			get
			{
				return (ValueArgument<U>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<U>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BaseValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Quantity")]
	public class FromBaseValue<U> : ValueFunctionNode<ExecutionContext, U>, ResoniteBridge.ResoniteBridgeValueHolder where U : struct, IQuantity<U>
	{
		public ValueArgument<double> BaseValue
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BaseValue"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BaseValue", value);
			}
		}

		protected override U Compute(ExecutionContext context)
		{
			return (U)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(U));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromBaseValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Rects
{
	[NodeCategory("Math/Rects")]
	public class RectFromXYWH : ValueFunctionNode<ExecutionContext, Rect>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> X
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueArgument<float> Y
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueArgument<float> Width
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Width"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Width", value);
			}
		}

		public ValueArgument<float> Height
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Height"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Height", value);
			}
		}

		protected override Rect Compute(ExecutionContext context)
		{
			return (Rect)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Rect));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RectFromXYWH(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Rects")]
	public class RectFromPositionSize : ValueFunctionNode<ExecutionContext, Rect>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Position
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueArgument<float2> Size
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Size"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Size", value);
			}
		}

		protected override Rect Compute(ExecutionContext context)
		{
			return (Rect)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Rect));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RectFromPositionSize(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Rects")]
	public class RectFromMinMax : ValueFunctionNode<ExecutionContext, Rect>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Min
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float2> Max
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override Rect Compute(ExecutionContext context)
		{
			return (Rect)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Rect));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RectFromMinMax(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Rects")]
	public class RectToXYWH : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Rect> Rect
		{
			get
			{
				return (ValueArgument<Rect>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rect"), typeof(ValueArgument<Rect>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rect", value);
			}
		}

		public ValueOutput<float> X
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "X"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "X", value);
			}
		}

		public ValueOutput<float> Y
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<float> Width
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Width"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Width", value);
			}
		}

		public ValueOutput<float> Height
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Height"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Height", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public RectToXYWH()
		{
			X = new ValueOutput<float>(this);
			Y = new ValueOutput<float>(this);
			Width = new ValueOutput<float>(this);
			Height = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RectToXYWH(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Rects")]
	public class RectToPositionSize : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Rect> Rect
		{
			get
			{
				return (ValueArgument<Rect>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rect"), typeof(ValueArgument<Rect>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rect", value);
			}
		}

		public ValueOutput<float2> Position
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		public ValueOutput<float2> Size
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Size"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Size", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public RectToPositionSize()
		{
			Position = new ValueOutput<float2>(this);
			Size = new ValueOutput<float2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RectToPositionSize(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Rects")]
	public class RectToMinMax : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Rect> Rect
		{
			get
			{
				return (ValueArgument<Rect>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rect"), typeof(ValueArgument<Rect>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rect", value);
			}
		}

		public ValueOutput<float2> Min
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueOutput<float2> Max
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public RectToMinMax()
		{
			Min = new ValueOutput<float2>(this);
			Max = new ValueOutput<float2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RectToMinMax(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Rects")]
	public class EncapsulateRect : ValueFunctionNode<ExecutionContext, Rect>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Rect> A
		{
			get
			{
				return (ValueArgument<Rect>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<Rect>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<Rect> B
		{
			get
			{
				return (ValueArgument<Rect>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<Rect>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override Rect Compute(ExecutionContext context)
		{
			return (Rect)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Rect));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EncapsulateRect(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Rects")]
	public class ClipRect : ValueFunctionNode<ExecutionContext, Rect>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Rect> Rect
		{
			get
			{
				return (ValueArgument<Rect>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rect"), typeof(ValueArgument<Rect>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rect", value);
			}
		}

		public ValueArgument<Rect> Mask
		{
			get
			{
				return (ValueArgument<Rect>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Mask"), typeof(ValueArgument<Rect>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Mask", value);
			}
		}

		protected override Rect Compute(ExecutionContext context)
		{
			return (Rect)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Rect));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClipRect(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Rects")]
	public class TranslateRect : ValueFunctionNode<ExecutionContext, Rect>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<Rect> Rect
		{
			get
			{
				return (ValueArgument<Rect>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rect"), typeof(ValueArgument<Rect>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rect", value);
			}
		}

		public ValueArgument<float2> Offset
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Offset"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Offset", value);
			}
		}

		protected override Rect Compute(ExecutionContext context)
		{
			return (Rect)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(Rect));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TranslateRect(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Quaternions
{
	[NodeName("Lerp", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Lerp")]
	public class Lerp_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> From
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<floatQ> To
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static floatQ FromDefault => floatQ.Identity;

		public static floatQ ToDefault => floatQ.Identity;

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Lerp_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiLerp")]
	public class MultiLerp_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<floatQ> Operands
		{
			get
			{
				return (ValueInputList<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static floatQ OperandsDefault => floatQ.Identity;

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		public MultiLerp_floatQ()
		{
			Operands = new ValueInputList<floatQ>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiLerp_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	public class Slerp_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> From
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<floatQ> To
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static floatQ FromDefault => floatQ.Identity;

		public static floatQ ToDefault => floatQ.Identity;

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	public class MultiSlerp_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<floatQ> Operands
		{
			get
			{
				return (ValueInputList<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static floatQ OperandsDefault => floatQ.Identity;

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		public MultiSlerp_floatQ()
		{
			Operands = new ValueInputList<floatQ>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Euler Angles", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.EulerAngles")]
	public class EulerAngles_floatQ : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> Q
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Q"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Q", value);
			}
		}

		public static floatQ QDefault => floatQ.Identity;

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EulerAngles_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("From Euler", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.FromEuler")]
	public class FromEuler_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Angles
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Angles"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Angles", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromEuler_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("AngularVelocityDelta", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.AngularVelocityDelta")]
	public class AngularVelocityDelta_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> AngularVelocity
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "AngularVelocity"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "AngularVelocity", value);
			}
		}

		public ValueArgument<float> DeltaTime
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DeltaTime"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DeltaTime", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AngularVelocityDelta_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Axis Angle", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.AxisAngle")]
	public class AxisAngle_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Axis
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Axis"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Axis", value);
			}
		}

		public ValueArgument<float> Angle
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Angle"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Angle", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AxisAngle_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Look Rotation", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.LookRotation")]
	public class LookRotation_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Forward
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Forward"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Forward", value);
			}
		}

		public ValueArgument<float3> Up
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Up"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Up", value);
			}
		}

		public static float3 ForwardDefault => float3.Forward;

		public static float3 UpDefault => float3.Up;

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LookRotation_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("From To Rotation", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.FromToRotation")]
	public class FromToRotation_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> From
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<float3> To
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromToRotation_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Inverse Rotation", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.InverseRotation")]
	public class InverseRotation_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> Q
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Q"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Q", value);
			}
		}

		public static floatQ QDefault => floatQ.Identity;

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseRotation_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("To Axis Angle", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.ToAxisAngle")]
	public class ToAxisAngle_floatQ : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> Q
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Q"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Q", value);
			}
		}

		public ValueOutput<float3> Axis
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Axis"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Axis", value);
			}
		}

		public ValueOutput<float> Angle
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Angle"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Angle", value);
			}
		}

		public static floatQ QDefault => floatQ.Identity;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ToAxisAngle_floatQ()
		{
			Axis = new ValueOutput<float3>(this);
			Angle = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToAxisAngle_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pow", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_floatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> Q
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Q"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Q", value);
			}
		}

		public ValueArgument<float> Pow
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Pow"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Pow", value);
			}
		}

		public static floatQ QDefault => floatQ.Identity;

		public static float PowDefault => 1f;

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Lerp", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Lerp")]
	public class Lerp_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> From
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<doubleQ> To
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static doubleQ FromDefault => doubleQ.Identity;

		public static doubleQ ToDefault => doubleQ.Identity;

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Lerp_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Lerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiLerp")]
	public class MultiLerp_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<doubleQ> Operands
		{
			get
			{
				return (ValueInputList<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static doubleQ OperandsDefault => doubleQ.Identity;

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		public MultiLerp_doubleQ()
		{
			Operands = new ValueInputList<doubleQ>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiLerp_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.Slerp")]
	public class Slerp_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> From
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<doubleQ> To
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static doubleQ FromDefault => doubleQ.Identity;

		public static doubleQ ToDefault => doubleQ.Identity;

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Slerp_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Slerp", false)]
	[NodeCategory("Math/Interpolation")]
	[NodeOverload("Core.Math.MultiSlerp")]
	public class MultiSlerp_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueInputList<doubleQ> Operands
		{
			get
			{
				return (ValueInputList<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Operands"), typeof(ValueInputList<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Operands", value);
			}
		}

		public ValueArgument<float> Lerp
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Lerp"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Lerp", value);
			}
		}

		public static doubleQ OperandsDefault => doubleQ.Identity;

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		public MultiSlerp_doubleQ()
		{
			Operands = new ValueInputList<doubleQ>();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public MultiSlerp_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Euler Angles", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.EulerAngles")]
	public class EulerAngles_doubleQ : ValueFunctionNode<ExecutionContext, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> Q
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Q"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Q", value);
			}
		}

		public static doubleQ QDefault => doubleQ.Identity;

		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EulerAngles_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("From Euler", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.FromEuler")]
	public class FromEuler_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Angles
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Angles"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Angles", value);
			}
		}

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromEuler_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("AngularVelocityDelta", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.AngularVelocityDelta")]
	public class AngularVelocityDelta_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> AngularVelocity
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "AngularVelocity"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "AngularVelocity", value);
			}
		}

		public ValueArgument<double> DeltaTime
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DeltaTime"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DeltaTime", value);
			}
		}

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AngularVelocityDelta_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Axis Angle", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.AxisAngle")]
	public class AxisAngle_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Axis
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Axis"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Axis", value);
			}
		}

		public ValueArgument<double> Angle
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Angle"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Angle", value);
			}
		}

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public AxisAngle_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Look Rotation", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.LookRotation")]
	public class LookRotation_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> Forward
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Forward"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Forward", value);
			}
		}

		public ValueArgument<double3> Up
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Up"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Up", value);
			}
		}

		public static double3 ForwardDefault => double3.Forward;

		public static double3 UpDefault => double3.Up;

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LookRotation_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("From To Rotation", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.FromToRotation")]
	public class FromToRotation_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double3> From
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "From"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "From", value);
			}
		}

		public ValueArgument<double3> To
		{
			get
			{
				return (ValueArgument<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "To"), typeof(ValueArgument<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "To", value);
			}
		}

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromToRotation_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Inverse Rotation", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.InverseRotation")]
	public class InverseRotation_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> Q
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Q"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Q", value);
			}
		}

		public static doubleQ QDefault => doubleQ.Identity;

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InverseRotation_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("To Axis Angle", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Rotation.ToAxisAngle")]
	public class ToAxisAngle_doubleQ : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> Q
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Q"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Q", value);
			}
		}

		public ValueOutput<double3> Axis
		{
			get
			{
				return (ValueOutput<double3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Axis"), typeof(ValueOutput<double3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Axis", value);
			}
		}

		public ValueOutput<double> Angle
		{
			get
			{
				return (ValueOutput<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Angle"), typeof(ValueOutput<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Angle", value);
			}
		}

		public static doubleQ QDefault => doubleQ.Identity;

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ToAxisAngle_doubleQ()
		{
			Axis = new ValueOutput<double3>(this);
			Angle = new ValueOutput<double>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToAxisAngle_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Pow", false)]
	[NodeCategory("Math/Rotation")]
	[NodeOverload("Core.Math.Pow")]
	public class Pow_doubleQ : ValueFunctionNode<ExecutionContext, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<doubleQ> Q
		{
			get
			{
				return (ValueArgument<doubleQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Q"), typeof(ValueArgument<doubleQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Q", value);
			}
		}

		public ValueArgument<double> Pow
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Pow"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Pow", value);
			}
		}

		public static doubleQ QDefault => doubleQ.Identity;

		public static double PowDefault => 1.0;

		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pow_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Physics
{
	[NodeCategory("Math/Physics")]
	public class TrajectoryPosition : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> InitialVelocity
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "InitialVelocity"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "InitialVelocity", value);
			}
		}

		public ValueArgument<float3> Gravity
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Gravity"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Gravity", value);
			}
		}

		public ValueArgument<float> Drag
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Drag"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Drag", value);
			}
		}

		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TrajectoryPosition(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Physics")]
	public class TorqueEstimate : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> InitialTorque
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "InitialTorque"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "InitialTorque", value);
			}
		}

		public ValueArgument<float> Drag
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Drag"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Drag", value);
			}
		}

		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TorqueEstimate(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Random
{
	[NodeCategory("Math/Random")]
	[NodeName("Simplex 1D", false)]
	[NodeOverload("Core.Math.Noise.Simplex")]
	public class SimplexNoise_1D : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Position
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SimplexNoise_1D(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[NodeName("Simplex 2D", false)]
	[NodeOverload("Core.Math.Noise.Simplex")]
	public class SimplexNoise_2D : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Position
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SimplexNoise_2D(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[NodeName("Simplex 3D", false)]
	[NodeOverload("Core.Math.Noise.Simplex")]
	public class SimplexNoise_3D : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Position
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SimplexNoise_3D(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[NodeName("Simplex 4D", false)]
	[NodeOverload("Core.Math.Noise.Simplex")]
	public class SimplexNoise_4D : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Position
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Position"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Position", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SimplexNoise_4D(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomBool : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Chance
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Chance"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Chance", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomBool(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomInt : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> Min
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<int> Max
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Min
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float> Max
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomFloat2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Min
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float2> Max
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		public static float2 MaxDefault => float2.One;

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomFloat2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomFloat3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Min
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float3> Max
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		public static float3 MaxDefault => float3.One;

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomFloat3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomFloat4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Min
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float4> Max
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		public static float4 MaxDefault => float4.One;

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomFloat4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomLerpFloat2 : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Min
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float2> Max
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		public static float2 MaxDefault => float2.One;

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomLerpFloat2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomLerpFloat3 : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Min
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float3> Max
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		public static float3 MaxDefault => float3.One;

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomLerpFloat3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomLerpFloat4 : ValueFunctionNode<ExecutionContext, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float4> Min
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<float4> Max
		{
			get
			{
				return (ValueArgument<float4>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<float4>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		public static float4 MaxDefault => float4.One;

		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomLerpFloat4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomLerpColor : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Min
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<color> Max
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomLerpColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomLerpColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Min
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<colorX> Max
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomLerpColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomSlerpFloatQ : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<floatQ> Min
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<floatQ> Max
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		public static floatQ MinDefault => floatQ.Identity;

		public static floatQ MaxDefault => floatQ.Identity;

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomSlerpFloatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointInSphere : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointInSphere(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointOnSphere : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointOnSphere(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointInCube : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointInCube(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointOnCube : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointOnCube(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointInCircle : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointInCircle(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointOnCircle : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointOnCircle(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointInSquare : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointInSquare(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointOnSquare : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointOnSquare(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointInCone : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Height
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Height"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Height", value);
			}
		}

		public ValueArgument<float> BaseRadius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BaseRadius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BaseRadius", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointInCone(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random/Point")]
	[ContinuouslyChanging]
	public class RandomPointOnCone : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Height
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Height"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Height", value);
			}
		}

		public ValueArgument<float> BaseRadius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BaseRadius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BaseRadius", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomPointOnCone(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	[FeatureUpgradeReplacement("ColorManagement", 0, typeof(RandomRGB_ColorX))]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Math.Random.RandomRGB", null)]
	public class RandomRGB_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomRGB_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	[FeatureUpgradeReplacement("ColorManagement", 0, typeof(RandomRGBA_ColorX))]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Math.Random.RandomRGBA", null)]
	public class RandomRGBA_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomRGBA_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	[FeatureUpgradeReplacement("ColorManagement", 0, typeof(RandomGrayscale_ColorX))]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Math.Random.RandomGrayscale", null)]
	public class RandomGrayscale_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomGrayscale_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	[FeatureUpgradeReplacement("ColorManagement", 0, typeof(RandomHue_ColorX))]
	[OldTypeName("ProtoFlux.Runtimes.Execution.Nodes.Math.Random.RandomHue", null)]
	public class RandomHue_Color : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomHue_Color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomRGB_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomRGB_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomRGBA_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomRGBA_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomGrayscale_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomGrayscale_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomHue_ColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomHue_ColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomRotation : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomRotation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomEnum<E> : ValueFunctionNode<ExecutionContext, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		protected override E Compute(ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Random")]
	[ContinuouslyChanging]
	public class RandomString : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> Characters
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Characters"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Characters", value);
			}
		}

		public ValueArgument<int> Length
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Length"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Length", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RandomString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Geometry3D
{
	[NodeCategory("Math/Geometry 3D")]
	public class RayPlaneIntersection : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> RayOrigin
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RayOrigin"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RayOrigin", value);
			}
		}

		public ValueArgument<float3> RayDirection
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RayDirection"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RayDirection", value);
			}
		}

		public ValueArgument<float3> PlanePoint
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PlanePoint"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PlanePoint", value);
			}
		}

		public ValueArgument<float3> PlaneNormal
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "PlaneNormal"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "PlaneNormal", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RayPlaneIntersection(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class RaySphereIntersection : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Center
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Center"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Center", value);
			}
		}

		public ValueArgument<float> Radius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Radius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Radius", value);
			}
		}

		public ValueArgument<float3> RayOrigin
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RayOrigin"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RayOrigin", value);
			}
		}

		public ValueArgument<float3> RayDirection
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "RayDirection"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "RayDirection", value);
			}
		}

		public ValueOutput<float3> Point
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ValueOutput<bool> IsIntersecting
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsIntersecting"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsIntersecting", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public RaySphereIntersection()
		{
			Point = new ValueOutput<float3>(this);
			IsIntersecting = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RaySphereIntersection(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class SphereForTangentLine : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> LinePoint
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint", value);
			}
		}

		public ValueArgument<float3> LineDirection
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LineDirection"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LineDirection", value);
			}
		}

		public ValueArgument<float3> SphereCenter
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "SphereCenter"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "SphereCenter", value);
			}
		}

		public ValueOutput<float3> TangentPoint
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TangentPoint"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TangentPoint", value);
			}
		}

		public ValueOutput<float> Radius
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Radius"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Radius", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public SphereForTangentLine()
		{
			TangentPoint = new ValueOutput<float3>(this);
			Radius = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SphereForTangentLine(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class RotationAtTargetPoint : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Pivot
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Pivot"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Pivot", value);
			}
		}

		public ValueArgument<float3> Point
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ValueArgument<float3> Direction
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		public ValueArgument<float3> TargetPoint
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TargetPoint"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TargetPoint", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RotationAtTargetPoint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class ClosestPointsBetweenLines : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> LinePoint0
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint0"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint0", value);
			}
		}

		public ValueArgument<float3> LineDir0
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LineDir0"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LineDir0", value);
			}
		}

		public ValueArgument<float3> LinePoint1
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint1"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint1", value);
			}
		}

		public ValueArgument<float3> LineDir1
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LineDir1"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LineDir1", value);
			}
		}

		public ValueOutput<float3> Point0
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point0"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point0", value);
			}
		}

		public ValueOutput<float3> Point1
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point1"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point1", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ClosestPointsBetweenLines()
		{
			Point0 = new ValueOutput<float3>(this);
			Point1 = new ValueOutput<float3>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClosestPointsBetweenLines(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class TriangleNormal : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Point0
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point0"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point0", value);
			}
		}

		public ValueArgument<float3> Point1
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point1"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point1", value);
			}
		}

		public ValueArgument<float3> Point2
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point2"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point2", value);
			}
		}

		public ValueOutput<float3> Normal
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Normal"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Normal", value);
			}
		}

		public ValueOutput<bool> IsValid
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsValid"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsValid", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public TriangleNormal()
		{
			Normal = new ValueOutput<float3>(this);
			IsValid = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TriangleNormal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class PointOnUVSphere : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> UV
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UV"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UV", value);
			}
		}

		public ValueArgument<float> Radius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Radius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Radius", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PointOnUVSphere(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class OrientationOnUVSphere : ValueFunctionNode<ExecutionContext, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> UV
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UV"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UV", value);
			}
		}

		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OrientationOnUVSphere(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class ClosestPointOnLine : ValueFunctionNode<ExecutionContext, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> LinePoint0
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint0"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint0", value);
			}
		}

		public ValueArgument<float3> LinePoint1
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint1"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint1", value);
			}
		}

		public ValueArgument<float3> Point
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClosestPointOnLine(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class ClosestPointOnConeSurface : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> ConeCenter
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ConeCenter"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ConeCenter", value);
			}
		}

		public ValueArgument<floatQ> ConeOrientation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ConeOrientation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ConeOrientation", value);
			}
		}

		public ValueArgument<float> ConeHeight
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ConeHeight"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ConeHeight", value);
			}
		}

		public ValueArgument<float> ConeBaseRadius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ConeBaseRadius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ConeBaseRadius", value);
			}
		}

		public ValueArgument<float3> Point
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ValueOutput<float3> ClosestPoint
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ClosestPoint"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ClosestPoint", value);
			}
		}

		public ValueOutput<bool> IsPointInside
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsPointInside"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsPointInside", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ClosestPointOnConeSurface()
		{
			ClosestPoint = new ValueOutput<float3>(this);
			IsPointInside = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClosestPointOnConeSurface(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class DistanceFromCone : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> ConeCenter
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ConeCenter"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ConeCenter", value);
			}
		}

		public ValueArgument<floatQ> ConeOrientation
		{
			get
			{
				return (ValueArgument<floatQ>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ConeOrientation"), typeof(ValueArgument<floatQ>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ConeOrientation", value);
			}
		}

		public ValueArgument<float> ConeHeight
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ConeHeight"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ConeHeight", value);
			}
		}

		public ValueArgument<float> ConeBaseRadius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ConeBaseRadius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ConeBaseRadius", value);
			}
		}

		public ValueArgument<float3> Point
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DistanceFromCone(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class ClosestPointOnSphericalSectorSurface : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Center
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Center"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Center", value);
			}
		}

		public ValueArgument<float3> Direction
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		public ValueArgument<float> Radius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Radius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Radius", value);
			}
		}

		public ValueArgument<float> Angle
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Angle"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Angle", value);
			}
		}

		public ValueArgument<float3> Point
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		public ValueOutput<float3> ClosestPoint
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ClosestPoint"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ClosestPoint", value);
			}
		}

		public ValueOutput<bool> IsPointInside
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsPointInside"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsPointInside", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ClosestPointOnSphericalSectorSurface()
		{
			ClosestPoint = new ValueOutput<float3>(this);
			IsPointInside = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ClosestPointOnSphericalSectorSurface(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 3D")]
	public class DistanceFromSphericalSector : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Center
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Center"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Center", value);
			}
		}

		public ValueArgument<float3> Direction
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		public ValueArgument<float> Radius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Radius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Radius", value);
			}
		}

		public ValueArgument<float> Angle
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Angle"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Angle", value);
			}
		}

		public ValueArgument<float3> Point
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DistanceFromSphericalSector(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Geometry2D
{
	[NodeCategory("Math/Geometry 2D")]
	public class PointOnCircle : ValueFunctionNode<ExecutionContext, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> NormalizedPosition
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NormalizedPosition"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NormalizedPosition", value);
			}
		}

		public ValueArgument<float> Radius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Radius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Radius", value);
			}
		}

		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PointOnCircle(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 2D")]
	public class RayToLineIntersectionDistance : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Origin
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Origin"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Origin", value);
			}
		}

		public ValueArgument<float2> Direction
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		public ValueArgument<float2> LinePoint0
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint0"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint0", value);
			}
		}

		public ValueArgument<float2> LinePoint1
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint1"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint1", value);
			}
		}

		public ValueOutput<float> Distance
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Distance"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Distance", value);
			}
		}

		public ValueOutput<bool> Intersects
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Intersects"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Intersects", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public RayToLineIntersectionDistance()
		{
			Distance = new ValueOutput<float>(this);
			Intersects = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RayToLineIntersectionDistance(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 2D")]
	public class RayToLineIntersection : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Origin
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Origin"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Origin", value);
			}
		}

		public ValueArgument<float2> Direction
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		public ValueArgument<float2> LinePoint0
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint0"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint0", value);
			}
		}

		public ValueArgument<float2> LinePoint1
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint1"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint1", value);
			}
		}

		public ValueOutput<float2> Intersection
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Intersection"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Intersection", value);
			}
		}

		public ValueOutput<bool> Intersects
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Intersects"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Intersects", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public RayToLineIntersection()
		{
			Intersection = new ValueOutput<float2>(this);
			Intersects = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RayToLineIntersection(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 2D")]
	public class RayRectangleIntersection : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Origin
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Origin"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Origin", value);
			}
		}

		public ValueArgument<float2> Direction
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Direction"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Direction", value);
			}
		}

		public ValueArgument<Rect> Rectangle
		{
			get
			{
				return (ValueArgument<Rect>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Rectangle"), typeof(ValueArgument<Rect>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Rectangle", value);
			}
		}

		public ValueOutput<float2> Intersection
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Intersection"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Intersection", value);
			}
		}

		public ValueOutput<bool> Intersects
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Intersects"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Intersects", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public RayRectangleIntersection()
		{
			Intersection = new ValueOutput<float2>(this);
			Intersects = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RayRectangleIntersection(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Geometry 2D")]
	public class LineCircleIntersections : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float2> Center
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Center"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Center", value);
			}
		}

		public ValueArgument<float> Radius
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Radius"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Radius", value);
			}
		}

		public ValueArgument<float2> LinePoint0
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint0"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint0", value);
			}
		}

		public ValueArgument<float2> LinePoint1
		{
			get
			{
				return (ValueArgument<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "LinePoint1"), typeof(ValueArgument<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "LinePoint1", value);
			}
		}

		public ValueOutput<int> IntersectionCount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IntersectionCount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IntersectionCount", value);
			}
		}

		public ValueOutput<float2> Intersection0
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Intersection0"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Intersection0", value);
			}
		}

		public ValueOutput<float2> Intersection1
		{
			get
			{
				return (ValueOutput<float2>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Intersection1"), typeof(ValueOutput<float2>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Intersection1", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public LineCircleIntersections()
		{
			IntersectionCount = new ValueOutput<int>(this);
			Intersection0 = new ValueOutput<float2>(this);
			Intersection1 = new ValueOutput<float2>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LineCircleIntersections(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Easing
{
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Sine", false)]
	[NodeOverload("Core.Math.Easing.InSine")]
	public class EaseInSineFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInSineFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Sine", false)]
	[NodeOverload("Core.Math.Easing.OutSine")]
	public class EaseOutSineFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutSineFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Sine", false)]
	[NodeOverload("Core.Math.Easing.InOutSine")]
	public class EaseInOutSineFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutSineFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Sine", false)]
	[NodeOverload("Core.Math.Easing.InSine")]
	public class EaseInSineDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInSineDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Sine", false)]
	[NodeOverload("Core.Math.Easing.OutSine")]
	public class EaseOutSineDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutSineDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Sine", false)]
	[NodeOverload("Core.Math.Easing.InOutSine")]
	public class EaseInOutSineDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutSineDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Quadratic", false)]
	[NodeOverload("Core.Math.Easing.InQuadratic")]
	public class EaseInQuadraticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInQuadraticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Quadratic", false)]
	[NodeOverload("Core.Math.Easing.OutQuadratic")]
	public class EaseOutQuadraticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutQuadraticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Quadratic", false)]
	[NodeOverload("Core.Math.Easing.InOutQuadratic")]
	public class EaseInOutQuadraticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutQuadraticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Quadratic", false)]
	[NodeOverload("Core.Math.Easing.InQuadratic")]
	public class EaseInQuadraticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInQuadraticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Quadratic", false)]
	[NodeOverload("Core.Math.Easing.OutQuadratic")]
	public class EaseOutQuadraticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutQuadraticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Quadratic", false)]
	[NodeOverload("Core.Math.Easing.InOutQuadratic")]
	public class EaseInOutQuadraticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutQuadraticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Cubic", false)]
	[NodeOverload("Core.Math.Easing.InCubic")]
	public class EaseInCubicFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInCubicFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Cubic", false)]
	[NodeOverload("Core.Math.Easing.OutCubic")]
	public class EaseOutCubicFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutCubicFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Cubic", false)]
	[NodeOverload("Core.Math.Easing.InOutCubic")]
	public class EaseInOutCubicFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutCubicFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Cubic", false)]
	[NodeOverload("Core.Math.Easing.InCubic")]
	public class EaseInCubicDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInCubicDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Cubic", false)]
	[NodeOverload("Core.Math.Easing.OutCubic")]
	public class EaseOutCubicDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutCubicDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Cubic", false)]
	[NodeOverload("Core.Math.Easing.InOutCubic")]
	public class EaseInOutCubicDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutCubicDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Quartic", false)]
	[NodeOverload("Core.Math.Easing.InQuartic")]
	public class EaseInQuarticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInQuarticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Quartic", false)]
	[NodeOverload("Core.Math.Easing.OutQuartic")]
	public class EaseOutQuarticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutQuarticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Quartic", false)]
	[NodeOverload("Core.Math.Easing.InOutQuartic")]
	public class EaseInOutQuarticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutQuarticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Quartic", false)]
	[NodeOverload("Core.Math.Easing.InQuartic")]
	public class EaseInQuarticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInQuarticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Quartic", false)]
	[NodeOverload("Core.Math.Easing.OutQuartic")]
	public class EaseOutQuarticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutQuarticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Quartic", false)]
	[NodeOverload("Core.Math.Easing.InOutQuartic")]
	public class EaseInOutQuarticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutQuarticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Quintic", false)]
	[NodeOverload("Core.Math.Easing.InQuintic")]
	public class EaseInQuinticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInQuinticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Quintic", false)]
	[NodeOverload("Core.Math.Easing.OutQuintic")]
	public class EaseOutQuinticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutQuinticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Quintic", false)]
	[NodeOverload("Core.Math.Easing.InOutQuintic")]
	public class EaseInOutQuinticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutQuinticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Quintic", false)]
	[NodeOverload("Core.Math.Easing.InQuintic")]
	public class EaseInQuinticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInQuinticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Quintic", false)]
	[NodeOverload("Core.Math.Easing.OutQuintic")]
	public class EaseOutQuinticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutQuinticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Quintic", false)]
	[NodeOverload("Core.Math.Easing.InOutQuintic")]
	public class EaseInOutQuinticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutQuinticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Exponential", false)]
	[NodeOverload("Core.Math.Easing.InExponential")]
	public class EaseInExponentialFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInExponentialFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Exponential", false)]
	[NodeOverload("Core.Math.Easing.OutExponential")]
	public class EaseOutExponentialFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutExponentialFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Exponential", false)]
	[NodeOverload("Core.Math.Easing.InOutExponential")]
	public class EaseInOutExponentialFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutExponentialFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Exponential", false)]
	[NodeOverload("Core.Math.Easing.InExponential")]
	public class EaseInExponentialDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInExponentialDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Exponential", false)]
	[NodeOverload("Core.Math.Easing.OutExponential")]
	public class EaseOutExponentialDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutExponentialDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Exponential", false)]
	[NodeOverload("Core.Math.Easing.InOutExponential")]
	public class EaseInOutExponentialDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutExponentialDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Circular", false)]
	[NodeOverload("Core.Math.Easing.InCircular")]
	public class EaseInCircularFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInCircularFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Circular", false)]
	[NodeOverload("Core.Math.Easing.OutCircular")]
	public class EaseOutCircularFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutCircularFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Circular", false)]
	[NodeOverload("Core.Math.Easing.InOutCircular")]
	public class EaseInOutCircularFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutCircularFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Circular", false)]
	[NodeOverload("Core.Math.Easing.InCircular")]
	public class EaseInCircularDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInCircularDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Circular", false)]
	[NodeOverload("Core.Math.Easing.OutCircular")]
	public class EaseOutCircularDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutCircularDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Circular", false)]
	[NodeOverload("Core.Math.Easing.InOutCircular")]
	public class EaseInOutCircularDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutCircularDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Rebound", false)]
	[NodeOverload("Core.Math.Easing.InRebound")]
	public class EaseInReboundFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<float> ReboundAmplitude
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ReboundAmplitude"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ReboundAmplitude", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInReboundFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Rebound", false)]
	[NodeOverload("Core.Math.Easing.OutRebound")]
	public class EaseOutReboundFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<float> ReboundAmplitude
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ReboundAmplitude"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ReboundAmplitude", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutReboundFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease- In/Out Rebound", false)]
	[NodeOverload("Core.Math.Easing.InOutRebound")]
	public class EaseInOutReboundFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<float> ReboundAmplitude
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ReboundAmplitude"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ReboundAmplitude", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutReboundFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Rebound", false)]
	[NodeOverload("Core.Math.Easing.InRebound")]
	public class EaseInReboundDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<double> ReboundAmplitude
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ReboundAmplitude"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ReboundAmplitude", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInReboundDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Rebound", false)]
	[NodeOverload("Core.Math.Easing.OutRebound")]
	public class EaseOutReboundDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<double> ReboundAmplitude
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ReboundAmplitude"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ReboundAmplitude", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutReboundDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease- In/Out Rebound", false)]
	[NodeOverload("Core.Math.Easing.InOutRebound")]
	public class EaseInOutReboundDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<double> ReboundAmplitude
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ReboundAmplitude"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ReboundAmplitude", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutReboundDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Elastic", false)]
	[NodeOverload("Core.Math.Easing.InElastic")]
	public class EaseInElasticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<float> Amplitude
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Amplitude"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Amplitude", value);
			}
		}

		public ValueArgument<float> Period
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Period"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Period", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInElasticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Elastic", false)]
	[NodeOverload("Core.Math.Easing.OutElastic")]
	public class EaseOutElasticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<float> Amplitude
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Amplitude"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Amplitude", value);
			}
		}

		public ValueArgument<float> Period
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Period"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Period", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutElasticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Elastic", false)]
	[NodeOverload("Core.Math.Easing.InOutElastic")]
	public class EaseInOutElasticFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<float> Amplitude
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Amplitude"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Amplitude", value);
			}
		}

		public ValueArgument<float> Period
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Period"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Period", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutElasticFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Elastic", false)]
	[NodeOverload("Core.Math.Easing.InElastic")]
	public class EaseInElasticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<double> Amplitude
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Amplitude"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Amplitude", value);
			}
		}

		public ValueArgument<double> Period
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Period"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Period", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInElasticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Elastic", false)]
	[NodeOverload("Core.Math.Easing.OutElastic")]
	public class EaseOutElasticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<double> Amplitude
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Amplitude"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Amplitude", value);
			}
		}

		public ValueArgument<double> Period
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Period"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Period", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutElasticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Elastic", false)]
	[NodeOverload("Core.Math.Easing.InOutElastic")]
	public class EaseInOutElasticDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		public ValueArgument<double> Amplitude
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Amplitude"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Amplitude", value);
			}
		}

		public ValueArgument<double> Period
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Period"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Period", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutElasticDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Bounce", false)]
	[NodeOverload("Core.Math.Easing.InBounce")]
	public class EaseInBounceFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInBounceFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Bounce", false)]
	[NodeOverload("Core.Math.Easing.OutBounce")]
	public class EaseOutBounceFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutBounceFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Bounce", false)]
	[NodeOverload("Core.Math.Easing.InOutBounce")]
	public class EaseInOutBounceFloat : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Time
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutBounceFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In Bounce", false)]
	[NodeOverload("Core.Math.Easing.InBounce")]
	public class EaseInBounceDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInBounceDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-Out Bounce", false)]
	[NodeOverload("Core.Math.Easing.OutBounce")]
	public class EaseOutBounceDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseOutBounceDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Easing")]
	[NodeName("Ease-In/Out Bounce", false)]
	[NodeOverload("Core.Math.Easing.InOutBounce")]
	public class EaseInOutBounceDouble : ValueFunctionNode<ExecutionContext, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Time
		{
			get
			{
				return (ValueArgument<double>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Time"), typeof(ValueArgument<double>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Time", value);
			}
		}

		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EaseInOutBounceDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Constants
{
	[NodeCategory("Math/Constants")]
	[NodeName("π", true)]
	public class Pi : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Pi(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("τ", true)]
	public class Tau : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Tau(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("π/2", true)]
	public class HalfPi : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HalfPi(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("π/4", true)]
	public class QuarterPi : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public QuarterPi(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("1/π", true)]
	public class InvertedPi : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InvertedPi(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("1/τ", true)]
	public class InvertedTau : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InvertedTau(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("1/(π/2)", true)]
	public class InvertedHalfPi : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InvertedHalfPi(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("1/(π/4)", true)]
	public class InvertedQuarterPi : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InvertedQuarterPi(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("e", true)]
	public class e : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public e(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("ϕ", true)]
	public class Phi : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Phi(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("Deg 2 Rad", true)]
	public class DegToRad : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DegToRad(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("Rad 2 Deg", true)]
	public class RadToDeg : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public RadToDeg(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("OwO", true)]
	public class OwO : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public OwO(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("<color=red>b<color=orange>o<color=yellow>b<color=lime>o<color=cyan>o<color=blue>l<color=purple>3<color=magenta>o<color=red>l", true)]
	public class Bobool3ol : ValueFunctionNode<ExecutionContext, bobool3ol>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bobool3ol Compute(ExecutionContext context)
		{
			return (bobool3ol)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bobool3ol));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Bobool3ol(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Math/Constants")]
	[NodeName("7", true)]
	public class Feven : ObjectFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Feven(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Math.Bounds
{
	[NodeCategory("Transform/Bounds")]
	public class Empty : ValueFunctionNode<ExecutionContext, BoundingBox>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override BoundingBox Compute(ExecutionContext context)
		{
			return (BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(BoundingBox));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Empty(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Bounds")]
	public class FromCenterSize : ValueFunctionNode<ExecutionContext, BoundingBox>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float3> Center
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Center"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Center", value);
			}
		}

		public ValueArgument<float3> Size
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Size"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Size", value);
			}
		}

		protected override BoundingBox Compute(ExecutionContext context)
		{
			return (BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(BoundingBox));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromCenterSize(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Bounds")]
	public class EncapsulatePoint : ValueFunctionNode<ExecutionContext, BoundingBox>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<BoundingBox> Bounds
		{
			get
			{
				return (ValueArgument<BoundingBox>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bounds"), typeof(ValueArgument<BoundingBox>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bounds", value);
			}
		}

		public ValueArgument<float3> Point
		{
			get
			{
				return (ValueArgument<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Point"), typeof(ValueArgument<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Point", value);
			}
		}

		protected override BoundingBox Compute(ExecutionContext context)
		{
			return (BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(BoundingBox));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EncapsulatePoint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Bounds")]
	public class EncapsulateBounds : ValueFunctionNode<ExecutionContext, BoundingBox>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<BoundingBox> Bounds
		{
			get
			{
				return (ValueArgument<BoundingBox>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bounds"), typeof(ValueArgument<BoundingBox>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bounds", value);
			}
		}

		public ValueArgument<BoundingBox> OtherBounds
		{
			get
			{
				return (ValueArgument<BoundingBox>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "OtherBounds"), typeof(ValueArgument<BoundingBox>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "OtherBounds", value);
			}
		}

		protected override BoundingBox Compute(ExecutionContext context)
		{
			return (BoundingBox)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(BoundingBox));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EncapsulateBounds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Transform/Bounds")]
	public class BoundingBoxProperties : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<BoundingBox> Bounds
		{
			get
			{
				return (ValueArgument<BoundingBox>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bounds"), typeof(ValueArgument<BoundingBox>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bounds", value);
			}
		}

		public ValueOutput<float3> Min
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueOutput<float3> Max
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		public ValueOutput<float3> Center
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Center"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Center", value);
			}
		}

		public ValueOutput<float3> Size
		{
			get
			{
				return (ValueOutput<float3>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Size"), typeof(ValueOutput<float3>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Size", value);
			}
		}

		public ValueOutput<bool> Valid
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Valid"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Valid", value);
			}
		}

		public ValueOutput<bool> Empty
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Empty"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Empty", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BoundingBoxProperties()
		{
			Min = new ValueOutput<float3>(this);
			Max = new ValueOutput<float3>(this);
			Center = new ValueOutput<float3>(this);
			Size = new ValueOutput<float3>(this);
			Valid = new ValueOutput<bool>(this);
			Empty = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BoundingBoxProperties(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Enums
{
	[NodeCategory("Enums")]
	[NodeOverload("Core.EnumToNumber")]
	public class EnumToByte<E> : ValueFunctionNode<ExecutionContext, byte>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<E> Value
		{
			get
			{
				return (ValueArgument<E>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<E>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToByte", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToByte", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EnumToByte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.NumberToEnum")]
	public class ByteToEnum<E> : ValueFunctionNode<ExecutionContext, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<byte> Value
		{
			get
			{
				return (ValueArgument<byte>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<byte>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ByteToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ByteToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override E Compute(ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ByteToEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.EnumToNumber")]
	public class EnumToUshort<E> : ValueFunctionNode<ExecutionContext, ushort>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<E> Value
		{
			get
			{
				return (ValueArgument<E>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<E>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToUshort", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToUshort", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EnumToUshort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.NumberToEnum")]
	public class UshortToEnum<E> : ValueFunctionNode<ExecutionContext, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<ushort> Value
		{
			get
			{
				return (ValueArgument<ushort>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<ushort>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "UshortToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "UshortToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override E Compute(ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UshortToEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.EnumToNumber")]
	public class EnumToUint<E> : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<E> Value
		{
			get
			{
				return (ValueArgument<E>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<E>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToUint", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToUint", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EnumToUint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.NumberToEnum")]
	public class UintToEnum<E> : ValueFunctionNode<ExecutionContext, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<uint> Value
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "UintToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "UintToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override E Compute(ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UintToEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.EnumToNumber")]
	public class EnumToUlong<E> : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<E> Value
		{
			get
			{
				return (ValueArgument<E>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<E>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToUlong", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToUlong", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EnumToUlong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.NumberToEnum")]
	public class UlongToEnum<E> : ValueFunctionNode<ExecutionContext, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<ulong> Value
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "UlongToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "UlongToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override E Compute(ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UlongToEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.EnumToNumber")]
	public class EnumToSbyte<E> : ValueFunctionNode<ExecutionContext, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<E> Value
		{
			get
			{
				return (ValueArgument<E>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<E>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToSbyte", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToSbyte", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EnumToSbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.NumberToEnum")]
	public class SbyteToEnum<E> : ValueFunctionNode<ExecutionContext, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<sbyte> Value
		{
			get
			{
				return (ValueArgument<sbyte>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<sbyte>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "SbyteToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "SbyteToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override E Compute(ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SbyteToEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.EnumToNumber")]
	public class EnumToShort<E> : ValueFunctionNode<ExecutionContext, short>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<E> Value
		{
			get
			{
				return (ValueArgument<E>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<E>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToShort", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToShort", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EnumToShort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.NumberToEnum")]
	public class ShortToEnum<E> : ValueFunctionNode<ExecutionContext, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<short> Value
		{
			get
			{
				return (ValueArgument<short>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<short>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ShortToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "ShortToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override E Compute(ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShortToEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.EnumToNumber")]
	public class EnumToInt<E> : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<E> Value
		{
			get
			{
				return (ValueArgument<E>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<E>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToInt", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToInt", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EnumToInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.NumberToEnum")]
	public class IntToEnum<E> : ValueFunctionNode<ExecutionContext, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<int> Value
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "IntToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "IntToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override E Compute(ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IntToEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.EnumToNumber")]
	public class EnumToLong<E> : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<E> Value
		{
			get
			{
				return (ValueArgument<E>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<E>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToLong", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "EnumToLong", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public EnumToLong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	[NodeOverload("Core.NumberToEnum")]
	public class LongToEnum<E> : ValueFunctionNode<ExecutionContext, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		public ValueArgument<long> Value
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public static bool IsValidGenericType
		{
			get
			{
				return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "LongToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType"), typeof(bool));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetProperty(new ResoniteBridge.ResoniteBridgeValue(null, "ProtoFlux.Nodes.Core", "LongToEnum", ResoniteBridge.ResoniteBridgeValueType.Type), "IsValidGenericType", value);
			}
		}

		protected override E Compute(ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public LongToEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Enums")]
	public abstract class EnumValueOperation<E, O> : ValueFunctionNode<ExecutionContext, O>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum where O : struct
	{
		public ValueArgument<E> Value;

		public static bool IsValidGenericType => typeof(E).IsEnum;

		protected override O Compute(ExecutionContext context)
		{
			return Compute(0.ReadValue<E>(context), context);
		}

		protected abstract O Compute(E value, ExecutionContext context);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public abstract class EnumOperation<E> : EnumValueOperation<E, E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class ShiftEnum<E> : EnumOperation<E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum, IConvertible
	{
		public ValueArgument<int> Delta
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Delta"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Delta", value);
			}
		}

		protected override E Compute(E value, ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", value, context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ShiftEnum(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class NextValue<E> : EnumOperation<E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum, IConvertible
	{
		protected override E Compute(E value, ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", value, context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public NextValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class PreviousValue<E> : EnumOperation<E>, ResoniteBridge.ResoniteBridgeValueHolder where E : struct, Enum, IConvertible
	{
		protected override E Compute(E value, ExecutionContext context)
		{
			return (E)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", value, context), typeof(E));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PreviousValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.TimeAndDate
{
	[NodeCategory("Time")]
	[ContinuouslyChanging]
	public class UtcNow : ValueFunctionNode<ExecutionContext, DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override DateTime Compute(ExecutionContext context)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UtcNow(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time/DateTime")]
	public class ConstructDateTime : ValueFunctionNode<ExecutionContext, DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> Year
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Year"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Year", value);
			}
		}

		public ValueArgument<int> Month
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Month"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Month", value);
			}
		}

		public ValueArgument<int> Day
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Day"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Day", value);
			}
		}

		public ValueArgument<int> Hour
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Hour"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Hour", value);
			}
		}

		public ValueArgument<int> Minute
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Minute"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Minute", value);
			}
		}

		public ValueArgument<int> Second
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Second"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Second", value);
			}
		}

		public ValueArgument<int> Millisecond
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Millisecond"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Millisecond", value);
			}
		}

		public ValueArgument<System.DateTimeKind> Kind
		{
			get
			{
				return (ValueArgument<System.DateTimeKind>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Kind"), typeof(ValueArgument<System.DateTimeKind>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Kind", value);
			}
		}

		protected override DateTime Compute(ExecutionContext context)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ConstructDateTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	public abstract class DateTimeConverter<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<DateTime> DateTime;

		protected override T Compute(ExecutionContext context)
		{
			return Convert(0.ReadValue<DateTime>(context));
		}

		protected abstract T Convert(DateTime datetime);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class ToLocalTime : DateTimeConverter<DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override DateTime Convert(DateTime datetime)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", datetime), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToLocalTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ToUniversalTime : DateTimeConverter<DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override DateTime Convert(DateTime datetime)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", datetime), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToUniversalTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	public class FromUnixSeconds : ValueFunctionNode<ExecutionContext, DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> UnixSeconds
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UnixSeconds"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UnixSeconds", value);
			}
		}

		public ValueArgument<bool> IsLocal
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsLocal"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsLocal", value);
			}
		}

		protected override DateTime Compute(ExecutionContext context)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromUnixSeconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	public class FromUnixMilliseconds : ValueFunctionNode<ExecutionContext, DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> UnixMiliseconds
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "UnixMiliseconds"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "UnixMiliseconds", value);
			}
		}

		public ValueArgument<bool> IsLocal
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IsLocal"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IsLocal", value);
			}
		}

		protected override DateTime Compute(ExecutionContext context)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FromUnixMilliseconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ToUnixSeconds : DateTimeConverter<long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Convert(DateTime datetime)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", datetime), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToUnixSeconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ToUnixMilliseconds : DateTimeConverter<long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Convert(DateTime datetime)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Convert", datetime), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ToUnixMilliseconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time/DateTime")]
	public class SetDateTimeKind : ValueFunctionNode<ExecutionContext, DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<DateTime> DateTime
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "DateTime"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "DateTime", value);
			}
		}

		public ValueArgument<System.DateTimeKind> Kind
		{
			get
			{
				return (ValueArgument<System.DateTimeKind>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Kind"), typeof(ValueArgument<System.DateTimeKind>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Kind", value);
			}
		}

		protected override DateTime Compute(ExecutionContext context)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public SetDateTimeKind(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("+", true)]
	[NodeCategory("Time")]
	[NodeOverload("Core.Operators.Add")]
	public class Add_DateTime_TimeSpan : ValueFunctionNode<ExecutionContext, DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<DateTime> A
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<TimeSpan> B
		{
			get
			{
				return (ValueArgument<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override DateTime Compute(ExecutionContext context)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Add_DateTime_TimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_DateTime_TimeSpan : ValueFunctionNode<ExecutionContext, DateTime>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<DateTime> A
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<TimeSpan> B
		{
			get
			{
				return (ValueArgument<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override DateTime Compute(ExecutionContext context)
		{
			return (DateTime)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(DateTime));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_DateTime_TimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	[NodeName("-", true)]
	[NodeOverload("Core.Operators.Sub")]
	public class Sub_DateTime : ValueFunctionNode<ExecutionContext, TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<DateTime> A
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<DateTime> B
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		protected override TimeSpan Compute(ExecutionContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Sub_DateTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	[NodeName("Is Between", false)]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_DateTime : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<DateTime> Value
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<DateTime> Min
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<DateTime> Max
		{
			get
			{
				return (ValueArgument<DateTime>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<DateTime>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_DateTime(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time")]
	[NodeName("Is Between", false)]
	[NodeOverload("Core.Math.IsBetween")]
	public class IsBetween_TimeSpan : ValueFunctionNode<ExecutionContext, bool>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<TimeSpan> Value
		{
			get
			{
				return (ValueArgument<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		public ValueArgument<TimeSpan> Min
		{
			get
			{
				return (ValueArgument<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Min"), typeof(ValueArgument<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Min", value);
			}
		}

		public ValueArgument<TimeSpan> Max
		{
			get
			{
				return (ValueArgument<TimeSpan>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Max"), typeof(ValueArgument<TimeSpan>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Max", value);
			}
		}

		protected override bool Compute(ExecutionContext context)
		{
			return (bool)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public IsBetween_TimeSpan(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time/DateTime")]
	public abstract class DateTimeExtractor<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<DateTime> DateTime;

		protected override T Compute(ExecutionContext context)
		{
			return Extract(0.ReadValue<DateTime>(context));
		}

		protected abstract T Extract(DateTime datetime);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Millisecond", false)]
	public class DateTimeMillisecond : DateTimeExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(DateTime datetime)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeMillisecond(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Second", false)]
	public class DateTimeSecond : DateTimeExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(DateTime datetime)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeSecond(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Minute", false)]
	public class DateTimeMinute : DateTimeExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(DateTime datetime)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeMinute(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Hour", false)]
	public class DateTimeHour : DateTimeExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(DateTime datetime)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeHour(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Day", false)]
	public class DateTimeDay : DateTimeExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(DateTime datetime)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeDay(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Month", false)]
	public class DateTimeMonth : DateTimeExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(DateTime datetime)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeMonth(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Year", false)]
	public class DateTimeYear : DateTimeExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(DateTime datetime)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeYear(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Ticks", false)]
	public class DateTimeTicks : DateTimeExtractor<long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Extract(DateTime datetime)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeTicks(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Day of Week", false)]
	public class DateTimeDayOfWeek : DateTimeExtractor<DayOfWeek>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override DayOfWeek Extract(DateTime datetime)
		{
			return (DayOfWeek)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(DayOfWeek));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeDayOfWeek(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Day of Year", false)]
	public class DateTimeDayOfYear : DateTimeExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(DateTime datetime)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeDayOfYear(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Kind", false)]
	public class DateTimeKind : DateTimeExtractor<System.DateTimeKind>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override System.DateTimeKind Extract(DateTime datetime)
		{
			return (System.DateTimeKind)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", datetime), typeof(System.DateTimeKind));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DateTimeKind(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time/Timespan")]
	public abstract class TimeSpanConstructor : ValueFunctionNode<ExecutionContext, TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<double> Value;

		protected override TimeSpan Compute(ExecutionContext context)
		{
			try
			{
				return Construct(0.ReadValue<double>(context));
			}
			catch (ArgumentException)
			{
				return TimeSpan.MinValue;
			}
			catch (OverflowException)
			{
				return TimeSpan.MaxValue;
			}
		}

		protected abstract TimeSpan Construct(double value);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class TimeSpanFromDays : TimeSpanConstructor, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override TimeSpan Construct(double value)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Construct", value), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanFromDays(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TimeSpanFromHours : TimeSpanConstructor, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override TimeSpan Construct(double value)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Construct", value), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanFromHours(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TimeSpanFromMinutes : TimeSpanConstructor, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override TimeSpan Construct(double value)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Construct", value), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanFromMinutes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TimeSpanFromSeconds : TimeSpanConstructor, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override TimeSpan Construct(double value)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Construct", value), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanFromSeconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class TimeSpanFromMilliseconds : TimeSpanConstructor, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override TimeSpan Construct(double value)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Construct", value), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanFromMilliseconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time/Timespan")]
	public class TimeSpanFromTicks : ValueFunctionNode<ExecutionContext, TimeSpan>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> Value
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override TimeSpan Compute(ExecutionContext context)
		{
			return (TimeSpan)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(TimeSpan));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanFromTicks(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Time/Timespan")]
	public abstract class TimeSpanExtractor<T> : ValueFunctionNode<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		public ValueArgument<TimeSpan> TimeSpan;

		protected override T Compute(ExecutionContext context)
		{
			return Extract(0.ReadValue<TimeSpan>(context));
		}

		protected abstract T Extract(TimeSpan timespan);

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Ticks", false)]
	public class TimeSpanTicks : TimeSpanExtractor<long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Extract(TimeSpan timespan)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanTicks(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Milliseconds", false)]
	public class TimeSpanMilliseconds : TimeSpanExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(TimeSpan timespan)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanMilliseconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Seconds", false)]
	public class TimeSpanSeconds : TimeSpanExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(TimeSpan timespan)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanSeconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Minutes", false)]
	public class TimeSpanMinutes : TimeSpanExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(TimeSpan timespan)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanMinutes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Hours", false)]
	public class TimeSpanHours : TimeSpanExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(TimeSpan timespan)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanHours(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Days", false)]
	public class TimeSpanDays : TimeSpanExtractor<int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Extract(TimeSpan timespan)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanDays(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Milliseconds", false)]
	public class TimeSpanTotalMilliseconds : TimeSpanExtractor<double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Extract(TimeSpan timespan)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanTotalMilliseconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Seconds", false)]
	public class TimeSpanTotalSeconds : TimeSpanExtractor<double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Extract(TimeSpan timespan)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanTotalSeconds(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Minutes", false)]
	public class TimeSpanTotalMinutes : TimeSpanExtractor<double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Extract(TimeSpan timespan)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanTotalMinutes(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Hours", false)]
	public class TimeSpanTotalHours : TimeSpanExtractor<double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Extract(TimeSpan timespan)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanTotalHours(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Days", false)]
	public class TimeSpanTotalDays : TimeSpanExtractor<double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Extract(TimeSpan timespan)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Extract", timespan), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public TimeSpanTotalDays(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Color
{
	[NodeCategory("Colors")]
	public abstract class ColorBlendBase : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Source;

		public ValueArgument<color> Destination;

		protected abstract color Blend(in color src, in color dst);

		protected override color Compute(ExecutionContext context)
		{
			color src = 0.ReadValue<color>(context);
			color dst = 1.ReadValue<color>(context);
			return Blend(in src, in dst);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Alpha Blend", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAlphaBlend : ColorBlendBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Blend(in color src, in color dst)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Blend", src, dst), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAlphaBlend(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Additive Blend", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAdditiveBlend : ColorBlendBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Blend(in color src, in color dst)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Blend", src, dst), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAdditiveBlend(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Multiplicative Blend", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorMultiplicativeBlend : ColorBlendBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Blend(in color src, in color dst)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Blend", src, dst), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorMultiplicativeBlend(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Soft Additive Blend", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorSoftAdditiveBlend : ColorBlendBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Blend(in color src, in color dst)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Blend", src, dst), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorSoftAdditiveBlend(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	[NodeName("Set Red", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorSetRed : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorSetRed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	[NodeName("Set Green", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorSetGreen : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorSetGreen(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	[NodeName("Set Blue", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorSetBlue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorSetBlue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Set Alpha", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorSetAlpha : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorSetAlpha(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Set Hue", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorSetHue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorSetHue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Set Saturation", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorSetSaturation : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorSetSaturation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Set Value", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorSetValue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorSetValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mul Red", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorMulRed : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorMulRed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mul Green", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorMulGreen : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorMulGreen(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mul Blue", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorMulBlue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorMulBlue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mul RGB", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorMulRGB : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorMulRGB(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mul Alpha", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorMulAlpha : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorMulAlpha(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mul Hue", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorMulHue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorMulHue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mul Saturation", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorMulSaturation : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorMulSaturation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Mul Value", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorMulValue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorMulValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Red", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddRed : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddRed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Green", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddGreen : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddGreen(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Blue", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddBlue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddBlue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Red HDR", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddRedHDR : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddRedHDR(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Green HDR", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddGreenHDR : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddGreenHDR(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Blue HDR", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddBlueHDR : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddBlueHDR(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Alpha", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddAlpha : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddAlpha(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Hue", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddHue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddHue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Saturation", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddSaturation : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddSaturation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Value", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddValue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Add Value HDR", false)]
	[NodeCategory("Colors/Channels")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorAddValueHDR : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorAddValueHDR(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ComposeColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> BaseColor
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BaseColor"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BaseColor", value);
			}
		}

		public ValueArgument<ColorProfile> Profile
		{
			get
			{
				return (ValueArgument<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Profile"), typeof(ValueArgument<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Profile", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ColorXToProfile : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<ColorProfile> Profile
		{
			get
			{
				return (ValueArgument<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Profile"), typeof(ValueArgument<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Profile", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXToProfile(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class GetColorXProfile : ValueFunctionNode<ExecutionContext, ColorProfile>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		protected override ColorProfile Compute(ExecutionContext context)
		{
			return (ColorProfile)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ColorProfile));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetColorXProfile(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class GetColorXBaseColor : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public GetColorXBaseColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class DecomposeColorX : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueOutput<color> BaseColor
		{
			get
			{
				return (ValueOutput<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "BaseColor"), typeof(ValueOutput<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "BaseColor", value);
			}
		}

		public ValueOutput<ColorProfile> Profile
		{
			get
			{
				return (ValueOutput<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Profile"), typeof(ValueOutput<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Profile", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public DecomposeColorX()
		{
			BaseColor = new ValueOutput<color>(this);
			Profile = new ValueOutput<ColorProfile>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DecomposeColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorFromHexCode : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> HexCode
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HexCode"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HexCode", value);
			}
		}

		public ValueOutput<color> Color
		{
			get
			{
				return (ValueOutput<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueOutput<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueOutput<bool> Parsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Parsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Parsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ColorFromHexCode()
		{
			Color = new ValueOutput<color>(this);
			Parsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorFromHexCode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorToHexCode : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<bool> ShortForm
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ShortForm"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ShortForm", value);
			}
		}

		public ValueArgument<bool> IncludeAlpha
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IncludeAlpha"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IncludeAlpha", value);
			}
		}

		public ObjectArgument<string> Prefix
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Prefix"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Prefix", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorToHexCode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	[NodeName("Hue", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorHue : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Hue
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Hue"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Hue", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorHue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("HSV To Color", false)]
	[NodeCategory("Colors")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class HSV_ToColor : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> H
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "H"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "H", value);
			}
		}

		public ValueArgument<float> S
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "S"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "S", value);
			}
		}

		public ValueArgument<float> V
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HSV_ToColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("HSL To Color", false)]
	[NodeCategory("Colors")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class HSL_ToColor : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> H
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "H"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "H", value);
			}
		}

		public ValueArgument<float> S
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "S"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "S", value);
			}
		}

		public ValueArgument<float> L
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "L"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "L", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HSL_ToColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Color To HSV", false)]
	[NodeCategory("Colors")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorToHSV : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> C
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "C"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "C", value);
			}
		}

		public ValueOutput<float> H
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "H"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "H", value);
			}
		}

		public ValueOutput<float> S
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "S"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "S", value);
			}
		}

		public ValueOutput<float> V
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ColorToHSV()
		{
			H = new ValueOutput<float>(this);
			S = new ValueOutput<float>(this);
			V = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorToHSV(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Color To HSL", false)]
	[NodeCategory("Colors")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorToHSL : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> C
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "C"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "C", value);
			}
		}

		public ValueOutput<float> H
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "H"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "H", value);
			}
		}

		public ValueOutput<float> S
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "S"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "S", value);
			}
		}

		public ValueOutput<float> L
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "L"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "L", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ColorToHSL()
		{
			H = new ValueOutput<float>(this);
			S = new ValueOutput<float>(this);
			L = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorToHSL(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ConvertColorProfile : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<ColorProfile> TargetProfile
		{
			get
			{
				return (ValueArgument<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TargetProfile"), typeof(ValueArgument<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TargetProfile", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ConvertColorProfile(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	[NodeName("Luminance", false)]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class ColorLuminance : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorLuminance(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class BlackBodyColor : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Temperature
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Temperature"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Temperature", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BlackBodyColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class WavelengthColor : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Wavelength
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Wavelength"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Wavelength", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WavelengthColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	[FeatureUpgradeReplacement("ColorManagement", 0, "Color", "ColorX")]
	public class InvertColor : ValueFunctionNode<ExecutionContext, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<color> Color
		{
			get
			{
				return (ValueArgument<color>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<color>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InvertColor(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public abstract class ColorXBlendBase : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Source;

		public ValueArgument<colorX> Destination;

		protected abstract colorX Blend(in colorX src, in colorX dst);

		protected override colorX Compute(ExecutionContext context)
		{
			colorX src = 0.ReadValue<colorX>(context);
			colorX dst = 1.ReadValue<colorX>(context);
			return Blend(in src, in dst);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class ColorXAlphaBlend : ColorXBlendBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Blend(in colorX src, in colorX dst)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Blend", src, dst), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAlphaBlend(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ColorXAdditiveBlend : ColorXBlendBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Blend(in colorX src, in colorX dst)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Blend", src, dst), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAdditiveBlend(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ColorXMultiplicativeBlend : ColorXBlendBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Blend(in colorX src, in colorX dst)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Blend", src, dst), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXMultiplicativeBlend(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ColorXSoftAdditiveBlend : ColorXBlendBase, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Blend(in colorX src, in colorX dst)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Blend", src, dst), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXSoftAdditiveBlend(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXSetProfile : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<ColorProfile> Profile
		{
			get
			{
				return (ValueArgument<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Profile"), typeof(ValueArgument<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Profile", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXSetProfile(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXSetRed : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXSetRed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXSetGreen : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXSetGreen(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXSetBlue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXSetBlue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXSetAlpha : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXSetAlpha(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXSetHue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXSetHue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXSetSaturation : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXSetSaturation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXSetValue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXSetValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXMulRed : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXMulRed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXMulGreen : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXMulGreen(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXMulBlue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXMulBlue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXMulRGB : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXMulRGB(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXMulAlpha : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXMulAlpha(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXMulHue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXMulHue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXMulSaturation : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXMulSaturation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXMulValue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXMulValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddRed : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddRed(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddGreen : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddGreen(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddBlue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddBlue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddRedHDR : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddRedHDR(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddGreenHDR : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddGreenHDR(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddBlueHDR : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddBlueHDR(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddAlpha : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddAlpha(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddHue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddHue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddSaturation : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddSaturation(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddValue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddValue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors/Channels")]
	public class ColorXAddValueHDR : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Value
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Value"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Value", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXAddValueHDR(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ColorXFromHexCode : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ObjectArgument<string> HexCode
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "HexCode"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "HexCode", value);
			}
		}

		public ValueOutput<colorX> Color
		{
			get
			{
				return (ValueOutput<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueOutput<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueOutput<bool> Parsed
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Parsed"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Parsed", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ColorXFromHexCode()
		{
			Color = new ValueOutput<colorX>(this);
			Parsed = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXFromHexCode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ColorXToHexCode : ObjectFunctionNode<ExecutionContext, string>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<bool> ShortForm
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "ShortForm"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "ShortForm", value);
			}
		}

		public ValueArgument<bool> IncludeAlpha
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "IncludeAlpha"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "IncludeAlpha", value);
			}
		}

		public ObjectArgument<string> Prefix
		{
			get
			{
				return (ObjectArgument<string>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Prefix"), typeof(ObjectArgument<string>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Prefix", value);
			}
		}

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXToHexCode(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ColorXHue : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Hue
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Hue"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Hue", value);
			}
		}

		public ValueArgument<ColorProfile> TargetProfile
		{
			get
			{
				return (ValueArgument<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TargetProfile"), typeof(ValueArgument<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TargetProfile", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXHue(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class HSV_ToColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> H
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "H"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "H", value);
			}
		}

		public ValueArgument<float> S
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "S"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "S", value);
			}
		}

		public ValueArgument<float> V
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		public ValueArgument<ColorProfile> TargetProfile
		{
			get
			{
				return (ValueArgument<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TargetProfile"), typeof(ValueArgument<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TargetProfile", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HSV_ToColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class HSL_ToColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> H
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "H"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "H", value);
			}
		}

		public ValueArgument<float> S
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "S"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "S", value);
			}
		}

		public ValueArgument<float> L
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "L"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "L", value);
			}
		}

		public ValueArgument<ColorProfile> TargetProfile
		{
			get
			{
				return (ValueArgument<ColorProfile>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TargetProfile"), typeof(ValueArgument<ColorProfile>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TargetProfile", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HSL_ToColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ColorXToHSV : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> C
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "C"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "C", value);
			}
		}

		public ValueOutput<float> H
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "H"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "H", value);
			}
		}

		public ValueOutput<float> S
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "S"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "S", value);
			}
		}

		public ValueOutput<float> V
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "V"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "V", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ColorXToHSV()
		{
			H = new ValueOutput<float>(this);
			S = new ValueOutput<float>(this);
			V = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXToHSV(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ColorXToHSL : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> C
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "C"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "C", value);
			}
		}

		public ValueOutput<float> H
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "H"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "H", value);
			}
		}

		public ValueOutput<float> S
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "S"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "S", value);
			}
		}

		public ValueOutput<float> L
		{
			get
			{
				return (ValueOutput<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "L"), typeof(ValueOutput<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "L", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ColorXToHSL()
		{
			H = new ValueOutput<float>(this);
			S = new ValueOutput<float>(this);
			L = new ValueOutput<float>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXToHSL(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ColorXLuminance : ValueFunctionNode<ExecutionContext, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ColorXLuminance(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class BlackBodyColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Temperature
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Temperature"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Temperature", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BlackBodyColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class WavelengthColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<float> Wavelength
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Wavelength"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Wavelength", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public WavelengthColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class InvertColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public InvertColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ApplyHDRGammaColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Gamma
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Gamma"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Gamma", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApplyHDRGammaColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Colors")]
	public class ApplyHDRInverseGammaColorX : ValueFunctionNode<ExecutionContext, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<colorX> Color
		{
			get
			{
				return (ValueArgument<colorX>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Color"), typeof(ValueArgument<colorX>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Color", value);
			}
		}

		public ValueArgument<float> Gamma
		{
			get
			{
				return (ValueArgument<float>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Gamma"), typeof(ValueArgument<float>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Gamma", value);
			}
		}

		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ApplyHDRInverseGammaColorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Casts
{
	[ValueCast(typeof(byte), typeof(ushort))]
	public class Cast_byte_To_ushort : ValueCast<byte, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(uint))]
	public class Cast_byte_To_uint : ValueCast<byte, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(ulong))]
	public class Cast_byte_To_ulong : ValueCast<byte, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(sbyte))]
	public class Cast_byte_To_sbyte : ValueCast<byte, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(short))]
	public class Cast_byte_To_short : ValueCast<byte, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(int))]
	public class Cast_byte_To_int : ValueCast<byte, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(long))]
	public class Cast_byte_To_long : ValueCast<byte, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(float))]
	public class Cast_byte_To_float : ValueCast<byte, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(double))]
	public class Cast_byte_To_double : ValueCast<byte, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(decimal))]
	public class Cast_byte_To_decimal : ValueCast<byte, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(byte), typeof(char))]
	public class Cast_byte_To_char : ValueCast<byte, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_byte_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(byte))]
	public class Cast_ushort_To_byte : ValueCast<ushort, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(uint))]
	public class Cast_ushort_To_uint : ValueCast<ushort, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(ulong))]
	public class Cast_ushort_To_ulong : ValueCast<ushort, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(sbyte))]
	public class Cast_ushort_To_sbyte : ValueCast<ushort, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(short))]
	public class Cast_ushort_To_short : ValueCast<ushort, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(int))]
	public class Cast_ushort_To_int : ValueCast<ushort, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(long))]
	public class Cast_ushort_To_long : ValueCast<ushort, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(float))]
	public class Cast_ushort_To_float : ValueCast<ushort, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(double))]
	public class Cast_ushort_To_double : ValueCast<ushort, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(decimal))]
	public class Cast_ushort_To_decimal : ValueCast<ushort, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ushort), typeof(char))]
	public class Cast_ushort_To_char : ValueCast<ushort, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ushort_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(byte))]
	public class Cast_uint_To_byte : ValueCast<uint, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(ushort))]
	public class Cast_uint_To_ushort : ValueCast<uint, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(ulong))]
	public class Cast_uint_To_ulong : ValueCast<uint, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(sbyte))]
	public class Cast_uint_To_sbyte : ValueCast<uint, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(short))]
	public class Cast_uint_To_short : ValueCast<uint, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(int))]
	public class Cast_uint_To_int : ValueCast<uint, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(long))]
	public class Cast_uint_To_long : ValueCast<uint, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(float))]
	public class Cast_uint_To_float : ValueCast<uint, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(double))]
	public class Cast_uint_To_double : ValueCast<uint, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(decimal))]
	public class Cast_uint_To_decimal : ValueCast<uint, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint), typeof(char))]
	public class Cast_uint_To_char : ValueCast<uint, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(byte))]
	public class Cast_ulong_To_byte : ValueCast<ulong, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(ushort))]
	public class Cast_ulong_To_ushort : ValueCast<ulong, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(uint))]
	public class Cast_ulong_To_uint : ValueCast<ulong, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(sbyte))]
	public class Cast_ulong_To_sbyte : ValueCast<ulong, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(short))]
	public class Cast_ulong_To_short : ValueCast<ulong, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(int))]
	public class Cast_ulong_To_int : ValueCast<ulong, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(long))]
	public class Cast_ulong_To_long : ValueCast<ulong, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(float))]
	public class Cast_ulong_To_float : ValueCast<ulong, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(double))]
	public class Cast_ulong_To_double : ValueCast<ulong, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(decimal))]
	public class Cast_ulong_To_decimal : ValueCast<ulong, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong), typeof(char))]
	public class Cast_ulong_To_char : ValueCast<ulong, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(byte))]
	public class Cast_sbyte_To_byte : ValueCast<sbyte, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(ushort))]
	public class Cast_sbyte_To_ushort : ValueCast<sbyte, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(uint))]
	public class Cast_sbyte_To_uint : ValueCast<sbyte, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(ulong))]
	public class Cast_sbyte_To_ulong : ValueCast<sbyte, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(short))]
	public class Cast_sbyte_To_short : ValueCast<sbyte, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(int))]
	public class Cast_sbyte_To_int : ValueCast<sbyte, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(long))]
	public class Cast_sbyte_To_long : ValueCast<sbyte, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(float))]
	public class Cast_sbyte_To_float : ValueCast<sbyte, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(double))]
	public class Cast_sbyte_To_double : ValueCast<sbyte, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(decimal))]
	public class Cast_sbyte_To_decimal : ValueCast<sbyte, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(sbyte), typeof(char))]
	public class Cast_sbyte_To_char : ValueCast<sbyte, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_sbyte_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(byte))]
	public class Cast_short_To_byte : ValueCast<short, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(ushort))]
	public class Cast_short_To_ushort : ValueCast<short, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(uint))]
	public class Cast_short_To_uint : ValueCast<short, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(ulong))]
	public class Cast_short_To_ulong : ValueCast<short, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(sbyte))]
	public class Cast_short_To_sbyte : ValueCast<short, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(int))]
	public class Cast_short_To_int : ValueCast<short, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(long))]
	public class Cast_short_To_long : ValueCast<short, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(float))]
	public class Cast_short_To_float : ValueCast<short, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(double))]
	public class Cast_short_To_double : ValueCast<short, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(decimal))]
	public class Cast_short_To_decimal : ValueCast<short, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(short), typeof(char))]
	public class Cast_short_To_char : ValueCast<short, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_short_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(byte))]
	public class Cast_int_To_byte : ValueCast<int, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(ushort))]
	public class Cast_int_To_ushort : ValueCast<int, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(uint))]
	public class Cast_int_To_uint : ValueCast<int, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(ulong))]
	public class Cast_int_To_ulong : ValueCast<int, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(sbyte))]
	public class Cast_int_To_sbyte : ValueCast<int, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(short))]
	public class Cast_int_To_short : ValueCast<int, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(long))]
	public class Cast_int_To_long : ValueCast<int, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(float))]
	public class Cast_int_To_float : ValueCast<int, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(double))]
	public class Cast_int_To_double : ValueCast<int, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(decimal))]
	public class Cast_int_To_decimal : ValueCast<int, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int), typeof(char))]
	public class Cast_int_To_char : ValueCast<int, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(byte))]
	public class Cast_long_To_byte : ValueCast<long, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(ushort))]
	public class Cast_long_To_ushort : ValueCast<long, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(uint))]
	public class Cast_long_To_uint : ValueCast<long, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(ulong))]
	public class Cast_long_To_ulong : ValueCast<long, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(sbyte))]
	public class Cast_long_To_sbyte : ValueCast<long, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(short))]
	public class Cast_long_To_short : ValueCast<long, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(int))]
	public class Cast_long_To_int : ValueCast<long, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(float))]
	public class Cast_long_To_float : ValueCast<long, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(double))]
	public class Cast_long_To_double : ValueCast<long, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(decimal))]
	public class Cast_long_To_decimal : ValueCast<long, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long), typeof(char))]
	public class Cast_long_To_char : ValueCast<long, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(byte))]
	public class Cast_float_To_byte : ValueCast<float, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(ushort))]
	public class Cast_float_To_ushort : ValueCast<float, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(uint))]
	public class Cast_float_To_uint : ValueCast<float, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(ulong))]
	public class Cast_float_To_ulong : ValueCast<float, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(sbyte))]
	public class Cast_float_To_sbyte : ValueCast<float, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(short))]
	public class Cast_float_To_short : ValueCast<float, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(int))]
	public class Cast_float_To_int : ValueCast<float, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(long))]
	public class Cast_float_To_long : ValueCast<float, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(double))]
	public class Cast_float_To_double : ValueCast<float, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(decimal))]
	public class Cast_float_To_decimal : ValueCast<float, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float), typeof(char))]
	public class Cast_float_To_char : ValueCast<float, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(byte))]
	public class Cast_double_To_byte : ValueCast<double, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(ushort))]
	public class Cast_double_To_ushort : ValueCast<double, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(uint))]
	public class Cast_double_To_uint : ValueCast<double, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(ulong))]
	public class Cast_double_To_ulong : ValueCast<double, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(sbyte))]
	public class Cast_double_To_sbyte : ValueCast<double, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(short))]
	public class Cast_double_To_short : ValueCast<double, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(int))]
	public class Cast_double_To_int : ValueCast<double, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(long))]
	public class Cast_double_To_long : ValueCast<double, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(float))]
	public class Cast_double_To_float : ValueCast<double, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(decimal))]
	public class Cast_double_To_decimal : ValueCast<double, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double), typeof(char))]
	public class Cast_double_To_char : ValueCast<double, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(byte))]
	public class Cast_decimal_To_byte : ValueCast<decimal, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(ushort))]
	public class Cast_decimal_To_ushort : ValueCast<decimal, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(uint))]
	public class Cast_decimal_To_uint : ValueCast<decimal, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(ulong))]
	public class Cast_decimal_To_ulong : ValueCast<decimal, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(sbyte))]
	public class Cast_decimal_To_sbyte : ValueCast<decimal, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(short))]
	public class Cast_decimal_To_short : ValueCast<decimal, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(int))]
	public class Cast_decimal_To_int : ValueCast<decimal, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(long))]
	public class Cast_decimal_To_long : ValueCast<decimal, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(float))]
	public class Cast_decimal_To_float : ValueCast<decimal, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(double))]
	public class Cast_decimal_To_double : ValueCast<decimal, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(decimal), typeof(char))]
	public class Cast_decimal_To_char : ValueCast<decimal, char>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override char Compute(ExecutionContext context)
		{
			return (char)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(char));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_decimal_To_char(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(byte))]
	public class Cast_char_To_byte : ValueCast<char, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(ushort))]
	public class Cast_char_To_ushort : ValueCast<char, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(uint))]
	public class Cast_char_To_uint : ValueCast<char, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(ulong))]
	public class Cast_char_To_ulong : ValueCast<char, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(sbyte))]
	public class Cast_char_To_sbyte : ValueCast<char, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(short))]
	public class Cast_char_To_short : ValueCast<char, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(int))]
	public class Cast_char_To_int : ValueCast<char, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(long))]
	public class Cast_char_To_long : ValueCast<char, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(float))]
	public class Cast_char_To_float : ValueCast<char, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float Compute(ExecutionContext context)
		{
			return (float)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_float(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(double))]
	public class Cast_char_To_double : ValueCast<char, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double Compute(ExecutionContext context)
		{
			return (double)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_double(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(char), typeof(decimal))]
	public class Cast_char_To_decimal : ValueCast<char, decimal>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override decimal Compute(ExecutionContext context)
		{
			return (decimal)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(decimal));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_char_To_decimal(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(bool2), typeof(bool3))]
	public class Cast_bool2_To_bool3 : ValueCast<bool2, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_bool2_To_bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(bool2), typeof(bool4))]
	public class Cast_bool2_To_bool4 : ValueCast<bool2, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_bool2_To_bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint2), typeof(ulong2))]
	public class Cast_uint2_To_ulong2 : ValueCast<uint2, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint2_To_ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint2), typeof(int2))]
	public class Cast_uint2_To_int2 : ValueCast<uint2, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint2_To_int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint2), typeof(long2))]
	public class Cast_uint2_To_long2 : ValueCast<uint2, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint2_To_long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint2), typeof(float2))]
	public class Cast_uint2_To_float2 : ValueCast<uint2, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint2_To_float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint2), typeof(double2))]
	public class Cast_uint2_To_double2 : ValueCast<uint2, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint2_To_double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint2), typeof(uint3))]
	public class Cast_uint2_To_uint3 : ValueCast<uint2, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint2_To_uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint2), typeof(uint4))]
	public class Cast_uint2_To_uint4 : ValueCast<uint2, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint2_To_uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong2), typeof(uint2))]
	public class Cast_ulong2_To_uint2 : ValueCast<ulong2, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong2_To_uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong2), typeof(int2))]
	public class Cast_ulong2_To_int2 : ValueCast<ulong2, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong2_To_int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong2), typeof(long2))]
	public class Cast_ulong2_To_long2 : ValueCast<ulong2, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong2_To_long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong2), typeof(float2))]
	public class Cast_ulong2_To_float2 : ValueCast<ulong2, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong2_To_float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong2), typeof(double2))]
	public class Cast_ulong2_To_double2 : ValueCast<ulong2, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong2_To_double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong2), typeof(ulong3))]
	public class Cast_ulong2_To_ulong3 : ValueCast<ulong2, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong2_To_ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong2), typeof(ulong4))]
	public class Cast_ulong2_To_ulong4 : ValueCast<ulong2, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong2_To_ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int2), typeof(uint2))]
	public class Cast_int2_To_uint2 : ValueCast<int2, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int2_To_uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int2), typeof(ulong2))]
	public class Cast_int2_To_ulong2 : ValueCast<int2, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int2_To_ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int2), typeof(long2))]
	public class Cast_int2_To_long2 : ValueCast<int2, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int2_To_long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int2), typeof(float2))]
	public class Cast_int2_To_float2 : ValueCast<int2, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int2_To_float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int2), typeof(double2))]
	public class Cast_int2_To_double2 : ValueCast<int2, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int2_To_double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int2), typeof(int3))]
	public class Cast_int2_To_int3 : ValueCast<int2, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int2_To_int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int2), typeof(int4))]
	public class Cast_int2_To_int4 : ValueCast<int2, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int2_To_int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long2), typeof(uint2))]
	public class Cast_long2_To_uint2 : ValueCast<long2, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long2_To_uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long2), typeof(ulong2))]
	public class Cast_long2_To_ulong2 : ValueCast<long2, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long2_To_ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long2), typeof(int2))]
	public class Cast_long2_To_int2 : ValueCast<long2, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long2_To_int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long2), typeof(float2))]
	public class Cast_long2_To_float2 : ValueCast<long2, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long2_To_float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long2), typeof(double2))]
	public class Cast_long2_To_double2 : ValueCast<long2, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long2_To_double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long2), typeof(long3))]
	public class Cast_long2_To_long3 : ValueCast<long2, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long2_To_long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long2), typeof(long4))]
	public class Cast_long2_To_long4 : ValueCast<long2, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long2_To_long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2), typeof(uint2))]
	public class Cast_float2_To_uint2 : ValueCast<float2, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2_To_uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2), typeof(ulong2))]
	public class Cast_float2_To_ulong2 : ValueCast<float2, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2_To_ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2), typeof(int2))]
	public class Cast_float2_To_int2 : ValueCast<float2, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2_To_int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2), typeof(long2))]
	public class Cast_float2_To_long2 : ValueCast<float2, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2_To_long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2), typeof(double2))]
	public class Cast_float2_To_double2 : ValueCast<float2, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2_To_double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2), typeof(float3))]
	public class Cast_float2_To_float3 : ValueCast<float2, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2_To_float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2), typeof(float4))]
	public class Cast_float2_To_float4 : ValueCast<float2, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2), typeof(uint2))]
	public class Cast_double2_To_uint2 : ValueCast<double2, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2_To_uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2), typeof(ulong2))]
	public class Cast_double2_To_ulong2 : ValueCast<double2, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2_To_ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2), typeof(int2))]
	public class Cast_double2_To_int2 : ValueCast<double2, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2_To_int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2), typeof(long2))]
	public class Cast_double2_To_long2 : ValueCast<double2, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2_To_long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2), typeof(float2))]
	public class Cast_double2_To_float2 : ValueCast<double2, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2_To_float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2), typeof(double3))]
	public class Cast_double2_To_double3 : ValueCast<double2, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2_To_double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2), typeof(double4))]
	public class Cast_double2_To_double4 : ValueCast<double2, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2_To_double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(bool3), typeof(bool2))]
	public class Cast_bool3_To_bool2 : ValueCast<bool3, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_bool3_To_bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(bool3), typeof(bool4))]
	public class Cast_bool3_To_bool4 : ValueCast<bool3, bool4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool4 Compute(ExecutionContext context)
		{
			return (bool4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_bool3_To_bool4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint3), typeof(uint2))]
	public class Cast_uint3_To_uint2 : ValueCast<uint3, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint3_To_uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint3), typeof(ulong3))]
	public class Cast_uint3_To_ulong3 : ValueCast<uint3, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint3_To_ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint3), typeof(int3))]
	public class Cast_uint3_To_int3 : ValueCast<uint3, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint3_To_int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint3), typeof(long3))]
	public class Cast_uint3_To_long3 : ValueCast<uint3, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint3_To_long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint3), typeof(float3))]
	public class Cast_uint3_To_float3 : ValueCast<uint3, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint3_To_float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint3), typeof(double3))]
	public class Cast_uint3_To_double3 : ValueCast<uint3, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint3_To_double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint3), typeof(uint4))]
	public class Cast_uint3_To_uint4 : ValueCast<uint3, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint3_To_uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong3), typeof(ulong2))]
	public class Cast_ulong3_To_ulong2 : ValueCast<ulong3, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong3_To_ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong3), typeof(uint3))]
	public class Cast_ulong3_To_uint3 : ValueCast<ulong3, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong3_To_uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong3), typeof(int3))]
	public class Cast_ulong3_To_int3 : ValueCast<ulong3, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong3_To_int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong3), typeof(long3))]
	public class Cast_ulong3_To_long3 : ValueCast<ulong3, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong3_To_long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong3), typeof(float3))]
	public class Cast_ulong3_To_float3 : ValueCast<ulong3, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong3_To_float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong3), typeof(double3))]
	public class Cast_ulong3_To_double3 : ValueCast<ulong3, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong3_To_double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong3), typeof(ulong4))]
	public class Cast_ulong3_To_ulong4 : ValueCast<ulong3, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong3_To_ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int3), typeof(int2))]
	public class Cast_int3_To_int2 : ValueCast<int3, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int3_To_int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int3), typeof(uint3))]
	public class Cast_int3_To_uint3 : ValueCast<int3, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int3_To_uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int3), typeof(ulong3))]
	public class Cast_int3_To_ulong3 : ValueCast<int3, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int3_To_ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int3), typeof(long3))]
	public class Cast_int3_To_long3 : ValueCast<int3, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int3_To_long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int3), typeof(float3))]
	public class Cast_int3_To_float3 : ValueCast<int3, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int3_To_float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int3), typeof(double3))]
	public class Cast_int3_To_double3 : ValueCast<int3, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int3_To_double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int3), typeof(int4))]
	public class Cast_int3_To_int4 : ValueCast<int3, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int3_To_int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long3), typeof(long2))]
	public class Cast_long3_To_long2 : ValueCast<long3, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long3_To_long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long3), typeof(uint3))]
	public class Cast_long3_To_uint3 : ValueCast<long3, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long3_To_uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long3), typeof(ulong3))]
	public class Cast_long3_To_ulong3 : ValueCast<long3, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long3_To_ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long3), typeof(int3))]
	public class Cast_long3_To_int3 : ValueCast<long3, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long3_To_int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long3), typeof(float3))]
	public class Cast_long3_To_float3 : ValueCast<long3, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long3_To_float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long3), typeof(double3))]
	public class Cast_long3_To_double3 : ValueCast<long3, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long3_To_double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long3), typeof(long4))]
	public class Cast_long3_To_long4 : ValueCast<long3, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long3_To_long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3), typeof(float2))]
	public class Cast_float3_To_float2 : ValueCast<float3, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3_To_float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3), typeof(uint3))]
	public class Cast_float3_To_uint3 : ValueCast<float3, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3_To_uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3), typeof(ulong3))]
	public class Cast_float3_To_ulong3 : ValueCast<float3, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3_To_ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3), typeof(int3))]
	public class Cast_float3_To_int3 : ValueCast<float3, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3_To_int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3), typeof(long3))]
	public class Cast_float3_To_long3 : ValueCast<float3, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3_To_long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3), typeof(double3))]
	public class Cast_float3_To_double3 : ValueCast<float3, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3_To_double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3), typeof(float4))]
	public class Cast_float3_To_float4 : ValueCast<float3, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3), typeof(double2))]
	public class Cast_double3_To_double2 : ValueCast<double3, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3_To_double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3), typeof(uint3))]
	public class Cast_double3_To_uint3 : ValueCast<double3, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3_To_uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3), typeof(ulong3))]
	public class Cast_double3_To_ulong3 : ValueCast<double3, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3_To_ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3), typeof(int3))]
	public class Cast_double3_To_int3 : ValueCast<double3, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3_To_int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3), typeof(long3))]
	public class Cast_double3_To_long3 : ValueCast<double3, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3_To_long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3), typeof(float3))]
	public class Cast_double3_To_float3 : ValueCast<double3, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3_To_float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3), typeof(double4))]
	public class Cast_double3_To_double4 : ValueCast<double3, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3_To_double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(bool4), typeof(bool2))]
	public class Cast_bool4_To_bool2 : ValueCast<bool4, bool2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool2 Compute(ExecutionContext context)
		{
			return (bool2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_bool4_To_bool2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(bool4), typeof(bool3))]
	public class Cast_bool4_To_bool3 : ValueCast<bool4, bool3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override bool3 Compute(ExecutionContext context)
		{
			return (bool3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(bool3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_bool4_To_bool3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint4), typeof(uint2))]
	public class Cast_uint4_To_uint2 : ValueCast<uint4, uint2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint2 Compute(ExecutionContext context)
		{
			return (uint2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint4_To_uint2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint4), typeof(uint3))]
	public class Cast_uint4_To_uint3 : ValueCast<uint4, uint3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint3 Compute(ExecutionContext context)
		{
			return (uint3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint4_To_uint3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint4), typeof(ulong4))]
	public class Cast_uint4_To_ulong4 : ValueCast<uint4, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint4_To_ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint4), typeof(int4))]
	public class Cast_uint4_To_int4 : ValueCast<uint4, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint4_To_int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint4), typeof(long4))]
	public class Cast_uint4_To_long4 : ValueCast<uint4, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint4_To_long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint4), typeof(float4))]
	public class Cast_uint4_To_float4 : ValueCast<uint4, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint4_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(uint4), typeof(double4))]
	public class Cast_uint4_To_double4 : ValueCast<uint4, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_uint4_To_double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong4), typeof(ulong2))]
	public class Cast_ulong4_To_ulong2 : ValueCast<ulong4, ulong2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong2 Compute(ExecutionContext context)
		{
			return (ulong2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong4_To_ulong2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong4), typeof(ulong3))]
	public class Cast_ulong4_To_ulong3 : ValueCast<ulong4, ulong3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong3 Compute(ExecutionContext context)
		{
			return (ulong3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong4_To_ulong3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong4), typeof(uint4))]
	public class Cast_ulong4_To_uint4 : ValueCast<ulong4, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong4_To_uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong4), typeof(int4))]
	public class Cast_ulong4_To_int4 : ValueCast<ulong4, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong4_To_int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong4), typeof(long4))]
	public class Cast_ulong4_To_long4 : ValueCast<ulong4, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong4_To_long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong4), typeof(float4))]
	public class Cast_ulong4_To_float4 : ValueCast<ulong4, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong4_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(ulong4), typeof(double4))]
	public class Cast_ulong4_To_double4 : ValueCast<ulong4, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_ulong4_To_double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int4), typeof(int2))]
	public class Cast_int4_To_int2 : ValueCast<int4, int2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int2 Compute(ExecutionContext context)
		{
			return (int2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int4_To_int2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int4), typeof(int3))]
	public class Cast_int4_To_int3 : ValueCast<int4, int3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int3 Compute(ExecutionContext context)
		{
			return (int3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int4_To_int3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int4), typeof(uint4))]
	public class Cast_int4_To_uint4 : ValueCast<int4, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int4_To_uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int4), typeof(ulong4))]
	public class Cast_int4_To_ulong4 : ValueCast<int4, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int4_To_ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int4), typeof(long4))]
	public class Cast_int4_To_long4 : ValueCast<int4, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int4_To_long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int4), typeof(float4))]
	public class Cast_int4_To_float4 : ValueCast<int4, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int4_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(int4), typeof(double4))]
	public class Cast_int4_To_double4 : ValueCast<int4, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_int4_To_double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long4), typeof(long2))]
	public class Cast_long4_To_long2 : ValueCast<long4, long2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long2 Compute(ExecutionContext context)
		{
			return (long2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long4_To_long2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long4), typeof(long3))]
	public class Cast_long4_To_long3 : ValueCast<long4, long3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long3 Compute(ExecutionContext context)
		{
			return (long3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long4_To_long3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long4), typeof(uint4))]
	public class Cast_long4_To_uint4 : ValueCast<long4, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long4_To_uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long4), typeof(ulong4))]
	public class Cast_long4_To_ulong4 : ValueCast<long4, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long4_To_ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long4), typeof(int4))]
	public class Cast_long4_To_int4 : ValueCast<long4, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long4_To_int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long4), typeof(float4))]
	public class Cast_long4_To_float4 : ValueCast<long4, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long4_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(long4), typeof(double4))]
	public class Cast_long4_To_double4 : ValueCast<long4, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_long4_To_double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(float2))]
	public class Cast_float4_To_float2 : ValueCast<float4, float2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2 Compute(ExecutionContext context)
		{
			return (float2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_float2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(float3))]
	public class Cast_float4_To_float3 : ValueCast<float4, float3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3 Compute(ExecutionContext context)
		{
			return (float3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_float3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(uint4))]
	public class Cast_float4_To_uint4 : ValueCast<float4, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(ulong4))]
	public class Cast_float4_To_ulong4 : ValueCast<float4, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(int4))]
	public class Cast_float4_To_int4 : ValueCast<float4, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(long4))]
	public class Cast_float4_To_long4 : ValueCast<float4, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(double4))]
	public class Cast_float4_To_double4 : ValueCast<float4, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(floatQ))]
	public class Cast_float4_To_floatQ : ValueCast<float4, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(color))]
	public class Cast_float4_To_color : ValueCast<float4, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4), typeof(colorX))]
	public class Cast_float4_To_colorX : ValueCast<float4, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4_To_colorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4), typeof(double2))]
	public class Cast_double4_To_double2 : ValueCast<double4, double2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2 Compute(ExecutionContext context)
		{
			return (double2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4_To_double2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4), typeof(double3))]
	public class Cast_double4_To_double3 : ValueCast<double4, double3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3 Compute(ExecutionContext context)
		{
			return (double3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4_To_double3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4), typeof(uint4))]
	public class Cast_double4_To_uint4 : ValueCast<double4, uint4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override uint4 Compute(ExecutionContext context)
		{
			return (uint4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4_To_uint4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4), typeof(ulong4))]
	public class Cast_double4_To_ulong4 : ValueCast<double4, ulong4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override ulong4 Compute(ExecutionContext context)
		{
			return (ulong4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4_To_ulong4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4), typeof(int4))]
	public class Cast_double4_To_int4 : ValueCast<double4, int4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override int4 Compute(ExecutionContext context)
		{
			return (int4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4_To_int4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4), typeof(long4))]
	public class Cast_double4_To_long4 : ValueCast<double4, long4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override long4 Compute(ExecutionContext context)
		{
			return (long4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4_To_long4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4), typeof(float4))]
	public class Cast_double4_To_float4 : ValueCast<double4, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4), typeof(doubleQ))]
	public class Cast_double4_To_doubleQ : ValueCast<double4, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4_To_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2x2), typeof(double2x2))]
	public class Cast_float2x2_To_double2x2 : ValueCast<float2x2, double2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2x2 Compute(ExecutionContext context)
		{
			return (double2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2x2_To_double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2x2), typeof(float3x3))]
	public class Cast_float2x2_To_float3x3 : ValueCast<float2x2, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2x2_To_float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float2x2), typeof(float4x4))]
	public class Cast_float2x2_To_float4x4 : ValueCast<float2x2, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float2x2_To_float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2x2), typeof(float2x2))]
	public class Cast_double2x2_To_float2x2 : ValueCast<double2x2, float2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2x2 Compute(ExecutionContext context)
		{
			return (float2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2x2_To_float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2x2), typeof(double3x3))]
	public class Cast_double2x2_To_double3x3 : ValueCast<double2x2, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2x2_To_double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double2x2), typeof(double4x4))]
	public class Cast_double2x2_To_double4x4 : ValueCast<double2x2, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double2x2_To_double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3x3), typeof(float2x2))]
	public class Cast_float3x3_To_float2x2 : ValueCast<float3x3, float2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2x2 Compute(ExecutionContext context)
		{
			return (float2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3x3_To_float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3x3), typeof(double3x3))]
	public class Cast_float3x3_To_double3x3 : ValueCast<float3x3, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3x3_To_double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float3x3), typeof(float4x4))]
	public class Cast_float3x3_To_float4x4 : ValueCast<float3x3, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float3x3_To_float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3x3), typeof(double2x2))]
	public class Cast_double3x3_To_double2x2 : ValueCast<double3x3, double2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2x2 Compute(ExecutionContext context)
		{
			return (double2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3x3_To_double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3x3), typeof(float3x3))]
	public class Cast_double3x3_To_float3x3 : ValueCast<double3x3, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3x3_To_float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double3x3), typeof(double4x4))]
	public class Cast_double3x3_To_double4x4 : ValueCast<double3x3, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double3x3_To_double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4x4), typeof(float2x2))]
	public class Cast_float4x4_To_float2x2 : ValueCast<float4x4, float2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float2x2 Compute(ExecutionContext context)
		{
			return (float2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4x4_To_float2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4x4), typeof(float3x3))]
	public class Cast_float4x4_To_float3x3 : ValueCast<float4x4, float3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float3x3 Compute(ExecutionContext context)
		{
			return (float3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4x4_To_float3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(float4x4), typeof(double4x4))]
	public class Cast_float4x4_To_double4x4 : ValueCast<float4x4, double4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4x4 Compute(ExecutionContext context)
		{
			return (double4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_float4x4_To_double4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4x4), typeof(double2x2))]
	public class Cast_double4x4_To_double2x2 : ValueCast<double4x4, double2x2>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double2x2 Compute(ExecutionContext context)
		{
			return (double2x2)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double2x2));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4x4_To_double2x2(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4x4), typeof(double3x3))]
	public class Cast_double4x4_To_double3x3 : ValueCast<double4x4, double3x3>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double3x3 Compute(ExecutionContext context)
		{
			return (double3x3)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double3x3));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4x4_To_double3x3(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(double4x4), typeof(float4x4))]
	public class Cast_double4x4_To_float4x4 : ValueCast<double4x4, float4x4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4x4 Compute(ExecutionContext context)
		{
			return (float4x4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4x4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_double4x4_To_float4x4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(floatQ), typeof(float4))]
	public class Cast_floatQ_To_float4 : ValueCast<floatQ, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_floatQ_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(floatQ), typeof(doubleQ))]
	public class Cast_floatQ_To_doubleQ : ValueCast<floatQ, doubleQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override doubleQ Compute(ExecutionContext context)
		{
			return (doubleQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(doubleQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_floatQ_To_doubleQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(doubleQ), typeof(double4))]
	public class Cast_doubleQ_To_double4 : ValueCast<doubleQ, double4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override double4 Compute(ExecutionContext context)
		{
			return (double4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(double4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_doubleQ_To_double4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(doubleQ), typeof(floatQ))]
	public class Cast_doubleQ_To_floatQ : ValueCast<doubleQ, floatQ>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override floatQ Compute(ExecutionContext context)
		{
			return (floatQ)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(floatQ));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_doubleQ_To_floatQ(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(color), typeof(float4))]
	public class Cast_color_To_float4 : ValueCast<color, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_color_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(color), typeof(colorX))]
	public class Cast_color_To_colorX : ValueCast<color, colorX>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override colorX Compute(ExecutionContext context)
		{
			return (colorX)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(colorX));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_color_To_colorX(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(colorX), typeof(float4))]
	public class Cast_colorX_To_float4 : ValueCast<colorX, float4>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override float4 Compute(ExecutionContext context)
		{
			return (float4)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(float4));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_colorX_To_float4(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[ValueCast(typeof(colorX), typeof(color))]
	public class Cast_colorX_To_color : ValueCast<colorX, color>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		protected override color Compute(ExecutionContext context)
		{
			return (color)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(color));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Cast_colorX_To_color(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Strings/Characters")]
	[ValueCast(typeof(char), typeof(string))]
	public class CharToString : ObjectFunctionNode<ExecutionContext, string>, ICast, INode, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<char> Input
		{
			get
			{
				return (ValueArgument<char>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Input"), typeof(ValueArgument<char>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Input", value);
			}
		}

		public bool IsImplicit => true;

		public Type InputType => typeof(char);

		protected override string Compute(ExecutionContext context)
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(string));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public CharToString(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Binary
{
	[NodeCategory("Utility/Binary")]
	public class HalfAdder : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> A
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool> B
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueOutput<bool> Y
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<bool> CarryOut
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CarryOut"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CarryOut", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public HalfAdder()
		{
			Y = new ValueOutput<bool>(this);
			CarryOut = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HalfAdder(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	public class Adder : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> A
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "A"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "A", value);
			}
		}

		public ValueArgument<bool> B
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "B"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "B", value);
			}
		}

		public ValueArgument<bool> CarryIn
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CarryIn"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CarryIn", value);
			}
		}

		public ValueOutput<bool> Y
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Y"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Y", value);
			}
		}

		public ValueOutput<bool> CarryOut
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "CarryOut"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "CarryOut", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public Adder()
		{
			Y = new ValueOutput<bool>(this);
			CarryOut = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public Adder(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	public class BooleanCounter : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgumentList<bool> Booleans
		{
			get
			{
				return (ValueArgumentList<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Booleans"), typeof(ValueArgumentList<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Booleans", value);
			}
		}

		public ValueOutput<int> TrueCount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TrueCount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TrueCount", value);
			}
		}

		public ValueOutput<int> FalseCount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FalseCount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FalseCount", value);
			}
		}

		public ValueOutput<int> TotalCount
		{
			get
			{
				return (ValueOutput<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "TotalCount"), typeof(ValueOutput<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "TotalCount", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public BooleanCounter()
		{
			Booleans = new ValueArgumentList<bool>();
			TrueCount = new ValueOutput<int>(this);
			FalseCount = new ValueOutput<int>(this);
			TotalCount = new ValueOutput<int>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public BooleanCounter(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	public abstract class ValueReinterpreter<TFrom, TTo> : ValueFunctionNode<ExecutionContext, TTo>, ResoniteBridge.ResoniteBridgeValueHolder where TFrom : struct where TTo : struct
	{
		public ValueArgument<TFrom> Value;

		protected unsafe override TTo Compute(ExecutionContext context)
		{
			TFrom val = 0.ReadValue<TFrom>(context);
			return *(TTo*)(&val);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public class HalfAsUShort : ValueReinterpreter<half, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public HalfAsUShort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class FloatAsUInt : ValueReinterpreter<float, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public FloatAsUInt(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class DoubleAsULong : ValueReinterpreter<double, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public DoubleAsULong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class UShortAsHalf : ValueReinterpreter<ushort, half>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UShortAsHalf(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class UIntAsFloat : ValueReinterpreter<uint, float>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public UIntAsFloat(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ULongAsDouble : ValueReinterpreter<ulong, double>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ULongAsDouble(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	[NodeName("Extract Bits byte", false)]
	public sealed class ExtractBits_byte : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<byte> Integer
		{
			get
			{
				return (ValueArgument<byte>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Integer"), typeof(ValueArgument<byte>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Integer", value);
			}
		}

		public ValueOutput<bool> Bit0
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueOutput<bool> Bit1
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueOutput<bool> Bit2
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueOutput<bool> Bit3
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueOutput<bool> Bit4
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueOutput<bool> Bit5
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueOutput<bool> Bit6
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueOutput<bool> Bit7
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ExtractBits_byte()
		{
			Bit0 = new ValueOutput<bool>(this);
			Bit1 = new ValueOutput<bool>(this);
			Bit2 = new ValueOutput<bool>(this);
			Bit3 = new ValueOutput<bool>(this);
			Bit4 = new ValueOutput<bool>(this);
			Bit5 = new ValueOutput<bool>(this);
			Bit6 = new ValueOutput<bool>(this);
			Bit7 = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ExtractBits_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Compose Bits byte", false)]
	[NodeCategory("Utility/Binary")]
	public sealed class ComposeBits_byte : ValueFunctionNode<ExecutionContext, byte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Bit0
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueArgument<bool> Bit1
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueArgument<bool> Bit2
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueArgument<bool> Bit3
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueArgument<bool> Bit4
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueArgument<bool> Bit5
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueArgument<bool> Bit6
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueArgument<bool> Bit7
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		protected override byte Compute(ExecutionContext context)
		{
			return (byte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(byte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeBits_byte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	[NodeName("Extract Bits ushort", false)]
	public sealed class ExtractBits_ushort : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ushort> Integer
		{
			get
			{
				return (ValueArgument<ushort>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Integer"), typeof(ValueArgument<ushort>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Integer", value);
			}
		}

		public ValueOutput<bool> Bit0
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueOutput<bool> Bit1
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueOutput<bool> Bit2
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueOutput<bool> Bit3
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueOutput<bool> Bit4
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueOutput<bool> Bit5
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueOutput<bool> Bit6
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueOutput<bool> Bit7
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueOutput<bool> Bit8
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueOutput<bool> Bit9
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueOutput<bool> Bit10
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueOutput<bool> Bit11
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueOutput<bool> Bit12
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueOutput<bool> Bit13
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueOutput<bool> Bit14
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueOutput<bool> Bit15
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ExtractBits_ushort()
		{
			Bit0 = new ValueOutput<bool>(this);
			Bit1 = new ValueOutput<bool>(this);
			Bit2 = new ValueOutput<bool>(this);
			Bit3 = new ValueOutput<bool>(this);
			Bit4 = new ValueOutput<bool>(this);
			Bit5 = new ValueOutput<bool>(this);
			Bit6 = new ValueOutput<bool>(this);
			Bit7 = new ValueOutput<bool>(this);
			Bit8 = new ValueOutput<bool>(this);
			Bit9 = new ValueOutput<bool>(this);
			Bit10 = new ValueOutput<bool>(this);
			Bit11 = new ValueOutput<bool>(this);
			Bit12 = new ValueOutput<bool>(this);
			Bit13 = new ValueOutput<bool>(this);
			Bit14 = new ValueOutput<bool>(this);
			Bit15 = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ExtractBits_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Compose Bits ushort", false)]
	[NodeCategory("Utility/Binary")]
	public sealed class ComposeBits_ushort : ValueFunctionNode<ExecutionContext, ushort>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Bit0
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueArgument<bool> Bit1
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueArgument<bool> Bit2
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueArgument<bool> Bit3
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueArgument<bool> Bit4
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueArgument<bool> Bit5
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueArgument<bool> Bit6
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueArgument<bool> Bit7
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueArgument<bool> Bit8
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueArgument<bool> Bit9
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueArgument<bool> Bit10
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueArgument<bool> Bit11
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueArgument<bool> Bit12
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueArgument<bool> Bit13
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueArgument<bool> Bit14
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueArgument<bool> Bit15
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		protected override ushort Compute(ExecutionContext context)
		{
			return (ushort)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ushort));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeBits_ushort(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	[NodeName("Extract Bits uint", false)]
	public sealed class ExtractBits_uint : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<uint> Integer
		{
			get
			{
				return (ValueArgument<uint>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Integer"), typeof(ValueArgument<uint>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Integer", value);
			}
		}

		public ValueOutput<bool> Bit0
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueOutput<bool> Bit1
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueOutput<bool> Bit2
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueOutput<bool> Bit3
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueOutput<bool> Bit4
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueOutput<bool> Bit5
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueOutput<bool> Bit6
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueOutput<bool> Bit7
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueOutput<bool> Bit8
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueOutput<bool> Bit9
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueOutput<bool> Bit10
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueOutput<bool> Bit11
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueOutput<bool> Bit12
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueOutput<bool> Bit13
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueOutput<bool> Bit14
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueOutput<bool> Bit15
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		public ValueOutput<bool> Bit16
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit16"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit16", value);
			}
		}

		public ValueOutput<bool> Bit17
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit17"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit17", value);
			}
		}

		public ValueOutput<bool> Bit18
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit18"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit18", value);
			}
		}

		public ValueOutput<bool> Bit19
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit19"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit19", value);
			}
		}

		public ValueOutput<bool> Bit20
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit20"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit20", value);
			}
		}

		public ValueOutput<bool> Bit21
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit21"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit21", value);
			}
		}

		public ValueOutput<bool> Bit22
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit22"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit22", value);
			}
		}

		public ValueOutput<bool> Bit23
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit23"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit23", value);
			}
		}

		public ValueOutput<bool> Bit24
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit24"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit24", value);
			}
		}

		public ValueOutput<bool> Bit25
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit25"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit25", value);
			}
		}

		public ValueOutput<bool> Bit26
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit26"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit26", value);
			}
		}

		public ValueOutput<bool> Bit27
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit27"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit27", value);
			}
		}

		public ValueOutput<bool> Bit28
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit28"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit28", value);
			}
		}

		public ValueOutput<bool> Bit29
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit29"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit29", value);
			}
		}

		public ValueOutput<bool> Bit30
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit30"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit30", value);
			}
		}

		public ValueOutput<bool> Bit31
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit31"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit31", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ExtractBits_uint()
		{
			Bit0 = new ValueOutput<bool>(this);
			Bit1 = new ValueOutput<bool>(this);
			Bit2 = new ValueOutput<bool>(this);
			Bit3 = new ValueOutput<bool>(this);
			Bit4 = new ValueOutput<bool>(this);
			Bit5 = new ValueOutput<bool>(this);
			Bit6 = new ValueOutput<bool>(this);
			Bit7 = new ValueOutput<bool>(this);
			Bit8 = new ValueOutput<bool>(this);
			Bit9 = new ValueOutput<bool>(this);
			Bit10 = new ValueOutput<bool>(this);
			Bit11 = new ValueOutput<bool>(this);
			Bit12 = new ValueOutput<bool>(this);
			Bit13 = new ValueOutput<bool>(this);
			Bit14 = new ValueOutput<bool>(this);
			Bit15 = new ValueOutput<bool>(this);
			Bit16 = new ValueOutput<bool>(this);
			Bit17 = new ValueOutput<bool>(this);
			Bit18 = new ValueOutput<bool>(this);
			Bit19 = new ValueOutput<bool>(this);
			Bit20 = new ValueOutput<bool>(this);
			Bit21 = new ValueOutput<bool>(this);
			Bit22 = new ValueOutput<bool>(this);
			Bit23 = new ValueOutput<bool>(this);
			Bit24 = new ValueOutput<bool>(this);
			Bit25 = new ValueOutput<bool>(this);
			Bit26 = new ValueOutput<bool>(this);
			Bit27 = new ValueOutput<bool>(this);
			Bit28 = new ValueOutput<bool>(this);
			Bit29 = new ValueOutput<bool>(this);
			Bit30 = new ValueOutput<bool>(this);
			Bit31 = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ExtractBits_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Compose Bits uint", false)]
	[NodeCategory("Utility/Binary")]
	public sealed class ComposeBits_uint : ValueFunctionNode<ExecutionContext, uint>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Bit0
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueArgument<bool> Bit1
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueArgument<bool> Bit2
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueArgument<bool> Bit3
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueArgument<bool> Bit4
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueArgument<bool> Bit5
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueArgument<bool> Bit6
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueArgument<bool> Bit7
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueArgument<bool> Bit8
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueArgument<bool> Bit9
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueArgument<bool> Bit10
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueArgument<bool> Bit11
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueArgument<bool> Bit12
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueArgument<bool> Bit13
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueArgument<bool> Bit14
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueArgument<bool> Bit15
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		public ValueArgument<bool> Bit16
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit16"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit16", value);
			}
		}

		public ValueArgument<bool> Bit17
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit17"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit17", value);
			}
		}

		public ValueArgument<bool> Bit18
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit18"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit18", value);
			}
		}

		public ValueArgument<bool> Bit19
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit19"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit19", value);
			}
		}

		public ValueArgument<bool> Bit20
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit20"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit20", value);
			}
		}

		public ValueArgument<bool> Bit21
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit21"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit21", value);
			}
		}

		public ValueArgument<bool> Bit22
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit22"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit22", value);
			}
		}

		public ValueArgument<bool> Bit23
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit23"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit23", value);
			}
		}

		public ValueArgument<bool> Bit24
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit24"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit24", value);
			}
		}

		public ValueArgument<bool> Bit25
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit25"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit25", value);
			}
		}

		public ValueArgument<bool> Bit26
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit26"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit26", value);
			}
		}

		public ValueArgument<bool> Bit27
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit27"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit27", value);
			}
		}

		public ValueArgument<bool> Bit28
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit28"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit28", value);
			}
		}

		public ValueArgument<bool> Bit29
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit29"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit29", value);
			}
		}

		public ValueArgument<bool> Bit30
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit30"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit30", value);
			}
		}

		public ValueArgument<bool> Bit31
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit31"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit31", value);
			}
		}

		protected override uint Compute(ExecutionContext context)
		{
			return (uint)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(uint));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeBits_uint(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	[NodeName("Extract Bits ulong", false)]
	public sealed class ExtractBits_ulong : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<ulong> Integer
		{
			get
			{
				return (ValueArgument<ulong>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Integer"), typeof(ValueArgument<ulong>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Integer", value);
			}
		}

		public ValueOutput<bool> Bit0
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueOutput<bool> Bit1
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueOutput<bool> Bit2
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueOutput<bool> Bit3
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueOutput<bool> Bit4
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueOutput<bool> Bit5
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueOutput<bool> Bit6
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueOutput<bool> Bit7
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueOutput<bool> Bit8
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueOutput<bool> Bit9
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueOutput<bool> Bit10
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueOutput<bool> Bit11
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueOutput<bool> Bit12
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueOutput<bool> Bit13
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueOutput<bool> Bit14
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueOutput<bool> Bit15
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		public ValueOutput<bool> Bit16
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit16"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit16", value);
			}
		}

		public ValueOutput<bool> Bit17
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit17"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit17", value);
			}
		}

		public ValueOutput<bool> Bit18
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit18"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit18", value);
			}
		}

		public ValueOutput<bool> Bit19
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit19"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit19", value);
			}
		}

		public ValueOutput<bool> Bit20
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit20"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit20", value);
			}
		}

		public ValueOutput<bool> Bit21
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit21"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit21", value);
			}
		}

		public ValueOutput<bool> Bit22
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit22"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit22", value);
			}
		}

		public ValueOutput<bool> Bit23
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit23"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit23", value);
			}
		}

		public ValueOutput<bool> Bit24
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit24"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit24", value);
			}
		}

		public ValueOutput<bool> Bit25
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit25"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit25", value);
			}
		}

		public ValueOutput<bool> Bit26
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit26"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit26", value);
			}
		}

		public ValueOutput<bool> Bit27
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit27"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit27", value);
			}
		}

		public ValueOutput<bool> Bit28
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit28"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit28", value);
			}
		}

		public ValueOutput<bool> Bit29
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit29"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit29", value);
			}
		}

		public ValueOutput<bool> Bit30
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit30"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit30", value);
			}
		}

		public ValueOutput<bool> Bit31
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit31"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit31", value);
			}
		}

		public ValueOutput<bool> Bit32
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit32"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit32", value);
			}
		}

		public ValueOutput<bool> Bit33
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit33"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit33", value);
			}
		}

		public ValueOutput<bool> Bit34
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit34"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit34", value);
			}
		}

		public ValueOutput<bool> Bit35
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit35"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit35", value);
			}
		}

		public ValueOutput<bool> Bit36
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit36"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit36", value);
			}
		}

		public ValueOutput<bool> Bit37
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit37"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit37", value);
			}
		}

		public ValueOutput<bool> Bit38
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit38"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit38", value);
			}
		}

		public ValueOutput<bool> Bit39
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit39"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit39", value);
			}
		}

		public ValueOutput<bool> Bit40
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit40"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit40", value);
			}
		}

		public ValueOutput<bool> Bit41
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit41"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit41", value);
			}
		}

		public ValueOutput<bool> Bit42
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit42"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit42", value);
			}
		}

		public ValueOutput<bool> Bit43
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit43"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit43", value);
			}
		}

		public ValueOutput<bool> Bit44
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit44"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit44", value);
			}
		}

		public ValueOutput<bool> Bit45
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit45"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit45", value);
			}
		}

		public ValueOutput<bool> Bit46
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit46"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit46", value);
			}
		}

		public ValueOutput<bool> Bit47
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit47"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit47", value);
			}
		}

		public ValueOutput<bool> Bit48
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit48"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit48", value);
			}
		}

		public ValueOutput<bool> Bit49
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit49"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit49", value);
			}
		}

		public ValueOutput<bool> Bit50
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit50"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit50", value);
			}
		}

		public ValueOutput<bool> Bit51
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit51"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit51", value);
			}
		}

		public ValueOutput<bool> Bit52
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit52"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit52", value);
			}
		}

		public ValueOutput<bool> Bit53
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit53"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit53", value);
			}
		}

		public ValueOutput<bool> Bit54
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit54"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit54", value);
			}
		}

		public ValueOutput<bool> Bit55
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit55"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit55", value);
			}
		}

		public ValueOutput<bool> Bit56
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit56"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit56", value);
			}
		}

		public ValueOutput<bool> Bit57
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit57"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit57", value);
			}
		}

		public ValueOutput<bool> Bit58
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit58"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit58", value);
			}
		}

		public ValueOutput<bool> Bit59
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit59"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit59", value);
			}
		}

		public ValueOutput<bool> Bit60
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit60"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit60", value);
			}
		}

		public ValueOutput<bool> Bit61
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit61"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit61", value);
			}
		}

		public ValueOutput<bool> Bit62
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit62"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit62", value);
			}
		}

		public ValueOutput<bool> Bit63
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit63"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit63", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ExtractBits_ulong()
		{
			Bit0 = new ValueOutput<bool>(this);
			Bit1 = new ValueOutput<bool>(this);
			Bit2 = new ValueOutput<bool>(this);
			Bit3 = new ValueOutput<bool>(this);
			Bit4 = new ValueOutput<bool>(this);
			Bit5 = new ValueOutput<bool>(this);
			Bit6 = new ValueOutput<bool>(this);
			Bit7 = new ValueOutput<bool>(this);
			Bit8 = new ValueOutput<bool>(this);
			Bit9 = new ValueOutput<bool>(this);
			Bit10 = new ValueOutput<bool>(this);
			Bit11 = new ValueOutput<bool>(this);
			Bit12 = new ValueOutput<bool>(this);
			Bit13 = new ValueOutput<bool>(this);
			Bit14 = new ValueOutput<bool>(this);
			Bit15 = new ValueOutput<bool>(this);
			Bit16 = new ValueOutput<bool>(this);
			Bit17 = new ValueOutput<bool>(this);
			Bit18 = new ValueOutput<bool>(this);
			Bit19 = new ValueOutput<bool>(this);
			Bit20 = new ValueOutput<bool>(this);
			Bit21 = new ValueOutput<bool>(this);
			Bit22 = new ValueOutput<bool>(this);
			Bit23 = new ValueOutput<bool>(this);
			Bit24 = new ValueOutput<bool>(this);
			Bit25 = new ValueOutput<bool>(this);
			Bit26 = new ValueOutput<bool>(this);
			Bit27 = new ValueOutput<bool>(this);
			Bit28 = new ValueOutput<bool>(this);
			Bit29 = new ValueOutput<bool>(this);
			Bit30 = new ValueOutput<bool>(this);
			Bit31 = new ValueOutput<bool>(this);
			Bit32 = new ValueOutput<bool>(this);
			Bit33 = new ValueOutput<bool>(this);
			Bit34 = new ValueOutput<bool>(this);
			Bit35 = new ValueOutput<bool>(this);
			Bit36 = new ValueOutput<bool>(this);
			Bit37 = new ValueOutput<bool>(this);
			Bit38 = new ValueOutput<bool>(this);
			Bit39 = new ValueOutput<bool>(this);
			Bit40 = new ValueOutput<bool>(this);
			Bit41 = new ValueOutput<bool>(this);
			Bit42 = new ValueOutput<bool>(this);
			Bit43 = new ValueOutput<bool>(this);
			Bit44 = new ValueOutput<bool>(this);
			Bit45 = new ValueOutput<bool>(this);
			Bit46 = new ValueOutput<bool>(this);
			Bit47 = new ValueOutput<bool>(this);
			Bit48 = new ValueOutput<bool>(this);
			Bit49 = new ValueOutput<bool>(this);
			Bit50 = new ValueOutput<bool>(this);
			Bit51 = new ValueOutput<bool>(this);
			Bit52 = new ValueOutput<bool>(this);
			Bit53 = new ValueOutput<bool>(this);
			Bit54 = new ValueOutput<bool>(this);
			Bit55 = new ValueOutput<bool>(this);
			Bit56 = new ValueOutput<bool>(this);
			Bit57 = new ValueOutput<bool>(this);
			Bit58 = new ValueOutput<bool>(this);
			Bit59 = new ValueOutput<bool>(this);
			Bit60 = new ValueOutput<bool>(this);
			Bit61 = new ValueOutput<bool>(this);
			Bit62 = new ValueOutput<bool>(this);
			Bit63 = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ExtractBits_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Compose Bits ulong", false)]
	[NodeCategory("Utility/Binary")]
	public sealed class ComposeBits_ulong : ValueFunctionNode<ExecutionContext, ulong>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Bit0
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueArgument<bool> Bit1
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueArgument<bool> Bit2
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueArgument<bool> Bit3
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueArgument<bool> Bit4
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueArgument<bool> Bit5
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueArgument<bool> Bit6
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueArgument<bool> Bit7
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueArgument<bool> Bit8
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueArgument<bool> Bit9
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueArgument<bool> Bit10
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueArgument<bool> Bit11
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueArgument<bool> Bit12
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueArgument<bool> Bit13
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueArgument<bool> Bit14
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueArgument<bool> Bit15
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		public ValueArgument<bool> Bit16
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit16"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit16", value);
			}
		}

		public ValueArgument<bool> Bit17
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit17"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit17", value);
			}
		}

		public ValueArgument<bool> Bit18
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit18"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit18", value);
			}
		}

		public ValueArgument<bool> Bit19
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit19"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit19", value);
			}
		}

		public ValueArgument<bool> Bit20
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit20"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit20", value);
			}
		}

		public ValueArgument<bool> Bit21
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit21"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit21", value);
			}
		}

		public ValueArgument<bool> Bit22
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit22"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit22", value);
			}
		}

		public ValueArgument<bool> Bit23
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit23"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit23", value);
			}
		}

		public ValueArgument<bool> Bit24
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit24"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit24", value);
			}
		}

		public ValueArgument<bool> Bit25
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit25"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit25", value);
			}
		}

		public ValueArgument<bool> Bit26
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit26"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit26", value);
			}
		}

		public ValueArgument<bool> Bit27
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit27"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit27", value);
			}
		}

		public ValueArgument<bool> Bit28
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit28"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit28", value);
			}
		}

		public ValueArgument<bool> Bit29
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit29"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit29", value);
			}
		}

		public ValueArgument<bool> Bit30
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit30"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit30", value);
			}
		}

		public ValueArgument<bool> Bit31
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit31"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit31", value);
			}
		}

		public ValueArgument<bool> Bit32
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit32"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit32", value);
			}
		}

		public ValueArgument<bool> Bit33
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit33"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit33", value);
			}
		}

		public ValueArgument<bool> Bit34
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit34"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit34", value);
			}
		}

		public ValueArgument<bool> Bit35
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit35"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit35", value);
			}
		}

		public ValueArgument<bool> Bit36
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit36"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit36", value);
			}
		}

		public ValueArgument<bool> Bit37
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit37"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit37", value);
			}
		}

		public ValueArgument<bool> Bit38
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit38"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit38", value);
			}
		}

		public ValueArgument<bool> Bit39
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit39"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit39", value);
			}
		}

		public ValueArgument<bool> Bit40
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit40"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit40", value);
			}
		}

		public ValueArgument<bool> Bit41
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit41"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit41", value);
			}
		}

		public ValueArgument<bool> Bit42
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit42"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit42", value);
			}
		}

		public ValueArgument<bool> Bit43
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit43"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit43", value);
			}
		}

		public ValueArgument<bool> Bit44
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit44"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit44", value);
			}
		}

		public ValueArgument<bool> Bit45
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit45"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit45", value);
			}
		}

		public ValueArgument<bool> Bit46
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit46"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit46", value);
			}
		}

		public ValueArgument<bool> Bit47
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit47"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit47", value);
			}
		}

		public ValueArgument<bool> Bit48
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit48"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit48", value);
			}
		}

		public ValueArgument<bool> Bit49
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit49"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit49", value);
			}
		}

		public ValueArgument<bool> Bit50
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit50"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit50", value);
			}
		}

		public ValueArgument<bool> Bit51
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit51"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit51", value);
			}
		}

		public ValueArgument<bool> Bit52
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit52"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit52", value);
			}
		}

		public ValueArgument<bool> Bit53
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit53"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit53", value);
			}
		}

		public ValueArgument<bool> Bit54
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit54"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit54", value);
			}
		}

		public ValueArgument<bool> Bit55
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit55"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit55", value);
			}
		}

		public ValueArgument<bool> Bit56
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit56"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit56", value);
			}
		}

		public ValueArgument<bool> Bit57
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit57"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit57", value);
			}
		}

		public ValueArgument<bool> Bit58
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit58"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit58", value);
			}
		}

		public ValueArgument<bool> Bit59
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit59"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit59", value);
			}
		}

		public ValueArgument<bool> Bit60
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit60"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit60", value);
			}
		}

		public ValueArgument<bool> Bit61
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit61"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit61", value);
			}
		}

		public ValueArgument<bool> Bit62
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit62"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit62", value);
			}
		}

		public ValueArgument<bool> Bit63
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit63"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit63", value);
			}
		}

		protected override ulong Compute(ExecutionContext context)
		{
			return (ulong)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(ulong));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeBits_ulong(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	[NodeName("Extract Bits sbyte", false)]
	public sealed class ExtractBits_sbyte : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<sbyte> Integer
		{
			get
			{
				return (ValueArgument<sbyte>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Integer"), typeof(ValueArgument<sbyte>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Integer", value);
			}
		}

		public ValueOutput<bool> Bit0
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueOutput<bool> Bit1
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueOutput<bool> Bit2
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueOutput<bool> Bit3
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueOutput<bool> Bit4
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueOutput<bool> Bit5
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueOutput<bool> Bit6
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueOutput<bool> Bit7
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ExtractBits_sbyte()
		{
			Bit0 = new ValueOutput<bool>(this);
			Bit1 = new ValueOutput<bool>(this);
			Bit2 = new ValueOutput<bool>(this);
			Bit3 = new ValueOutput<bool>(this);
			Bit4 = new ValueOutput<bool>(this);
			Bit5 = new ValueOutput<bool>(this);
			Bit6 = new ValueOutput<bool>(this);
			Bit7 = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ExtractBits_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Compose Bits sbyte", false)]
	[NodeCategory("Utility/Binary")]
	public sealed class ComposeBits_sbyte : ValueFunctionNode<ExecutionContext, sbyte>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Bit0
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueArgument<bool> Bit1
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueArgument<bool> Bit2
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueArgument<bool> Bit3
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueArgument<bool> Bit4
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueArgument<bool> Bit5
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueArgument<bool> Bit6
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueArgument<bool> Bit7
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		protected override sbyte Compute(ExecutionContext context)
		{
			return (sbyte)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(sbyte));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeBits_sbyte(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	[NodeName("Extract Bits short", false)]
	public sealed class ExtractBits_short : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<short> Integer
		{
			get
			{
				return (ValueArgument<short>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Integer"), typeof(ValueArgument<short>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Integer", value);
			}
		}

		public ValueOutput<bool> Bit0
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueOutput<bool> Bit1
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueOutput<bool> Bit2
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueOutput<bool> Bit3
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueOutput<bool> Bit4
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueOutput<bool> Bit5
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueOutput<bool> Bit6
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueOutput<bool> Bit7
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueOutput<bool> Bit8
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueOutput<bool> Bit9
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueOutput<bool> Bit10
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueOutput<bool> Bit11
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueOutput<bool> Bit12
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueOutput<bool> Bit13
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueOutput<bool> Bit14
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueOutput<bool> Bit15
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ExtractBits_short()
		{
			Bit0 = new ValueOutput<bool>(this);
			Bit1 = new ValueOutput<bool>(this);
			Bit2 = new ValueOutput<bool>(this);
			Bit3 = new ValueOutput<bool>(this);
			Bit4 = new ValueOutput<bool>(this);
			Bit5 = new ValueOutput<bool>(this);
			Bit6 = new ValueOutput<bool>(this);
			Bit7 = new ValueOutput<bool>(this);
			Bit8 = new ValueOutput<bool>(this);
			Bit9 = new ValueOutput<bool>(this);
			Bit10 = new ValueOutput<bool>(this);
			Bit11 = new ValueOutput<bool>(this);
			Bit12 = new ValueOutput<bool>(this);
			Bit13 = new ValueOutput<bool>(this);
			Bit14 = new ValueOutput<bool>(this);
			Bit15 = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ExtractBits_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Compose Bits short", false)]
	[NodeCategory("Utility/Binary")]
	public sealed class ComposeBits_short : ValueFunctionNode<ExecutionContext, short>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Bit0
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueArgument<bool> Bit1
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueArgument<bool> Bit2
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueArgument<bool> Bit3
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueArgument<bool> Bit4
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueArgument<bool> Bit5
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueArgument<bool> Bit6
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueArgument<bool> Bit7
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueArgument<bool> Bit8
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueArgument<bool> Bit9
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueArgument<bool> Bit10
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueArgument<bool> Bit11
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueArgument<bool> Bit12
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueArgument<bool> Bit13
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueArgument<bool> Bit14
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueArgument<bool> Bit15
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		protected override short Compute(ExecutionContext context)
		{
			return (short)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(short));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeBits_short(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	[NodeName("Extract Bits int", false)]
	public sealed class ExtractBits_int : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<int> Integer
		{
			get
			{
				return (ValueArgument<int>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Integer"), typeof(ValueArgument<int>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Integer", value);
			}
		}

		public ValueOutput<bool> Bit0
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueOutput<bool> Bit1
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueOutput<bool> Bit2
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueOutput<bool> Bit3
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueOutput<bool> Bit4
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueOutput<bool> Bit5
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueOutput<bool> Bit6
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueOutput<bool> Bit7
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueOutput<bool> Bit8
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueOutput<bool> Bit9
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueOutput<bool> Bit10
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueOutput<bool> Bit11
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueOutput<bool> Bit12
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueOutput<bool> Bit13
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueOutput<bool> Bit14
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueOutput<bool> Bit15
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		public ValueOutput<bool> Bit16
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit16"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit16", value);
			}
		}

		public ValueOutput<bool> Bit17
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit17"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit17", value);
			}
		}

		public ValueOutput<bool> Bit18
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit18"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit18", value);
			}
		}

		public ValueOutput<bool> Bit19
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit19"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit19", value);
			}
		}

		public ValueOutput<bool> Bit20
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit20"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit20", value);
			}
		}

		public ValueOutput<bool> Bit21
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit21"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit21", value);
			}
		}

		public ValueOutput<bool> Bit22
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit22"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit22", value);
			}
		}

		public ValueOutput<bool> Bit23
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit23"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit23", value);
			}
		}

		public ValueOutput<bool> Bit24
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit24"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit24", value);
			}
		}

		public ValueOutput<bool> Bit25
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit25"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit25", value);
			}
		}

		public ValueOutput<bool> Bit26
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit26"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit26", value);
			}
		}

		public ValueOutput<bool> Bit27
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit27"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit27", value);
			}
		}

		public ValueOutput<bool> Bit28
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit28"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit28", value);
			}
		}

		public ValueOutput<bool> Bit29
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit29"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit29", value);
			}
		}

		public ValueOutput<bool> Bit30
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit30"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit30", value);
			}
		}

		public ValueOutput<bool> Bit31
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit31"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit31", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ExtractBits_int()
		{
			Bit0 = new ValueOutput<bool>(this);
			Bit1 = new ValueOutput<bool>(this);
			Bit2 = new ValueOutput<bool>(this);
			Bit3 = new ValueOutput<bool>(this);
			Bit4 = new ValueOutput<bool>(this);
			Bit5 = new ValueOutput<bool>(this);
			Bit6 = new ValueOutput<bool>(this);
			Bit7 = new ValueOutput<bool>(this);
			Bit8 = new ValueOutput<bool>(this);
			Bit9 = new ValueOutput<bool>(this);
			Bit10 = new ValueOutput<bool>(this);
			Bit11 = new ValueOutput<bool>(this);
			Bit12 = new ValueOutput<bool>(this);
			Bit13 = new ValueOutput<bool>(this);
			Bit14 = new ValueOutput<bool>(this);
			Bit15 = new ValueOutput<bool>(this);
			Bit16 = new ValueOutput<bool>(this);
			Bit17 = new ValueOutput<bool>(this);
			Bit18 = new ValueOutput<bool>(this);
			Bit19 = new ValueOutput<bool>(this);
			Bit20 = new ValueOutput<bool>(this);
			Bit21 = new ValueOutput<bool>(this);
			Bit22 = new ValueOutput<bool>(this);
			Bit23 = new ValueOutput<bool>(this);
			Bit24 = new ValueOutput<bool>(this);
			Bit25 = new ValueOutput<bool>(this);
			Bit26 = new ValueOutput<bool>(this);
			Bit27 = new ValueOutput<bool>(this);
			Bit28 = new ValueOutput<bool>(this);
			Bit29 = new ValueOutput<bool>(this);
			Bit30 = new ValueOutput<bool>(this);
			Bit31 = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ExtractBits_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Compose Bits int", false)]
	[NodeCategory("Utility/Binary")]
	public sealed class ComposeBits_int : ValueFunctionNode<ExecutionContext, int>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Bit0
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueArgument<bool> Bit1
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueArgument<bool> Bit2
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueArgument<bool> Bit3
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueArgument<bool> Bit4
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueArgument<bool> Bit5
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueArgument<bool> Bit6
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueArgument<bool> Bit7
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueArgument<bool> Bit8
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueArgument<bool> Bit9
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueArgument<bool> Bit10
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueArgument<bool> Bit11
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueArgument<bool> Bit12
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueArgument<bool> Bit13
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueArgument<bool> Bit14
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueArgument<bool> Bit15
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		public ValueArgument<bool> Bit16
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit16"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit16", value);
			}
		}

		public ValueArgument<bool> Bit17
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit17"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit17", value);
			}
		}

		public ValueArgument<bool> Bit18
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit18"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit18", value);
			}
		}

		public ValueArgument<bool> Bit19
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit19"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit19", value);
			}
		}

		public ValueArgument<bool> Bit20
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit20"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit20", value);
			}
		}

		public ValueArgument<bool> Bit21
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit21"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit21", value);
			}
		}

		public ValueArgument<bool> Bit22
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit22"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit22", value);
			}
		}

		public ValueArgument<bool> Bit23
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit23"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit23", value);
			}
		}

		public ValueArgument<bool> Bit24
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit24"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit24", value);
			}
		}

		public ValueArgument<bool> Bit25
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit25"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit25", value);
			}
		}

		public ValueArgument<bool> Bit26
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit26"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit26", value);
			}
		}

		public ValueArgument<bool> Bit27
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit27"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit27", value);
			}
		}

		public ValueArgument<bool> Bit28
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit28"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit28", value);
			}
		}

		public ValueArgument<bool> Bit29
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit29"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit29", value);
			}
		}

		public ValueArgument<bool> Bit30
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit30"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit30", value);
			}
		}

		public ValueArgument<bool> Bit31
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit31"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit31", value);
			}
		}

		protected override int Compute(ExecutionContext context)
		{
			return (int)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(int));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeBits_int(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Utility/Binary")]
	[NodeName("Extract Bits long", false)]
	public sealed class ExtractBits_long : VoidNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<long> Integer
		{
			get
			{
				return (ValueArgument<long>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Integer"), typeof(ValueArgument<long>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Integer", value);
			}
		}

		public ValueOutput<bool> Bit0
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueOutput<bool> Bit1
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueOutput<bool> Bit2
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueOutput<bool> Bit3
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueOutput<bool> Bit4
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueOutput<bool> Bit5
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueOutput<bool> Bit6
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueOutput<bool> Bit7
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueOutput<bool> Bit8
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueOutput<bool> Bit9
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueOutput<bool> Bit10
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueOutput<bool> Bit11
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueOutput<bool> Bit12
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueOutput<bool> Bit13
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueOutput<bool> Bit14
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueOutput<bool> Bit15
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		public ValueOutput<bool> Bit16
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit16"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit16", value);
			}
		}

		public ValueOutput<bool> Bit17
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit17"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit17", value);
			}
		}

		public ValueOutput<bool> Bit18
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit18"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit18", value);
			}
		}

		public ValueOutput<bool> Bit19
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit19"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit19", value);
			}
		}

		public ValueOutput<bool> Bit20
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit20"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit20", value);
			}
		}

		public ValueOutput<bool> Bit21
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit21"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit21", value);
			}
		}

		public ValueOutput<bool> Bit22
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit22"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit22", value);
			}
		}

		public ValueOutput<bool> Bit23
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit23"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit23", value);
			}
		}

		public ValueOutput<bool> Bit24
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit24"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit24", value);
			}
		}

		public ValueOutput<bool> Bit25
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit25"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit25", value);
			}
		}

		public ValueOutput<bool> Bit26
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit26"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit26", value);
			}
		}

		public ValueOutput<bool> Bit27
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit27"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit27", value);
			}
		}

		public ValueOutput<bool> Bit28
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit28"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit28", value);
			}
		}

		public ValueOutput<bool> Bit29
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit29"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit29", value);
			}
		}

		public ValueOutput<bool> Bit30
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit30"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit30", value);
			}
		}

		public ValueOutput<bool> Bit31
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit31"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit31", value);
			}
		}

		public ValueOutput<bool> Bit32
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit32"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit32", value);
			}
		}

		public ValueOutput<bool> Bit33
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit33"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit33", value);
			}
		}

		public ValueOutput<bool> Bit34
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit34"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit34", value);
			}
		}

		public ValueOutput<bool> Bit35
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit35"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit35", value);
			}
		}

		public ValueOutput<bool> Bit36
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit36"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit36", value);
			}
		}

		public ValueOutput<bool> Bit37
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit37"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit37", value);
			}
		}

		public ValueOutput<bool> Bit38
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit38"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit38", value);
			}
		}

		public ValueOutput<bool> Bit39
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit39"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit39", value);
			}
		}

		public ValueOutput<bool> Bit40
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit40"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit40", value);
			}
		}

		public ValueOutput<bool> Bit41
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit41"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit41", value);
			}
		}

		public ValueOutput<bool> Bit42
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit42"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit42", value);
			}
		}

		public ValueOutput<bool> Bit43
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit43"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit43", value);
			}
		}

		public ValueOutput<bool> Bit44
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit44"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit44", value);
			}
		}

		public ValueOutput<bool> Bit45
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit45"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit45", value);
			}
		}

		public ValueOutput<bool> Bit46
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit46"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit46", value);
			}
		}

		public ValueOutput<bool> Bit47
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit47"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit47", value);
			}
		}

		public ValueOutput<bool> Bit48
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit48"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit48", value);
			}
		}

		public ValueOutput<bool> Bit49
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit49"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit49", value);
			}
		}

		public ValueOutput<bool> Bit50
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit50"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit50", value);
			}
		}

		public ValueOutput<bool> Bit51
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit51"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit51", value);
			}
		}

		public ValueOutput<bool> Bit52
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit52"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit52", value);
			}
		}

		public ValueOutput<bool> Bit53
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit53"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit53", value);
			}
		}

		public ValueOutput<bool> Bit54
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit54"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit54", value);
			}
		}

		public ValueOutput<bool> Bit55
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit55"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit55", value);
			}
		}

		public ValueOutput<bool> Bit56
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit56"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit56", value);
			}
		}

		public ValueOutput<bool> Bit57
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit57"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit57", value);
			}
		}

		public ValueOutput<bool> Bit58
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit58"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit58", value);
			}
		}

		public ValueOutput<bool> Bit59
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit59"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit59", value);
			}
		}

		public ValueOutput<bool> Bit60
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit60"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit60", value);
			}
		}

		public ValueOutput<bool> Bit61
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit61"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit61", value);
			}
		}

		public ValueOutput<bool> Bit62
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit62"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit62", value);
			}
		}

		public ValueOutput<bool> Bit63
		{
			get
			{
				return (ValueOutput<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit63"), typeof(ValueOutput<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit63", value);
			}
		}

		protected override void ComputeOutputs(ExecutionContext context)
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "ComputeOutputs", context);
		}

		public ExtractBits_long()
		{
			Bit0 = new ValueOutput<bool>(this);
			Bit1 = new ValueOutput<bool>(this);
			Bit2 = new ValueOutput<bool>(this);
			Bit3 = new ValueOutput<bool>(this);
			Bit4 = new ValueOutput<bool>(this);
			Bit5 = new ValueOutput<bool>(this);
			Bit6 = new ValueOutput<bool>(this);
			Bit7 = new ValueOutput<bool>(this);
			Bit8 = new ValueOutput<bool>(this);
			Bit9 = new ValueOutput<bool>(this);
			Bit10 = new ValueOutput<bool>(this);
			Bit11 = new ValueOutput<bool>(this);
			Bit12 = new ValueOutput<bool>(this);
			Bit13 = new ValueOutput<bool>(this);
			Bit14 = new ValueOutput<bool>(this);
			Bit15 = new ValueOutput<bool>(this);
			Bit16 = new ValueOutput<bool>(this);
			Bit17 = new ValueOutput<bool>(this);
			Bit18 = new ValueOutput<bool>(this);
			Bit19 = new ValueOutput<bool>(this);
			Bit20 = new ValueOutput<bool>(this);
			Bit21 = new ValueOutput<bool>(this);
			Bit22 = new ValueOutput<bool>(this);
			Bit23 = new ValueOutput<bool>(this);
			Bit24 = new ValueOutput<bool>(this);
			Bit25 = new ValueOutput<bool>(this);
			Bit26 = new ValueOutput<bool>(this);
			Bit27 = new ValueOutput<bool>(this);
			Bit28 = new ValueOutput<bool>(this);
			Bit29 = new ValueOutput<bool>(this);
			Bit30 = new ValueOutput<bool>(this);
			Bit31 = new ValueOutput<bool>(this);
			Bit32 = new ValueOutput<bool>(this);
			Bit33 = new ValueOutput<bool>(this);
			Bit34 = new ValueOutput<bool>(this);
			Bit35 = new ValueOutput<bool>(this);
			Bit36 = new ValueOutput<bool>(this);
			Bit37 = new ValueOutput<bool>(this);
			Bit38 = new ValueOutput<bool>(this);
			Bit39 = new ValueOutput<bool>(this);
			Bit40 = new ValueOutput<bool>(this);
			Bit41 = new ValueOutput<bool>(this);
			Bit42 = new ValueOutput<bool>(this);
			Bit43 = new ValueOutput<bool>(this);
			Bit44 = new ValueOutput<bool>(this);
			Bit45 = new ValueOutput<bool>(this);
			Bit46 = new ValueOutput<bool>(this);
			Bit47 = new ValueOutput<bool>(this);
			Bit48 = new ValueOutput<bool>(this);
			Bit49 = new ValueOutput<bool>(this);
			Bit50 = new ValueOutput<bool>(this);
			Bit51 = new ValueOutput<bool>(this);
			Bit52 = new ValueOutput<bool>(this);
			Bit53 = new ValueOutput<bool>(this);
			Bit54 = new ValueOutput<bool>(this);
			Bit55 = new ValueOutput<bool>(this);
			Bit56 = new ValueOutput<bool>(this);
			Bit57 = new ValueOutput<bool>(this);
			Bit58 = new ValueOutput<bool>(this);
			Bit59 = new ValueOutput<bool>(this);
			Bit60 = new ValueOutput<bool>(this);
			Bit61 = new ValueOutput<bool>(this);
			Bit62 = new ValueOutput<bool>(this);
			Bit63 = new ValueOutput<bool>(this);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ExtractBits_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Compose Bits long", false)]
	[NodeCategory("Utility/Binary")]
	public sealed class ComposeBits_long : ValueFunctionNode<ExecutionContext, long>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ValueArgument<bool> Bit0
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit0"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit0", value);
			}
		}

		public ValueArgument<bool> Bit1
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit1"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit1", value);
			}
		}

		public ValueArgument<bool> Bit2
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit2"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit2", value);
			}
		}

		public ValueArgument<bool> Bit3
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit3"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit3", value);
			}
		}

		public ValueArgument<bool> Bit4
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit4"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit4", value);
			}
		}

		public ValueArgument<bool> Bit5
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit5"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit5", value);
			}
		}

		public ValueArgument<bool> Bit6
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit6"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit6", value);
			}
		}

		public ValueArgument<bool> Bit7
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit7"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit7", value);
			}
		}

		public ValueArgument<bool> Bit8
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit8"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit8", value);
			}
		}

		public ValueArgument<bool> Bit9
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit9"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit9", value);
			}
		}

		public ValueArgument<bool> Bit10
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit10"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit10", value);
			}
		}

		public ValueArgument<bool> Bit11
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit11"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit11", value);
			}
		}

		public ValueArgument<bool> Bit12
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit12"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit12", value);
			}
		}

		public ValueArgument<bool> Bit13
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit13"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit13", value);
			}
		}

		public ValueArgument<bool> Bit14
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit14"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit14", value);
			}
		}

		public ValueArgument<bool> Bit15
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit15"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit15", value);
			}
		}

		public ValueArgument<bool> Bit16
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit16"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit16", value);
			}
		}

		public ValueArgument<bool> Bit17
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit17"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit17", value);
			}
		}

		public ValueArgument<bool> Bit18
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit18"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit18", value);
			}
		}

		public ValueArgument<bool> Bit19
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit19"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit19", value);
			}
		}

		public ValueArgument<bool> Bit20
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit20"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit20", value);
			}
		}

		public ValueArgument<bool> Bit21
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit21"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit21", value);
			}
		}

		public ValueArgument<bool> Bit22
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit22"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit22", value);
			}
		}

		public ValueArgument<bool> Bit23
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit23"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit23", value);
			}
		}

		public ValueArgument<bool> Bit24
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit24"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit24", value);
			}
		}

		public ValueArgument<bool> Bit25
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit25"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit25", value);
			}
		}

		public ValueArgument<bool> Bit26
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit26"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit26", value);
			}
		}

		public ValueArgument<bool> Bit27
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit27"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit27", value);
			}
		}

		public ValueArgument<bool> Bit28
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit28"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit28", value);
			}
		}

		public ValueArgument<bool> Bit29
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit29"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit29", value);
			}
		}

		public ValueArgument<bool> Bit30
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit30"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit30", value);
			}
		}

		public ValueArgument<bool> Bit31
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit31"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit31", value);
			}
		}

		public ValueArgument<bool> Bit32
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit32"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit32", value);
			}
		}

		public ValueArgument<bool> Bit33
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit33"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit33", value);
			}
		}

		public ValueArgument<bool> Bit34
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit34"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit34", value);
			}
		}

		public ValueArgument<bool> Bit35
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit35"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit35", value);
			}
		}

		public ValueArgument<bool> Bit36
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit36"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit36", value);
			}
		}

		public ValueArgument<bool> Bit37
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit37"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit37", value);
			}
		}

		public ValueArgument<bool> Bit38
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit38"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit38", value);
			}
		}

		public ValueArgument<bool> Bit39
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit39"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit39", value);
			}
		}

		public ValueArgument<bool> Bit40
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit40"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit40", value);
			}
		}

		public ValueArgument<bool> Bit41
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit41"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit41", value);
			}
		}

		public ValueArgument<bool> Bit42
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit42"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit42", value);
			}
		}

		public ValueArgument<bool> Bit43
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit43"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit43", value);
			}
		}

		public ValueArgument<bool> Bit44
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit44"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit44", value);
			}
		}

		public ValueArgument<bool> Bit45
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit45"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit45", value);
			}
		}

		public ValueArgument<bool> Bit46
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit46"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit46", value);
			}
		}

		public ValueArgument<bool> Bit47
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit47"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit47", value);
			}
		}

		public ValueArgument<bool> Bit48
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit48"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit48", value);
			}
		}

		public ValueArgument<bool> Bit49
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit49"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit49", value);
			}
		}

		public ValueArgument<bool> Bit50
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit50"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit50", value);
			}
		}

		public ValueArgument<bool> Bit51
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit51"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit51", value);
			}
		}

		public ValueArgument<bool> Bit52
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit52"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit52", value);
			}
		}

		public ValueArgument<bool> Bit53
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit53"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit53", value);
			}
		}

		public ValueArgument<bool> Bit54
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit54"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit54", value);
			}
		}

		public ValueArgument<bool> Bit55
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit55"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit55", value);
			}
		}

		public ValueArgument<bool> Bit56
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit56"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit56", value);
			}
		}

		public ValueArgument<bool> Bit57
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit57"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit57", value);
			}
		}

		public ValueArgument<bool> Bit58
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit58"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit58", value);
			}
		}

		public ValueArgument<bool> Bit59
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit59"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit59", value);
			}
		}

		public ValueArgument<bool> Bit60
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit60"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit60", value);
			}
		}

		public ValueArgument<bool> Bit61
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit61"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit61", value);
			}
		}

		public ValueArgument<bool> Bit62
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit62"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit62", value);
			}
		}

		public ValueArgument<bool> Bit63
		{
			get
			{
				return (ValueArgument<bool>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Bit63"), typeof(ValueArgument<bool>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Bit63", value);
			}
		}

		protected override long Compute(ExecutionContext context)
		{
			return (long)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Compute", context), typeof(long));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ComposeBits_long(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
namespace ProtoFlux.Runtimes.Execution.Nodes.Actions
{
	public abstract class IncrementBase<C, T> : WriteBase<C, T>, ResoniteBridge.ResoniteBridgeValueHolder where C : ExecutionContext where T : struct
	{
		protected override T GetValue(IVariable<C, T> variable, C context)
		{
			return Coder<T>.Add(variable.Read(context), Coder<T>.Identity);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	public abstract class DecrementBase<C, T> : WriteBase<C, T>, ResoniteBridge.ResoniteBridgeValueHolder where C : ExecutionContext where T : struct
	{
		protected override T GetValue(IVariable<C, T> variable, C context)
		{
			return Coder<T>.Sub(variable.Read(context), Coder<T>.Identity);
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}
	}
	[NodeName("Indirect Increment", false)]
	[NodeCategory("Actions/Indirect")]
	[NodeOverload("Core.IndirectIncrement")]
	public class ValueIndirectIncrement<C, T> : IncrementBase<C, T>, ResoniteBridge.ResoniteBridgeValueHolder where C : ExecutionContext where T : struct
	{
		public ObjectInput<IVariable<C, T>> Variable
		{
			get
			{
				return (ObjectInput<IVariable<C, T>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Variable"), typeof(ObjectInput<IVariable<C, T>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Variable", value);
			}
		}

		protected override IVariable<C, T> GetVariable(C context)
		{
			return (IVariable<C, T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetVariable", context), typeof(IVariable<C, T>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueIndirectIncrement(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("++", false)]
	[NodeCategory("Actions")]
	[NodeOverload("Core.Increment")]
	public class ValueIncrement<C, T> : IncrementBase<C, T>, ResoniteBridge.ResoniteBridgeValueHolder where C : ExecutionContext where T : struct
	{
		public Reference<IVariable<C, T>> Variable
		{
			get
			{
				return (Reference<IVariable<C, T>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Variable"), typeof(Reference<IVariable<C, T>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Variable", value);
			}
		}

		protected override IVariable<C, T> GetVariable(C context)
		{
			return (IVariable<C, T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetVariable", context), typeof(IVariable<C, T>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueIncrement(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("Indirect Decrement", false)]
	[NodeCategory("Actions/Indirect")]
	[NodeOverload("Core.IndirectDecrement")]
	public class ValueIndirectDecrement<C, T> : DecrementBase<C, T>, ResoniteBridge.ResoniteBridgeValueHolder where C : ExecutionContext where T : struct
	{
		public ObjectInput<IVariable<C, T>> Variable
		{
			get
			{
				return (ObjectInput<IVariable<C, T>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Variable"), typeof(ObjectInput<IVariable<C, T>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Variable", value);
			}
		}

		protected override IVariable<C, T> GetVariable(C context)
		{
			return (IVariable<C, T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetVariable", context), typeof(IVariable<C, T>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueIndirectDecrement(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeName("--", false)]
	[NodeCategory("Actions")]
	[NodeOverload("Core.Decrement")]
	public class ValueDecrement<C, T> : DecrementBase<C, T>, ResoniteBridge.ResoniteBridgeValueHolder where C : ExecutionContext where T : struct
	{
		public Reference<IVariable<C, T>> Variable
		{
			get
			{
				return (Reference<IVariable<C, T>>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Variable"), typeof(Reference<IVariable<C, T>>));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Variable", value);
			}
		}

		protected override IVariable<C, T> GetVariable(C context)
		{
			return (IVariable<C, T>)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "GetVariable", context), typeof(IVariable<C, T>));
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueDecrement(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ValueIndirectIncrement<T> : ValueIndirectIncrement<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueIndirectIncrement(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ValueIndirectDecrement<T> : ValueIndirectDecrement<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueIndirectDecrement(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ValueIncrement<T> : ValueIncrement<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueIncrement(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	public class ValueDecrement<T> : ValueDecrement<ExecutionContext, T>, ResoniteBridge.ResoniteBridgeValueHolder where T : struct
	{
		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public ValueDecrement(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
	[NodeCategory("Flow")]
	public class PulseRandom : ActionNode<ExecutionContext>, ResoniteBridge.ResoniteBridgeValueHolder
	{
		public ContinuationList Impulses
		{
			get
			{
				return (ContinuationList)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "Impulses"), typeof(ContinuationList));
			}
			set
			{
				ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "Impulses", value);
			}
		}

		protected override IOperation Run(ExecutionContext context)
		{
			return (IOperation)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.CallMethod(this.__Backing, "Run", context), typeof(IOperation));
		}

		public PulseRandom()
		{
			Impulses = new ContinuationList();
		}

		private ResoniteBridge.ResoniteBridgeValue __backing;

		public ResoniteBridge.ResoniteBridgeValue __Backing
		{
			get
			{
				return this.__backing;
			}
			set
			{
				this.__backing = value;
			}
		}

		public PulseRandom(ResoniteBridge.ResoniteBridgeValue value)
		{
			this.__Backing = value;
		}
	}
}
internal class ProtoFluxNodesCore_ProcessedByFody : ResoniteBridge.ResoniteBridgeValueHolder
{
	internal string FodyVersion
	{
		get
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "FodyVersion"), typeof(string));
		}
		set
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "FodyVersion", value);
		}
	}

	internal string NodeWeaver
	{
		get
		{
			return (string)ResoniteBridge.ResoniteBridgeClientWrappers.CastValue(ResoniteBridge.ResoniteBridgeClientWrappers.GetField(this.__Backing, "NodeWeaver"), typeof(string));
		}
		set
		{
			ResoniteBridge.ResoniteBridgeClientWrappers.SetField(this.__Backing, "NodeWeaver", value);
		}
	}

	private ResoniteBridge.ResoniteBridgeValue __backing;

	public ResoniteBridge.ResoniteBridgeValue __Backing
	{
		get
		{
			return this.__backing;
		}
		set
		{
			this.__backing = value;
		}
	}

	public ProtoFluxNodesCore_ProcessedByFody(ResoniteBridge.ResoniteBridgeValue value)
	{
		this.__Backing = value;
	}
}
